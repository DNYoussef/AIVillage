// BitChat Protocol Definition
// Cross-platform message interchange format for Android and iOS mesh networking

syntax = "proto3";

package bitchat;

option java_package = "com.aivillage.bitchat.proto";
option java_outer_classname = "BitChatProto";
option swift_prefix = "BitChat";

// Main message envelope for all BitChat communications
message Envelope {
  // Unique message identifier (UUID or timestamp-based)
  string msg_id = 1;

  // Message creation timestamp (Unix epoch milliseconds)
  int64 created_at = 2;

  // Current hop count (incremented at each relay)
  uint32 hop_count = 3;

  // Time-to-live remaining (decremented at each hop, max 7)
  uint32 ttl = 4;

  // Original sender peer identifier
  string original_sender = 5;

  // Message type for routing and processing
  MessageType message_type = 6;

  // Encrypted or plain message payload
  bytes ciphertext_blob = 7;

  // Optional routing metadata
  RoutingMetadata routing = 8;

  // Message priority for QoS
  Priority priority = 9;
}

// Message type enumeration
enum MessageType {
  // Unknown message type (should not be used)
  MESSAGE_TYPE_UNKNOWN = 0;

  // User data message for application layer
  MESSAGE_TYPE_DATA = 1;

  // Peer capability exchange
  MESSAGE_TYPE_CAPABILITY = 2;

  // Heartbeat/keepalive message
  MESSAGE_TYPE_HEARTBEAT = 3;

  // Network topology discovery
  MESSAGE_TYPE_DISCOVERY = 4;

  // Route optimization message
  MESSAGE_TYPE_ROUTE_UPDATE = 5;

  // Emergency/high-priority message
  MESSAGE_TYPE_EMERGENCY = 6;
}

// Message priority levels
enum Priority {
  PRIORITY_LOW = 0;
  PRIORITY_NORMAL = 1;
  PRIORITY_HIGH = 2;
  PRIORITY_EMERGENCY = 3;
}

// Routing metadata for mesh optimization
message RoutingMetadata {
  // Intended target peer (empty for broadcast)
  string target_peer_id = 1;

  // Routing path taken (for debugging/optimization)
  repeated string path = 2;

  // Network region/cluster identifier
  string network_region = 3;

  // Quality of Service requirements
  QoSRequirements qos = 4;
}

// Quality of Service requirements
message QoSRequirements {
  // Maximum acceptable latency (milliseconds)
  uint32 max_latency_ms = 1;

  // Reliability requirement (0.0 - 1.0)
  float reliability_threshold = 2;

  // Bandwidth requirement (bytes per second)
  uint32 bandwidth_bps = 3;

  // Battery conservation preference
  bool prefer_low_power = 4;
}

// Peer capability information
message PeerCapability {
  // Peer identifier
  string peer_id = 1;

  // Device platform information
  DeviceInfo device_info = 2;

  // Supported transport methods
  repeated TransportType supported_transports = 3;

  // Current battery level (0.0 - 1.0)
  float battery_level = 4;

  // Network capabilities
  NetworkCapabilities network_caps = 5;

  // Last heartbeat timestamp
  int64 last_heartbeat = 6;

  // Peer trust score (0.0 - 1.0)
  float trust_score = 7;
}

// Device information
message DeviceInfo {
  // Platform type
  enum Platform {
    PLATFORM_UNKNOWN = 0;
    PLATFORM_ANDROID = 1;
    PLATFORM_IOS = 2;
    PLATFORM_LINUX = 3;
    PLATFORM_WINDOWS = 4;
    PLATFORM_MACOS = 5;
  }

  Platform platform = 1;
  string device_model = 2;
  string os_version = 3;
  string app_version = 4;

  // Hardware capabilities
  bool has_wifi = 5;
  bool has_bluetooth = 6;
  bool has_cellular = 7;
  bool has_nfc = 8;
}

// Transport type enumeration
enum TransportType {
  TRANSPORT_UNKNOWN = 0;
  TRANSPORT_BLE = 1;
  TRANSPORT_BLUETOOTH_CLASSIC = 2;
  TRANSPORT_WIFI_DIRECT = 3;
  TRANSPORT_WIFI_INFRASTRUCTURE = 4;
  TRANSPORT_NEARBY_CONNECTIONS = 5;
  TRANSPORT_MULTIPEER_CONNECTIVITY = 6;
  TRANSPORT_NFC = 7;
  TRANSPORT_CELLULAR = 8;
}

// Network capabilities
message NetworkCapabilities {
  // Maximum concurrent connections
  uint32 max_connections = 1;

  // Supported chunk size (bytes)
  uint32 max_chunk_size = 2;

  // Mesh networking features
  bool supports_relay = 3;
  bool supports_store_forward = 4;
  bool supports_encryption = 5;

  // Background operation capability
  bool supports_background = 6;

  // Available bandwidth estimate (bps)
  uint64 estimated_bandwidth = 7;
}

// Chunked message for large payload delivery
message ChunkedMessage {
  // Original message identifier
  string message_id = 1;

  // Chunk sequence information
  uint32 chunk_index = 2;
  uint32 total_chunks = 3;

  // Chunk payload data
  bytes chunk_data = 4;

  // Checksum for integrity verification
  string chunk_checksum = 5;

  // Total message size (for progress tracking)
  uint64 total_size = 6;
}

// Network topology information
message NetworkTopology {
  // Local peer information
  PeerCapability local_peer = 1;

  // Known peer connections
  repeated PeerConnection peer_connections = 2;

  // Network metrics
  NetworkMetrics metrics = 3;

  // Topology update timestamp
  int64 last_updated = 4;
}

// Peer connection information
message PeerConnection {
  string peer_id = 1;
  TransportType transport = 2;
  ConnectionState state = 3;
  uint32 hop_distance = 4;
  int64 last_seen = 5;
  float connection_quality = 6;

  enum ConnectionState {
    CONNECTION_STATE_UNKNOWN = 0;
    CONNECTION_STATE_CONNECTING = 1;
    CONNECTION_STATE_CONNECTED = 2;
    CONNECTION_STATE_DISCONNECTED = 3;
    CONNECTION_STATE_ERROR = 4;
  }
}

// Network performance metrics
message NetworkMetrics {
  // Message delivery statistics
  uint64 messages_sent = 1;
  uint64 messages_received = 2;
  uint64 messages_relayed = 3;
  uint64 messages_dropped = 4;

  // Latency statistics (milliseconds)
  float average_latency_ms = 5;
  float min_latency_ms = 6;
  float max_latency_ms = 7;

  // Throughput statistics
  float throughput_bps = 8;

  // Error rates
  float packet_loss_rate = 9;
  float delivery_success_rate = 10;

  // Battery impact
  float battery_drain_rate = 11;
}

// Error reporting for debugging and monitoring
message ErrorReport {
  // Error details
  string error_code = 1;
  string error_message = 2;
  ErrorSeverity severity = 3;
  int64 timestamp = 4;

  // Context information
  string peer_id = 5;
  string message_id = 6;
  TransportType transport = 7;

  // Stack trace or additional details
  string details = 8;

  enum ErrorSeverity {
    ERROR_SEVERITY_UNKNOWN = 0;
    ERROR_SEVERITY_INFO = 1;
    ERROR_SEVERITY_WARNING = 2;
    ERROR_SEVERITY_ERROR = 3;
    ERROR_SEVERITY_CRITICAL = 4;
  }
}

// Security and encryption support
message SecurityEnvelope {
  // Encryption algorithm used
  string encryption_algorithm = 1;

  // Key exchange method
  string key_exchange_method = 2;

  // Message authentication code
  bytes message_auth_code = 3;

  // Nonce/IV for encryption
  bytes nonce = 4;

  // Sender signature (if available)
  bytes sender_signature = 5;

  // Timestamp for replay protection
  int64 timestamp = 6;
}

// Service for cross-platform RPC (future extension)
service BitChatMesh {
  // Send message to mesh network
  rpc SendMessage(Envelope) returns (SendMessageResponse);

  // Get network topology
  rpc GetTopology(TopologyRequest) returns (NetworkTopology);

  // Update peer capabilities
  rpc UpdateCapabilities(PeerCapability) returns (UpdateResponse);

  // Get network metrics
  rpc GetMetrics(MetricsRequest) returns (NetworkMetrics);
}

// Service response messages
message SendMessageResponse {
  bool success = 1;
  string error_message = 2;
  string message_id = 3;
  uint32 estimated_delivery_time_ms = 4;
}

message TopologyRequest {
  string requesting_peer_id = 1;
  uint32 max_hop_distance = 2;
}

message UpdateResponse {
  bool success = 1;
  string error_message = 2;
}

message MetricsRequest {
  string requesting_peer_id = 1;
  int64 time_range_start = 2;
  int64 time_range_end = 3;
}
