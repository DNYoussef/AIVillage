version: '3.9'

# Development Docker Compose Stack
# Fresh clone -> make setup && make compose-up && make run-dev should work

services:
  # Core databases for development
  postgres:
    image: postgres:15
    container_name: aivillage-dev-postgres
    environment:
      - POSTGRES_DB=aivillage_dev
      - POSTGRES_USER=dev_user
      - POSTGRES_PASSWORD=dev_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - aivillage-dev-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dev_user -d aivillage_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Neo4j for knowledge graph (development)
  neo4j:
    image: neo4j:5.11-community
    container_name: aivillage-dev-neo4j
    environment:
      - NEO4J_AUTH=neo4j/dev_password
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_apoc_export_file_enabled=true
      - NEO4J_apoc_import_file_enabled=true
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    volumes:
      - neo4j_dev_data:/data
      - neo4j_dev_logs:/logs
      - neo4j_dev_import:/var/lib/neo4j/import
    networks:
      - aivillage-dev-net
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "dev_password", "MATCH (n) RETURN count(n)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: aivillage-dev-redis
    command: redis-server --appendonly yes --requirepass dev_password
    ports:
      - "6379:6379"
    volumes:
      - redis_dev_data:/data
    networks:
      - aivillage-dev-net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Vector database for embeddings
  qdrant:
    image: qdrant/qdrant:latest
    container_name: aivillage-dev-qdrant
    ports:
      - "6333:6333"  # REST API
      - "6334:6334"  # gRPC API
    volumes:
      - qdrant_dev_data:/qdrant/storage
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
    networks:
      - aivillage-dev-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Grafana for monitoring (optional, lightweight config)
  grafana:
    image: grafana/grafana:11.0.0
    container_name: aivillage-dev-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=dev_password
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=
    ports:
      - "3000:3000"
    volumes:
      - grafana_dev_data:/var/lib/grafana
    networks:
      - aivillage-dev-net
    restart: unless-stopped
    profiles:
      - monitoring

  # Development gateway service (optional)
  gateway:
    build:
      context: ..
      dockerfile: deploy/docker/Dockerfile.gateway
    container_name: aivillage-dev-gateway
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://dev_user:dev_password@postgres:5432/aivillage_dev
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=dev_password
      - REDIS_URL=redis://:dev_password@redis:6379/0
      - QDRANT_URL=http://qdrant:6333
      - ENV=development
      - DEBUG=true
      - LOG_LEVEL=DEBUG
    depends_on:
      - postgres
      - neo4j
      - redis
      - qdrant
    networks:
      - aivillage-dev-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    volumes:
      - ..:/app:delegated  # Mount source code for development
    profiles:
      - gateway

  # Development twin service (optional)
  twin:
    build:
      context: ..
      dockerfile: deploy/docker/Dockerfile.twin
    container_name: aivillage-dev-twin
    ports:
      - "8001:8001"
    environment:
      - DATABASE_URL=postgresql://dev_user:dev_password@postgres:5432/aivillage_dev
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=dev_password
      - REDIS_URL=redis://:dev_password@redis:6379/0
      - QDRANT_URL=http://qdrant:6333
      - ENV=development
      - DEBUG=true
      - LOG_LEVEL=DEBUG
    depends_on:
      - postgres
      - neo4j
      - redis
      - qdrant
    networks:
      - aivillage-dev-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    volumes:
      - ..:/app:delegated  # Mount source code for development
    profiles:
      - twin

volumes:
  postgres_dev_data:
  neo4j_dev_data:
  neo4j_dev_logs:
  neo4j_dev_import:
  redis_dev_data:
  qdrant_dev_data:
  grafana_dev_data:

networks:
  aivillage-dev-net:
    driver: bridge
