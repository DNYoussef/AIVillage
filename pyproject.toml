[project]
name = "aivillage"
version = "0.5.1"
description = "Self-improving multi-agent system"
requires-python = ">=3.10"
readme = "README.md"
license = {file = "LICENSE"}

[tool.poetry.dependencies]
requests = "^2.32"
langroid = ">=0.16.1"
pydantic = ">=2.8.2"
fastapi = ">=0.95.1"
uvicorn = ">=0.22.0"
numpy = ">=1.24.3"
scikit-learn = { version = "^1.5", markers = "platform_machine != 'arm64'" }
pandas = ">=2.0.1"
torch = ">=2.3.0"
faiss-cpu = ">=1.7.4"
transformers = ">=4.41.1"
accelerate = ">=0.29.3"
bitsandbytes = ">=0.43.1"
triton = "==2.3.0"
xformers = ">=0.0.26"
sentence-transformers = ">=2.2.2"
qdrant-client = ">=1.1.7"
neo4j = ">=5.3.0"
networkx = ">=2.8.4"
community = ">=1.0.0b1"
python-dotenv = ">=1.0.0"
redis = ">=4.5.5"
aiofiles = ">=23.1.0"
click = "*"
PyYAML = "*"
ollama = "*"
aiohttp = ">=3.10.5"
fsspec = ">=2024.6.1"
openai = ">=1.42.0"
pillow = ">=10.4.0"
pydantic-core = ">=2.20.1"
tokenizers = ">=0.19.1"
tqdm = ">=4.66.5"
nltk = ">3.8.1"
llama-cpp-python = "*"
chromadb = "*"
peft = "*"
plyer = "*"
langdetect = "*"
mcts = ">=1.0.0"
gym = ">=0.21.0"
scipy = ">=1.7.3"
matplotlib = ">=3.5.1"
beautifulsoup4 = ">=4.12.0"

[tool.poetry.group.dev.dependencies]
pytest = "*"
pytest-asyncio = "==1.0.0"
pytest-cov = "==5.0.0"
mypy = ">=1.10.0"
hypothesis = "^6.101"
fastapi = { version = "0.116.0", extras = ["testclient"] }
httpx = "==0.28.1"
coverage = "==7.5.3"
flake8 = ">=7.1.1"
pycodestyle = ">=2.12.1"
ruff = "^0.12.0"
black = "^25.0.0"
bandit = "^1.8.0"

# Linting and formatting configuration
[tool.ruff]
target-version = "py310"
line-length = 88

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "D",   # pydocstyle
    "UP",  # pyupgrade
    "YTT", # flake8-2020
    "ANN", # flake8-annotations
    "S",   # flake8-bandit
    "BLE", # flake8-blind-except
    "FBT", # flake8-boolean-trap
    "B",   # flake8-bugbear
    "A",   # flake8-builtins
    "COM", # flake8-commas
    "C4",  # flake8-comprehensions
    "DTZ", # flake8-datetimez
    "T10", # flake8-debugger
    "EM",  # flake8-errmsg
    "EXE", # flake8-executable
    "FA",  # flake8-future-annotations
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "G",   # flake8-logging-format
    "INP", # flake8-no-pep420
    "PIE", # flake8-pie
    "T20", # flake8-print
    "PYI", # flake8-pyi
    "PT",  # flake8-pytest-style
    "Q",   # flake8-quotes
    "RSE", # flake8-raise
    "RET", # flake8-return
    "SLF", # flake8-self
    "SLOT", # flake8-slots
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "TCH", # flake8-type-checking
    "INT", # flake8-gettext
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PD",  # pandas-vet
    "PGH", # pygrep-hooks
    "PL",  # pylint
    "TRY", # tryceratops
    "FLY", # flynt
    "NPY", # numpy
    "PERF", # perflint
    "RUF", # ruff-specific rules
]
ignore = [
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D102", # Missing docstring in public method
    "D103", # Missing docstring in public function
    "D104", # Missing docstring in public package
    "D105", # Missing docstring in magic method
    "ANN101", # Missing type annotation for self
    "ANN102", # Missing type annotation for cls
    "ANN401", # Dynamically typed expressions (Any) are disallowed
    "S101", # Use of assert detected
    "COM812", # Trailing comma missing
    "ISC001", # Implicit string concatenation
    "T201", # print found
    "T203", # pprint found
    "PD011", # Use .to_numpy() instead of .values
    "RET504", # Unnecessary variable assignment
    "PLR0913", # Too many arguments to function call
    "PLR0915", # Too many statements
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "D",      # pydocstyle
    "ANN",    # flake8-annotations
    "S",      # flake8-bandit
    "PLR2004", # Magic value used in comparison
]
"stubs/**/*.py" = [
    "D",      # pydocstyle
    "ANN",    # flake8-annotations
    "ARG",    # flake8-unused-arguments
    "ERA001", # Found commented-out code
]
"**/conftest.py" = ["D", "ANN"]
"setup.py" = ["D", "ANN"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
known-first-party = ["agents", "communications", "core", "agent_forge", "utils", "ingestion"]
force-sort-within-sections = true

[tool.black]
line-length = 88
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
# Exclude generated files
/(
    \.eggs
  | \.git
  | \.mypy_cache
  | \.ruff_cache
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | node_modules
  | models
  | download_env
)/
'''

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "tests.*",
    "stubs.*",
    "langroid.*",
    "qdrant_client.*",
    "neo4j.*",
    "faiss.*",
    "chromadb.*",
    "ollama.*",
    "bitsandbytes.*",
    "transformers.*",
    "accelerate.*",
    "peft.*",
    "triton.*",
    "xformers.*",
    "sentence_transformers.*",
    "gym.*",
    "mcts.*",
    "llama_cpp.*",
    "grokfast.*",
    "sleep_and_dream.*",
]
ignore_missing_imports = true
ignore_errors = true

[tool.bandit]
exclude_dirs = ["tests", "stubs", "models", "download_env"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection for tests

[tool.coverage.run]
source = ["."]
omit = [
    "tests/*",
    "stubs/*",
    "models/*",
    "download_env/*",
    ".claude/*",
    "setup.py",
    "conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

