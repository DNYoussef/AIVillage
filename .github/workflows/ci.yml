name: CI

on:
  pull_request:
    paths-ignore:
      - 'docs/**'
      - '*.md'
  push:
    branches: [ "main" ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dev dependencies
      run: pip install -r requirements-dev.txt

    - name: Run tests
      run: |
        pytest --cov=. --cov-report=xml --cov-report=term

  build:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Docker cache directory
      uses: actions/cache@v4
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-

    - name: Build and push Gateway
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./services/gateway/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}-gateway
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: |
          type=gha
          type=local,src=/tmp/.buildx-cache
        cache-to: |
          type=gha,mode=max
          type=local,dest=/tmp/.buildx-cache-new
        platforms: linux/amd64,linux/arm64

    - name: Build and push Twin
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./services/twin/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}-twin
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: |
          type=gha
          type=local,src=/tmp/.buildx-cache
        cache-to: |
          type=gha,mode=max
          type=local,dest=/tmp/.buildx-cache-new
        platforms: linux/amd64,linux/arm64

    - name: Check image sizes
      run: |
        echo "üîç Checking image sizes..."
        docker pull ${{ steps.meta.outputs.tags }}-gateway
        docker pull ${{ steps.meta.outputs.tags }}-twin
        GATEWAY_SIZE=$(docker image inspect ${{ steps.meta.outputs.tags }}-gateway --format='{{.Size}}')
        TWIN_SIZE=$(docker image inspect ${{ steps.meta.outputs.tags }}-twin --format='{{.Size}}')
        GATEWAY_MB=$((GATEWAY_SIZE / 1048576))
        TWIN_MB=$((TWIN_SIZE / 1048576))
        echo "üì¶ Gateway: ${GATEWAY_MB}MB"
        echo "üì¶ Twin: ${TWIN_MB}MB"
        if [ $GATEWAY_MB -gt 300 ] || [ $TWIN_MB -gt 300 ]; then
          echo "‚ùå ERROR: Image size exceeds 300MB limit!"
          exit 1
        fi
        echo "‚úÖ Image sizes within limits"

  soak-test-mini:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        pip install locust prometheus-client psutil

    - name: Start services
      run: |
        docker-compose up -d
        timeout 30 bash -c 'until curl -f http://localhost:8000/health; do sleep 1; done'

    - name: Run mini soak test (15 min)
      run: |
        locust -f tests/soak/locustfile.py \
          --headless \
          --users 20 \
          --spawn-rate 2 \
          --run-time 15m \
          --host http://localhost:8000 \
          --html soak-report.html

    - name: Upload results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: soak-test-results
        path: |
          soak-report.html
          soak_test_report.json
