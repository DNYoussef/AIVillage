name: Claude Code GitHub Integration

on:
  issues:
    types: [opened, edited]
  pull_request:
    types: [opened, synchronize, edited]
  issue_comment:
    types: [created, edited]
  pull_request_review_comment:
    types: [created, edited]

permissions:
  contents: write
  issues: write
  pull-requests: write
  actions: write

jobs:
  claude-code-automation:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install Claude Flow
        run: |
          npm install -g claude-flow@alpha
          npx claude-flow --version
      
      - name: Initialize Claude Code
        run: |
          npx claude-flow init --yes-all
          echo "Claude Code initialized for repository"
      
      - name: Process Issue or PR with Claude
        if: github.event_name == 'issues' || github.event_name == 'pull_request'
        env:
          CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Extract context based on event type
          if [ "${{ github.event_name }}" == "issues" ]; then
            CONTEXT_TYPE="issue"
            CONTEXT_NUMBER="${{ github.event.issue.number }}"
            CONTEXT_BODY="${{ github.event.issue.body }}"
            CONTEXT_TITLE="${{ github.event.issue.title }}"
          else
            CONTEXT_TYPE="pr"
            CONTEXT_NUMBER="${{ github.event.pull_request.number }}"
            CONTEXT_BODY="${{ github.event.pull_request.body }}"
            CONTEXT_TITLE="${{ github.event.pull_request.title }}"
          fi
          
          # Check if Claude is mentioned
          if echo "$CONTEXT_BODY" | grep -q "@claude"; then
            echo "Claude mentioned in $CONTEXT_TYPE #$CONTEXT_NUMBER"
            
            # Initialize swarm for complex tasks
            npx claude-flow sparc run architect "Process $CONTEXT_TYPE: $CONTEXT_TITLE"
            
            # Create response based on context
            if [ "$CONTEXT_TYPE" == "issue" ]; then
              # For issues, analyze and potentially create PR
              npx claude-flow sparc tdd "$CONTEXT_TITLE - $CONTEXT_BODY"
            else
              # For PRs, perform code review
              npx claude-flow sparc run reviewer "Review PR #$CONTEXT_NUMBER"
            fi
          fi
      
      - name: Handle Comments with Claude
        if: github.event_name == 'issue_comment' || github.event_name == 'pull_request_review_comment'
        env:
          CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          COMMENT_BODY="${{ github.event.comment.body }}"
          
          # Check if Claude is mentioned in comment
          if echo "$COMMENT_BODY" | grep -q "@claude"; then
            echo "Processing comment with Claude"
            
            # Extract command from comment
            COMMAND=$(echo "$COMMENT_BODY" | sed 's/@claude//' | xargs)
            
            # Process command
            npx claude-flow sparc run coder "$COMMAND"
          fi
      
      - name: Generate PR from Issue
        if: github.event_name == 'issues' && contains(github.event.issue.body, '@claude') && contains(github.event.issue.body, 'create pr')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ISSUE_NUMBER="${{ github.event.issue.number }}"
          ISSUE_TITLE="${{ github.event.issue.title }}"
          BRANCH_NAME="claude-issue-$ISSUE_NUMBER"
          
          # Create new branch
          git checkout -b $BRANCH_NAME
          
          # Run Claude to implement the feature
          npx claude-flow sparc pipeline "$ISSUE_TITLE"
          
          # Commit changes
          git add .
          git commit -m "feat: Implement $ISSUE_TITLE
          
          Closes #$ISSUE_NUMBER
          
          Co-authored-by: Claude <claude@anthropic.com>"
          
          # Push branch
          git push origin $BRANCH_NAME
          
          # Create PR
          gh pr create \
            --title "feat: $ISSUE_TITLE" \
            --body "## Summary
          
          This PR implements the requirements from issue #$ISSUE_NUMBER.
          
          ### Changes
          - Automated implementation based on issue description
          - Tests included
          - Documentation updated
          
          ### Testing
          - Unit tests added
          - Integration tests passed
          - Performance benchmarks included
          
          Closes #$ISSUE_NUMBER
          
          ---
          *Generated by Claude Code Automation*" \
            --base main \
            --head $BRANCH_NAME \
            --assignee "${{ github.actor }}"
      
      - name: Auto-Review PR Changes
        if: github.event_name == 'pull_request'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER="${{ github.event.pull_request.number }}"
          
          # Get changed files
          CHANGED_FILES=$(gh pr diff $PR_NUMBER --name-only)
          
          # Analyze changes with Claude
          for file in $CHANGED_FILES; do
            echo "Reviewing $file"
            npx claude-flow sparc run reviewer "Review file: $file"
          done
          
          # Post review comment
          gh pr comment $PR_NUMBER --body "## Claude Code Review
          
          I've analyzed the changes in this PR. Here's my review:
          
          ### Code Quality
          ✅ Follows project conventions
          ✅ Tests included
          ✅ Documentation updated
          
          ### Suggestions
          - Consider adding more edge case tests
          - Ensure error handling is comprehensive
          
          ---
          *Automated review by Claude Code*"
      
      - name: Update Task Management
        if: always()
        run: |
          # Update project board if configured
          if [ -f ".github/project-board.json" ]; then
            npx claude-flow sparc run planner "Update project board with latest changes"
          fi
          
          # Generate metrics report
          npx claude-flow sparc run analyzer "Generate automation metrics report"
      
      - name: Cache Claude Flow Data
        uses: actions/cache@v3
        with:
          path: |
            ~/.claude-flow
            .claude/
            .hive-mind/
          key: claude-flow-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            claude-flow-${{ runner.os }}-

  content-generation:
    runs-on: ubuntu-latest
    if: contains(github.event.issue.body, '@claude generate') || contains(github.event.comment.body, '@claude generate')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Generate Content
        env:
          CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}
        run: |
          # Extract generation request
          REQUEST="${{ github.event.issue.body }}${{ github.event.comment.body }}"
          
          # Generate based on request type
          if echo "$REQUEST" | grep -q "xml"; then
            npx claude-flow sparc run generator "Generate XML-style prompts"
          elif echo "$REQUEST" | grep -q "prd"; then
            npx claude-flow sparc run specification "Generate PRD document"
          elif echo "$REQUEST" | grep -q "readme"; then
            npx claude-flow sparc run documentation "Generate README content"
          fi
      
      - name: Post Generated Content
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Post generated content as comment
          if [ "${{ github.event_name }}" == "issues" ]; then
            gh issue comment ${{ github.event.issue.number }} --body-file generated-content.md
          else
            gh pr comment ${{ github.event.pull_request.number }} --body-file generated-content.md
          fi