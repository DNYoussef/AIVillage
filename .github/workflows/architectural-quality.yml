name: Architectural Quality Gate

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM UTC

jobs:
  architectural-quality:
    name: Architecture Fitness Functions
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      checks: write

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for trend analysis

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r config/requirements/requirements.txt || pip install fastapi uvicorn pydantic
          pip install ruff mypy pytest coverage
          pip install radon xenon vulture bandit safety detect-secrets semgrep
          pip install -r config/requirements/requirements-security.txt || echo "Security requirements not found"

      - name: Install Project Dependencies
        run: |
          if [ -f pyproject.toml ]; then
            pip install -e .
          fi

      - name: üîê Security Pre-Check for Architecture
        run: |
          echo "Running security pre-checks..."

          # Secret detection in architectural components
          detect-secrets scan --baseline .secrets.baseline || {
            echo "::error::Secrets detected in architectural components"
            exit 1
          }

          # Quick security scan of core architecture
          bandit -r core/ infrastructure/ -ll --format json -o arch-security-precheck.json

          echo "‚úÖ Security pre-check passed"

      - name: üè¢ Enhanced Architectural Fitness Functions
        id: fitness
        run: |
          echo "Running enhanced architectural fitness functions..."

          # Core architectural analysis with connascence
          python scripts/architectural_analysis.py --format=github . > fitness_report.md || echo "Architecture analysis completed with warnings"
          python scripts/coupling_metrics.py . --threshold=12.0 > coupling_report.json || echo "Coupling metrics completed with warnings"
          python scripts/detect_anti_patterns.py . --strict > antipatterns_report.json || echo "Anti-pattern detection completed with warnings"

          # Enhanced connascence analysis
          if [ -f "scripts/connascence_analyzer.py" ]; then
            python scripts/connascence_analyzer.py --strict --fail-on-violations > connascence_report.json
          fi

          # God object detection
          if [ -f "scripts/god_object_detector.py" ]; then
            python scripts/god_object_detector.py --threshold=500 > god_objects.json
          fi

          echo "‚úÖ Architectural fitness analysis completed"
        continue-on-error: true

      - name: üèÅ Enhanced Quality Gates
        id: quality_gate
        run: |
          echo "Evaluating enhanced quality gates..."

          # Create quality gate script if not exists
          if [ ! -f "scripts/ci/quality-gate.py" ]; then
            echo "Creating enhanced quality gate validator..."
            mkdir -p scripts/ci
            cat > scripts/ci/quality-gate.py << 'EOF'
#!/usr/bin/env python3
import json
import sys
import argparse

def evaluate_quality_gates(coupling_threshold=12.0, complexity_threshold=15, god_object_threshold=500, magic_literal_threshold=20):
    """Enhanced quality gate evaluation with security integration"""
    results = {
        "passed": True,
        "overall_score": 100,
        "violations": [],
        "security_score": 100
    }

    # Check for coupling violations
    try:
        with open("coupling_report.json", "r") as f:
            coupling_data = json.load(f)
            if coupling_data.get("max_coupling", 0) > coupling_threshold:
                results["violations"].append(f"Coupling threshold exceeded: {coupling_data.get('max_coupling')} > {coupling_threshold}")
                results["passed"] = False
                results["overall_score"] -= 20
    except FileNotFoundError:
        print("Coupling report not found, skipping coupling check")

    # Check for architectural violations
    try:
        with open("arch-security-precheck.json", "r") as f:
            security_data = json.load(f)
            high_severity = sum(1 for result in security_data.get("results", [])
                              if result.get("issue_severity") in ["HIGH", "CRITICAL"])
            if high_severity > 0:
                results["violations"].append(f"High severity security issues in architecture: {high_severity}")
                results["passed"] = False
                results["security_score"] -= high_severity * 10
    except FileNotFoundError:
        print("Security precheck report not found")

    return results

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--coupling-threshold", type=float, default=12.0)
    parser.add_argument("--complexity-threshold", type=int, default=15)
    parser.add_argument("--god-object-threshold", type=int, default=500)
    parser.add_argument("--magic-literal-threshold", type=int, default=20)
    parser.add_argument("--output", default="quality_gate_result.json")
    args = parser.parse_args()

    results = evaluate_quality_gates(
        args.coupling_threshold,
        args.complexity_threshold,
        args.god_object_threshold,
        args.magic_literal_threshold
    )

    with open(args.output, "w") as f:
        json.dump(results, f, indent=2)

    if not results["passed"]:
        print("Quality gate FAILED:")
        for violation in results["violations"]:
            print(f"  - {violation}")
        sys.exit(1)
    else:
        print("Quality gate PASSED")
EOF
          fi

          python scripts/ci/quality-gate.py \
            --coupling-threshold=12.0 \
            --complexity-threshold=15 \
            --god-object-threshold=500 \
            --magic-literal-threshold=20 \
            --output=quality_gate_result.json

          # Set output variables for next steps
          echo "quality_gate_passed=$(cat quality_gate_result.json | jq -r '.passed')" >> $GITHUB_OUTPUT
          echo "quality_score=$(cat quality_gate_result.json | jq -r '.overall_score')" >> $GITHUB_OUTPUT
          echo "security_score=$(cat quality_gate_result.json | jq -r '.security_score')" >> $GITHUB_OUTPUT

      - name: Generate Quality Report
        if: github.event_name == 'pull_request'
        run: |
          python scripts/ci/quality-report-generator.py \
            --fitness-report=fitness_report.md \
            --coupling-report=coupling_report.json \
            --antipatterns-report=antipatterns_report.json \
            --quality-gate=quality_gate_result.json \
            --pr-number=${{ github.event.number }} \
            --output=pr_quality_report.md

      - name: Comment PR with Quality Report
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            if (fs.existsSync('pr_quality_report.md')) {
              const report = fs.readFileSync('pr_quality_report.md', 'utf8');

              // Find existing comment
              const comments = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
              });

              const existingComment = comments.data.find(comment =>
                comment.body.includes('## üèóÔ∏è Architectural Quality Report')
              );

              if (existingComment) {
                // Update existing comment
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: existingComment.id,
                  body: report
                });
              } else {
                // Create new comment
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: report
                });
              }
            }

      - name: Upload Enhanced Quality Reports
        uses: actions/upload-artifact@v4
        with:
          name: architectural-quality-reports-${{ github.sha }}
          path: |
            fitness_report.md
            coupling_report.json
            antipatterns_report.json
            quality_gate_result.json
            pr_quality_report.md
            arch-security-precheck.json
            connascence_report.json
            god_objects.json
          retention-days: 90

      - name: Update Quality Dashboard Data
        if: github.ref == 'refs/heads/main'
        run: |
          # Store historical data for trend analysis
          python scripts/ci/update-quality-history.py \
            --commit-sha=${{ github.sha }} \
            --quality-score=${{ steps.quality_gate.outputs.quality_score }} \
            --reports-dir=.

      - name: üõ°Ô∏è Enhanced Quality Gate Status Check
        run: |
          quality_passed="${{ steps.quality_gate.outputs.quality_gate_passed }}"
          quality_score="${{ steps.quality_gate.outputs.quality_score }}"
          security_score="${{ steps.quality_gate.outputs.security_score }}"

          echo "Quality Gate Evaluation:"
          echo "  Quality Score: $quality_score/100"
          echo "  Security Score: $security_score/100"
          echo "  Overall Status: $quality_passed"

          if [ "$quality_passed" = "false" ]; then
            echo "‚ùå Quality gate failed! Architectural and security standards not met."
            echo "Check the quality report for details on violations."

            # Check if this is a security-related failure
            if [ "$security_score" -lt "80" ]; then
              echo "üö® Security concerns detected in architecture - BLOCKING BUILD"
            fi

            exit 1
          else
            echo "‚úÖ Quality gate passed! Architecture meets enhanced standards."
            echo "  üè¢ Architectural fitness: PASSED"
            echo "  üîí Security compliance: PASSED"
          fi

  complexity-analysis:
    name: Complexity & Maintainability Analysis
    runs-on: ubuntu-latest
    needs: architectural-quality
    if: always()

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Analysis Tools
        run: |
          pip install radon xenon vulture bandit safety

      - name: Run Complexity Analysis
        run: |
          echo "## Complexity Analysis" > complexity_report.md
          echo "" >> complexity_report.md

          # Cyclomatic complexity
          echo "### Cyclomatic Complexity" >> complexity_report.md
          radon cc . --min C --show-complexity >> complexity_report.md

          # Maintainability index
          echo "" >> complexity_report.md
          echo "### Maintainability Index" >> complexity_report.md
          radon mi . --min B >> complexity_report.md

          # Dead code detection
          echo "" >> complexity_report.md
          echo "### Dead Code Detection" >> complexity_report.md
          vulture . --min-confidence 80 >> complexity_report.md || true

      - name: Security Analysis
        run: |
          echo "" >> complexity_report.md
          echo "### Security Analysis" >> complexity_report.md
          bandit -r . -f txt >> complexity_report.md || true

          echo "" >> complexity_report.md
          echo "### Dependency Security" >> complexity_report.md
          safety check >> complexity_report.md || true

      - name: Upload Complexity Report
        uses: actions/upload-artifact@v4
        with:
          name: complexity-analysis-${{ github.sha }}
          path: complexity_report.md
          retention-days: 30

  dependency-analysis:
    name: Dependency & Import Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Dependencies
        run: |
          pip install pydeps graphviz importlib-metadata

      - name: Analyze Dependencies
        run: |
          # Generate dependency graphs
          mkdir -p dependency_analysis

          # Core package dependencies
          for pkg in core/*/; do
            if [ -d "$pkg" ]; then
              pkg_name=$(basename "$pkg")
              echo "Analyzing $pkg_name..."
              pydeps "$pkg" \
                --max-bacon=3 \
                --cluster \
                --rankdir TB \
                --output dependency_analysis/${pkg_name}_deps.svg || true
            fi
          done

          # Infrastructure dependencies
          for pkg in infrastructure/*/; do
            if [ -d "$pkg" ]; then
              pkg_name=$(basename "$pkg")
              echo "Analyzing $pkg_name..."
              pydeps "$pkg" \
                --max-bacon=3 \
                --cluster \
                --rankdir TB \
                --output dependency_analysis/${pkg_name}_deps.svg || true
            fi
          done

          # Check for circular dependencies
          python scripts/check_circular_deps.py > dependency_analysis/circular_deps.txt || true

      - name: Upload Dependency Analysis
        uses: actions/upload-artifact@v4
        with:
          name: dependency-analysis-${{ github.sha }}
          path: dependency_analysis/
          retention-days: 30
