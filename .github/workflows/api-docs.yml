name: API Documentation

"on":
  push:
    branches: ["main"]
    paths:
      - '**.py'
      - 'docs/**'
      - '.github/workflows/api-docs.yml'
  pull_request:
    paths:
      - '**.py'
      - 'docs/**'
      - '.github/workflows/api-docs.yml'

jobs:
  # Check what documentation can be generated
  docs-check:
    runs-on: ubuntu-latest
    outputs:
      has_modules: ${{ steps.check-modules.outputs.has_modules }}
      main_modules: ${{ steps.check-modules.outputs.main_modules }}
      doc_tool: ${{ steps.check-docs.outputs.doc_tool }}
    steps:
    - uses: actions/checkout@v4

    - name: Check for Python modules
      id: check-modules
      run: |
        echo "=== Checking for Python modules ==="

        main_modules=""

        # Check for main module directories
        for dir in "agent_forge" "core" "agents" "aivillage" "mcp_servers"; do
          if [ -d "$dir" ] && find "$dir" -name "*.py" -type f | head -1 >/dev/null 2>&1; then
            echo "Found module directory: $dir"
            main_modules="$main_modules $dir"
          fi
        done

        if [ -n "$main_modules" ]; then
          echo "has_modules=true" >> $GITHUB_OUTPUT
          echo "main_modules=$main_modules" >> $GITHUB_OUTPUT
          echo "Found modules: $main_modules"
        else
          echo "has_modules=false" >> $GITHUB_OUTPUT
          echo "main_modules=" >> $GITHUB_OUTPUT
          echo "No Python modules found"
        fi

    - name: Check for existing docs setup
      id: check-docs
      run: |
        if [ -f "mkdocs.yml" ]; then
          echo "doc_tool=mkdocs" >> $GITHUB_OUTPUT
          echo "Found MkDocs configuration"
        elif [ -f "docs/conf.py" ]; then
          echo "doc_tool=sphinx" >> $GITHUB_OUTPUT
          echo "Found Sphinx configuration"
        elif [ -f "pyproject.toml" ] && grep -q "poetry" pyproject.toml; then
          echo "doc_tool=poetry" >> $GITHUB_OUTPUT
          echo "Found Poetry configuration"
        else
          echo "doc_tool=basic" >> $GITHUB_OUTPUT
          echo "No documentation tool configuration found"
        fi

  # Generate documentation
  generate-docs:
    runs-on: ubuntu-latest
    needs: docs-check
    if: needs.docs-check.outputs.has_modules == 'true'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install base dependencies
      run: |
        python -m pip install --upgrade pip

        # Install project dependencies if available
        if [ -f "requirements.txt" ]; then
          echo "Installing from requirements.txt"
          pip install -r requirements.txt || echo "Some requirements failed"
        elif [ -f "pyproject.toml" ]; then
          echo "Installing from pyproject.toml"
          pip install -e . || echo "Project installation failed"
        fi

    - name: Install documentation tools
      run: |
        echo "Installing documentation tools..."

        # Install multiple doc tools to be safe
        pip install pdoc3 pdoc sphinx sphinx-rtd-theme sphinx-autodoc-typehints || echo "Some doc tools failed"
        pip install mkdocs mkdocs-material mkdocstrings[python] || echo "MkDocs tools failed"

    - name: Generate docs with MkDocs
      if: needs.docs-check.outputs.doc_tool == 'mkdocs'
      run: |
        echo "=== Generating MkDocs documentation ==="
        mkdocs build --strict --verbose || mkdocs build || echo "MkDocs build failed"

    - name: Generate docs with Sphinx
      if: needs.docs-check.outputs.doc_tool == 'sphinx'
      run: |
        echo "=== Generating Sphinx documentation ==="
        cd docs
        make clean || echo "Clean failed"
        make html || echo "Sphinx build failed"

    - name: Generate docs with Poetry + pdoc
      if: needs.docs-check.outputs.doc_tool == 'poetry'
      run: |
        echo "=== Generating documentation with Poetry setup ==="

        # Try poetry install first
        if which poetry >/dev/null 2>&1; then
          poetry install --no-interaction --no-root || echo "Poetry install failed"
        else
          pip install poetry || echo "Poetry installation failed"
          poetry install --no-interaction --no-root || echo "Poetry install failed"
        fi

        # Generate docs for found modules
        modules="${{ needs.docs-check.outputs.main_modules }}"
        if [ -n "$modules" ]; then
          for module in $modules; do
            echo "Generating docs for $module"
            pdoc -d google -o _pdoc/$module $module || echo "pdoc failed for $module"
          done
        fi

    - name: Generate basic documentation
      if: needs.docs-check.outputs.doc_tool == 'basic'
      run: |
        echo "=== Generating basic documentation ==="

        # Create docs directory
        mkdir -p _docs/api

        # Create main index
        cat > _docs/index.html << 'EOF'
        <!DOCTYPE html>
        <html>
        <head>
            <title>AI Village API Documentation</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 40px; }
                h1 { color: #333; }
                ul { margin: 20px 0; }
                li { margin: 5px 0; }
                a { color: #0066cc; text-decoration: none; }
                a:hover { text-decoration: underline; }
                .module { background: #f5f5f5; padding: 10px; margin: 10px 0; border-radius: 5px; }
            </style>
        </head>
        <body>
            <h1>AI Village API Documentation</h1>
            <p>Auto-generated API documentation for the AI Village project.</p>

            <h2>Modules</h2>
        EOF

        # Generate docs for each module using pdoc3
        modules="${{ needs.docs-check.outputs.main_modules }}"
        if [ -n "$modules" ]; then
          for module in $modules; do
            echo "Processing module: $module"

            # Generate HTML docs
            if which pdoc3 >/dev/null 2>&1; then
              pdoc3 --html --output-dir _docs/api $module || echo "pdoc3 failed for $module"
            elif which pdoc >/dev/null 2>&1; then
              pdoc -d google -o _docs/api $module || echo "pdoc failed for $module"
            else
              echo "No pdoc available, creating placeholder"
              mkdir -p "_docs/api/$module"
              echo "<h1>$module</h1><p>Module documentation placeholder</p>" > "_docs/api/$module/index.html"
            fi

            # Add to index
            echo "    <div class='module'>" >> _docs/index.html
            echo "        <h3><a href='api/$module/index.html'>$module</a></h3>" >> _docs/index.html
            echo "        <p>Documentation for the $module module</p>" >> _docs/index.html
            echo "    </div>" >> _docs/index.html
          done
        fi

        # Close HTML
          cat >> _docs/index.html << 'EOF'

          <hr>
          <p><small>Generated by GitHub Actions</small></p>
          </body>
          </html>
          EOF

        echo "Basic documentation generated in _docs/"
        ls -la _docs/

    - name: Check generated documentation
      run: |
        echo "=== Documentation Summary ==="

        # Check what was generated
        for dir in "_pdoc" "_docs" "site" "docs/_build"; do
          if [ -d "$dir" ]; then
            echo "Found documentation in $dir:"
            find "$dir" -name "*.html" | head -10
          fi
        done

    - name: Upload documentation artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: api-documentation
        path: |
          _pdoc/
          _docs/
          site/
          docs/_build/html/

    - name: Deploy to GitHub Pages (main branch only)
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: |
          _pdoc
          _docs
          site
          docs/_build/html
        destination_dir: api-docs

  # Documentation health check
  docs-health:
    runs-on: ubuntu-latest
    if: always()
    needs: [docs-check, generate-docs]

    steps:
    - name: Documentation Status Report
      run: |
        echo "=== Documentation Build Report ==="
        echo "Modules found: ${{ needs.docs-check.outputs.has_modules }}"
        echo "Main modules: ${{ needs.docs-check.outputs.main_modules }}"
        echo "Documentation tool: ${{ needs.docs-check.outputs.doc_tool }}"
        echo "Generation job result: ${{ needs.generate-docs.result }}"
        echo ""

        if [ "${{ needs.docs-check.outputs.has_modules }}" = "true" ]; then
          echo "✅ Python modules found - documentation should be available"
        else
          echo "⚠️  No Python modules found - no documentation generated"
        fi

        if [ "${{ needs.generate-docs.result }}" = "success" ]; then
          echo "✅ Documentation generation completed successfully"
        elif [ "${{ needs.generate-docs.result }}" = "failure" ]; then
          echo "❌ Documentation generation failed"
        elif [ "${{ needs.generate-docs.result }}" = "skipped" ]; then
          echo "⏭️  Documentation generation was skipped"
        fi
