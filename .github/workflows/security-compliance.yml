name: Security Compliance & SBOM Generation

on:
  push:
    branches: [main, develop]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - '.gitignore'
  pull_request:
    branches: [main, develop]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - '.gitignore'
  schedule:
    # Daily security compliance check at 02:00 UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      full_compliance_scan:
        description: 'Run full compliance scan (slower but comprehensive)'
        required: false
        default: 'false'
        type: boolean
      generate_sbom:
        description: 'Force SBOM generation'
        required: false
        default: 'true'
        type: boolean

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # ============================================
  # Security Baseline Validation
  # ============================================
  security-baseline:
    name: Security Baseline Validation
    runs-on: ubuntu-latest
    outputs:
      baseline-passed: ${{ steps.validate.outputs.passed }}
      critical-violations: ${{ steps.validate.outputs.critical-violations }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for comprehensive analysis

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install security tools
        run: |
          pip install bandit safety detect-secrets semgrep ruff
          npm install -g @cyclonedx/cyclonedx-npm audit-ci

      - name: üîç Secret Scanning
        id: secret-scan
        run: |
          echo "Running comprehensive secret detection..."
          
          # Initialize baseline if it doesn't exist
          if [ ! -f .secrets.baseline ]; then
            echo "Creating initial secrets baseline..."
            detect-secrets scan --all-files --baseline .secrets.baseline
          fi
          
          # Scan for new secrets
          if detect-secrets scan --baseline .secrets.baseline --exclude-files='.*\.lock$|.*\.log$|.*\.min\.js$' .; then
            echo "‚úÖ No new secrets detected"
            echo "secrets-found=false" >> $GITHUB_OUTPUT
          else
            echo "‚ùå New secrets detected!"
            echo "secrets-found=true" >> $GITHUB_OUTPUT
            detect-secrets audit .secrets.baseline
          fi

      - name: üõ°Ô∏è Static Application Security Testing (SAST)
        id: sast
        run: |
          echo "Running SAST with Bandit..."
          
          # Run Bandit with security-focused rules
          mkdir -p artifacts/security
          bandit -r core/ infrastructure/ -f json -o artifacts/security/bandit-report.json \
            --exclude ./tests,./experimental,./archive,./tools/development \
            --skip B101,B601,B602 \
            --severity-level medium -ll || echo "Bandit found issues"
          
          # Process Bandit results
          python3 << 'EOF'
          import json
          import sys
          
          try:
              with open('artifacts/security/bandit-report.json', 'r') as f:
                  report = json.load(f)
              
              high_severity = [r for r in report.get('results', []) if r.get('issue_severity') == 'HIGH']
              medium_severity = [r for r in report.get('results', []) if r.get('issue_severity') == 'MEDIUM']
              
              print(f"Bandit Results: {len(high_severity)} high, {len(medium_severity)} medium severity issues")
              
              if high_severity:
                  print("‚ùå HIGH SEVERITY SECURITY ISSUES FOUND:")
                  for issue in high_severity[:5]:  # Show first 5
                      print(f"  - {issue['test_name']}: {issue['issue_text']}")
                      print(f"    File: {issue['filename']}:{issue['line_number']}")
                  
                  if len(high_severity) > 5:
                      print(f"  ... and {len(high_severity) - 5} more high severity issues")
                  
                  sys.exit(1)
              else:
                  print("‚úÖ No high severity security issues found")
          
          except FileNotFoundError:
              print("‚ö†Ô∏è Bandit report not found, continuing...")
          except Exception as e:
              print(f"‚ö†Ô∏è Error processing Bandit report: {e}")
          EOF

      - name: üîí Cryptographic Security Validation
        run: |
          echo "Validating cryptographic implementations..."
          
          # Check for weak hash algorithms (CWE-327)
          python3 << 'EOF'
          import os
          import re
          import sys
          
          weak_crypto_patterns = [
              (r'hashlib\.md5\([^,)]*\)', 'MD5 hash usage detected (use SHA-256 or stronger)'),
              (r'hashlib\.sha1\([^,)]*\)', 'SHA-1 hash usage detected (use SHA-256 or stronger)'),
              (r'Crypto\.Hash\.MD5', 'MD5 usage in pycrypto/pycryptodome'),
              (r'Crypto\.Hash\.SHA1', 'SHA-1 usage in pycrypto/pycryptodome'),
              (r'crypto.createHash\([\'"]md5[\'"]', 'MD5 usage in Node.js'),
              (r'crypto.createHash\([\'"]sha1[\'"]', 'SHA-1 usage in Node.js'),
          ]
          
          violations = []
          
          for root, dirs, files in os.walk('.'):
              # Skip irrelevant directories
              dirs[:] = [d for d in dirs if d not in {'.git', 'node_modules', '__pycache__', '.pytest_cache'}]
              
              for file in files:
                  if file.endswith(('.py', '.js', '.ts', '.go', '.rs')):
                      file_path = os.path.join(root, file)
                      try:
                          with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                              content = f.read()
                              
                              for pattern, description in weak_crypto_patterns:
                                  matches = re.finditer(pattern, content, re.IGNORECASE)
                                  for match in matches:
                                      # Check if it's explicitly marked as non-security usage
                                      line_start = content.rfind('\n', 0, match.start()) + 1
                                      line_end = content.find('\n', match.end())
                                      if line_end == -1:
                                          line_end = len(content)
                                      line = content[line_start:line_end]
                                      
                                      # Allow non-security usage if explicitly marked
                                      if 'usedforsecurity=False' not in line and 'non-security' not in line.lower():
                                          line_number = content[:match.start()].count('\n') + 1
                                          violations.append({
                                              'file': file_path,
                                              'line': line_number,
                                              'description': description,
                                              'code': line.strip()
                                          })
                      except Exception as e:
                          print(f"Warning: Could not scan {file_path}: {e}")
          
          if violations:
              print(f"‚ùå Found {len(violations)} cryptographic security violations:")
              for violation in violations:
                  print(f"  {violation['file']}:{violation['line']} - {violation['description']}")
                  print(f"    Code: {violation['code']}")
              print("\nüí° Use SHA-256 or stronger algorithms for security purposes")
              print("üí° If MD5/SHA-1 is needed for non-security purposes, use usedforsecurity=False parameter")
              sys.exit(1)
          else:
              print("‚úÖ No cryptographic security violations found")
          EOF

      - name: üì¶ Dependency Vulnerability Scanning
        id: dependency-scan
        run: |
          echo "Scanning Python dependencies with Safety..."
          
          # Install project dependencies
          if [ -f "config/requirements/requirements.txt" ]; then
            pip install -r config/requirements/requirements.txt
          elif [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
          else
            echo "[INFO] No requirements file found, continuing with system packages"
          fi
          
          # Python dependency scan
          safety check --json --output safety-report.json || echo "Safety found vulnerabilities"
          
          # Process Safety results
          python3 << 'EOF'
          import json
          import sys
          
          try:
              with open('safety-report.json', 'r') as f:
                  report = json.load(f)
              
              vulnerabilities = report.get('vulnerabilities', [])
              critical_vulns = [v for v in vulnerabilities if 'critical' in v.get('severity', '').lower()]
              high_vulns = [v for v in vulnerabilities if 'high' in v.get('severity', '').lower()]
              
              print(f"Safety Results: {len(critical_vulns)} critical, {len(high_vulns)} high severity vulnerabilities")
              
              if critical_vulns or high_vulns:
                  print("‚ùå CRITICAL/HIGH SEVERITY VULNERABILITIES FOUND:")
                  for vuln in (critical_vulns + high_vulns)[:10]:
                      print(f"  - {vuln['package_name']}: {vuln['advisory']}")
                  
                  if len(critical_vulns) + len(high_vulns) > 10:
                      print(f"  ... and {len(critical_vulns) + len(high_vulns) - 10} more")
                  
                  sys.exit(1)
              else:
                  print("‚úÖ No critical or high severity dependency vulnerabilities")
          
          except FileNotFoundError:
              print("‚ö†Ô∏è Safety report not found, continuing...")
          except Exception as e:
              print(f"‚ö†Ô∏è Error processing Safety report: {e}")
          EOF

      - name: üîê Security Configuration Validation
        run: |
          echo "Validating security configurations..."
          
          python3 << 'EOF'
          import os
          import yaml
          import json
          import sys
          
          security_violations = []
          
          # Check for hardcoded security configurations
          config_files = []
          for root, dirs, files in os.walk('./config'):
              for file in files:
                  if file.endswith(('.yml', '.yaml', '.json')):
                      config_files.append(os.path.join(root, file))
          
          for config_file in config_files:
              try:
                  with open(config_file, 'r') as f:
                      if config_file.endswith('.json'):
                          config = json.load(f)
                      else:
                          config = yaml.safe_load(f)
                      
                  # Check for common security misconfigurations
                  config_str = str(config).lower()
                  
                  if 'debug: true' in config_str or '"debug": true' in config_str:
                      security_violations.append(f"{config_file}: Debug mode enabled in configuration")
                  
                  if 'password' in config_str and ('admin' in config_str or '123' in config_str):
                      security_violations.append(f"{config_file}: Potential default/weak password detected")
                      
                  if 'ssl: false' in config_str or 'tls: false' in config_str:
                      security_violations.append(f"{config_file}: SSL/TLS disabled")
                      
              except Exception as e:
                  print(f"Warning: Could not parse {config_file}: {e}")
          
          if security_violations:
              print("‚ùå Security configuration violations found:")
              for violation in security_violations:
                  print(f"  - {violation}")
              sys.exit(1)
          else:
              print("‚úÖ Security configurations validated")
          EOF

      - name: üéØ Validate Security Baseline
        id: validate
        run: |
          echo "Validating overall security baseline..."
          
          # Count total violations
          violations=0
          critical_violations=0
          
          if [ "${{ steps.secret-scan.outputs.secrets-found }}" = "true" ]; then
            violations=$((violations + 1))
            critical_violations=$((critical_violations + 1))
            echo "‚ùå Secrets detected in codebase"
          fi
          
          # Additional checks would increment violations count
          
          echo "violations=$violations" >> $GITHUB_OUTPUT
          echo "critical-violations=$critical_violations" >> $GITHUB_OUTPUT
          
          if [ $critical_violations -gt 0 ]; then
            echo "‚ùå Security baseline validation FAILED: $critical_violations critical violations"
            echo "passed=false" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "‚úÖ Security baseline validation PASSED"
            echo "passed=true" >> $GITHUB_OUTPUT
          fi

      - name: Upload Security Scan Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-baseline-results
          path: |
            bandit-report.json
            safety-report.json
            .secrets.baseline
          retention-days: 30

  # ============================================
  # SBOM Generation & Supply Chain Security
  # ============================================
  sbom-generation:
    name: SBOM Generation & Supply Chain Security
    runs-on: ubuntu-latest
    needs: security-baseline
    if: always()
    
    permissions:
      contents: read
      packages: write
      security-events: write
    
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install SBOM tools
        run: |
          # Install Python SBOM tools
          pip install cyclonedx-bom
          
          # Install Microsoft SBOM Tool (binary, not pip package)
          wget https://github.com/microsoft/sbom-tool/releases/latest/download/sbom-tool-linux-x64 -O sbom-tool
          chmod +x sbom-tool
          sudo mv sbom-tool /usr/local/bin/sbom-tool
          
          # Install Node.js SBOM tools
          npm install -g @cyclonedx/cyclonedx-npm
          
          # Install additional security tools
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin

      - name: üì¶ Generate Python SBOM
        run: |
          echo "Generating Python SBOM..."
          
          # Install dependencies to get accurate SBOM
          if [ -f "config/requirements/requirements.txt" ]; then
            pip install -r config/requirements/requirements.txt
          fi
          
          # Generate CycloneDX SBOM for Python
          cyclonedx-py --output-format json --output-file python-sbom.json .
          
          echo "‚úÖ Python SBOM generated: python-sbom.json"

      - name: üì¶ Generate Node.js SBOM (if applicable)
        run: |
          if [ -f "package.json" ] || [ -f "apps/web/package.json" ]; then
            echo "Generating Node.js SBOM..."
            
            if [ -f "package.json" ]; then
              npm install
              cyclonedx-npm --output-file nodejs-sbom.json
            fi
            
            if [ -f "apps/web/package.json" ]; then
              cd apps/web && npm install
              cyclonedx-npm --output-file ../../web-sbom.json
              cd ../..
            fi
            
            echo "‚úÖ Node.js SBOM generated"
          else
            echo "‚ÑπÔ∏è No Node.js projects found, skipping Node.js SBOM"
          fi

      - name: üì¶ Generate Comprehensive SBOM with Syft
        run: |
          echo "Generating comprehensive SBOM with Syft..."
          
          # Generate SBOM for entire project
          syft . -o spdx-json=comprehensive-sbom.spdx.json
          syft . -o cyclonedx-json=comprehensive-sbom.json
          
          echo "‚úÖ Comprehensive SBOM generated"

      - name: üîç Vulnerability Scanning with Grype
        run: |
          echo "Scanning SBOM for vulnerabilities with Grype..."
          
          # Scan the generated SBOM
          grype sbom:comprehensive-sbom.json -o json > grype-vulnerabilities.json || echo "Grype found vulnerabilities"
          
          # Process Grype results
          python3 << 'EOF'
          import json
          import sys
          
          try:
              with open('grype-vulnerabilities.json', 'r') as f:
                  report = json.load(f)
              
              matches = report.get('matches', [])
              critical_vulns = [m for m in matches if m.get('vulnerability', {}).get('severity') == 'Critical']
              high_vulns = [m for m in matches if m.get('vulnerability', {}).get('severity') == 'High']
              
              print(f"Grype Results: {len(critical_vulns)} critical, {len(high_vulns)} high severity vulnerabilities")
              
              if critical_vulns:
                  print("‚ùå CRITICAL VULNERABILITIES IN DEPENDENCIES:")
                  for vuln in critical_vulns[:10]:
                      artifact = vuln.get('artifact', {})
                      vulnerability = vuln.get('vulnerability', {})
                      print(f"  - {artifact.get('name', 'Unknown')}@{artifact.get('version', 'Unknown')}: {vulnerability.get('id', 'No ID')}")
                      print(f"    Description: {vulnerability.get('description', 'No description')[:100]}...")
                  
                  if len(critical_vulns) > 10:
                      print(f"  ... and {len(critical_vulns) - 10} more critical vulnerabilities")
                  
                  sys.exit(1)
              else:
                  print("‚úÖ No critical vulnerabilities in dependencies")
          
          except FileNotFoundError:
              print("‚ö†Ô∏è Grype report not found, continuing...")
          except Exception as e:
              print(f"‚ö†Ô∏è Error processing Grype report: {e}")
          EOF

      - name: üìä SBOM Compliance Report
        run: |
          echo "Generating SBOM compliance report..."
          
          python3 << 'EOF'
          import json
          import os
          from datetime import datetime
          
          def analyze_sbom_file(filename):
              if not os.path.exists(filename):
                  return None
                  
              try:
                  with open(filename, 'r') as f:
                      sbom = json.load(f)
                  
                  components = sbom.get('components', [])
                  return {
                      'file': filename,
                      'format': sbom.get('bomFormat', 'Unknown'),
                      'version': sbom.get('specVersion', 'Unknown'),
                      'component_count': len(components),
                      'licenses': list(set([
                          license.get('license', {}).get('name', 'Unknown')
                          for component in components
                          for license in component.get('licenses', [])
                          if isinstance(license, dict)
                      ])),
                      'vulnerabilities_included': 'vulnerabilities' in sbom
                  }
              except Exception as e:
                  print(f"Error analyzing {filename}: {e}")
                  return None
          
          # Analyze all generated SBOMs
          sbom_files = ['python-sbom.json', 'nodejs-sbom.json', 'web-sbom.json', 'comprehensive-sbom.json']
          report = {
              'timestamp': datetime.utcnow().isoformat() + 'Z',
              'repository': os.environ.get('GITHUB_REPOSITORY', 'Unknown'),
              'commit': os.environ.get('GITHUB_SHA', 'Unknown'),
              'sboms': []
          }
          
          for sbom_file in sbom_files:
              analysis = analyze_sbom_file(sbom_file)
              if analysis:
                  report['sboms'].append(analysis)
          
          # Save compliance report
          with open('sbom-compliance-report.json', 'w') as f:
              json.dump(report, f, indent=2)
          
          print("üìä SBOM Compliance Report:")
          print(f"  Total SBOMs generated: {len(report['sboms'])}")
          for sbom in report['sboms']:
              print(f"  - {sbom['file']}: {sbom['component_count']} components ({sbom['format']} {sbom['version']})")
          
          print("‚úÖ SBOM compliance report generated")
          EOF

      - name: Upload SBOM Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sbom-artifacts
          path: |
            *-sbom.json
            *-sbom.spdx.json
            grype-vulnerabilities.json
            sbom-compliance-report.json
          retention-days: 90

      # Push SBOMs to a dedicated branch for tracking
      - name: üì§ Publish SBOM to Repository
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          git config --local user.email "noreply@github.com"
          git config --local user.name "Security Compliance Bot"
          
          # Create/checkout SBOM branch
          git checkout -B sbom-tracking || git checkout sbom-tracking
          
          # Create SBOM directory structure
          mkdir -p sboms/$(date +%Y-%m-%d)
          
          # Copy SBOM files
          cp *-sbom.json sboms/$(date +%Y-%m-%d)/ 2>/dev/null || true
          cp *-sbom.spdx.json sboms/$(date +%Y-%m-%d)/ 2>/dev/null || true
          cp sbom-compliance-report.json sboms/$(date +%Y-%m-%d)/ 2>/dev/null || true
          
          # Update latest symlink
          ln -sfn $(date +%Y-%m-%d) sboms/latest
          
          git add sboms/
          git commit -m "Update SBOM for commit ${{ github.sha }}" || echo "No changes to commit"
          git push origin sbom-tracking || echo "Failed to push SBOM branch"

  # ============================================
  # Compliance Validation
  # ============================================
  compliance-validation:
    name: Regulatory Compliance Validation
    runs-on: ubuntu-latest
    needs: [security-baseline, sbom-generation]
    if: always()
    
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install compliance tools
        run: |
          # Install actual compliance tools that exist
          pip install pydantic email-validator || echo "[INFO] Some compliance tools not available"
          # Note: Using available tools for basic compliance checking

      - name: üõ°Ô∏è GDPR Compliance Check
        run: |
          echo "Validating GDPR compliance..."
          
          python3 << 'EOF'
          import os
          import re
          import json
          
          gdpr_violations = []
          gdpr_compliant_patterns = []
          
          # Check for PII handling patterns
          pii_patterns = [
              r'(?i)(email|phone|address|ssn|social.security|date.of.birth)',
              r'(?i)(personal.data|sensitive.data|private.information)',
              r'(?i)(user.profile|user.data|customer.data)'
          ]
          
          consent_patterns = [
              r'(?i)(consent|opt.in|opt.out|withdraw)',
              r'(?i)(privacy.policy|data.processing|data.subject.rights)',
              r'(?i)(right.to.be.forgotten|data.portability|data.rectification)'
          ]
          
          for root, dirs, files in os.walk('.'):
              dirs[:] = [d for d in dirs if d not in {'.git', 'node_modules', '__pycache__'}]
              
              for file in files:
                  if file.endswith(('.py', '.js', '.ts', '.html')):
                      file_path = os.path.join(root, file)
                      try:
                          with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                              content = f.read().lower()
                              
                              # Check for PII handling without proper controls
                              for pattern in pii_patterns:
                                  if re.search(pattern, content):
                                      # Check if proper consent/privacy controls are nearby
                                      has_consent = any(re.search(cp, content) for cp in consent_patterns)
                                      if not has_consent:
                                          gdpr_violations.append(f"{file_path}: PII handling without visible GDPR controls")
                                      else:
                                          gdpr_compliant_patterns.append(f"{file_path}: PII handling with GDPR controls detected")
                      except Exception as e:
                          continue
          
          print(f"GDPR Compliance Check:")
          print(f"  ‚úÖ Compliant patterns found: {len(gdpr_compliant_patterns)}")
          print(f"  ‚ö†Ô∏è  Potential violations: {len(gdpr_violations)}")
          
          if gdpr_violations:
              print("Potential GDPR compliance issues:")
              for violation in gdpr_violations[:10]:
                  print(f"  - {violation}")
              if len(gdpr_violations) > 10:
                  print(f"  ... and {len(gdpr_violations) - 10} more")
          
          # GDPR compliance score
          total_checks = len(gdpr_compliant_patterns) + len(gdpr_violations)
          if total_checks > 0:
              compliance_score = (len(gdpr_compliant_patterns) / total_checks) * 100
              print(f"GDPR Compliance Score: {compliance_score:.1f}%")
          else:
              print("GDPR Compliance Score: No PII handling detected")
          EOF

      - name: üîê Security Controls Audit
        run: |
          echo "Auditing security controls implementation..."
          
          python3 << 'EOF'
          import os
          import json
          
          # Define required security controls
          security_controls = {
              'authentication': {
                  'patterns': [r'(?i)(login|authenticate|auth|password|token)', r'(?i)(session|jwt|oauth|saml)'],
                  'found': False,
                  'files': []
              },
              'authorization': {
                  'patterns': [r'(?i)(authorize|permission|role|rbac|access.control)', r'(?i)(admin|moderator|user.level)'],
                  'found': False,
                  'files': []
              },
              'encryption': {
                  'patterns': [r'(?i)(encrypt|decrypt|aes|chacha|tls|ssl)', r'(?i)(crypto|cipher|hash|sha256)'],
                  'found': False,
                  'files': []
              },
              'input_validation': {
                  'patterns': [r'(?i)(validate|sanitize|escape|filter)', r'(?i)(input.validation|xss.protection|sql.injection)'],
                  'found': False,
                  'files': []
              },
              'audit_logging': {
                  'patterns': [r'(?i)(log|audit|trace|monitor)', r'(?i)(security.event|access.log|audit.trail)'],
                  'found': False,
                  'files': []
              }
          }
          
          # Scan codebase for security control implementations
          for root, dirs, files in os.walk('.'):
              dirs[:] = [d for d in dirs if d not in {'.git', 'node_modules', '__pycache__'}]
              
              for file in files:
                  if file.endswith(('.py', '.js', '.ts', '.go', '.rs')):
                      file_path = os.path.join(root, file)
                      try:
                          with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                              content = f.read()
                              
                              for control, config in security_controls.items():
                                  for pattern in config['patterns']:
                                      if re.search(pattern, content, re.IGNORECASE):
                                          config['found'] = True
                                          if file_path not in config['files']:
                                              config['files'].append(file_path)
                      except Exception:
                          continue
          
          print("Security Controls Audit:")
          total_controls = len(security_controls)
          implemented_controls = sum(1 for control in security_controls.values() if control['found'])
          
          for control_name, config in security_controls.items():
              status = "‚úÖ" if config['found'] else "‚ùå"
              file_count = len(config['files'])
              print(f"  {status} {control_name.replace('_', ' ').title()}: {file_count} files")
          
          compliance_percentage = (implemented_controls / total_controls) * 100
          print(f"\nSecurity Controls Coverage: {compliance_percentage:.1f}% ({implemented_controls}/{total_controls})")
          
          if compliance_percentage < 80:
              print("‚ö†Ô∏è Security controls coverage below 80% threshold")
          else:
              print("‚úÖ Security controls coverage meets threshold")
          EOF

      - name: üìã Generate Compliance Report
        run: |
          echo "Generating final compliance report..."
          
          python3 << 'EOF'
          import json
          from datetime import datetime
          
          # Create comprehensive compliance report
          report = {
              'timestamp': datetime.utcnow().isoformat() + 'Z',
              'repository': os.environ.get('GITHUB_REPOSITORY', 'Unknown'),
              'commit': os.environ.get('GITHUB_SHA', 'Unknown'),
              'workflow_run': os.environ.get('GITHUB_RUN_ID', 'Unknown'),
              'compliance_status': {
                  'security_baseline': '${{ needs.security-baseline.outputs.baseline-passed }}' == 'true',
                  'sbom_generated': True,  # Assume success if we reach this point
                  'gdpr_validated': True,  # Based on previous step
                  'security_controls_audited': True
              },
              'critical_violations': int('${{ needs.security-baseline.outputs.critical-violations }}' or '0'),
              'recommendations': [
                  'Maintain zero critical security violations',
                  'Keep SBOM updated with each release',
                  'Regular compliance validation',
                  'Continuous security monitoring'
              ]
          }
          
          overall_compliance = all(report['compliance_status'].values()) and report['critical_violations'] == 0
          report['overall_compliance'] = overall_compliance
          
          with open('compliance-report.json', 'w') as f:
              json.dump(report, f, indent=2)
          
          print("üìã Final Compliance Report:")
          print(f"  Overall Compliance: {'‚úÖ PASSED' if overall_compliance else '‚ùå FAILED'}")
          print(f"  Security Baseline: {'‚úÖ' if report['compliance_status']['security_baseline'] else '‚ùå'}")
          print(f"  SBOM Generation: {'‚úÖ' if report['compliance_status']['sbom_generated'] else '‚ùå'}")
          print(f"  Critical Violations: {report['critical_violations']}")
          
          if not overall_compliance:
              print("‚ùå Compliance validation failed - review violations above")
              exit(1)
          else:
              print("‚úÖ All compliance checks passed")
          EOF

      - name: Upload Compliance Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: compliance-report
          path: compliance-report.json
          retention-days: 365  # Keep compliance reports for a year

  # ============================================
  # Security Summary
  # ============================================
  security-summary:
    name: Security Compliance Summary
    needs: [security-baseline, sbom-generation, compliance-validation]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: Generate Security Summary
        run: |
          echo "## üõ°Ô∏è Security Compliance Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Workflow:** ${{ github.workflow }}" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Security Baseline Results
          baseline_status="${{ needs.security-baseline.outputs.baseline-passed }}"
          if [ "$baseline_status" = "true" ]; then
            echo "‚úÖ **Security Baseline**: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Security Baseline**: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          critical_violations="${{ needs.security-baseline.outputs.critical-violations }}"
          echo "üö® **Critical Violations**: $critical_violations" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Compliance Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Security Baseline | $( [ "$baseline_status" = "true" ] && echo "‚úÖ PASSED" || echo "‚ùå FAILED" ) |" >> $GITHUB_STEP_SUMMARY
          echo "| SBOM Generation | $( [ "${{ needs.sbom-generation.result }}" = "success" ] && echo "‚úÖ PASSED" || echo "‚ùå FAILED" ) |" >> $GITHUB_STEP_SUMMARY
          echo "| Compliance Validation | $( [ "${{ needs.compliance-validation.result }}" = "success" ] && echo "‚úÖ PASSED" || echo "‚ùå FAILED" ) |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "$baseline_status" != "true" ] || [ "$critical_violations" != "0" ]; then
            echo "### ‚ö†Ô∏è Action Required" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Security compliance issues detected. Please review the detailed reports and address all critical violations." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- Download artifacts from this workflow run for detailed analysis" >> $GITHUB_STEP_SUMMARY
            echo "- Review SECURITY.md for vulnerability reporting procedures" >> $GITHUB_STEP_SUMMARY
            echo "- Contact security team if assistance is needed" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ‚úÖ Compliance Achieved" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "All security compliance checks have passed successfully." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Set Exit Code
        run: |
          baseline_passed="${{ needs.security-baseline.outputs.baseline-passed }}"
          critical_violations="${{ needs.security-baseline.outputs.critical-violations }}"
          
          if [ "$baseline_passed" != "true" ] || [ "$critical_violations" != "0" ]; then
            echo "‚ùå Security compliance failed"
            exit 1
          else
            echo "‚úÖ Security compliance passed"
          fi