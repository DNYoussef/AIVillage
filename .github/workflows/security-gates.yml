name: Security Gates

on:
  pull_request:
    branches: [ main, dev ]
  push:
    branches: [ main, dev ]

jobs:
  security-scan:
    runs-on: ubuntu-latest
    name: Security Gates Validation
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit ruff mypy portalocker pytest pyyaml

      - name: Check for HTTP URLs in production code
        run: |
          echo "Scanning for insecure HTTP URLs in production code..."

          # Search for HTTP URLs in production source code (excluding tests/dev)
          if grep -r --include="*.py" --exclude-dir="test*" --exclude-dir="tmp" \
             --exclude="*test*.py" --exclude="*dev*.py" --exclude="*example*.py" \
             '"http://' src/production/ 2>/dev/null; then
            echo "‚ùå SECURITY GATE FAILURE: Found HTTP URLs in production code"
            echo "   Replace with HTTPS URLs or use environment-conditional logic"
            exit 1
          fi

          if grep -r --include="*.yaml" --include="*.yml" \
             'http://' config/aivillage_config_production.yaml docker-compose*.yml 2>/dev/null | \
             grep -v "localhost" | grep -v "#.*http://"; then
            echo "‚ùå SECURITY GATE FAILURE: Found HTTP URLs in production config"
            echo "   Use HTTPS URLs in production configurations"
            exit 1
          fi

          echo "‚úÖ No insecure HTTP URLs found in production code"

      - name: Check for unsafe pickle usage
        run: |
          echo "Scanning for unsafe pickle.loads usage..."

          # Search for pickle.loads in source code (excluding secure_serialization.py)
          if grep -r --include="*.py" --exclude-dir="test*" --exclude-dir="tmp" \
             'pickle\.loads\|pickle\.load(' src/ | \
             grep -v "secure_serialization.py" | \
             grep -v "# SECURITY: safe usage" | \
             grep -v "# nosec" 2>/dev/null; then
            echo "‚ùå SECURITY GATE FAILURE: Found unsafe pickle.loads usage"
            echo "   Use SecureSerializer from src.core.security.secure_serialization instead"
            exit 1
          fi

          echo "‚úÖ No unsafe pickle usage found"

      - name: Run Bandit security scan
        run: |
          echo "Running Bandit security analysis..."

          # Run bandit and fail on HIGH or MEDIUM severity issues in production code
          bandit -r src/production/ -l -i -f json -o bandit-report.json || true

          if [ -f bandit-report.json ]; then
            # Check for HIGH severity issues
            HIGH_ISSUES=$(python -c "import json; data=json.load(open('bandit-report.json')); print(len([r for r in data.get('results',[]) if r.get('issue_severity')=='HIGH']))" 2>/dev/null || echo "0")

            # Check for MEDIUM severity issues
            MEDIUM_ISSUES=$(python -c "import json; data=json.load(open('bandit-report.json')); print(len([r for r in data.get('results',[]) if r.get('issue_severity')=='MEDIUM']))" 2>/dev/null || echo "0")

            if [ "$HIGH_ISSUES" -gt 0 ]; then
              echo "‚ùå SECURITY GATE FAILURE: Found $HIGH_ISSUES HIGH severity security issues"
              bandit -r src/production/ -l -i -f txt
              exit 1
            fi

            if [ "$MEDIUM_ISSUES" -gt 3 ]; then
              echo "‚ùå SECURITY GATE FAILURE: Found $MEDIUM_ISSUES MEDIUM severity issues (limit: 3)"
              bandit -r src/production/ -l -i -f txt
              exit 1
            fi

            echo "‚úÖ Bandit scan passed (HIGH: $HIGH_ISSUES, MEDIUM: $MEDIUM_ISSUES)"
          fi

      - name: Run Ruff critical checks
        run: |
          echo "Running Ruff for critical code quality issues..."

          # Run ruff on production code and fail on error-level issues
          ruff check src/production/ --select E9,F63,F7,F82 --statistics || {
            echo "‚ùå SECURITY GATE FAILURE: Critical Ruff issues found"
            echo "   Fix syntax errors, undefined names, and import issues"
            exit 1
          }

          echo "‚úÖ Ruff critical checks passed"

      - name: Run MyPy type checking on critical modules
        run: |
          echo "Running MyPy type checking on security-critical modules..."

          # Type check security and core modules
          mypy src/core/security/ --ignore-missing-imports --no-strict-optional || {
            echo "‚ö†Ô∏è  MyPy warnings in security modules (non-blocking)"
          }

          mypy src/token_economy/ --ignore-missing-imports --no-strict-optional || {
            echo "‚ö†Ô∏è  MyPy warnings in tokenomics modules (non-blocking)"
          }

          echo "‚úÖ MyPy type checking completed"

      - name: Validate production configuration security
        run: |
          echo "Validating production configuration security..."

          # Run our HTTP security validation tests
          if [ -f "tests/production/test_no_http_in_prod.py" ]; then
            python -m pytest tests/production/test_no_http_in_prod.py -v || {
              echo "‚ùå SECURITY GATE FAILURE: Production HTTP validation failed"
              exit 1
            }
          fi

          echo "‚úÖ Production configuration security validated"

      - name: Security Gates Summary
        if: always()
        run: |
          echo ""
          echo "üîí SECURITY GATES SUMMARY"
          echo "========================"
          echo "All security gates must pass before merging to main branch."
          echo ""
          echo "Gates checked:"
          echo "‚Ä¢ HTTP URLs in production code ‚úì"
          echo "‚Ä¢ Unsafe pickle usage ‚úì"
          echo "‚Ä¢ Bandit security issues ‚úì"
          echo "‚Ä¢ Critical Ruff issues ‚úì"
          echo "‚Ä¢ Production config validation ‚úì"
          echo ""
          if [ "$?" -eq 0 ]; then
            echo "üéâ All security gates PASSED! Safe to merge."
          else
            echo "‚ùå Security gates FAILED! Fix issues before merging."
          fi
