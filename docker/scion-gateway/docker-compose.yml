# Docker Compose for SCION Gateway End-to-End Testing
# Production-ready multi-container environment with networking, monitoring, and test orchestration

version: '3.8'

networks:
  scion-net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  
  monitoring-net:
    driver: bridge

volumes:
  prometheus-data:
  grafana-data:
  scion-data:
  gateway-logs:
  test-results:

services:
  # SCION Infrastructure (simplified for testing)
  scion-dispatcher:
    image: scionproto/scion:latest
    container_name: scion-dispatcher
    networks:
      scion-net:
        ipv4_address: 172.20.1.10
    ports:
      - "30041:30041"
    volumes:
      - scion-data:/share/scion
      - ./scion-config:/share/scion/gen
    command: >
      sh -c "
        echo 'Starting SCION dispatcher' &&
        /app/bin/scion-dispatcher --config=/share/scion/gen/dispatcher.toml
      "
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "30041"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  scion-daemon:
    image: scionproto/scion:latest
    container_name: scion-daemon
    networks:
      scion-net:
        ipv4_address: 172.20.1.11
    ports:
      - "30255:30255"
    volumes:
      - scion-data:/share/scion
      - ./scion-config:/share/scion/gen
    depends_on:
      - scion-dispatcher
    command: >
      sh -c "
        echo 'Starting SCION daemon' &&
        /app/bin/scion-daemon --config=/share/scion/gen/sd.toml
      "
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "30255"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  # SCION Sidecar (Go implementation)
  scion-sidecar:
    build:
      context: ../../scion-sidecar
      dockerfile: Dockerfile
    container_name: scion-sidecar
    networks:
      scion-net:
        ipv4_address: 172.20.2.10
      monitoring-net:
    ports:
      - "8080:8080"   # gRPC API
      - "8081:8081"   # Metrics
    volumes:
      - gateway-logs:/var/log/scion-gateway
      - ./scion-config:/etc/scion
    environment:
      - SCION_DAEMON_ADDRESS=172.20.1.11:30255
      - SCION_DISPATCHER_ADDRESS=172.20.1.10:30041
      - LOG_LEVEL=debug
      - METRICS_ENABLED=true
    depends_on:
      - scion-daemon
    command: >
      /app/scion_sidecar
      --bind=0.0.0.0:8080
      --metrics-addr=0.0.0.0:8081
      --scion-daemon=172.20.1.11:30255
      --dispatcher=172.20.1.10:30041
      --log-level=debug
    healthcheck:
      test: ["CMD", "grpc_health_probe", "-addr=localhost:8080"]
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  # Betanet Gateway (Rust implementation)
  betanet-gateway:
    build:
      context: ../../betanet-gateway
      dockerfile: Dockerfile
    container_name: betanet-gateway
    networks:
      scion-net:
        ipv4_address: 172.20.2.20
      monitoring-net:
    ports:
      - "8443:8443"   # HTX server (HTTPS/H3)
      - "9090:9090"   # Prometheus metrics
    volumes:
      - gateway-logs:/var/log/betanet-gateway
      - ./gateway-config:/etc/gateway
      - ./certs:/etc/certs:ro
    environment:
      - RUST_LOG=betanet_gateway=debug,h3=info
      - SCION_SIDECAR_ADDR=172.20.2.10:8080
      - HTX_BIND_ADDR=0.0.0.0:8443
      - METRICS_BIND_ADDR=0.0.0.0:9090
      - ANTI_REPLAY_DB_PATH=/var/lib/betanet-gateway/replay.db
    depends_on:
      - scion-sidecar
    command: >
      /app/betanet-gateway
      --htx-bind=0.0.0.0:8443
      --scion-addr=172.20.2.10:8080
      --metrics-addr=0.0.0.0:9090
      --replay-db-path=/var/lib/betanet-gateway/replay.db
      --log-level=debug
    healthcheck:
      test: ["CMD", "curl", "-k", "-f", "https://localhost:8443/health"]
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  # Test Client (Python integration)
  test-client:
    build:
      context: ../../
      dockerfile: docker/test-client/Dockerfile
    container_name: test-client
    networks:
      scion-net:
        ipv4_address: 172.20.3.10
    volumes:
      - test-results:/test-results
      - ./test-config:/etc/test
    environment:
      - GATEWAY_ENDPOINT=https://172.20.2.20:8443
      - SIDECAR_ENDPOINT=172.20.2.10:8080
      - TEST_DESTINATION=1-ff00:0:120  # Test ISD-AS
      - PYTHONPATH=/app/src
      - TEST_OUTPUT_DIR=/test-results
    depends_on:
      - betanet-gateway
    command: >
      sh -c "
        echo 'Waiting for gateway to be ready...' &&
        sleep 30 &&
        python -m pytest /app/tests/e2e/test_scion_gateway.py 
          --verbose 
          --tb=short 
          --junitxml=/test-results/results.xml
          --html=/test-results/report.html
          --capture=no
      "

  # Load Test Client
  load-test:
    build:
      context: ../../
      dockerfile: docker/load-test/Dockerfile
    container_name: load-test
    networks:
      scion-net:
        ipv4_address: 172.20.3.20
    volumes:
      - test-results:/test-results
    environment:
      - GATEWAY_ENDPOINT=https://172.20.2.20:8443
      - TARGET_RPS=1000      # Target requests per second
      - TEST_DURATION=300s   # 5 minutes
      - CONCURRENT_USERS=50  # Concurrent connections
      - TEST_OUTPUT_DIR=/test-results
    depends_on:
      - betanet-gateway
    profiles: ["load-test"]  # Only run when explicitly requested
    command: >
      sh -c "
        echo 'Starting load test...' &&
        sleep 45 &&
        python /app/load_test.py
          --endpoint=https://172.20.2.20:8443
          --rps=1000
          --duration=300
          --users=50
          --output=/test-results/load_test.json
      "

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: prometheus
    networks:
      monitoring-net:
    ports:
      - "9000:9090"
    volumes:
      - prometheus-data:/prometheus
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:10.0.0
    container_name: grafana
    networks:
      monitoring-net:
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    depends_on:
      - prometheus
    restart: unless-stopped

  # Log Aggregation
  loki:
    image: grafana/loki:2.9.0
    container_name: loki
    networks:
      monitoring-net:
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki.yml:/etc/loki/local-config.yaml:ro
    command: -config.file=/etc/loki/local-config.yaml
    restart: unless-stopped

  # Log Shipping
  promtail:
    image: grafana/promtail:2.9.0
    container_name: promtail
    networks:
      monitoring-net:
    volumes:
      - gateway-logs:/var/log/gateway:ro
      - ./monitoring/promtail.yml:/etc/promtail/config.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    restart: unless-stopped

  # Test Results Server
  test-results-server:
    image: nginx:alpine
    container_name: test-results-server
    networks:
      scion-net:
    ports:
      - "8888:80"
    volumes:
      - test-results:/usr/share/nginx/html:ro
      - ./nginx-results.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - test-client
    restart: unless-stopped

  # Network Testing Utilities
  nettools:
    image: nicolaka/netshoot:latest
    container_name: nettools
    networks:
      - scion-net
      - monitoring-net
    command: sleep infinity
    profiles: ["debug"]  # Only for debugging

# Health Check and Startup Orchestration
x-healthcheck-defaults: &healthcheck-defaults
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 60s