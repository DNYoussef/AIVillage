# Multi-stage build for AIVillage Gateway Service with security hardening
# Build date for security scanning
ARG BUILD_DATE
ARG VCS_REF
ARG VERSION=1.0.0

# Stage 1: Security-hardened base image
FROM python:3.11-slim-bookworm AS base

# Security: Install security updates immediately
RUN apt-get update && \
    apt-get upgrade -y && \
    apt-get install -y --no-install-recommends \
        ca-certificates \
        curl \
        && apt-get clean && \
        rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Stage 2: Builder stage for dependencies
FROM base AS builder

WORKDIR /build

# Install build dependencies
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        build-essential \
        git \
        && rm -rf /var/lib/apt/lists/*

# Copy and install Python dependencies
COPY requirements.txt requirements-production.txt ./
COPY experimental/services/services/gateway/requirements.txt ./gateway_requirements.txt

# Create wheels for all dependencies (improves security and speed)
RUN pip install --no-cache-dir --upgrade pip setuptools wheel && \
    pip wheel --no-cache-dir --wheel-dir /wheels \
        -r requirements.txt \
        -r requirements-production.txt \
        -r gateway_requirements.txt

# Stage 3: Final production image
FROM base AS production

# OCI Image Labels for scanning and metadata
LABEL org.opencontainers.image.created="${BUILD_DATE}" \
      org.opencontainers.image.source="https://github.com/DNYoussef/AIVillage" \
      org.opencontainers.image.version="${VERSION}" \
      org.opencontainers.image.revision="${VCS_REF}" \
      org.opencontainers.image.vendor="AIVillage" \
      org.opencontainers.image.licenses="MIT" \
      org.opencontainers.image.title="AIVillage Gateway" \
      org.opencontainers.image.description="Secure gateway service for AIVillage platform" \
      security.scan="trivy" \
      security.updates="auto"

# Security: Create non-root user with specific UID/GID
RUN groupadd -g 65534 -r aivillage && \
    useradd -u 65534 -r -g aivillage -d /home/aivillage -s /sbin/nologin aivillage && \
    mkdir -p /home/aivillage && \
    chown -R aivillage:aivillage /home/aivillage

WORKDIR /app

# Copy wheels from builder and install
COPY --from=builder /wheels /wheels
RUN pip install --no-cache-dir --no-index --find-links=/wheels /wheels/*.whl && \
    rm -rf /wheels && \
    pip list --format=freeze > /app/requirements.lock

# Copy application code with proper ownership
COPY --chown=aivillage:aivillage experimental/services/services/gateway/ ./gateway/
COPY --chown=aivillage:aivillage communications/ ./communications/
COPY --chown=aivillage:aivillage config/ ./config/

# Create necessary directories with proper permissions
RUN mkdir -p /app/logs /app/tmp /app/cache && \
    chown -R aivillage:aivillage /app && \
    chmod -R 750 /app

# Security: Set secure environment variables
ENV PYTHONPATH=/app \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    GATEWAY_PORT=8000 \
    GATEWAY_HOST=0.0.0.0 \
    # Security headers
    SECURE_HEADERS_ENABLED=true \
    SECURE_SSL_REDIRECT=false \
    SECURE_HSTS_SECONDS=31536000 \
    SECURE_CONTENT_TYPE_NOSNIFF=true \
    SECURE_BROWSER_XSS_FILTER=true \
    # Resource limits (informational)
    CONTAINER_MEMORY_LIMIT=512Mi \
    CONTAINER_CPU_LIMIT=500m

# Security: Drop all capabilities and run as non-root
USER aivillage

# Health check with timeout
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD python -c "import urllib.request; urllib.request.urlopen('http://localhost:8000/healthz').read()" || exit 1

# Expose port (non-privileged)
EXPOSE 8000

# Security: Use exec form to prevent shell injection
ENTRYPOINT ["python", "-m"]
CMD ["gateway.app"]
