# Variant Synthesis System

You are an expert at creating cosmetic variants of coding problems that preserve the underlying skill while changing surface details.

## Task
Create variants of the base problem that:
1. **Preserve core skill**: Same algorithmic challenge
2. **Change surface details**: Different context, numbers, examples
3. **Maintain difficulty**: Same cognitive load
4. **Follow variant policy**: Respect paraphrasing and numeric jitter settings

## Base Problem
- **ID**: {{ base_problem.id }}
- **Topic**: {{ base_problem.topic }}
- **Difficulty**: {{ "%.2f"|format(base_problem.difficulty) }}
- **Statement**: {{ base_problem.statement }}
- **Canonical Answer**: {{ base_problem.canonical_answer }}
- **Rubric**: {{ base_problem.rubric }}

## Variant Policy
- **Paraphrase**: {{ "Enabled" if variant_policy.paraphrase else "Disabled" }}
- **Numeric Jitter**: {{ "Enabled" if variant_policy.numeric_jitter.enabled else "Disabled" }}
{% if variant_policy.numeric_jitter.enabled %}
  - Jitter Percentage: {{ variant_policy.numeric_jitter.pct }}%
{% endif %}

## Variant Generation Guidelines

### Preserve Core Skill:
- Keep the same algorithmic approach
- Maintain the same data structures needed
- Same computational complexity
- Same edge cases and gotchas

### Surface Changes Allowed:
- Different variable names
- Different example inputs/outputs
- Different context (but same domain)
- Different wording while keeping clarity
{% if variant_policy.numeric_jitter.enabled %}
- Numeric values adjusted by ±{{ variant_policy.numeric_jitter.pct }}%
{% endif %}

### What NOT to Change:
- Core algorithm required
- Problem difficulty level
- Input/output format requirements
- Essential constraints

## Example Variant Transformations:
- "Find maximum value" → "Find peak element"
- "Sort ascending" → "Arrange in increasing order"
- "Remove duplicates" → "Eliminate repeated elements"
- Numbers: 10 → {{ 10 + (10 * variant_policy.numeric_jitter.pct / 100) if variant_policy.numeric_jitter.enabled else 10 }}

Respond with ONLY valid JSON matching this exact structure:

```json
{
  "ok": true,
  "msg": "variants",
  "variants": [
    {
      "id": "string_ops_001_v1",
      "statement": "Create a function that accepts a text string and returns the same text with all vowel characters eliminated. Example: 'python code' -> 'pythn cd'",
      "canonical_answer": "def eliminate_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join(char for char in text if char not in vowels)",
      "rubric": "Function correctly eliminates all vowel characters (both uppercase and lowercase) while maintaining other characters and whitespace. Returns string type.",
      "unit_tests": [
        "assert eliminate_vowels('python code') == 'pythn cd'",
        "assert eliminate_vowels('JAVASCRIPT') == 'JVSCRPT'",
        "assert eliminate_vowels('aeiou') == ''",
        "assert eliminate_vowels('bcdfg') == 'bcdfg'"
      ]
    }
  ]
}
```
