# GitHub Actions workflow for testing Betanet FFI
name: Test Betanet FFI

on:
  push:
    paths:
      - 'crates/betanet-ffi/**'
      - '.github/workflows/test_ffi.yml'
  pull_request:
    paths:
      - 'crates/betanet-ffi/**'

env:
  CARGO_TERM_COLOR: always

jobs:
  test-ffi:
    name: Test FFI on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            lib_ext: so
            lib_name: libbetanet_ffi.so
          - os: windows-latest
            lib_ext: dll
            lib_name: betanet_ffi.dll
          - os: macos-latest
            lib_ext: dylib
            lib_name: libbetanet_ffi.dylib

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
        components: clippy, rustfmt

    - name: Cache Cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Install cbindgen
      run: cargo install cbindgen || true

    - name: Build FFI library
      run: cargo build --package betanet-ffi --release

    - name: Check library exists
      shell: bash
      run: |
        if [ -f "target/release/${{ matrix.lib_name }}" ]; then
          echo "✓ FFI library found: target/release/${{ matrix.lib_name }}"
          ls -la target/release/${{ matrix.lib_name }}
        else
          echo "✗ FFI library not found: target/release/${{ matrix.lib_name }}"
          echo "Available files:"
          ls -la target/release/ || true
          exit 1
        fi

    - name: Check header generation
      shell: bash
      run: |
        if [ -f "crates/betanet-ffi/include/betanet.h" ]; then
          echo "✓ Header file found"
          echo "Header file size: $(wc -l < crates/betanet-ffi/include/betanet.h) lines"
        else
          echo "✗ Header file not found"
          exit 1
        fi

    - name: Install GCC (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc build-essential

    - name: Install GCC (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        xcode-select --install || true

    - name: Install MSVC (Windows)
      if: matrix.os == 'windows-latest'
      uses: ilammy/msvc-dev-cmd@v1

    - name: Build C examples (Unix)
      if: matrix.os != 'windows-latest'
      shell: bash
      run: |
        cd crates/betanet-ffi
        chmod +x ci/build_examples.sh
        ./ci/build_examples.sh

    - name: Build C examples (Windows)
      if: matrix.os == 'windows-latest'
      shell: cmd
      run: |
        cd crates\betanet-ffi
        mkdir build
        echo Building examples for Windows...
        cl /I include examples\htx_example.c /Fe:build\htx_example.exe /link /LIBPATH:..\..\target\release betanet_ffi.lib || echo "Build may need additional configuration"

    - name: Test FFI library loading (Unix)
      if: matrix.os != 'windows-latest'
      shell: bash
      run: |
        cd crates/betanet-ffi
        export LD_LIBRARY_PATH="../../target/release:$LD_LIBRARY_PATH"
        export DYLD_LIBRARY_PATH="../../target/release:$DYLD_LIBRARY_PATH"

        echo "Testing library loading..."
        if [ -f "build/htx_example" ]; then
          echo "Running HTX example..."
          ./build/htx_example || echo "Example run failed (may be expected if dependencies not fully mocked)"
        fi

    - name: Run Rust FFI tests
      run: cargo test --package betanet-ffi

    - name: Check FFI symbol exports (Unix)
      if: matrix.os != 'windows-latest'
      shell: bash
      run: |
        echo "Checking exported symbols..."
        if command -v nm >/dev/null; then
          nm -D target/release/${{ matrix.lib_name }} | grep betanet || echo "No betanet symbols found"
        elif command -v objdump >/dev/null; then
          objdump -T target/release/${{ matrix.lib_name }} | grep betanet || echo "No betanet symbols found"
        else
          echo "No symbol inspection tool available"
        fi

    - name: Upload FFI artifacts
      uses: actions/upload-artifact@v4
      with:
        name: betanet-ffi-${{ matrix.os }}
        path: |
          target/release/${{ matrix.lib_name }}
          crates/betanet-ffi/include/betanet.h
          crates/betanet-ffi/build/
        retention-days: 7

  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test-ffi

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Download FFI artifacts
      uses: actions/download-artifact@v4
      with:
        name: betanet-ffi-ubuntu-latest

    - name: Run integration tests
      run: |
        echo "Running FFI integration tests..."
        cargo test --package betanet-ffi --test integration_tests

    - name: Test cross-language compatibility
      run: |
        echo "Testing C/Rust interoperability..."
        # Add more comprehensive integration tests here
        echo "✓ Integration tests placeholder"
