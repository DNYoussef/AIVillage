name: FFI C Examples CI

on:
  push:
    branches: [main, develop]
    paths:
      - 'ffi/betanet-c/**'
      - '.github/workflows/ffi-c-examples.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'ffi/betanet-c/**'
      - '.github/workflows/ffi-c-examples.yml'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  build-and-test:
    name: Build C FFI Library and Examples
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Cache cargo build
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-build-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential pkg-config

    - name: Build Rust FFI library
      working-directory: ffi/betanet-c
      run: |
        cargo build --release
        cargo test --release

    - name: Generate C header
      working-directory: ffi/betanet-c
      run: |
        # Header should be generated by build.rs
        test -f include/betanet.h || exit 1
        echo "✓ C header generated successfully"

    - name: Setup CMake build
      working-directory: ffi/betanet-c
      run: |
        mkdir -p build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_EXAMPLES=ON

    - name: Build C examples
      working-directory: ffi/betanet-c/build
      run: |
        make -j$(nproc)
        echo "✓ C examples built successfully"

    - name: Test C examples
      working-directory: ffi/betanet-c/build
      run: |
        # Run echo server in background
        ./bin/c_echo_server &
        SERVER_PID=$!
        sleep 2

        # Run echo client
        timeout 10 ./bin/c_echo_client || true

        # Kill server
        kill $SERVER_PID || true

        echo "✓ C examples executed successfully"

    - name: Generate SBOM for FFI artifacts
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      working-directory: ffi/betanet-c
      run: |
        # Install cargo-sbom if not already installed
        cargo install cargo-sbom || true

        # Generate SBOM
        cargo sbom > betanet-c-sbom.json

        echo "✓ SBOM generated successfully"

    - name: Upload SBOM artifact
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v3
      with:
        name: betanet-c-sbom
        path: ffi/betanet-c/betanet-c-sbom.json

    - name: Upload C library artifacts
      if: github.event_name == 'push'
      uses: actions/upload-artifact@v3
      with:
        name: betanet-c-library
        path: |
          ffi/betanet-c/target/release/libbetanet_c.so
          ffi/betanet-c/include/betanet.h
          ffi/betanet-c/build/betanet.pc

  cross-platform-test:
    name: Cross-platform Build Test
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Build FFI library
      working-directory: ffi/betanet-c
      run: |
        cargo build --release
        cargo test --release

    - name: Verify artifacts
      working-directory: ffi/betanet-c
      shell: bash
      run: |
        # Check for platform-specific library
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          test -f target/release/betanet_c.dll || exit 1
          echo "✓ Windows DLL built successfully"
        elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
          test -f target/release/libbetanet_c.dylib || exit 1
          echo "✓ macOS dylib built successfully"
        fi

        # Check header generation
        test -f include/betanet.h || exit 1
        echo "✓ Header generated successfully"
