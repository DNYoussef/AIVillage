# Multi-stage build for TypeScript Bridge Orchestrator
# Production-ready Dockerfile with security hardening and optimization

# ===========================
# Stage 1: Dependencies
# ===========================
FROM node:20-alpine AS dependencies

# Security: Create non-root user
RUN addgroup -g 1001 -S aivillage && \
    adduser -S aivillage -u 1001

# Install security updates and required packages
RUN apk upgrade --no-cache && \
    apk add --no-cache \
        dumb-init \
        curl \
        ca-certificates \
        tzdata \
        tini

# Set working directory
WORKDIR /app

# Copy package files first (for better caching)
COPY package*.json ./
COPY tsconfig.json ./

# Install production dependencies only
RUN npm ci --only=production --no-audit --no-fund && \
    npm cache clean --force

# ===========================
# Stage 2: Build
# ===========================
FROM node:20-alpine AS builder

WORKDIR /app

# Copy package files
COPY package*.json ./
COPY tsconfig.json ./

# Install all dependencies (including dev)
RUN npm ci --no-audit --no-fund

# Copy source code
COPY src/ ./src/
COPY *.md ./

# Build TypeScript
RUN npm run build && \
    npm run test:unit || true && \
    npm prune --production

# ===========================
# Stage 3: Production
# ===========================
FROM node:20-alpine AS production

# Install security updates
RUN apk upgrade --no-cache && \
    apk add --no-cache \
        dumb-init \
        curl \
        ca-certificates \
        tzdata \
        python3 \
        py3-pip

# Create non-root user
RUN addgroup -g 1001 -S aivillage && \
    adduser -S aivillage -u 1001

# Set working directory
WORKDIR /app

# Copy built application from builder stage
COPY --from=builder --chown=aivillage:aivillage /app/dist ./dist
COPY --from=builder --chown=aivillage:aivillage /app/node_modules ./node_modules
COPY --from=builder --chown=aivillage:aivillage /app/package*.json ./

# Copy TypeScript bridge source for runtime
COPY --chown=aivillage:aivillage src/ ./src/

# Create necessary directories
RUN mkdir -p /app/logs /app/data /app/config && \
    chown -R aivillage:aivillage /app

# Install Python dependencies for bridge communication
RUN pip3 install --no-cache-dir \
    aiohttp==3.8.5 \
    asyncio-mqtt==0.13.0 \
    prometheus-client==0.17.1

# Security hardening
RUN rm -rf /tmp/* /var/cache/apk/* /root/.npm /usr/share/man /usr/share/doc

# Health check script
COPY --chown=aivillage:aivillage infrastructure/deployment/docker/healthcheck.js ./healthcheck.js

# Environment variables
ENV NODE_ENV=production \
    PORT=8080 \
    METRICS_PORT=9090 \
    PYTHON_BRIDGE_HOST=localhost \
    PYTHON_BRIDGE_PORT=9876 \
    CONSTITUTIONAL_TIER=Silver \
    PRIVACY_MODE=enhanced \
    TARGET_P95_LATENCY=75 \
    CIRCUIT_BREAKER_ENABLED=true \
    LOG_LEVEL=info \
    LOG_FORMAT=json

# Expose ports
EXPOSE 8080 8081 9090

# Switch to non-root user
USER aivillage

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD node healthcheck.js || exit 1

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Start the application
CMD ["node", "dist/src/bridge/BridgeOrchestrator.js"]

# ===========================
# Labels for container metadata
# ===========================
LABEL maintainer="AIVillage Team <team@aivillage.com>" \
      version="1.0.0" \
      description="AIVillage TypeScript Bridge Orchestrator" \
      component="bridge-orchestrator" \
      tier="production" \
      security.scan="enabled" \
      performance.target="75ms-p95"