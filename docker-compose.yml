version: '3.9'

services:
  # Main application services
  # NOTE: server.py is not included here as it's for development/testing only
  # Production deployments should use gateway and twin services

  twin:
    build: ./services/twin
    ports:
      - "8001:8001"
    expose:
      - "8001"
    environment:
      - TWIN_MODEL_PATH=${MODEL_PATH:-/models/small-llama.bin}
    labels:
      - "prometheus.scrape=true"
      - "prometheus.port=8001"
    volumes:
      - ./models:/models:ro
    networks:
      - ai-village-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  gateway:
    build: ./services/gateway
    ports:
      - "8000:8000"
    environment:
      - TWIN_URL=http://twin:8001
      - RATE_LIMIT_REQUESTS=${RATE_LIMIT_REQUESTS:-100}
      - RATE_LIMIT_WINDOW=${RATE_LIMIT_WINDOW:-60}
      - GATEWAY_ALLOW_ORIGINS=${GATEWAY_ALLOW_ORIGINS:-http://localhost}
    depends_on:
      - twin
    networks:
      - ai-village-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Credits ledger service
  credits-api:
    build:
      context: ./communications
      dockerfile: Dockerfile.credits-api
    ports:
      - "8002:8002"
    env_file: .env
    environment:
      - DATABASE_URL=postgresql://aivillage_user:${POSTGRES_PASSWORD}@postgres:5432/aivillage_credits
      - PROMETHEUS_URL=http://prometheus:9090
    depends_on:
      - postgres
    networks:
      - ai-village-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Credits earning worker (cron-like)
  credits-worker:
    build:
      context: ./communications
      dockerfile: Dockerfile.credits-worker
    env_file: .env
    environment:
      - DATABASE_URL=postgresql://aivillage_user:${POSTGRES_PASSWORD}@postgres:5432/aivillage_credits
      - PROMETHEUS_URL=http://prometheus:9090
      - CREDITS_API_URL=http://credits-api:8002
      - WORKER_INTERVAL=300  # 5 minutes
    depends_on:
      - credits-api
      - prometheus
    networks:
      - ai-village-net
    profiles:
      - monitoring
    restart: unless-stopped

  # PostgreSQL database for credits
  postgres:
    image: postgres:15
    container_name: ai-village-postgres
    env_file: .env
    environment:
      - POSTGRES_DB=aivillage_credits
      - POSTGRES_USER=aivillage_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - ai-village-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U aivillage_user -d aivillage_credits"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Neo4j database for hypergraph knowledge
  neo4j:
    image: neo4j:5.11-community
    container_name: ai-village-neo4j
    env_file: .env
    environment:
      - NEO4J_AUTH=neo4j/${NEO4J_PASSWORD}
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_apoc_export_file_enabled=true
      - NEO4J_apoc_import_file_enabled=true
      - NEO4J_apoc_import_file_use__neo4j__config=true
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    networks:
      - ai-village-net
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "${NEO4J_PASSWORD}", "MATCH (n) RETURN count(n)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: ai-village-redis
    env_file: .env
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ai-village-net
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Qdrant vector database for embeddings
  qdrant:
    image: qdrant/qdrant:latest
    container_name: ai-village-qdrant
    ports:
      - "6333:6333"  # REST API
      - "6334:6334"  # gRPC API
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
    networks:
      - ai-village-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  # HyperRAG MCP Server
  hyperag-mcp:
    build:
      context: .
      dockerfile: mcp_servers/hyperag/Dockerfile
    container_name: ai-village-hyperag-mcp
    ports:
      - "8765:8765"  # MCP WebSocket port
    env_file: .env
    environment:
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=${NEO4J_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - HYPERAG_JWT_SECRET=${HYPERAG_JWT_SECRET}
      - HYPERAG_LOG_LEVEL=${HYPERAG_LOG_LEVEL:-INFO}
    depends_on:
      - neo4j
      - redis
      - qdrant
    networks:
      - ai-village-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8765/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    profiles:
      - hyperag

  # Optional monitoring services (can be disabled)
  prometheus:
    image: prom/prometheus:v2.52.0
    container_name: ai-village-prometheus
    volumes:
      - ./monitoring/alerts.yml:/etc/prometheus/alerts.yml
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=7d'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    networks:
      - ai-village-net
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:11.0.0
    container_name: ai-village-grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    env_file: .env
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    ports:
      - "3000:3000"
    networks:
      - ai-village-net
    depends_on:
      - prometheus
    profiles:
      - monitoring

  pushgateway:
    image: prom/pushgateway:v1.6.2
    container_name: ai-village-pushgateway
    ports:
      - "9091:9091"
    networks:
      - ai-village-net
    profiles:
      - monitoring

volumes:
  prometheus_data:
  grafana_data:
  postgres_data:
  neo4j_data:
  neo4j_logs:
  neo4j_import:
  neo4j_plugins:
  redis_data:
  qdrant_data:

networks:
  ai-village-net:
    external: false
