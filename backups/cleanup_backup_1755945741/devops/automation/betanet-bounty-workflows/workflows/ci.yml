name: Betanet Bounty CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, nightly]
        exclude:
          # Exclude nightly on Windows and macOS for faster CI
          - os: windows-latest
            rust: nightly
          - os: macos-latest
            rust: nightly

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy

    - name: Cache Cargo
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --all-features -- -D warnings

    - name: Build
      run: cargo build --all-features

    - name: Run tests
      run: cargo test --all-features

    - name: Test C FFI
      run: |
        cd ffi/betanet-c
        cargo test

  fuzz:
    name: Fuzzing (Smoke Test)
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust nightly
      uses: dtolnay/rust-toolchain@nightly

    - name: Install cargo-fuzz
      run: cargo install cargo-fuzz

    - name: Cache Cargo
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target/
        key: ubuntu-fuzz-${{ hashFiles('**/Cargo.lock') }}

    - name: Run fuzzing smoke tests
      run: |
        # Run each fuzz target for 30 seconds
        export FUZZ_DURATION=30
        chmod +x tools/fuzz/fuzz-all.sh
        ./tools/fuzz/fuzz-all.sh || true

  bench:
    name: Benchmarks
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Cargo
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target/
        key: ubuntu-bench-${{ hashFiles('**/Cargo.lock') }}

    - name: Run benchmarks
      run: |
        chmod +x tools/bench/bench-all.sh
        ./tools/bench/bench-all.sh

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit

  sbom:
    name: Generate SBOM
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Cargo
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target/
        key: ubuntu-sbom-${{ hashFiles('**/Cargo.lock') }}

    - name: Build linter
      run: cargo build --bin betanet-linter

    - name: Generate SBOM
      run: cargo run --bin betanet-linter -- sbom --directory . --output betanet-sbom.json

    - name: Upload SBOM
      uses: actions/upload-artifact@v3
      with:
        name: betanet-sbom
        path: betanet-sbom.json

  masque-demo:
    name: QUIC/H3 + MASQUE Demo
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Cargo
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target/
        key: ubuntu-masque-${{ hashFiles('**/Cargo.lock') }}

    - name: Build MASQUE demo
      run: cargo build --package betanet-htx --example masque_demo

    - name: Run MASQUE demo test
      run: |
        # Run the MASQUE demo and capture output
        cargo run --package betanet-htx --example masque_demo --quiet

        # Verify transcript was generated
        TRANSCRIPT_FILE="betanet-bounty/artifacts/quic_masque_demo_20250816_163250_traffic.pcap.txt"
        if [ -f "$TRANSCRIPT_FILE" ]; then
          echo "‚úÖ MASQUE demo transcript generated successfully"

          # Verify transcript contains required elements
          if grep -q "MASQUE CONNECT-UDP Demo Transcript" "$TRANSCRIPT_FILE" && \
             grep -q "H3 Control Stream Establishment" "$TRANSCRIPT_FILE" && \
             grep -q "CONNECT-UDP" "$TRANSCRIPT_FILE" && \
             grep -q "UDP Datagram" "$TRANSCRIPT_FILE" && \
             grep -q "Demo Summary" "$TRANSCRIPT_FILE"; then
            echo "‚úÖ Transcript contains all required RFC 9298 elements"

            # Show summary statistics
            echo "üìä Demo Results:"
            grep -E "(Datagrams Sent|Datagrams Received|Success Rate|Protocol)" "$TRANSCRIPT_FILE"
          else
            echo "‚ùå Transcript missing required elements"
            exit 1
          fi
        else
          echo "‚ùå MASQUE demo transcript not generated"
          exit 1
        fi

    - name: Upload MASQUE transcript
      uses: actions/upload-artifact@v3
      with:
        name: masque-demo-transcript
        path: betanet-bounty/artifacts/quic_masque_demo_*.txt

  integration:
    name: AI Village Integration Tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        # Check out the full AI Village repo to test integration
        repository: ${{ github.repository }}
        path: aivillage

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache Cargo
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target/
        key: ubuntu-integration-${{ hashFiles('**/Cargo.lock') }}

    - name: Check AI Village integration points
      run: |
        cd aivillage/betanet-bounty
        make check-aivillage-integration

    - name: Build C FFI library
      run: |
        cd aivillage/betanet-bounty
        make build-ffi

    - name: Test Python bridge
      run: |
        cd aivillage/betanet-bounty/ffi/betanet-c/python
        python betanet_bridge.py

  release:
    name: Release Build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [test, fuzz, security, sbom, masque-demo, integration]
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Cargo
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target/
        key: ubuntu-release-${{ hashFiles('**/Cargo.lock') }}

    - name: Build release
      run: cargo build --release --all-features

    - name: Run delivery check
      run: make delivery-check

    - name: Package release artifacts
      run: |
        mkdir -p release/

        # Copy binaries
        cp target/release/betanet-linter release/
        cp target/release/libbetanet_c.so release/ || true
        cp target/release/libbitnet_c.a release/ || true

        # Copy headers
        cp ffi/betanet-c/include/betanet.h release/

        # Copy examples
        cp examples/*.rs release/

        # Copy documentation
        cp README.md release/
        cp LICENSE release/ || true

    - name: Upload release artifacts
      uses: actions/upload-artifact@v3
      with:
        name: betanet-bounty-release
        path: release/
