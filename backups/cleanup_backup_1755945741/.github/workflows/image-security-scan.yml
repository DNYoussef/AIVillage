name: Docker Image Security Scanning

on:
  push:
    branches: [main, develop]
    paths:
      - 'deploy/docker/**'
      - 'Dockerfile*'
      - '.github/workflows/image-security-scan.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'deploy/docker/**'
      - 'Dockerfile*'
  workflow_dispatch:
    inputs:
      scan_all_images:
        description: 'Scan all Docker images (not just changed)'
        required: false
        default: 'false'
        type: boolean
      severity_threshold:
        description: 'Fail build on vulnerabilities of this severity or higher'
        required: false
        default: 'HIGH'
        type: choice
        options:
          - 'LOW'
          - 'MEDIUM'
          - 'HIGH'
          - 'CRITICAL'

env:
  DOCKER_BUILDKIT: 1
  BUILDKIT_PROGRESS: plain
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ============================================
  # Detect Changed Docker Images
  # ============================================
  detect-changes:
    name: Detect Changed Images
    runs-on: ubuntu-latest
    outputs:
      changed-images: ${{ steps.changes.outputs.images }}
      scan-all: ${{ github.event.inputs.scan_all_images == 'true' || github.event_name == 'workflow_dispatch' }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Detect changed Docker files
        id: changes
        run: |
          # Define all Docker images we want to scan
          declare -A IMAGES=(
            ["gateway"]="deploy/docker/Dockerfile.gateway"
            ["twin"]="deploy/docker/Dockerfile.twin"
            ["credits-api"]="deploy/docker/Dockerfile.credits-api"
            ["credits-worker"]="deploy/docker/Dockerfile.credits-worker"
            ["hyperag-mcp"]="deploy/docker/Dockerfile.hyperag-mcp"
            ["agent-forge"]="deploy/docker/Dockerfile.agent-forge"
            ["compression-service"]="deploy/docker/Dockerfile.compression-service"
            ["betanet-gateway"]="deploy/docker/Dockerfile.betanet-gateway"
            ["scion-sidecar"]="deploy/docker/Dockerfile.scion-sidecar"
          )

          changed_images=()

          if [[ "${{ github.event.inputs.scan_all_images }}" == "true" ]]; then
            echo "Scanning all images (manual trigger)"
            for image in "${!IMAGES[@]}"; do
              changed_images+=("$image")
            done
          else
            echo "Detecting changed Dockerfiles..."
            for image in "${!IMAGES[@]}"; do
              dockerfile="${IMAGES[$image]}"
              if [[ -f "$dockerfile" ]]; then
                if git diff --name-only HEAD~1 HEAD | grep -q "$dockerfile"; then
                  echo "Changed: $dockerfile -> $image"
                  changed_images+=("$image")
                fi
              fi
            done
          fi

          # Convert array to JSON
          if [[ ${#changed_images[@]} -gt 0 ]]; then
            images_json=$(printf '"%s",' "${changed_images[@]}" | sed 's/,$//')
            echo "images=[$images_json]" >> $GITHUB_OUTPUT
            echo "Found changed images: ${changed_images[*]}"
          else
            echo "images=[]" >> $GITHUB_OUTPUT
            echo "No changed Docker images detected"
          fi

  # ============================================
  # Build and Scan Docker Images
  # ============================================
  scan-images:
    name: Scan ${{ matrix.image }}
    runs-on: ubuntu-latest
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.changed-images != '[]' }}
    strategy:
      fail-fast: false
      matrix:
        image: ${{ fromJSON(needs.detect-changes.outputs.changed-images) }}

    permissions:
      contents: read
      security-events: write
      packages: write

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image for scanning
        id: build
        run: |
          image_tag="aivillage-${{ matrix.image }}:scan-${{ github.sha }}"

          # Build the specific image
          case "${{ matrix.image }}" in
            "gateway")
              docker build -f deploy/docker/Dockerfile.gateway \
                -t "$image_tag" \
                --label "org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}" \
                --label "org.opencontainers.image.revision=${{ github.sha }}" \
                .
              ;;
            "twin")
              docker build -f deploy/docker/Dockerfile.twin \
                -t "$image_tag" \
                --label "org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}" \
                --label "org.opencontainers.image.revision=${{ github.sha }}" \
                .
              ;;
            "hyperag-mcp")
              docker build -f deploy/docker/Dockerfile.hyperag-mcp \
                -t "$image_tag" \
                --label "org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}" \
                --label "org.opencontainers.image.revision=${{ github.sha }}" \
                .
              ;;
            *)
              docker build -f "deploy/docker/Dockerfile.${{ matrix.image }}" \
                -t "$image_tag" \
                --label "org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}" \
                --label "org.opencontainers.image.revision=${{ github.sha }}" \
                .
              ;;
          esac

          echo "image-tag=$image_tag" >> $GITHUB_OUTPUT
          echo "Built image: $image_tag"

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.build.outputs.image-tag }}
          format: 'sarif'
          output: 'trivy-results-${{ matrix.image }}.sarif'
          severity: 'UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results-${{ matrix.image }}.sarif'

      - name: Run Trivy vulnerability scanner (JSON output)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.build.outputs.image-tag }}
          format: 'json'
          output: 'trivy-results-${{ matrix.image }}.json'
          severity: 'UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL'

      - name: Evaluate vulnerability threshold
        env:
          SEVERITY_THRESHOLD: ${{ github.event.inputs.severity_threshold || 'HIGH' }}
        run: |
          echo "Evaluating vulnerabilities against threshold: $SEVERITY_THRESHOLD"

          # Parse JSON results and check for threshold violations
          python3 << 'EOF'
          import json
          import sys
          import os

          threshold = os.environ.get('SEVERITY_THRESHOLD', 'HIGH')
          severity_levels = {'UNKNOWN': 0, 'LOW': 1, 'MEDIUM': 2, 'HIGH': 3, 'CRITICAL': 4}
          threshold_level = severity_levels.get(threshold, 3)

          with open('trivy-results-${{ matrix.image }}.json', 'r') as f:
              results = json.load(f)

          blocking_vulns = []
          total_vulns = 0

          for result in results.get('Results', []):
              for vuln in result.get('Vulnerabilities', []):
                  total_vulns += 1
                  severity = vuln.get('Severity', 'UNKNOWN')
                  if severity_levels.get(severity, 0) >= threshold_level:
                      blocking_vulns.append({
                          'id': vuln.get('VulnerabilityID', 'Unknown'),
                          'severity': severity,
                          'title': vuln.get('Title', 'No title'),
                          'pkg': vuln.get('PkgName', 'Unknown package')
                      })

          print(f"Total vulnerabilities found: {total_vulns}")
          print(f"Vulnerabilities at or above {threshold} severity: {len(blocking_vulns)}")

          if blocking_vulns:
              print(f"\n❌ BLOCKING VULNERABILITIES FOUND ({threshold}+ severity):")
              for vuln in blocking_vulns[:10]:  # Show first 10
                  print(f"  - {vuln['id']} ({vuln['severity']}): {vuln['title']} in {vuln['pkg']}")

              if len(blocking_vulns) > 10:
                  print(f"  ... and {len(blocking_vulns) - 10} more")

              sys.exit(1)
          else:
              print(f"✅ No vulnerabilities found at or above {threshold} severity level")
          EOF

      - name: Generate vulnerability summary
        if: always()
        run: |
          echo "## 🐳 Docker Image Security Scan Results - ${{ matrix.image }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ -f "trivy-results-${{ matrix.image }}.json" ]]; then
            python3 << 'EOF' >> $GITHUB_STEP_SUMMARY
          import json

          with open('trivy-results-${{ matrix.image }}.json', 'r') as f:
              results = json.load(f)

          severity_counts = {'CRITICAL': 0, 'HIGH': 0, 'MEDIUM': 0, 'LOW': 0, 'UNKNOWN': 0}

          for result in results.get('Results', []):
              for vuln in result.get('Vulnerabilities', []):
                  severity = vuln.get('Severity', 'UNKNOWN')
                  if severity in severity_counts:
                      severity_counts[severity] += 1

          print("| Severity | Count |")
          print("|----------|-------|")
          for severity, count in severity_counts.items():
              if count > 0:
                  emoji = {'CRITICAL': '🔴', 'HIGH': '🟠', 'MEDIUM': '🟡', 'LOW': '🔵', 'UNKNOWN': '⚪'}.get(severity, '⚪')
                  print(f"| {emoji} {severity} | {count} |")

          total = sum(severity_counts.values())
          print(f"\n**Total vulnerabilities: {total}**")
          EOF
          fi

      - name: Upload scan artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-results-${{ matrix.image }}
          path: |
            trivy-results-${{ matrix.image }}.sarif
            trivy-results-${{ matrix.image }}.json
          retention-days: 30
          if-no-files-found: warn

  # ============================================
  # Security Summary
  # ============================================
  security-summary:
    name: Security Scan Summary
    needs: [detect-changes, scan-images]
    if: always() && needs.detect-changes.outputs.changed-images != '[]'
    runs-on: ubuntu-latest
    steps:
      - name: Download all scan results
        uses: actions/download-artifact@v4

      - name: Generate comprehensive security report
        run: |
          echo "## 🔒 Docker Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Scan triggered by:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Severity threshold:** ${{ github.event.inputs.severity_threshold || 'HIGH' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Count total artifacts and summarize results
          total_images=$(find . -name "trivy-results-*.json" | wc -l)
          echo "**Images scanned:** $total_images" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ $total_images -gt 0 ]]; then
            echo "### Scan Results by Image" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            for result_file in $(find . -name "trivy-results-*.json"); do
              image_name=$(basename "$result_file" .json | sed 's/trivy-results-//')
              echo "#### 🐳 $image_name" >> $GITHUB_STEP_SUMMARY

              python3 << EOF >> $GITHUB_STEP_SUMMARY
          import json
          import sys

          try:
              with open('$result_file', 'r') as f:
                  results = json.load(f)

              severity_counts = {'CRITICAL': 0, 'HIGH': 0, 'MEDIUM': 0, 'LOW': 0, 'UNKNOWN': 0}

              for result in results.get('Results', []):
                  for vuln in result.get('Vulnerabilities', []):
                      severity = vuln.get('Severity', 'UNKNOWN')
                      if severity in severity_counts:
                          severity_counts[severity] += 1

              total = sum(severity_counts.values())
              if total == 0:
                  print("✅ No vulnerabilities found")
              else:
                  for severity, count in severity_counts.items():
                      if count > 0:
                          emoji = {'CRITICAL': '🔴', 'HIGH': '🟠', 'MEDIUM': '🟡', 'LOW': '🔵', 'UNKNOWN': '⚪'}.get(severity, '⚪')
                          print(f"- {emoji} {severity}: {count}")
          except Exception as e:
              print(f"Error processing results: {e}")
          EOF
              echo "" >> $GITHUB_STEP_SUMMARY
            done
          else
            echo "No scan results found." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Check job status
        run: |
          echo "Security scan completed successfully ✅"
          echo "Results have been uploaded to GitHub Security tab and artifacts"
