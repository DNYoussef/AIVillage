EvoMerge: Evolutionary Model Merging System

1. Overview:
EvoMerge is an advanced system designed to merge multiple language models using evolutionary algorithms. It starts with initial models, creates a population of merged models, and uses tournament selection to evolve towards a single, optimized final model.

2. System Components:
   a. Configuration (config.py)
   b. Model Merger (merger.py)
   c. Evolutionary Tournament (evolutionary_tournament.py)
   d. Utility Functions (utils.py)
   e. GGUF Utilities (gguf_utils.py)
   f. Integration Tests (integration_tests.py)
   g. Performance Benchmarks (benchmarks.py)
   h. Command-line Interface (cli.py)
   i. Visualization (visualization.py)
   j. Logging Configuration (logging_config.py)

3. How the System Works:
   a. Initial Setup:
      - Define the configuration using the Configuration class in config.py.
      - Specify the initial models using ModelReference objects.

   b. Creating the Initial Population:
      - The EvolutionaryMerger class creates the initial population of merged models.
      - It uses different combinations of merge techniques to create diverse merged models.

   c. Evolutionary Process:
      - The evolve() method runs the evolutionary algorithm.
      - For each generation:
        i. Evaluate all models in the population.
        ii. Select top performers using tournament selection.
        iii. Create new population through mutation and merging of lower performers.
      - This process continues for a specified number of generations or until early stopping criteria are met.

   d. Final Model Selection:
      - After the evolutionary process, the best-performing model is selected as the final output.

4. Key Features:
   a. Flexible model merging techniques (Parameter Sharing, Deep Fusion, and combinations)
   b. Evolutionary optimization of merged models
   c. Parallel model evaluation for improved performance
   d. Visualization of fitness progression and benchmark results
   e. Comprehensive CLI for easy interaction
   f. Integration with Hugging Face models
   g. GPU support for accelerated computations
   h. Customizable configuration for merge and evolution settings

5. Usage:
   a. Command-line Interface:
      - Run evolutionary tournament: python -m agent_forge.evomerge.cli --run
      - Evaluate a merged model: python -m agent_forge.evomerge.cli --evaluate <model_path>
      - Generate text: python -m agent_forge.evomerge.cli --generate <model_path> --prompt "Your prompt here"
      - Generate config interactively: python -m agent_forge.evomerge.cli --generate-config
      - Use custom models: python -m agent_forge.evomerge.cli --run --model1 <model1_path> --model2 <model2_path> --model3 <model3_path>

   b. Programmatic Usage:
      from agent_forge.evomerge import create_default_config, run_evolutionary_tournament
      
      config = create_default_config()
      best_model = run_evolutionary_tournament(config)

      # Use the best model
      from transformers import AutoModelForCausalLM, AutoTokenizer

      model = AutoModelForCausalLM.from_pretrained(best_model)
      tokenizer = AutoTokenizer.from_pretrained(best_model)

      # Generate text with the merged model
      prompt = "Once upon a time"
      generated_text = generate_text(model, tokenizer, prompt, max_length=100)
      print(generated_text)

6. Configuration:
   The system uses a Configuration object (defined in config.py) that includes:
   - ModelReference: Specifies name and path for each model
   - MergeSettings: Defines merge method, techniques, and parameters
   - EvolutionSettings: Sets population size, generations, mutation rate, etc.

7. Merge Techniques:
   - Parameter Sharing (PS): linear, slerp, ties, dare, task_arithmetic
   - Deep Fusion (DFS): frankenmerge, dfs
   - Combined: ps_dfs

8. Evaluation and Benchmarking:
   - Model evaluation based on perplexity and coherence scores
   - Parallel evaluation for improved performance
   - Comprehensive benchmarking of merge and evolution processes
   
   To run benchmarks:
   ```
   python -m agent_forge.evomerge.benchmarks
   ```

9. Visualization:
   - Fitness progression over generations
   - Benchmark comparisons between models
   - HTML report generation for detailed results

10. Testing:
    a. Unit Tests (test_evomerge.py)
    b. Integration Tests (integration_tests.py)

11. Logging:
    - Configurable logging with file rotation (logging_config.py)

12. GPU Support:
    - Automatic GPU detection and utilization when available

13. Error Handling:
    - Custom EvoMergeException for specific error scenarios

14. Using Hugging Face Model Links:
    The CLI supports direct input of Hugging Face model links for the initial models:
    
    a. Specify models using their Hugging Face model IDs:
       ```
       python -m agent_forge.evomerge.cli --run --model1 bert-base-uncased --model2 roberta-base --model3 distilbert-base-uncased
       ```

    b. Mix and match Hugging Face model IDs with local paths:
       ```
       python -m agent_forge.evomerge.cli --run --model1 bert-base-uncased --model2 /path/to/local/model --model3 distilbert-base-uncased
       ```

    c. If fewer than three models are specified, the system will use default models to fill in the gaps.

For detailed API references and advanced usage, refer to the individual module docstrings and comments within the source code.

Note: Ensure you have sufficient computational resources, especially when working with large language models. GPU acceleration is recommended for optimal performance. When using Hugging Face model links, make sure you have a stable internet connection to download the models.
