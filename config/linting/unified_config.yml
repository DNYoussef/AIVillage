# Unified Linting Configuration for AIVillage
# MCP-Enhanced Multi-Agent Code Review System

version: "2.1.0"
mcp_integration:
  github_automation: true
  sequential_thinking: true
  memory_learning: true
  context7_caching: true

# Python Linting Configuration (Unified)
python:
  ruff:
    line_length: 120
    target_version: "py311"
    select:
      - "E"    # pycodestyle errors
      - "W"    # pycodestyle warnings  
      - "F"    # Pyflakes
      - "I"    # isort
      - "UP"   # pyupgrade
      - "B"    # flake8-bugbear
      - "C4"   # flake8-comprehensions
      - "SIM"  # flake8-simplify
      - "S"    # bandit (security)
      - "N"    # pep8-naming
      - "BLE"  # flake8-blind-except
      - "RUF"  # Ruff-specific
    ignore:
      - "E501"    # Line too long (handled by black)
      - "F821"    # Undefined name (too many false positives in dynamic imports)
      - "S101"    # Use of assert (common in tests)
      - "S311"    # random module (not cryptographically secure, but okay for non-security)
    exclude:
      - "experimental"
      - "deprecated"
      - "archive" 
      - "tmp"
      - "tools/development/build"
      - "**/__pycache__"
      - "**/.pytest_cache"
    per_file_ignores:
      "tests/*": ["S101", "S106", "S108"]  # Allow asserts and hardcoded values in tests
      "scripts/*": ["S602", "S603"]       # Allow subprocess usage in scripts
    fix: true
    show_fixes: true

  black:
    line_length: 120
    target_version: ["py311"]
    skip_string_normalization: false
    exclude: |
      /(
        experimental
        | deprecated
        | archive
        | tmp
        | tools/development/build
      )/
    preview: false

  mypy:
    python_version: "3.11"
    ignore_missing_imports: true
    no_strict_optional: true
    warn_return_any: false
    warn_unused_configs: true
    warn_redundant_casts: true
    warn_unused_ignores: false
    strict_equality: true
    check_untyped_defs: true
    exclude: |
      (?x)(
        experimental|
        deprecated|
        archive|
        tmp|
        tools/development/build
      )
    plugins:
      - "pydantic.mypy"

  bandit:
    exclude_dirs:
      - "tests"
      - "experimental"
      - "deprecated"
      - "tools/development"
    severity_level: "medium"
    confidence_level: "medium"
    format: "json"
    recursive: true
    ignore_nosec: false
    skips:
      - "B101"  # Test for use of assert (handled separately)
      - "B601"  # paramiko_calls (legitimate usage)
    reports:
      - "json"
      - "txt"

  isort:
    profile: "black"
    line_length: 120
    multi_line_output: 3
    force_grid_wrap: 0
    use_parentheses: true
    ensure_newline_before_comments: true
    combine_as_imports: true
    skip_glob:
      - "experimental/*"
      - "deprecated/*"
      - "archive/*"
      - "tmp/*"

# Frontend Linting Configuration (Unified)
frontend:
  eslint:
    root: true
    parser: "@typescript-eslint/parser"
    parserOptions:
      ecmaVersion: 2022
      sourceType: "module"
      ecmaFeatures:
        jsx: true
    plugins:
      - "@typescript-eslint"
      - "react"
      - "react-hooks"
      - "security"
      - "import"
    extends:
      - "eslint:recommended"
      - "@typescript-eslint/recommended"
      - "plugin:react/recommended"
      - "plugin:react-hooks/recommended"
      - "plugin:security/recommended"
      - "prettier"
    env:
      browser: true
      node: true
      es2022: true
    rules:
      # Error Prevention
      "no-console": "warn"
      "no-debugger": "error"
      "no-unused-vars": "off"  # Handled by TypeScript
      "@typescript-eslint/no-unused-vars": "error"
      
      # Security
      "security/detect-object-injection": "warn"
      "security/detect-non-literal-regexp": "warn"
      "security/detect-unsafe-regex": "error"
      
      # Code Quality
      "prefer-const": "error"
      "no-var": "error"
      "eqeqeq": "error"
      "curly": "error"
      
      # React Best Practices
      "react/prop-types": "off"  # Using TypeScript
      "react/react-in-jsx-scope": "off"  # Not needed in React 17+
      "react-hooks/exhaustive-deps": "warn"
      
      # Import Organization
      "import/order": ["error", {
        "groups": [
          "builtin",
          "external", 
          "internal",
          "parent",
          "sibling",
          "index"
        ],
        "newlines-between": "always"
      }]
    ignorePatterns:
      - "node_modules/"
      - "dist/"
      - "build/"
      - "coverage/"
      - "*.min.js"

  prettier:
    printWidth: 120
    tabWidth: 2
    useTabs: false
    semi: true
    singleQuote: true
    quoteProps: "as-needed"
    jsxSingleQuote: false
    trailingComma: "es5"
    bracketSpacing: true
    bracketSameLine: false
    arrowParens: "avoid"
    endOfLine: "lf"
    embeddedLanguageFormatting: "auto"
    ignore:
      - "node_modules"
      - "dist"
      - "build"
      - "coverage"
      - "*.min.js"
      - "*.min.css"

  typescript:
    strict: true
    noImplicitAny: true
    strictNullChecks: true
    strictFunctionTypes: true
    noImplicitReturns: true
    noUnusedLocals: true
    noUnusedParameters: true
    exactOptionalPropertyTypes: true
    target: "ES2022"
    module: "ESNext"
    moduleResolution: "node"
    allowSyntheticDefaultImports: true
    esModuleInterop: true
    skipLibCheck: true
    forceConsistentCasingInFileNames: true
    resolveJsonModule: true
    isolatedModules: true
    noEmit: true
    jsx: "react-jsx"

  stylelint:
    extends:
      - "stylelint-config-standard"
      - "stylelint-config-prettier"
    plugins:
      - "stylelint-order"
      - "stylelint-scss"
    rules:
      "order/properties-alphabetical-order": true
      "declaration-empty-line-before": null
      "rule-empty-line-before": null
      "scss/at-import-partial-extension": null

# Security Linting Configuration (Cross-Language)
security:
  block_on_critical: true
  auto_fix: false
  report_format: "sarif"
  fail_on_severity: "HIGH"
  
  detect_secrets:
    baseline: ".secrets.baseline"
    exclude_files: |
      .*\.git/.*
      .*node_modules/.*
      .*\.pytest_cache/.*
      .*__pycache__/.*
      .*\.coverage
      .*coverage\.xml
    exclude_lines: |
      # secrets-exclude-line
      # pragma: allowlist secret
    plugins:
      - "ArtifactoryDetector"
      - "AWSKeyDetector"
      - "AzureStorageKeyDetector"
      - "Base64HighEntropyString"
      - "BasicAuthDetector"
      - "CloudantDetector"
      - "GitHubTokenDetector"
      - "HexHighEntropyString"
      - "IbmCloudIamDetector"
      - "IbmCosHmacDetector"
      - "JwtTokenDetector"
      - "KeywordDetector"
      - "MailchimpDetector"
      - "NpmDetector"
      - "PrivateKeyDetector"
      - "SlackDetector"
      - "SoftlayerDetector"
      - "SquareOAuthDetector"
      - "StripeDetector"
      - "TwilioKeyDetector"

  semgrep:
    config:
      - "auto"
      - "security"
      - "owasp-top-ten"
      - "cwe-top-25"
    severity: ["ERROR", "WARNING"]
    exclude_dirs:
      - "tests"
      - "experimental"
      - "node_modules"
      - "vendor"
    output_format: "sarif"
    metrics: "off"
    quiet: false
    verbose: false

  pip_audit:
    format: "json"
    cache_dir: ".pip-audit-cache"
    local: false
    require_hashes: false
    vulnerability_service: "pypi"
    ignore_vulns: []  # Add CVE IDs to ignore if needed
    fix: false
    dry_run: false

  safety:
    json: true
    full_report: true
    cache: true
    ignore: []  # Add vulnerability IDs to ignore if needed

# Documentation Linting
documentation:
  markdownlint:
    extends: "markdownlint/style/prettier"
    rules:
      MD013: false  # Line length (handled by prettier)
      MD033: false  # HTML allowed
      MD041: false  # First line need not be h1
    ignore:
      - "node_modules"
      - "CHANGELOG.md"
      - "vendor"

  textlint:
    plugins:
      - "@textlint/markdown"
    rules:
      "@textlint-rule/no-dead-link": true
      "terminology": {
        "defaultTerms": false,
        "terms": "config/textlint-terms.json"
      }

# Quality Thresholds and Gates
quality_gates:
  security:
    critical: 0
    high: 0
    medium: 5
    block_on_critical: true
    block_on_high: true
    
  performance:
    regression_threshold: 0.05  # 5% performance regression
    complexity_limit: 10
    max_execution_time: 300     # 5 minutes per tool
    
  style:
    max_total_issues: 100
    max_critical_issues: 0
    max_issues_per_file: 10
    
  coverage:
    minimum: 60
    target: 80
    block_on_minimum: false
    
  maintainability:
    min_overall_score: 60.0
    min_security_score: 80.0
    max_technical_debt_ratio: 0.15

# GitHub Integration Settings
github_integration:
  auto_pr_checks: true
  auto_fix_commits: true
  quality_gates: true
  block_merge_on_critical: true
  
  required_status_checks:
    - "unified-linting/python"
    - "unified-linting/frontend" 
    - "unified-linting/security"
    - "unified-linting/quality-gate"
  
  auto_fix_tools:
    - "black"
    - "prettier"
    - "ruff --fix"
    - "eslint --fix"
  
  pr_comment_template: |
    ## üîç Unified Code Quality Report
    
    **Overall Quality Score**: {overall_score}/100
    **Security Score**: {security_score}/100
    **Quality Gate Status**: {quality_gate_status}
    
    ### üìä Issues Summary
    - **Total Issues**: {total_issues}
    - **Critical Issues**: {critical_issues}  
    - **Security Issues**: {security_issues}
    - **Performance Issues**: {performance_issues}
    - **Style Issues**: {style_issues}
    
    ### üîß Tools Run
    {tools_summary}
    
    ### üí° Recommendations
    {recommendations}
    
    ### üìù Next Steps
    {next_steps}
    
    ---
    *Generated by AIVillage Unified Linting Pipeline with MCP Integration*

  workflow_dispatch_inputs:
    run_full_scan:
      description: "Run comprehensive quality scan with all tools"
      required: false
      default: false
      type: boolean
    target_languages:
      description: "Comma-separated list of languages to lint (python,frontend,security)"
      required: false
      default: "python,frontend,security"
      type: string
    skip_cache:
      description: "Skip performance cache and run fresh scans"
      required: false
      default: false
      type: boolean

# MCP Server Integration
mcp_servers:
  github:
    enabled: true
    workflows: true
    checks: true
    automations: true
    
  sequential_thinking:
    enabled: true
    domain: "code-quality-analysis"
    optimization: "pattern-recognition"
    
  memory:
    enabled: true
    category: "linting-patterns"
    learning: true
    retention_days: 30
    
  context7:
    enabled: true
    cache_type: "linting-results"
    performance: true
    ttl_hours: 24

# Performance Optimization
performance:
  parallel_execution: true
  max_concurrent_tools: 4
  cache_results: true
  cache_ttl_hours: 24
  timeout_per_tool_seconds: 300
  
  tool_priorities:
    - "ruff"        # Fast syntax/style checks first
    - "black"       # Quick formatting check
    - "eslint"      # Frontend syntax checks
    - "detect-secrets" # Fast secret scanning
    - "mypy"        # Slower type checking
    - "bandit"      # Security analysis
    - "semgrep"     # Deep security analysis
    - "prettier"    # Frontend formatting
    - "typescript"  # TypeScript compilation
    - "pip-audit"   # Dependency scanning
    - "stylelint"   # CSS linting

# Reporting and Analytics  
reporting:
  formats: ["json", "sarif", "html", "markdown"]
  include_metrics: true
  include_trends: true
  retention_days: 90
  
  dashboard_metrics:
    - "quality_score_trend"
    - "issues_by_type"
    - "security_findings_trend"
    - "tool_execution_times"
    - "false_positive_rate"
    - "fix_rate"
  
  export_formats:
    - "prometheus"  # For monitoring integration
    - "datadog"     # APM integration
    - "elasticsearch"  # Log aggregation

# Tool-Specific Advanced Configuration
advanced:
  ruff:
    enable_preview: false
    unsafe_fixes: false
    respect_gitignore: true
    force_exclude: true
    
  mypy:
    cache_dir: ".mypy_cache"
    sqlite_cache: true
    incremental: true
    
  eslint:
    cache: true
    cache_location: ".eslintcache"
    fix_dry_run: false
    
  bandit:
    aggregate: "vuln"
    format_custom_template: false
    msg_template: "{abspath}:{line}: {test_id}[bandit]: {severity}: {msg}"
    
  semgrep:
    enable_metrics: false
    disable_version_check: true
    force_color: false
    
# Development and Testing
development:
  test_mode: false
  dry_run: false
  debug_logging: false
  mock_mcp_servers: false
  
  test_configurations:
    minimal:
      tools: ["ruff", "black"]
      thresholds: {"security": {"critical": 0}}
    standard:
      tools: ["ruff", "black", "mypy", "eslint", "bandit"]
    comprehensive:
      tools: "all"
      include_experimental: false