# Cognate 25M Validation Configuration
# Comprehensive validation framework for 25M parameter Cognate Refiner

name: "cognate_25m_validation"
version: "1.0.0" 
description: "Validation configuration for 25M Cognate Refiner system"

# Model Validation Framework
model_validation:
  # Parameter count validation
  parameter_validation:
    # Target parameters
    target_count: 25000000
    tolerance: 2000000         # ±2M tolerance (relaxed for development)
    strict_tolerance: 1000000  # ±1M for production
    
    # Parameter breakdown validation
    component_validation:
      embeddings:
        expected_ratio: 0.25   # ~25% of total parameters
        tolerance: 0.05
        
      transformer_layers:
        expected_ratio: 0.50   # ~50% of total parameters
        tolerance: 0.10
        
      heads:
        expected_ratio: 0.25   # ~25% of total parameters (edit + halting)
        tolerance: 0.05
        
      memory_controllers:
        expected_ratio: 0.04   # ~4% of total parameters
        tolerance: 0.02
        
    # Validation tests
    tests:
      - "total_parameter_count"
      - "trainable_parameter_count"
      - "parameter_dtype_consistency"
      - "parameter_device_consistency"
      - "parameter_initialization_check"
  
  # Architecture validation
  architecture_validation:
    # Dimension consistency
    dimension_checks:
      - name: "d_model_head_divisibility"
        test: "d_model % n_heads == 0"
        description: "Model dimension must be divisible by number of heads"
        
      - name: "head_dimension_reasonable"
        test: "32 <= (d_model / n_heads) <= 128"
        description: "Head dimension should be reasonable"
        
      - name: "ffn_expansion_reasonable"
        test: "2 <= ffn_mult <= 8"
        description: "FFN expansion factor should be reasonable"
        
    # Layer structure validation
    layer_validation:
      - "transformer_layer_count"
      - "attention_head_consistency"
      - "ffn_dimension_consistency"
      - "layer_norm_placement"
      
    # Memory architecture validation
    memory_architecture:
      - "memory_dimension_matches_model"
      - "memory_capacity_reasonable"
      - "memory_topk_valid"
      - "memory_cross_attention_layers"
      
  # Functional validation
  functional_validation:
    # Forward pass validation
    forward_pass:
      # Basic forward pass
      basic_forward:
        input_shapes: [[1, 10], [2, 20], [4, 50]]
        attention_mask: true
        test_gradients: true
        
      # Memory-augmented forward pass
      memory_forward:
        test_memory_reading: true
        test_memory_writing: true
        test_memory_cross_attention: true
        
      # ACT forward pass
      act_forward:
        test_halting_computation: true
        test_pondering_steps: true
        test_adaptive_computation: true
        
    # Generation validation
    generation:
      # Basic generation
      basic_generation:
        max_new_tokens: 32
        temperature: 0.8
        test_coherence: true
        
      # Memory-persistent generation
      memory_generation:
        test_memory_persistence: true
        test_context_retention: true
        
    # Training step validation
    training_validation:
      # Gradient computation
      gradient_tests:
        test_gradient_flow: true
        test_gradient_norms: true
        test_gradient_accumulation: true
        
      # Loss computation
      loss_tests:
        test_language_modeling_loss: true
        test_act_loss: true
        test_memory_losses: true
        test_composite_loss: true

# Training Validation
training_validation:
  # Pre-training validation
  pre_training:
    # Dataset validation
    dataset_validation:
      test_data_loading: true
      test_batch_composition: true
      test_sequence_packing: true
      validate_tokenization: true
      
    # Training loop validation
    training_loop:
      # Optimization validation
      optimization_tests:
        test_optimizer_step: true
        test_learning_rate_scheduling: true
        test_gradient_clipping: true
        
      # Memory system training
      memory_training:
        test_memory_updates: true
        test_surprise_novelty_gating: true
        test_memory_consolidation: true
        
      # ACT training
      act_training:
        test_pondering_loss: true
        test_halting_decisions: true
        test_computational_efficiency: true
        
    # Checkpointing validation
    checkpointing:
      test_checkpoint_saving: true
      test_checkpoint_loading: true
      test_state_dict_consistency: true
      test_memory_bank_persistence: true
      
  # Training dynamics validation
  training_dynamics:
    # Convergence validation
    convergence:
      # Loss convergence
      loss_convergence:
        monitor_loss_decreasing: true
        detect_loss_plateaus: true
        validate_loss_smoothness: true
        
      # Gradient validation
      gradient_health:
        monitor_gradient_norms: true
        detect_gradient_explosions: true
        detect_gradient_vanishing: true
        
    # Memory system dynamics
    memory_dynamics:
      memory_utilization:
        track_memory_bank_usage: true
        validate_read_write_balance: true
        monitor_memory_turnover: true
        
      memory_quality:
        test_memory_coherence: true
        validate_retrieval_accuracy: true
        monitor_memory_diversity: true
        
    # ACT dynamics
    act_dynamics:
      pondering_analysis:
        track_average_steps: true
        validate_step_distribution: true
        monitor_efficiency_trends: true
        
      halting_analysis:
        track_halting_accuracy: true
        validate_early_stopping: true
        monitor_computational_waste: true

# Performance Validation
performance_validation:
  # Speed and efficiency
  performance_benchmarks:
    # Training performance
    training_performance:
      target_tokens_per_second: 100
      max_training_time_per_step_ms: 1000
      memory_usage_limit_gb: 8
      
    # Inference performance
    inference_performance:
      target_latency_ms: 200
      target_throughput_tokens_per_second: 50
      max_memory_usage_gb: 4
      
    # Memory system performance
    memory_performance:
      max_memory_read_time_ms: 10
      max_memory_write_time_ms: 15
      memory_retrieval_accuracy_target: 0.8
      
    # ACT performance
    act_performance:
      target_average_steps: 2.0    # For inference
      max_pondering_overhead: 0.2   # 20% overhead
      halting_accuracy_target: 0.9
      
  # Resource utilization
  resource_validation:
    # Memory validation
    memory_usage:
      peak_memory_training_gb: 8
      peak_memory_inference_gb: 4
      memory_leak_detection: true
      
    # Compute validation
    compute_usage:
      cpu_utilization_max: 0.8
      gpu_utilization_target: 0.7
      
    # I/O validation
    io_performance:
      data_loading_bottleneck_detection: true
      checkpoint_save_time_max_seconds: 30

# Quality Validation
quality_validation:
  # Model quality metrics
  quality_metrics:
    # Language modeling quality
    language_modeling:
      perplexity_targets:
        validation_perplexity_max: 50
        test_perplexity_max: 60
        
      # Generation quality
      generation_quality:
        coherence_score_min: 0.7
        fluency_score_min: 0.8
        relevance_score_min: 0.7
        
    # Task-specific quality
    task_performance:
      # Reasoning tasks
      reasoning:
        logical_consistency_min: 0.8
        step_coherence_min: 0.7
        conclusion_validity_min: 0.8
        
      # Memory tasks
      memory_tasks:
        context_retention_min: 0.8
        long_range_dependency_min: 0.7
        memory_coherence_min: 0.8
        
      # Code understanding
      code_tasks:
        syntax_understanding_min: 0.9
        semantic_understanding_min: 0.7
        bug_detection_min: 0.6
        
  # Robustness validation
  robustness:
    # Input robustness
    input_robustness:
      # Sequence length robustness
      variable_length_inputs: true
      max_sequence_stress_test: true
      empty_input_handling: true
      
      # Content robustness
      noisy_input_handling: true
      out_of_domain_inputs: true
      adversarial_input_resistance: false  # Future work
      
    # Memory robustness
    memory_robustness:
      memory_bank_overflow_handling: true
      corrupted_memory_recovery: true
      memory_reset_recovery: true
      
    # ACT robustness
    act_robustness:
      extreme_pondering_handling: true
      halting_failure_recovery: true
      computational_budget_limits: true

# Integration Validation
integration_validation:
  # Pipeline integration
  pipeline_integration:
    # Agent Forge pipeline
    agent_forge:
      phase_controller_compatibility: true
      config_system_integration: true
      metric_collection_integration: true
      handoff_validation: true
      
    # Phase transition validation
    phase_transitions:
      cognate_to_evomerge:
        model_format_compatibility: true
        metadata_preservation: true
        configuration_handoff: true
        
  # System integration
  system_integration:
    # Hardware compatibility
    hardware_compatibility:
      cpu_inference_validation: true
      gpu_training_validation: true
      mixed_precision_compatibility: true
      
    # Software compatibility
    software_compatibility:
      pytorch_version_compatibility: true
      transformers_compatibility: true
      tokenizer_compatibility: true
      
  # Deployment integration
  deployment_integration:
    # Model serving
    serving_validation:
      huggingface_hub_compatibility: true
      save_pretrained_functionality: true
      from_pretrained_functionality: true
      
    # Configuration persistence
    config_persistence:
      config_save_load_cycle: true
      memory_bank_persistence: true
      training_state_persistence: true

# Validation Automation
automation:
  # Automated validation pipeline
  validation_pipeline:
    # Continuous validation
    continuous_validation:
      run_on_code_changes: true
      run_on_config_changes: true
      run_on_schedule: "daily"
      
    # Validation stages
    stages:
      # Stage 1: Quick validation
      quick_validation:
        duration_max_minutes: 5
        tests:
          - "parameter_count_check"
          - "basic_forward_pass"
          - "simple_training_step"
          
      # Stage 2: Standard validation
      standard_validation:
        duration_max_minutes: 30
        tests:
          - "comprehensive_architecture_validation"
          - "training_loop_validation"
          - "performance_benchmarks"
          
      # Stage 3: Comprehensive validation
      comprehensive_validation:
        duration_max_minutes: 120
        tests:
          - "full_training_simulation"
          - "quality_metrics_validation"
          - "integration_testing"
          
  # Validation reporting
  reporting:
    # Report generation
    report_generation:
      generate_html_report: true
      generate_json_summary: true
      generate_failure_analysis: true
      
    # Report distribution
    distribution:
      email_notifications: false
      slack_notifications: false
      file_system_reports: true
      
    # Report retention
    retention:
      keep_reports_days: 30
      archive_comprehensive_reports: true

# Validation Environments
environments:
  # Development validation
  development:
    # Relaxed validation for development
    parameter_validation.tolerance: 5000000
    performance_validation.training_performance.target_tokens_per_second: 50
    quality_validation.quality_metrics.language_modeling.validation_perplexity_max: 100
    
    # Quick validation only
    automation.validation_pipeline.default_stage: "quick_validation"
    
  # Staging validation
  staging:
    # Production-like validation
    parameter_validation.tolerance: 1000000
    quality_validation.quality_metrics.language_modeling.validation_perplexity_max: 60
    
    # Standard validation
    automation.validation_pipeline.default_stage: "standard_validation"
    
  # Production validation
  production:
    # Strict validation
    parameter_validation.tolerance: 500000
    quality_validation.quality_metrics.language_modeling.validation_perplexity_max: 50
    
    # Comprehensive validation
    automation.validation_pipeline.default_stage: "comprehensive_validation"
    
    # Additional production checks
    additional_validations:
      security_scan: true
      performance_regression_test: true
      backwards_compatibility_test: true

# Validation Documentation
documentation:
  # Validation reports
  reports:
    validation_summary: "docs/validation/cognate_25m_validation_summary.md"
    test_specifications: "docs/validation/test_specifications.md"
    performance_benchmarks: "docs/validation/performance_benchmarks.md"
    quality_metrics: "docs/validation/quality_metrics.md"
    
  # Troubleshooting guides
  troubleshooting:
    common_failures: "docs/troubleshooting/validation_failures.md"
    performance_issues: "docs/troubleshooting/performance_issues.md"
    integration_problems: "docs/troubleshooting/integration_issues.md"
    
  # Validation procedures
  procedures:
    manual_validation: "docs/procedures/manual_validation_checklist.md"
    automated_validation: "docs/procedures/automated_validation_setup.md"
    validation_pipeline: "docs/procedures/validation_pipeline_guide.md"

# Configuration Metadata
metadata:
  validation_framework_version: "1.0.0"
  last_updated: "2025-01-23"
  maintainer: "Cognate Development Team"
  
  # Validation history
  history:
    track_validation_results: true
    compare_across_versions: true
    trend_analysis: true
    
  # Quality assurance
  qa:
    validation_config_reviewed: true
    test_coverage_verified: true
    automation_tested: true