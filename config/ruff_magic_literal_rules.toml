# Enhanced Ruff Configuration for Magic Literal Prevention
# This configuration enforces connascence-based coding standards
# and prevents future magic literal introduction.

[tool.ruff]
# Enable additional rules for magic literal detection
select = [
    "E", "F", "I", "UP",  # Base rules
    "C90",   # mccabe complexity
    "N",     # pep8-naming
    "ARG",   # flake8-unused-arguments
    "SIM",   # flake8-simplify
    "RET",   # flake8-return
    "PLR",   # pylint refactor (includes magic value detection)
    "PIE",   # flake8-pie
    "PYI",   # flake8-pyi
]

# Magic literal specific rules
[tool.ruff.pylint]
# Detect magic values in comparisons and assignments
max-args = 3  # Limit positional arguments (connascence of position)

[tool.ruff.per-file-ignores]
# Stricter rules for domain code
"packages/core/*/constants.py" = []  # No exceptions for constants modules
"packages/*/constants.py" = []       # No exceptions for any constants
"**/test_*.py" = ["PLR2004"]        # Allow magic values in tests
"**/tests/*.py" = ["PLR2004"]       # Allow magic values in tests

[tool.ruff.mccabe]
max-complexity = 10  # Limit cyclomatic complexity

# Custom rule configuration for magic literals
[tool.ruff.flake8-simplify]
# Enforce use of constants over magic values

# Additional linting rules for connascence prevention
[tool.ruff.flake8-naming]
# Enforce proper naming conventions
constant-naming-convention = "SCREAMING_SNAKE_CASE"
class-naming-convention = "PascalCase"
function-naming-convention = "snake_case"

[tool.ruff.format]
# Consistent formatting
quote-style = "double"
indent-style = "space"
skip-source-first-line = false
line-ending = "auto"
