# Enhanced Ruff Configuration for Auto-Fix
# Enables comprehensive auto-fixing for CI/CD quality gates
line-length = 120
target-version = "py311"

# Enhanced rule selection for maximum auto-fix capability
select = [
    # Core quality rules (existing)
    "E",   # pycodestyle errors
    "F",   # pyflakes
    "I",   # isort
    "UP",  # pyupgrade
    
    # Additional auto-fixable rules
    "SIM", # flake8-simplify
    "B",   # flake8-bugbear (auto-fixable subset)
    "C4",  # flake8-comprehensions  
    "UP",  # pyupgrade (modern Python syntax)
    "RUF", # Ruff-specific rules
    "W",   # pycodestyle warnings
    "YTT", # flake8-2020
    "ANN", # flake8-annotations (auto-fixable subset)
    "S",   # bandit (auto-fixable security)
    "BLE", # flake8-blind-except
    "FBT", # flake8-boolean-trap
    "A",   # flake8-builtins
    "COM", # flake8-commas
    "C40", # flake8-comprehensions (additional)
    "DTZ", # flake8-datetimez
    "T10", # flake8-debugger
    "DJ",  # flake8-django
    "EM",  # flake8-errmsg
    "EXE", # flake8-executable
    "FA",  # flake8-future-annotations
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "G",   # flake8-logging-format
    "INP", # flake8-no-pep420
    "PIE", # flake8-pie
    "T20", # flake8-print
    "PYI", # flake8-pyi
    "PT",  # flake8-pytest-style
    "Q",   # flake8-quotes
    "RSE", # flake8-raise
    "RET", # flake8-return
    "SLF", # flake8-self
    "SLOT", # flake8-slots
    "TID", # flake8-tidy-imports
    "TCH", # flake8-type-checking
    "INT", # flake8-gettext
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "TD",  # flake8-todos
    "FIX", # flake8-fixme
    "ERA", # eradicate
    "PD",  # pandas-vet
    "PGH", # pygrep-hooks
    "PL",  # Pylint
    "TRY", # tryceratops
    "FLY", # flynt
    "NPY", # NumPy-specific rules
    "AIR", # Airflow
    "PERF", # Perflint
    "FURB", # refurb
    "LOG", # flake8-logging
    "RUF", # Ruff-specific rules
]

# Exclude problematic or non-auto-fixable rules
ignore = [
    # These require manual intervention
    "E501",   # line too long (handled by black)
    "F821",   # undefined name (logic error)
    "B008",   # function calls in argument defaults
    "S101",   # use of assert (OK in tests)
    "S603",   # subprocess without shell=True
    "S607",   # partial executable path
    "PLR0913", # too many arguments
    "PLR0915", # too many statements
    "C901",   # too complex
    "PLR0911", # too many return statements
    "PLR2004", # magic value comparison
    "SIM108", # use ternary operator (style preference)
    "TRY003", # specific exception types
    "EM101",  # string literals in exception
    "EM102",  # f-string in exception
    "TRY301", # abstract raise to exception
    "PLW2901", # redefined loop variable
    "PLR0912", # too many branches
    "PLR0917", # too many positional arguments
    "BLE001", # blind except Exception
    "S324",   # hashlib without usedforsecurity
    "FBT001", # boolean positional argument
    "FBT002", # boolean keyword argument
    "ARG001", # unused function argument
    "ARG002", # unused method argument
    "TD002",  # missing author in TODO
    "TD003",  # missing issue link in TODO
    "FIX002", # line contains TODO
    "D",      # pydocstyle (documentation rules)
]

# Auto-fix everything that's safe
fix = true
show-fixes = true

# File patterns to exclude
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    "venv",
    "deprecated",
    "archive",
    "experimental",
    "legacy",
    ".pytest_cache",
    ".ruff_cache",
    "node_modules",
    ".tox",
    ".mypy_cache",
    "migrations",
    "*.pyi",
]

[tool.ruff.per-file-ignores]
# Test files can be more lenient
"test_*.py" = [
    "S101",   # assert statements OK
    "PLR2004", # magic values OK in tests
    "S106",   # hardcoded passwords OK in tests
    "ARG001", # unused arguments OK
    "PT011",  # pytest-raises too broad
    "PT012",  # pytest-raises multiple statements
    "SLF001", # private member access OK in tests
]
"tests/*.py" = [
    "S101", "PLR2004", "S106", "ARG001", "PT011", "PT012", "SLF001"
]
"*test*.py" = [
    "S101", "PLR2004", "S106", "ARG001", "PT011", "PT012", "SLF001"
]

# Configuration files
"conftest.py" = ["ARG001", "ARG002"]
"setup.py" = ["ARG001"]
"**/migrations/**" = ["ALL"]

[tool.ruff.isort]
combine-as-imports = true
force-wrap-aliases = true
known-first-party = ["aivillage", "agent_forge", "core", "infrastructure", "src"]
section-order = [
    "future",
    "standard-library", 
    "third-party",
    "first-party",
    "local-folder"
]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.flake8-type-checking]
runtime-evaluated-base-classes = [
    "pydantic.BaseModel",
    "sqlalchemy.orm.DeclarativeBase",
]

[tool.ruff.pylint]
max-args = 8
max-branches = 15
max-returns = 8
max-statements = 60

[tool.ruff.mccabe]
max-complexity = 12

# Enable unsafe fixes (with caution)
unsafe-fixes = false  # Start conservative, enable later if needed

# Format configuration for consistency with Black
[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-source-first-line = false
line-ending = "auto"