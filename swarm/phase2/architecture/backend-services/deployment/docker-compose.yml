version: '3.8'

services:
  # =============================================================================
  # INFRASTRUCTURE SERVICES
  # =============================================================================
  
  redis:
    image: redis:7-alpine
    container_name: agentforge-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  postgres:
    image: postgres:15-alpine
    container_name: agentforge-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: agentforge
      POSTGRES_USER: agentforge
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-agentforge_dev_password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U agentforge"]
      interval: 10s
      timeout: 5s
      retries: 5

  # =============================================================================
  # MICROSERVICES
  # =============================================================================

  api-service:
    build:
      context: .
      dockerfile: deployment/dockerfiles/Dockerfile.api
    container_name: agentforge-api
    restart: unless-stopped
    environment:
      - SERVICE_NAME=api_service
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://agentforge:${POSTGRES_PASSWORD:-agentforge_dev_password}@postgres:5432/agentforge
      - TRAINING_SERVICE_URL=http://training-service:8001
      - MODEL_SERVICE_URL=http://model-service:8002
      - WEBSOCKET_SERVICE_URL=http://websocket-service:8003
      - MONITORING_SERVICE_URL=http://monitoring-service:8004
    ports:
      - "8000:8000"
    volumes:
      - ./logs:/app/logs
      - model_storage:/app/models
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      training-service:
        condition: service_healthy
      model-service:
        condition: service_healthy
      websocket-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  training-service:
    build:
      context: .
      dockerfile: deployment/dockerfiles/Dockerfile.training
    container_name: agentforge-training
    restart: unless-stopped
    environment:
      - SERVICE_NAME=training_service
      - REDIS_URL=redis://redis:6379
      - MODEL_SERVICE_URL=http://model-service:8002
      - STORAGE_PATH=/app/training_models
      - CUDA_VISIBLE_DEVICES=${CUDA_VISIBLE_DEVICES:-0}
    ports:
      - "8001:8001"
    volumes:
      - ./logs:/app/logs
      - training_storage:/app/training_models
      - model_storage:/app/models
      # Mount for GPU access if available
      - /dev/shm:/dev/shm
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    depends_on:
      redis:
        condition: service_healthy
      model-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  model-service:
    build:
      context: .
      dockerfile: deployment/dockerfiles/Dockerfile.model
    container_name: agentforge-model
    restart: unless-stopped
    environment:
      - SERVICE_NAME=model_service
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://agentforge:${POSTGRES_PASSWORD:-agentforge_dev_password}@postgres:5432/agentforge
      - STORAGE_PATH=/app/models
    ports:
      - "8002:8002"
    volumes:
      - ./logs:/app/logs
      - model_storage:/app/models
      - export_storage:/app/exports
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  websocket-service:
    build:
      context: .
      dockerfile: deployment/dockerfiles/Dockerfile.websocket
    container_name: agentforge-websocket
    restart: unless-stopped
    environment:
      - SERVICE_NAME=websocket_service
      - REDIS_URL=redis://redis:6379
      - MAX_CONNECTIONS=${WS_MAX_CONNECTIONS:-1000}
      - PING_INTERVAL=${WS_PING_INTERVAL:-30}
    ports:
      - "8003:8003"
    volumes:
      - ./logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  monitoring-service:
    build:
      context: .
      dockerfile: deployment/dockerfiles/Dockerfile.monitoring
    container_name: agentforge-monitoring
    restart: unless-stopped
    environment:
      - SERVICE_NAME=monitoring_service
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://agentforge:${POSTGRES_PASSWORD:-agentforge_dev_password}@postgres:5432/agentforge
      - CHECK_INTERVAL=${MONITORING_INTERVAL:-30}
    ports:
      - "8004:8004"
    volumes:
      - ./logs:/app/logs
      - /var/run/docker.sock:/var/run/docker.sock:ro  # For Docker metrics
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # OBSERVABILITY STACK
  # =============================================================================

  prometheus:
    image: prom/prometheus:latest
    container_name: agentforge-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./deployment/config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  grafana:
    image: grafana/grafana:latest
    container_name: agentforge-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deployment/config/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./deployment/config/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus

  # =============================================================================
  # REVERSE PROXY & LOAD BALANCER
  # =============================================================================

  nginx:
    image: nginx:alpine
    container_name: agentforge-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployment/config/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./deployment/config/nginx/conf.d:/etc/nginx/conf.d
      - ./logs/nginx:/var/log/nginx
      - ssl_certs:/etc/nginx/certs
    depends_on:
      - api-service
      - websocket-service
      - grafana

# =============================================================================
# VOLUMES
# =============================================================================

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  model_storage:
    driver: local
  training_storage:
    driver: local
  export_storage:
    driver: local
  ssl_certs:
    driver: local

# =============================================================================
# NETWORKS
# =============================================================================

networks:
  default:
    name: agentforge-network
    driver: bridge