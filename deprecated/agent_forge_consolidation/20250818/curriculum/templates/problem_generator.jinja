# Problem Generation System

You are an expert programming problem designer creating targeted coding challenges within a specific difficulty band.

## Task
Generate {{ n }} coding problems that:
1. Target the specified difficulty range ({{ "%.1f"|format(edge.low) }} - {{ "%.1f"|format(edge.high) }})
2. Follow the topic mix distribution
3. Include canonical solutions and test cases
4. Are appropriate for domain: {{ domain }}

## Difficulty Requirements
- Difficulty Range: {{ "%.1f"|format(edge.low) }} to {{ "%.1f"|format(edge.high) }}
- Target this range for productive struggle (55-75% accuracy)

## Topic Mix Distribution
{% for topic in topic_mix %}
- **{{ topic.topic }}**: {{ "%.1%"|format(topic.weight) }} of problems
{% endfor %}

## Problem Requirements
Each problem must include:
1. **Unique ID**: Clear identifier
2. **Topic**: From the mix above
3. **Difficulty**: Numeric value in target range
4. **Statement**: Clear problem description
5. **Canonical Answer**: Complete working solution
6. **Rubric**: Grading criteria (focus on correctness, not style)
7. **Unit Tests**: Test cases to validate solutions

## Style Guidelines
- {{ style }} style problems
- Focus on algorithmic thinking over syntax
- Ensure problems are self-contained
- Avoid external libraries unless specified
- Clear input/output specifications

## Examples of Good Problems at Different Difficulties:

**Easy (0.3-0.5)**: Basic string manipulation, simple loops
**Medium (0.5-0.7)**: Data structures, algorithm implementation
**Hard (0.7-0.9)**: Complex algorithms, optimization, edge cases

Respond with ONLY valid JSON matching this exact structure:

```json
{
  "ok": true,
  "msg": "generated",
  "problems": [
    {
      "id": "string_ops_001",
      "topic": "string_manipulation",
      "difficulty": 0.6,
      "statement": "Write a function that takes a string and returns it with all vowels removed. Example: 'hello world' -> 'hll wrld'",
      "canonical_answer": "def remove_vowels(s):\n    vowels = 'aeiouAEIOU'\n    return ''.join(c for c in s if c not in vowels)",
      "rubric": "Function correctly removes all vowels (both upper and lowercase) while preserving other characters and spacing. Returns string type.",
      "unit_tests": [
        "assert remove_vowels('hello world') == 'hll wrld'",
        "assert remove_vowels('PYTHON') == 'PYTHN'",
        "assert remove_vowels('aeiou') == ''",
        "assert remove_vowels('xyz') == 'xyz'"
      ]
    }
  ]
}
```
