================================================================================
ANTI-PATTERN DETECTION REPORT
================================================================================

Total anti-patterns detected: 5834
Files analyzed: 524

Severity breakdown:
  Critical:  79
  High:     1361
  Medium:   4394
  Low:        0

Anti-pattern types detected:
  embedded_sql             : 2001
  magic_number_abuse       : 1100
  feature_envy             : 988
  database_as_ipc          : 693
  god_method               : 450
  copy_paste_programming   : 218
  sequential_coupling      : 145
  long_parameter_list      :  80
  hardcoded_path           :  79
  god_object               :  79
  data_class               :   1

================================================================================
DETAILED ANTI-PATTERNS
================================================================================

CRITICAL SEVERITY (79 patterns)
--------------------------------------------------

GOD_OBJECT: Class 'Sprint6Monitor' is a God Object: 9 methods, ~557 lines
File: packages\monitoring\sprint6_monitor.py:66:0
Recommendation: Split into smaller classes using composition or Extract Class refactoring
Code context:
     63:     resolved: bool = False
     64:
     65:
>>>  66: class Sprint6Monitor:
     67:     """Real-time monitor for Sprint 6 infrastructure."""
     68:
     69:     def __init__(self, data_dir: str = "monitoring_data") -> None:


GOD_OBJECT: Class 'AgentOrchestrationSystem' is a God Object: 2 methods, ~777 lines
File: packages\agents\core\agent_orchestration_system.py:228:0
Recommendation: Split into smaller classes using composition or Extract Class refactoring
Code context:
    225:                 logger.warning(f"System alert: {alert}")
    226:
    227:
>>> 228: class AgentOrchestrationSystem:
    229:     """Complete orchestration system for AIVillage specialized agents
    230:
    231:     Provides unified management, communication, and coordination for all agents


GOD_OBJECT: Class 'BaseAgentTemplate' is a God Object: 5 methods, ~845 lines
File: packages\agents\core\base_agent_template.py:233:0
Recommendation: Split into smaller classes using composition or Extract Class refactoring
Code context:
    230:             return {"status": "error", "message": f"Communication failed: {str(e)}"}
    231:
    232:
>>> 233: class BaseAgentTemplate(AgentInterface):
    234:     """Base agent template with all required AIVillage system integrations
    235:
    236:     This template must be inherited by all 23 specialized agents and provides:


GOD_OBJECT: Class 'UnifiedMCPGovernanceDashboard' is a God Object: 3 methods, ~659 lines
File: packages\agents\governance\mcp_governance_dashboard.py:107:0
Recommendation: Split into smaller classes using composition or Extract Class refactoring
Code context:
    104:     result: dict[str, Any] = field(default_factory=dict)
    105:
    106:
>>> 107: class UnifiedMCPGovernanceDashboard:
    108:     """
    109:     Unified MCP Governance Dashboard
    110:


GOD_OBJECT: Class 'CreativeAgent' is a God Object: 1 methods, ~605 lines
File: packages\agents\specialized\creative_agent.py:24:0
Recommendation: Split into smaller classes using composition or Extract Class refactoring
Code context:
     21:     constraints: dict[str, Any] = None
     22:
     23:
>>>  24: class CreativeAgent(BaseAgent):
     25:     """Specialized agent for creative tasks including:
     26:     - Story and narrative generation
     27:     - Poetry and creative writing


GOD_OBJECT: Class 'HorticulturistAgent' is a God Object: 2 methods, ~913 lines
File: packages\agents\specialized\culture_making\horticulturist_agent.py:114:0
Recommendation: Split into smaller classes using composition or Extract Class refactoring
Code context:
    111:     last_updated: float
    112:
    113:
>>> 114: class HorticulturistAgent(AgentInterface):
    115:     """Horticulturist Agent provides comprehensive smart agriculture and permaculture
    116:     services including crop management, soil monitoring, and sustainable farming guidance.
    117:     """


GOD_OBJECT: Class 'AuditorAgent' is a God Object: 1 methods, ~639 lines
File: packages\agents\specialized\governance\auditor_agent.py:81:0
Recommendation: Split into smaller classes using composition or Extract Class refactoring
Code context:
     78:     resolved: bool = False
     79:
     80:
>>>  81: class AuditorAgent(AgentInterface):
     82:     """Auditor Agent manages receipts, audit trails, and compliance monitoring
     83:     for the entire AIVillage ecosystem, ensuring transparency and accountability.
     84:     """


GOD_OBJECT: Class 'EnhancedKingAgent' is a God Object: 3 methods, ~731 lines
File: packages\agents\specialized\governance\enhanced_king_agent.py:312:0
Recommendation: Split into smaller classes using composition or Extract Class refactoring
Code context:
    309:             return {"status": "error", "message": f"Emergency oversight failed: {str(e)}"}
    310:
    311:
>>> 312: class EnhancedKingAgent(BaseAgentTemplate):
    313:     """Enhanced King Agent with full AIVillage system integration
    314:
    315:     Demonstrates complete integration of:


GOD_OBJECT: Class 'KingAgent' is a God Object: 1 methods, ~510 lines
File: packages\agents\specialized\governance\king_agent.py:57:0
Recommendation: Split into smaller classes using composition or Extract Class refactoring
Code context:
     54:     max_parallel_tasks: int = 5
     55:
     56:
>>>  57: class KingAgent(AgentInterface):
     58:     """The King Agent serves as the supreme orchestrator, decomposing complex tasks
     59:     into manageable subtasks and optimally assigning them to specialized agents
     60:     while balancing multiple objectives.


GOD_OBJECT: Class 'ShieldAgent' is a God Object: 2 methods, ~1188 lines
File: packages\agents\specialized\governance\shield_agent.py:82:0
Recommendation: Split into smaller classes using composition or Extract Class refactoring
Code context:
     79:     receipt: dict[str, Any]
     80:
     81:
>>>  82: class ShieldAgent(AgentInterface):
     83:     """Shield Agent serves as the defensive guardian, enforcing the village
     84:     constitution and protecting against security threats.
     85:     """


GOD_OBJECT: Class 'SwordAgent' is a God Object: 6 methods, ~609 lines
File: packages\agents\specialized\governance\sword_agent.py:58:0
Recommendation: Split into smaller classes using composition or Extract Class refactoring
Code context:
     55:     risk_score: float
     56:
     57:
>>>  58: class SwordAgent(AgentInterface):
     59:     """Sword Agent conducts adversarial testing and offensive security operations
     60:     to strengthen village defenses through controlled attacks.
     61:     """


GOD_OBJECT: Class 'NavigatorAgent' is a God Object: 1 methods, ~586 lines
File: packages\agents\specialized\infrastructure\navigator_agent.py:79:0
Recommendation: Split into smaller classes using composition or Extract Class refactoring
Code context:
     76:     route: Route | None = None
     77:
     78:
>>>  79: class NavigatorAgent(AgentInterface):
     80:     """Navigator Agent handles all routing and data movement for AIVillage,
     81:     including P2P mesh networking, message routing, and bandwidth optimization.
     82:     """


GOD_OBJECT: Class 'SustainerAgent' is a God Object: 1 methods, ~737 lines
File: packages\agents\specialized\infrastructure\sustainer_agent.py:80:0
Recommendation: Split into smaller classes using composition or Extract Class refactoring
Code context:
     77:     status: str
     78:
     79:
>>>  80: class SustainerAgent(AgentInterface):
     81:     """Sustainer Agent handles capacity monitoring, resource optimization, and efficiency
     82:     management for AIVillage, ensuring sustainable and cost-effective operations.
     83:     """


GOD_OBJECT: Class 'PolyglotAgent' is a God Object: 1 methods, ~646 lines
File: packages\agents\specialized\language_education_health\polyglot_agent.py:75:0
Recommendation: Split into smaller classes using composition or Extract Class refactoring
Code context:
     72:     receipt: dict[str, Any]
     73:
     74:
>>>  75: class PolyglotAgent(AgentInterface):
     76:     """Polyglot Agent provides translation and linguistics services for AIVillage,
     77:     enabling cross-language communication between users and agents with cultural awareness.
     78:     """


GOD_OBJECT: Class 'TutorAgent' is a God Object: 2 methods, ~774 lines
File: packages\agents\specialized\language_education_health\tutor_agent.py:109:0
Recommendation: Split into smaller classes using composition or Extract Class refactoring
Code context:
    106:     performance_score: float | None
    107:
    108:
>>> 109: class TutorAgent(AgentInterface):
    110:     """Tutor Agent provides comprehensive education services including personalized learning
    111:     paths, assessments, content generation, and progress tracking.
    112:     """


GOD_OBJECT: Class 'FederatedAgentForge' is a God Object: 5 methods, ~741 lines
File: packages\agent_forge\integration\federated_training.py:108:0
Recommendation: Split into smaller classes using composition or Extract Class refactoring
Code context:
    105:     hrrm_parity_tolerance: float = 1e-4
    106:
    107:
>>> 108: class FederatedAgentForge:
    109:     """
    110:     Federated version of the Agent Forge pipeline that coordinates
    111:     distributed training across P2P networks and fog compute nodes.


GOD_OBJECT: Class 'EvoMergePhase' is a God Object: 6 methods, ~676 lines
File: packages\agent_forge\phases\evomerge.py:626:0
Recommendation: Split into smaller classes using composition or Extract Class refactoring
Code context:
    623:         return selected
    624:
    625:
>>> 626: class EvoMergePhase:
    627:     """
    628:     Phase 1: Evolutionary Model Merging
    629:


GOD_OBJECT: Class 'BackupManager' is a God Object: 5 methods, ~1129 lines
File: packages\core\backup\backup_manager.py:82:0
Recommendation: Split into smaller classes using composition or Extract Class refactoring
Code context:
     79:     warnings: list[str] = field(default_factory=list)
     80:
     81:
>>>  82: class BackupManager:
     83:     """Main backup and restore management system."""
     84:
     85:     def __init__(


GOD_OBJECT: Class 'BackupScheduler' is a God Object: 13 methods, ~667 lines
File: packages\core\backup\backup_scheduler.py:69:0
Recommendation: Split into smaller classes using composition or Extract Class refactoring
Code context:
     66:     average_duration_minutes: float = 0.0
     67:
     68:
>>>  69: class BackupScheduler:
     70:     """Automated backup scheduler with health monitoring."""
     71:
     72:     def __init__(self, backup_manager: BackupManager, restore_manager: RestoreManager):


GOD_OBJECT: Class 'RestoreManager' is a God Object: 2 methods, ~1164 lines
File: packages\core\backup\restore_manager.py:93:0
Recommendation: Split into smaller classes using composition or Extract Class refactoring
Code context:
     90:     verification_results: dict[str, bool] = field(default_factory=dict)
     91:
     92:
>>>  93: class RestoreManager:
     94:     """Main restore management system."""
     95:
     96:     def __init__(self, backup_manager: BackupManager):


GOD_OBJECT: Class 'AIVillageComplianceIntegration' is a God Object: 1 methods, ~571 lines
File: packages\core\compliance\aivillage_integration.py:34:0
Recommendation: Split into smaller classes using composition or Extract Class refactoring
Code context:
     31: logger = logging.getLogger(__name__)
     32:
     33:
>>>  34: class AIVillageComplianceIntegration:
     35:     """
     36:     Comprehensive integration between PII/PHI compliance and AIVillage infrastructure.
     37:


GOD_OBJECT: Class 'ComplianceCLI' is a God Object: 6 methods, ~554 lines
File: packages\core\compliance\compliance_cli.py:26:0
Recommendation: Split into smaller classes using composition or Extract Class refactoring
Code context:
     23: from .pii_phi_manager import DataClassification, PIIPHIManager, RetentionPolicy
     24:
     25:
>>>  26: class ComplianceCLI:
     27:     """PII/PHI compliance command line interface."""
     28:
     29:     def __init__(self):


GOD_OBJECT: Class 'PIIPHIManager' is a God Object: 8 methods, ~1309 lines
File: packages\core\compliance\pii_phi_manager.py:430:0
Recommendation: Split into smaller classes using composition or Extract Class refactoring
Code context:
    427:         return luhn_checksum(card_number) == 0
    428:
    429:
>>> 430: class PIIPHIManager:
    431:     """Main PII/PHI management and compliance system."""
    432:
    433:     def __init__(self, config_path: Path | None = None):


GOD_OBJECT: Class 'CloudCostManager' is a God Object: 5 methods, ~526 lines
File: packages\core\cost_management\cloud_cost_tagging.py:178:0
Recommendation: Split into smaller classes using composition or Extract Class refactoring
Code context:
    175:     resource_utilization: float | None = None
    176:
    177:
>>> 178: class CloudCostManager:
    179:     """
    180:     Multi-cloud cost management for AIVillage Agent Forge deployments.
    181:


GOD_OBJECT: Class 'CostGovernanceDashboard' is a God Object: 4 methods, ~653 lines
File: packages\core\cost_management\cost_governance_dashboard.py:144:0
Recommendation: Split into smaller classes using composition or Extract Class refactoring
Code context:
    141:     pending_approvals_count: int
    142:
    143:
>>> 144: class CostGovernanceDashboard:
    145:     """
    146:     Comprehensive cost governance dashboard for AIVillage infrastructure.
    147:


GOD_OBJECT: Class 'EdgeCostAllocator' is a God Object: 6 methods, ~611 lines
File: packages\core\cost_management\edge_cost_allocation.py:133:0
Recommendation: Split into smaller classes using composition or Extract Class refactoring
Code context:
    130:     covers_data_costs: bool = False  # Whether rewards cover cellular data
    131:
    132:
>>> 133: class EdgeCostAllocator:
    134:     """
    135:     Cost-aware resource allocation system for edge devices.
    136:


GOD_OBJECT: Class 'P2PTransportOptimizer' is a God Object: 6 methods, ~511 lines
File: packages\core\cost_management\p2p_transport_optimizer.py:83:0
Recommendation: Split into smaller classes using composition or Extract Class refactoring
Code context:
     80:     recommendations: list[str]
     81:
     82:
>>>  83: class P2PTransportOptimizer:
     84:     """
     85:     P2P transport cost optimizer that integrates with existing transport management
     86:     to provide intelligent, cost-aware routing decisions.


GOD_OBJECT: Class 'CloudCostAnalyzer' is a God Object: 10 methods, ~676 lines
File: packages\core\deployment\cloud_cost_analyzer.py:137:0
Recommendation: Split into smaller classes using composition or Extract Class refactoring
Code context:
    134:             self.potential_savings[category] = potential_savings
    135:
    136:
>>> 137: class CloudCostAnalyzer:
    138:     """Cloud cost analyzer for AIVillage deployments."""
    139:
    140:     def __init__(self):


GOD_OBJECT: Class 'GlobalSouthOfflineCoordinator' is a God Object: 1 methods, ~766 lines
File: packages\core\global_south\offline_coordinator.py:117:0
Recommendation: Split into smaller classes using composition or Extract Class refactoring
Code context:
    114:         return timedelta(seconds=seconds)
    115:
    116:
>>> 117: class GlobalSouthOfflineCoordinator:
    118:     """
    119:     Offline-first coordinator optimized for Global South scenarios.
    120:


GOD_OBJECT: Class 'P2PMeshIntegration' is a God Object: 7 methods, ~551 lines
File: packages\core\global_south\p2p_mesh_integration.py:170:0
Recommendation: Split into smaller classes using composition or Extract Class refactoring
Code context:
    167:         )
    168:
    169:
>>> 170: class P2PMeshIntegration:
    171:     """
    172:     P2P mesh integration for offline-first Global South scenarios.
    173:


GOD_OBJECT: Class 'IntegratedEvolutionMetrics' is a God Object: 19 methods, ~508 lines
File: packages\core\legacy\evolution_metrics_integrated.py:126:0
Recommendation: Split into smaller classes using composition or Extract Class refactoring
Code context:
    123:         return cls(**data)
    124:
    125:
>>> 126: class IntegratedEvolutionMetrics:
    127:     """Integrated Evolution Metrics system with CODEX requirements.
    128:
    129:     Features:


GOD_OBJECT: Class 'MultiTenantManager' is a God Object: 6 methods, ~685 lines
File: packages\core\security\multi_tenant_manager.py:53:0
Recommendation: Split into smaller classes using composition or Extract Class refactoring
Code context:
     50:     STORAGE_BUCKET = "storage_bucket"
     51:
     52:
>>>  53: class MultiTenantManager:
     54:     """Manages multi-tenant resource isolation and lifecycle."""
     55:
     56:     def __init__(


GOD_OBJECT: Class 'MultiTenantSystem' is a God Object: 20 methods, ~1067 lines
File: packages\core\security\multi_tenant_system.py:134:0
Recommendation: Split into smaller classes using composition or Extract Class refactoring
Code context:
    131:     metadata: dict[str, Any] = field(default_factory=dict)
    132:
    133:
>>> 134: class MultiTenantSystem:
    135:     """Multi-tenant isolation and management system."""
    136:
    137:     def __init__(self, db_path: str | None = None):


GOD_OBJECT: Class 'RBACSystem' is a God Object: 7 methods, ~547 lines
File: packages\core\security\rbac_system.py:269:0
Recommendation: Split into smaller classes using composition or Extract Class refactoring
Code context:
    266:     user_agent: str
    267:
    268:
>>> 269: class RBACSystem:
    270:     """Main RBAC and multi-tenant isolation system."""
    271:
    272:     def __init__(self, config_path: Path | None = None):


GOD_OBJECT: Class 'ConfigurationManager' is a God Object: 24 methods, ~520 lines
File: packages\core\legacy\config\configuration_manager.py:56:0
Recommendation: Split into smaller classes using composition or Extract Class refactoring
Code context:
     53:     defaults: dict[str, Any] = field(default_factory=dict)
     54:
     55:
>>>  56: class ConfigurationManager:
     57:     """Central configuration manager with priority-based loading."""
     58:
     59:     # Default configuration profiles


GOD_OBJECT: Class 'EnvironmentValidator' is a God Object: 12 methods, ~777 lines
File: packages\core\legacy\config\environment_validator.py:86:0
Recommendation: Split into smaller classes using composition or Extract Class refactoring
Code context:
     83:             self.warnings += 1
     84:
     85:
>>>  86: class EnvironmentValidator:
     87:     """Comprehensive environment variable validator."""
     88:
     89:     # Required variables by component


GOD_OBJECT: Class 'DatabaseManager' is a God Object: 4 methods, ~634 lines
File: packages\core\legacy\database\database_manager.py:67:0
Recommendation: Split into smaller classes using composition or Extract Class refactoring
Code context:
     64:     socket_connect_timeout: int = 5
     65:
     66:
>>>  67: class DatabaseManager:
     68:     """Centralized database manager for all CODEX components."""
     69:
     70:     # Database schemas


GOD_OBJECT: Class 'DatabaseValidator' is a God Object: 6 methods, ~836 lines
File: packages\core\legacy\database\database_validator.py:50:0
Recommendation: Split into smaller classes using composition or Extract Class refactoring
Code context:
     47:     cpu_time_ms: float = 0.0
     48:
     49:
>>>  50: class DatabaseValidator:
     51:     """Comprehensive database validation and performance testing."""
     52:
     53:     def __init__(self, database_manager, redis_manager=None) -> None:


GOD_OBJECT: Class 'TroubleshootingTools' is a God Object: 23 methods, ~671 lines
File: packages\core\legacy\debug\troubleshooting.py:18:0
Recommendation: Split into smaller classes using composition or Extract Class refactoring
Code context:
     15: import psutil
     16:
     17:
>>>  18: class TroubleshootingTools:
     19:     """Comprehensive troubleshooting toolkit for AIVillage system.
     20:
     21:     Implements all debugging tools specified in CODEX Integration Requirements:


GOD_OBJECT: Class 'AdaptiveLoader' is a God Object: 12 methods, ~507 lines
File: packages\core\legacy\resources\adaptive_loader.py:80:0
Recommendation: Split into smaller classes using composition or Extract Class refactoring
Code context:
     77:     cache_enabled: bool = True
     78:
     79:
>>>  80: class AdaptiveLoader:
     81:     """Adaptive model loader that selects optimal loading strategy based on device resources."""
     82:
     83:     def __init__(self, device_profiler: DeviceProfiler, constraint_manager: ConstraintManager) -> None:


GOD_OBJECT: Class 'ConstraintManager' is a God Object: 13 methods, ~528 lines
File: packages\core\legacy\resources\constraint_manager.py:128:0
Recommendation: Split into smaller classes using composition or Extract Class refactoring
Code context:
    125:         }
    126:
    127:
>>> 128: class ConstraintManager:
    129:     """Manages resource constraints for evolution tasks."""
    130:
    131:     def __init__(self, device_profiler: DeviceProfiler) -> None:


GOD_OBJECT: Class 'RBACSystem' is a God Object: 16 methods, ~741 lines
File: packages\core\legacy\security\rbac_system.py:91:0
Recommendation: Split into smaller classes using composition or Extract Class refactoring
Code context:
     88:     """Raised when access is denied."""
     89:
     90:
>>>  91: class RBACSystem:
     92:     """Role-Based Access Control system."""
     93:
     94:     def __init__(self, db_path: str | None = None) -> None:


GOD_OBJECT: Class 'SecureAPIServer' is a God Object: 5 methods, ~645 lines
File: packages\core\legacy\security\secure_api_server.py:268:0
Recommendation: Split into smaller classes using composition or Extract Class refactoring
Code context:
    265:         return sanitized.strip()
    266:
    267:
>>> 268: class SecureAPIServer:
    269:     """Secure API server with TLS 1.3 and comprehensive security."""
    270:
    271:     def __init__(


GOD_OBJECT: Class 'SecureDigitalTwinDB' is a God Object: 13 methods, ~810 lines
File: packages\core\legacy\security\secure_digital_twin_db.py:22:0
Recommendation: Split into smaller classes using composition or Extract Class refactoring
Code context:
     19: logger = logging.getLogger(__name__)
     20:
     21:
>>>  22: class SecureDigitalTwinDB:
     23:     """Secure database operations for Digital Twin with encryption and compliance."""
     24:
     25:     def __init__(self, db_path: str | None = None) -> None:


GOD_OBJECT: Class 'SecureFileUploadValidator' is a God Object: 15 methods, ~544 lines
File: packages\core\legacy\security\secure_file_upload.py:31:0
Recommendation: Split into smaller classes using composition or Extract Class refactoring
Code context:
     28:     """Malicious file detected."""
     29:
     30:
>>>  31: class SecureFileUploadValidator:
     32:     """Secure file upload validation and processing."""
     33:
     34:     def __init__(self, config: dict[str, Any] | None = None) -> None:


GOD_OBJECT: Class 'EdgeManager' is a God Object: 7 methods, ~519 lines
File: packages\edge\core\edge_manager.py:135:0
Recommendation: Split into smaller classes using composition or Extract Class refactoring
Code context:
    132:     chunk_size_bytes: int = 1024
    133:
    134:
>>> 135: class EdgeManager:
    136:     """
    137:     Unified edge device management system
    138:


GOD_OBJECT: Class 'FogCoordinator' is a God Object: 6 methods, ~523 lines
File: packages\edge\fog_compute\fog_coordinator.py:182:0
Recommendation: Split into smaller classes using composition or Extract Class refactoring
Code context:
    179:         return len(self.member_nodes)
    180:
    181:
>>> 182: class FogCoordinator:
    183:     """
    184:     Fog Computing Coordinator
    185:


GOD_OBJECT: Class 'MobileResourceManager' is a God Object: 13 methods, ~632 lines
File: packages\edge\mobile\resource_manager.py:164:0
Recommendation: Split into smaller classes using composition or Extract Class refactoring
Code context:
    161:         }
    162:
    163:
>>> 164: class MobileResourceManager:
    165:     """
    166:     Battery/thermal-aware resource manager for mobile optimization
    167:


GOD_OBJECT: Class 'DistributedFederatedLearning' is a God Object: 19 methods, ~1059 lines
File: packages\edge\legacy_src\federated_learning\federated_coordinator.py:140:0
Recommendation: Split into smaller classes using composition or Extract Class refactoring
Code context:
    137:     regional_aggregation: bool = True
    138:
    139:
>>> 140: class DistributedFederatedLearning:
    141:     """Main coordinator for distributed federated learning."""
    142:
    143:     def __init__(


GOD_OBJECT: Class 'PersonalizedTutorEngine' is a God Object: 7 methods, ~1177 lines
File: packages\edge\legacy_src\digital_twin\engine\personalized_tutor.py:90:0
Recommendation: Split into smaller classes using composition or Extract Class refactoring
Code context:
     87:     adaptive_modifications: list[str]
     88:
     89:
>>>  90: class PersonalizedTutorEngine:
     91:     """Advanced personalized tutoring engine with real-time adaptation."""
     92:
     93:     def __init__(self, project_name: str = "aivillage-personalized-tutor") -> None:


GOD_OBJECT: Class 'ParentProgressTracker' is a God Object: 15 methods, ~1382 lines
File: packages\edge\legacy_src\digital_twin\monitoring\parent_tracker.py:117:0
Recommendation: Split into smaller classes using composition or Extract Class refactoring
Code context:
    114:     implemented: bool = False
    115:
    116:
>>> 117: class ParentProgressTracker:
    118:     """Comprehensive progress tracking and parent communication system."""
    119:
    120:     def __init__(self, project_name: str = "aivillage-parent-tracker") -> None:


GOD_OBJECT: Class 'SecurePreferenceVault' is a God Object: 7 methods, ~1091 lines
File: packages\edge\legacy_src\digital_twin\security\secure_preference_vault.py:72:0
Recommendation: Split into smaller classes using composition or Extract Class refactoring
Code context:
     69:     details: dict[str, Any]
     70:
     71:
>>>  72: class SecurePreferenceVault:
     73:     """Ultra-secure preference storage with military-grade encryption."""
     74:
     75:     def __init__(self, project_name: str = "aivillage-security") -> None:


GOD_OBJECT: Class 'ShieldValidator' is a God Object: 6 methods, ~1134 lines
File: packages\edge\legacy_src\digital_twin\security\shield_validator.py:99:0
Recommendation: Split into smaller classes using composition or Extract Class refactoring
Code context:
     96:     common_violations: dict[str, int] = None
     97:
     98:
>>>  99: class ShieldValidator:
    100:     """Comprehensive AI safety and content validation system."""
    101:
    102:     def __init__(self, project_name: str = "aivillage-shield") -> None:


GOD_OBJECT: Class 'FederationManager' is a God Object: 4 methods, ~888 lines
File: packages\edge\legacy_src\federation\core\federation_manager.py:36:0
Recommendation: Split into smaller classes using composition or Extract Class refactoring
Code context:
     33:     PARANOID = 3  # Chained protocols with dummy traffic
     34:
     35:
>>>  36: class FederationManager:
     37:     """Federation Manager - Coordinates the entire federated network
     38:
     39:     Builds upon existing dual-path transport to provide:


GOD_OBJECT: Class 'EnhancedBitChatTransport' is a God Object: 7 methods, ~649 lines
File: packages\edge\legacy_src\federation\protocols\enhanced_bitchat.py:445:0
Recommendation: Split into smaller classes using composition or Extract Class refactoring
Code context:
    442:             self.message_history.pop(0)
    443:
    444:
>>> 445: class EnhancedBitChatTransport:
    446:     """Enhanced BitChat transport with full crypto and federation features"""
    447:
    448:     def __init__(


GOD_OBJECT: Class 'CapabilityBeacon' is a God Object: 15 methods, ~679 lines
File: packages\fog\edge\beacon.py:142:0
Recommendation: Split into smaller classes using composition or Extract Class refactoring
Code context:
    139:         return cls(**data)
    140:
    141:
>>> 142: class CapabilityBeacon:
    143:     """
    144:     Edge capability beacon - the peripheral nervous system
    145:


GOD_OBJECT: Class 'NSGA2PlacementEngine' is a God Object: 18 methods, ~619 lines
File: packages\fog\gateway\scheduler\placement.py:231:0
Recommendation: Split into smaller classes using composition or Extract Class refactoring
Code context:
    228:         )
    229:
    230:
>>> 231: class NSGA2PlacementEngine:
    232:     """
    233:     NSGA-II Multi-Objective Optimization Engine for Fog Job Placement
    234:


GOD_OBJECT: Class 'FogSecurityPolicyEngine' is a God Object: 4 methods, ~540 lines
File: packages\fog\gateway\security\policy.py:263:0
Recommendation: Split into smaller classes using composition or Extract Class refactoring
Code context:
    260:         )
    261:
    262:
>>> 263: class FogSecurityPolicyEngine:
    264:     """
    265:     Fog Computing Security Policy Engine
    266:


GOD_OBJECT: Class 'FogClient' is a God Object: 1 methods, ~719 lines
File: packages\fog\sdk\python\fog_client_original.py:155:0
Recommendation: Split into smaller classes using composition or Extract Class refactoring
Code context:
    152:     recommendations: list[str]
    153:
    154:
>>> 155: class FogClient:
    156:     """High-level client for AIVillage fog computing"""
    157:
    158:     def __init__(


GOD_OBJECT: Class 'BitChatTransport' is a God Object: 6 methods, ~547 lines
File: packages\p2p\bitchat\ble_transport.py:196:0
Recommendation: Split into smaller classes using composition or Extract Class refactoring
Code context:
    193:         self.last_message_time = time.time()
    194:
    195:
>>> 196: class BitChatTransport:
    197:     """
    198:     BitChat Bluetooth Low Energy mesh transport.
    199:


GOD_OBJECT: Class 'GraphFixer' is a God Object: 1 methods, ~689 lines
File: packages\rag\analysis\graph_fixer.py:164:0
Recommendation: Split into smaller classes using composition or Extract Class refactoring
Code context:
    161:     metadata: dict[str, Any] = field(default_factory=dict)
    162:
    163:
>>> 164: class GraphFixer:
    165:     """
    166:     Automated Knowledge Gap Detection and Repair System
    167:


GOD_OBJECT: Class 'GraphFixer' is a God Object: 1 methods, ~689 lines
File: packages\rag\analysis\graph_fixer_original.py:164:0
Recommendation: Split into smaller classes using composition or Extract Class refactoring
Code context:
    161:     metadata: dict[str, Any] = field(default_factory=dict)
    162:
    163:
>>> 164: class GraphFixer:
    165:     """
    166:     Automated Knowledge Gap Detection and Repair System
    167:


GOD_OBJECT: Class 'CognitiveNexus' is a God Object: 10 methods, ~910 lines
File: packages\rag\core\cognitive_nexus.py:173:0
Recommendation: Split into smaller classes using composition or Extract Class refactoring
Code context:
    170:     creation_timestamp: float = field(default_factory=time.time)
    171:
    172:
>>> 173: class CognitiveNexus:
    174:     """
    175:     Advanced Cognitive Analysis System
    176:


GOD_OBJECT: Class 'HyperRAG' is a God Object: 3 methods, ~569 lines
File: packages\rag\core\hyper_rag.py:116:0
Recommendation: Split into smaller classes using composition or Extract Class refactoring
Code context:
    113:     mobile_optimizations: dict[str, Any] | None = None
    114:
    115:
>>> 116: class HyperRAG:
    117:     """
    118:     Unified RAG System - Main Orchestrator
    119:


GOD_OBJECT: Class 'CreativityEngine' is a God Object: 1 methods, ~738 lines
File: packages\rag\creativity\insight_engine.py:150:0
Recommendation: Split into smaller classes using composition or Extract Class refactoring
Code context:
    147:     metadata: dict[str, Any] = field(default_factory=dict)
    148:
    149:
>>> 150: class CreativityEngine:
    151:     """
    152:     Non-Obvious Path Discovery and Creative Insight Generation
    153:


GOD_OBJECT: Class 'BayesianTrustGraph' is a God Object: 1 methods, ~534 lines
File: packages\rag\graph\bayesian_trust_graph.py:169:0
Recommendation: Split into smaller classes using composition or Extract Class refactoring
Code context:
    166:     metadata: dict[str, Any] = field(default_factory=dict)
    167:
    168:
>>> 169: class BayesianTrustGraph:
    170:     """
    171:     Knowledge Graph with Bayesian Trust Propagation
    172:


GOD_OBJECT: Class 'EdgeDeviceRAGBridge' is a God Object: 2 methods, ~539 lines
File: packages\rag\integration\edge_device_bridge.py:115:0
Recommendation: Split into smaller classes using composition or Extract Class refactoring
Code context:
    112:     metadata: dict[str, Any] = field(default_factory=dict)
    113:
    114:
>>> 115: class EdgeDeviceRAGBridge:
    116:     """
    117:     Edge Device Integration Bridge for HyperRAG
    118:


GOD_OBJECT: Class 'FogRAGCoordinator' is a God Object: 2 methods, ~681 lines
File: packages\rag\integration\fog_rag_bridge.py:105:0
Recommendation: Split into smaller classes using composition or Extract Class refactoring
Code context:
    102:     errors: list[str] = field(default_factory=list)
    103:
    104:
>>> 105: class FogRAGCoordinator:
    106:     """
    107:     Coordinates distributed RAG operations across fog nodes
    108:


GOD_OBJECT: Class 'P2PNetworkRAGBridge' is a God Object: 3 methods, ~706 lines
File: packages\rag\integration\p2p_network_bridge.py:143:0
Recommendation: Split into smaller classes using composition or Extract Class refactoring
Code context:
    140:     metadata: dict[str, Any] = field(default_factory=dict)
    141:
    142:
>>> 143: class P2PNetworkRAGBridge:
    144:     """
    145:     P2P Network Integration Bridge for HyperRAG
    146:


GOD_OBJECT: Class 'NamespaceMountManager' is a God Object: 2 methods, ~544 lines
File: packages\rag\storage\encrypted_mounts.py:196:0
Recommendation: Split into smaller classes using composition or Extract Class refactoring
Code context:
    193:         return datetime.now(UTC) > expiry_time
    194:
    195:
>>> 196: class NamespaceMountManager:
    197:     """
    198:     Namespace-scoped encrypted mount manager
    199:


GOD_OBJECT: Class 'ContextualVectorEngine' is a God Object: 2 methods, ~657 lines
File: packages\rag\vector\contextual_vector_engine.py:153:0
Recommendation: Split into smaller classes using composition or Extract Class refactoring
Code context:
    150:     metadata: dict[str, Any] = field(default_factory=dict)
    151:
    152:
>>> 153: class ContextualVectorEngine:
    154:     """
    155:     High-Performance Vector Search with Contextual Awareness
    156:


GOD_OBJECT: Class 'CurriculumGraph' is a God Object: 5 methods, ~1553 lines
File: packages\rag\legacy_src\education\curriculum_graph.py:58:0
Recommendation: Split into smaller classes using composition or Extract Class refactoring
Code context:
     55:     effectiveness_score: float = 0.0
     56:
     57:
>>>  58: class CurriculumGraph:
     59:     """Hypergraph-based curriculum with W&B tracking and cultural adaptation."""
     60:
     61:     def __init__(self, project_name: str = "aivillage-education") -> None:


GOD_OBJECT: Class 'CulturallyAwareELI5' is a God Object: 8 methods, ~941 lines
File: packages\rag\legacy_src\education\eli5_chain.py:69:0
Recommendation: Split into smaller classes using composition or Extract Class refactoring
Code context:
     66:     timestamp: str
     67:
     68:
>>>  69: class CulturallyAwareELI5:
     70:     """Generate culturally relevant, age-appropriate explanations."""
     71:
     72:     def __init__(self, project_name: str = "aivillage-education") -> None:


GOD_OBJECT: Class 'MCPProtocolHandler' is a God Object: 1 methods, ~549 lines
File: packages\rag\mcp_servers\hyperag\protocol.py:115:0
Recommendation: Split into smaller classes using composition or Extract Class refactoring
Code context:
    112:         return response
    113:
    114:
>>> 115: class MCPProtocolHandler:
    116:     """Handles MCP protocol requests for HypeRAG."""
    117:
    118:     def __init__(


GOD_OBJECT: Class 'HippoIndex' is a God Object: 4 methods, ~697 lines
File: packages\rag\mcp_servers\hyperag\memory\hippo_index.py:78:0
Recommendation: Split into smaller classes using composition or Extract Class refactoring
Code context:
     75:             self.importance_score = 0.3  # Lower importance for episodic
     76:
     77:
>>>  78: class HippoIndex(MemoryBackend):
     79:     """Fast episodic memory - like hippocampus.
     80:
     81:     Features:


GOD_OBJECT: Class 'HypergraphKG' is a God Object: 1 methods, ~845 lines
File: packages\rag\mcp_servers\hyperag\memory\hypergraph_kg.py:131:0
Recommendation: Split into smaller classes using composition or Extract Class refactoring
Code context:
    128:         return False
    129:
    130:
>>> 131: class HypergraphKG(MemoryBackend):
    132:     """Deep semantic memory - like neocortex.
    133:
    134:     Features:


GOD_OBJECT: Class 'QueryPlanner' is a God Object: 5 methods, ~540 lines
File: packages\rag\mcp_servers\hyperag\planning\query_planner.py:39:0
Recommendation: Split into smaller classes using composition or Extract Class refactoring
Code context:
     36:         self.memory_limit_mb = performance_profile.get("memory_limit_mb", 1000)
     37:
     38:
>>>  39: class QueryPlanner:
     40:     """Strategic planning system for complex queries.
     41:
     42:     Analyzes query structure and intent, determines retrieval strategy,


GOD_OBJECT: Class 'InnovatorAgent' is a God Object: 11 methods, ~551 lines
File: packages\rag\mcp_servers\hyperag\repair\innovator_agent.py:439:0
Recommendation: Split into smaller classes using composition or Extract Class refactoring
Code context:
    436:         return "\n".join(prompt_parts)
    437:
    438:
>>> 439: class InnovatorAgent:
    440:     """Main Innovator Agent class for knowledge graph repair."""
    441:
    442:     def __init__(


GOD_OBJECT: Class 'DivergentRetriever' is a God Object: 9 methods, ~514 lines
File: packages\rag\mcp_servers\hyperag\retrieval\divergent_retriever.py:40:0
Recommendation: Split into smaller classes using composition or Extract Class refactoring
Code context:
     37:         return len(self.nodes) + len(self.edges)
     38:
     39:
>>>  40: class DivergentRetriever:
     41:     """Creative retrieval using non-standard graph patterns.
     42:
     43:     Strategies:


HIGH SEVERITY (1361 patterns)
--------------------------------------------------

DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\api\start_api_servers.py:13:0
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     10: from typing import Any
     11:
     12: # Add src to path
>>>  13: sys.path.insert(0, str(Path(__file__).parent.parent.parent))
     14:
     15: from concurrent.futures import ThreadPoolExecutor
     16:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\api\start_api_servers.py:21:0
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     18: from fastapi import FastAPI, HTTPException
     19:
     20: # Import CODEX-compliant RAG implementation
>>>  21: sys.path.insert(0, str(Path(__file__).parent.parent / "production" / "rag" / "rag_system" / "core"))
     22: sys.path.insert(0, str(Path(__file__).parent.parent))
     23: from packages.core.security.digital_twin_encryption import DigitalTwinEncryption, DigitalTwinEncryptionError
     24:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\api\start_api_servers.py:22:0
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     19:
     20: # Import CODEX-compliant RAG implementation
     21: sys.path.insert(0, str(Path(__file__).parent.parent / "production" / "rag" / "rag_system" / "core"))
>>>  22: sys.path.insert(0, str(Path(__file__).parent.parent))
     23: from packages.core.security.digital_twin_encryption import DigitalTwinEncryption, DigitalTwinEncryptionError
     24:
     25: # Configure logging


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\api\start_api_servers.py:54:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     51: def init_digital_twin_db() -> None:
     52:     """Create required tables for Digital Twin profiles."""
     53:     with sqlite3.connect(DIGITAL_TWIN_DB) as conn:
>>>  54:         conn.execute(
     55:             """
     56:             CREATE TABLE IF NOT EXISTS profiles (
     57:                 id INTEGER PRIMARY KEY AUTOINCREMENT,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\api\start_api_servers.py:83:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     80: async def health_twin() -> dict[str, Any]:
     81:     try:
     82:         with sqlite3.connect(DIGITAL_TWIN_DB) as conn:
>>>  83:             conn.execute("SELECT 1")
     84:         return {"status": "healthy", "service": "digital_twin"}
     85:     except Exception as exc:  # pragma: no cover - defensive
     86:         logger.exception("Digital Twin health check failed")


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\api\start_api_servers.py:104:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    101:     try:
    102:         encrypted_ls = encryption.encrypt_sensitive_field(learning_style, "learning_style")
    103:         with sqlite3.connect(DIGITAL_TWIN_DB) as conn:
>>> 104:             conn.execute(
    105:                 "INSERT INTO profiles (profile_id, user_id_hash, preferred_difficulty, learning_style_encrypted)"
    106:                 " VALUES (?, ?, ?, ?)",
    107:                 (profile_id, user_hash, preferred_difficulty, encrypted_ls),


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\api\start_api_servers.py:119:14
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    116: @digital_twin_app.get("/profile/{profile_id}")
    117: async def get_profile(profile_id: str) -> dict[str, Any]:
    118:     with sqlite3.connect(DIGITAL_TWIN_DB) as conn:
>>> 119:         row = conn.execute(
    120:             "SELECT preferred_difficulty, learning_style_encrypted FROM profiles WHERE profile_id=?",
    121:             (profile_id,),
    122:         ).fetchone()


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\api\start_api_servers.py:152:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    149:
    150: def init_evolution_db() -> None:
    151:     with sqlite3.connect(EVOLUTION_DB) as conn:
>>> 152:         conn.execute(
    153:             """
    154:             CREATE TABLE IF NOT EXISTS metrics (
    155:                 id INTEGER PRIMARY KEY AUTOINCREMENT,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\api\start_api_servers.py:168:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    165: async def health_evolution() -> dict[str, Any]:
    166:     try:
    167:         with sqlite3.connect(EVOLUTION_DB) as conn:
>>> 168:             conn.execute("SELECT 1")
    169:         return {"status": "healthy", "service": "evolution_metrics"}
    170:     except Exception as exc:  # pragma: no cover - defensive
    171:         logger.exception("Evolution Metrics health check failed")


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\api\start_api_servers.py:184:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    181:     try:
    182:         with sqlite3.connect(EVOLUTION_DB) as conn:
    183:             for name, value in metrics.items():
>>> 184:                 conn.execute(
    185:                     "INSERT INTO metrics (metric_name, metric_value) VALUES (?, ?)",
    186:                     (name, float(value)),
    187:                 )


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\api\start_api_servers.py:199:19
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    196: async def get_latest_metrics() -> dict[str, Any]:
    197:     try:
    198:         with sqlite3.connect(EVOLUTION_DB) as conn:
>>> 199:             rows = conn.execute("SELECT metric_name, metric_value FROM metrics ORDER BY recorded_at DESC").fetchall()
    200:     except Exception as exc:  # pragma: no cover - defensive
    201:         logger.exception("Failed to fetch metrics")
    202:         raise HTTPException(status_code=500, detail=str(exc))


GOD_METHOD: Method 'check_thresholds' is too complex: 15 complexity, 100 lines, 11 max nesting
File: packages\monitoring\alert_manager.py:154:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    151:         except Exception as e:
    152:             logger.exception(f"Failed to save active alerts: {e}")
    153:
>>> 154:     def check_thresholds(
    155:         self, current_stats: dict[str, Any], history: list[dict[str, Any]] | None = None
    156:     ) -> list[Alert]:
    157:         """Check if any thresholds are breached."""


GOD_METHOD: Method 'check_canary_status' is too complex: 9 complexity, 61 lines, 6 max nesting
File: packages\monitoring\canary_monitor.py:154:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    151:         except Exception as e:
    152:             logger.exception(f"Failed to save change history: {e}")
    153:
>>> 154:     def check_canary_status(self, test_results: dict[str, Any]) -> list[CanaryChange]:
    155:         """Check canary tests for unexpected changes."""
    156:         changes = []
    157:         timestamp = datetime.now(UTC).isoformat()


GOD_METHOD: Method '_normalize_test_status' is too complex: 6 complexity, 12 lines, 5 max nesting
File: packages\monitoring\canary_monitor.py:231:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    228:
    229:         return None
    230:
>>> 231:     def _normalize_test_status(self, outcome: str, test_data: dict[str, Any]) -> str:
    232:         """Normalize pytest outcomes to consistent status strings."""
    233:         if outcome == "passed":
    234:             return "passed"


GOD_METHOD: Method 'main' is too complex: 10 complexity, 47 lines, 8 max nesting
File: packages\monitoring\canary_monitor.py:345:0
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    342:         return summary
    343:
    344:
>>> 345: def main() -> None:
    346:     """CLI interface for canary monitoring."""
    347:     import argparse
    348:


GOD_METHOD: Method 'get_pipeline_status' is too complex: 10 complexity, 60 lines, 7 max nesting
File: packages\monitoring\dashboard.py:118:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    115:         except Exception as e:
    116:             return {"available": False, "reason": str(e)}
    117:
>>> 118:     def get_pipeline_status(self) -> dict:
    119:         """Get current pipeline execution status."""
    120:         status = {
    121:             "active_runs": 0,


GOD_METHOD: Method 'main' is too complex: 12 complexity, 216 lines, 10 max nesting
File: packages\monitoring\dashboard.py:212:0
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    209:             return {"error": str(e)}
    210:
    211:
>>> 212: def main() -> None:
    213:     """Main dashboard function."""
    214:     st.set_page_config(
    215:         page_title="Agent Forge Dashboard",


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\monitoring\observability_system.py:31:0
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     28: from typing import Any
     29:
     30: # Add src to path for imports
>>>  31: sys.path.insert(0, str(Path(__file__).parent.parent))
     32:
     33:
     34: class MetricType(Enum):


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\monitoring\observability_system.py:164:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    161:     def _init_storage(self):
    162:         """Initialize metrics storage."""
    163:         with self._get_db() as conn:
>>> 164:             conn.execute(
    165:                 """
    166:                 CREATE TABLE IF NOT EXISTS metrics (
    167:                     id INTEGER PRIMARY KEY AUTOINCREMENT,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\monitoring\observability_system.py:177:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    174:             """
    175:             )
    176:
>>> 177:             conn.execute(
    178:                 """
    179:                 CREATE INDEX IF NOT EXISTS idx_metrics_name_timestamp
    180:                 ON metrics(name, timestamp)


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\monitoring\observability_system.py:289:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    286:
    287:         with self._get_db() as conn:
    288:             for metric in metrics_to_flush:
>>> 289:                 conn.execute(
    290:                     """
    291:                     INSERT INTO metrics (name, value, timestamp, metric_type, labels)
    292:                     VALUES (?, ?, ?, ?, ?)


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\monitoring\observability_system.py:302:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    299:                         json.dumps(metric.labels),
    300:                     ),
    301:                 )
>>> 302:             conn.commit()
    303:
    304:         return len(metrics_to_flush)
    305:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\monitoring\observability_system.py:332:21
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    329:
    330:         values = []
    331:         with self._get_db() as conn:
>>> 332:             cursor = conn.execute(query, params)
    333:             for row in cursor.fetchall():
    334:                 values.append(row["value"])
    335:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\monitoring\observability_system.py:378:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    375:     def _init_storage(self):
    376:         """Initialize trace storage."""
    377:         with self._get_db() as conn:
>>> 378:             conn.execute(
    379:                 """
    380:                 CREATE TABLE IF NOT EXISTS spans (
    381:                     trace_id TEXT NOT NULL,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\monitoring\observability_system.py:398:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    395:             """
    396:             )
    397:
>>> 398:             conn.execute(
    399:                 """
    400:                 CREATE INDEX IF NOT EXISTS idx_spans_trace_id
    401:                 ON spans(trace_id)


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\monitoring\observability_system.py:506:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    503:
    504:         with self._get_db() as conn:
    505:             for span in spans_to_flush:
>>> 506:                 conn.execute(
    507:                     """
    508:                     INSERT OR REPLACE INTO spans (
    509:                         trace_id, span_id, parent_span_id, service_name,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\monitoring\observability_system.py:529:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    526:                         json.dumps(span.events),
    527:                     ),
    528:                 )
>>> 529:             conn.commit()
    530:
    531:         return len(spans_to_flush)
    532:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\monitoring\observability_system.py:545:21
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    542:         spans = []
    543:
    544:         with self._get_db() as conn:
>>> 545:             cursor = conn.execute(
    546:                 """
    547:                 SELECT * FROM spans WHERE trace_id = ?
    548:                 ORDER BY start_time


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\monitoring\observability_system.py:630:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    627:     def _init_storage(self):
    628:         """Initialize log storage."""
    629:         with self._get_db() as conn:
>>> 630:             conn.execute(
    631:                 """
    632:                 CREATE TABLE IF NOT EXISTS logs (
    633:                     id INTEGER PRIMARY KEY AUTOINCREMENT,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\monitoring\observability_system.py:645:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    642:             """
    643:             )
    644:
>>> 645:             conn.execute(
    646:                 """
    647:                 CREATE INDEX IF NOT EXISTS idx_logs_timestamp_level
    648:                 ON logs(timestamp, level)


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\monitoring\observability_system.py:740:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    737:
    738:         with self._get_db() as conn:
    739:             for log_entry in logs_to_flush:
>>> 740:                 conn.execute(
    741:                     """
    742:                     INSERT INTO logs (
    743:                         timestamp, level, message, service,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\monitoring\observability_system.py:757:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    754:                         json.dumps(log_entry.attributes),
    755:                     ),
    756:                 )
>>> 757:             conn.commit()
    758:
    759:         return len(logs_to_flush)
    760:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\monitoring\observability_system.py:781:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    778:     def _init_storage(self):
    779:         """Initialize alert storage."""
    780:         with self._get_db() as conn:
>>> 781:             conn.execute(
    782:                 """
    783:                 CREATE TABLE IF NOT EXISTS alerts (
    784:                     alert_id TEXT PRIMARY KEY,


GOD_METHOD: Method 'trigger_alert' is too complex: 3 complexity, 62 lines, 0 max nesting
File: packages\monitoring\observability_system.py:836:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    833:
    834:         self.alert_rules.append(rule)
    835:
>>> 836:     def trigger_alert(
    837:         self,
    838:         name: str,
    839:         description: str,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\monitoring\observability_system.py:877:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    874:
    875:         # Store in database
    876:         with self._get_db() as conn:
>>> 877:             conn.execute(
    878:                 """
    879:                 INSERT INTO alerts (
    880:                     alert_id, name, description, severity, triggered_at,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\monitoring\observability_system.py:896:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    893:                     json.dumps(alert.metadata),
    894:                 ),
    895:             )
>>> 896:             conn.commit()
    897:
    898:         return alert
    899:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\monitoring\observability_system.py:914:20
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    911:
    912:                 # Update in database
    913:                 with self._get_db() as conn:
>>> 914:                     conn.execute(
    915:                         """
    916:                         UPDATE alerts SET resolved_at = ? WHERE alert_id = ?
    917:                     """,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\monitoring\observability_system.py:920:20
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    917:                     """,
    918:                         (alert.resolved_at, alert_id),
    919:                     )
>>> 920:                     conn.commit()
    921:
    922:     def get_active_alerts(self) -> list[Alert]:
    923:         """Get all active alerts.


GOD_METHOD: Method 'get_dashboard_data' is too complex: 1 complexity, 64 lines, 0 max nesting
File: packages\monitoring\observability_system.py:1177:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    1174:                 logs=logs_flushed,
    1175:             )
    1176:
>>> 1177:     def get_dashboard_data(self) -> dict[str, Any]:
    1178:         """Get data for monitoring dashboard.
    1179:
    1180:         Returns:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\monitoring\observability_system.py:1194:21
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    1191:
    1192:         # Get system overview
    1193:         with self.metrics._get_db() as conn:
>>> 1194:             cursor = conn.execute(
    1195:                 """
    1196:                 SELECT name, COUNT(*) as count, AVG(value) as avg_value
    1197:                 FROM metrics


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '__init__'
File: packages\monitoring\observability_system.py:146:4
Recommendation: Extract common code into a shared function or utility
Code context:
    143: class MetricsCollector:
    144:     """Collects and aggregates system metrics."""
    145:
>>> 146:     def __init__(self, storage_backend: str = ":memory:"):
    147:         """Initialize metrics collector.
    148:
    149:         Args:


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '__init__'
File: packages\monitoring\observability_system.py:765:4
Recommendation: Extract common code into a shared function or utility
Code context:
    762: class AlertManager:
    763:     """Alert and notification manager."""
    764:
>>> 765:     def __init__(self, storage_backend: str = ":memory:"):
    766:         """Initialize alert manager.
    767:
    768:         Args:


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_get_db'
File: packages\monitoring\observability_system.py:185:4
Recommendation: Extract common code into a shared function or utility
Code context:
    182:             )
    183:
    184:     @contextmanager
>>> 185:     def _get_db(self):
    186:         """Get database connection."""
    187:         conn = sqlite3.connect(self.storage_backend)
    188:         conn.row_factory = sqlite3.Row


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_get_db'
File: packages\monitoring\observability_system.py:406:4
Recommendation: Extract common code into a shared function or utility
Code context:
    403:             )
    404:
    405:     @contextmanager
>>> 406:     def _get_db(self):
    407:         """Get database connection."""
    408:         conn = sqlite3.connect(self.storage_backend)
    409:         conn.row_factory = sqlite3.Row


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_get_db'
File: packages\monitoring\observability_system.py:653:4
Recommendation: Extract common code into a shared function or utility
Code context:
    650:             )
    651:
    652:     @contextmanager
>>> 653:     def _get_db(self):
    654:         """Get database connection."""
    655:         conn = sqlite3.connect(self.storage_backend)
    656:         conn.row_factory = sqlite3.Row


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_get_db'
File: packages\monitoring\observability_system.py:800:4
Recommendation: Extract common code into a shared function or utility
Code context:
    797:             )
    798:
    799:     @contextmanager
>>> 800:     def _get_db(self):
    801:         """Get database connection."""
    802:         conn = sqlite3.connect(self.storage_backend)
    803:         conn.row_factory = sqlite3.Row


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'flush_to_storage'
File: packages\monitoring\observability_system.py:274:4
Recommendation: Extract common code into a shared function or utility
Code context:
    271:         """
    272:         self.record_histogram(f"{name}_duration_ms", duration_ms, labels)
    273:
>>> 274:     def flush_to_storage(self) -> int:
    275:         """Flush buffered metrics to storage.
    276:
    277:         Returns:


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'flush_to_storage'
File: packages\monitoring\observability_system.py:491:4
Recommendation: Extract common code into a shared function or utility
Code context:
    488:         """
    489:         span.attributes[key] = value
    490:
>>> 491:     def flush_to_storage(self) -> int:
    492:         """Flush completed spans to storage.
    493:
    494:         Returns:


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'flush_to_storage'
File: packages\monitoring\observability_system.py:725:4
Recommendation: Extract common code into a shared function or utility
Code context:
    722:         """Log critical message."""
    723:         self.log(LogLevel.CRITICAL, message, **attributes)
    724:
>>> 725:     def flush_to_storage(self) -> int:
    726:         """Flush buffered logs to storage.
    727:
    728:         Returns:


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '__init__'
File: packages\monitoring\observability_system.py:360:4
Recommendation: Extract common code into a shared function or utility
Code context:
    357: class DistributedTracer:
    358:     """Distributed tracing system."""
    359:
>>> 360:     def __init__(self, service_name: str, storage_backend: str = ":memory:"):
    361:         """Initialize distributed tracer.
    362:
    363:         Args:


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '__init__'
File: packages\monitoring\observability_system.py:613:4
Recommendation: Extract common code into a shared function or utility
Code context:
    610: class LogHandler:
    611:     """Structured logging handler."""
    612:
>>> 613:     def __init__(self, service_name: str, storage_backend: str = ":memory:"):
    614:         """Initialize log handler.
    615:
    616:         Args:


GOD_METHOD: Method '_analyze_performance_trends' is too complex: 8 complexity, 42 lines, 7 max nesting
File: packages\monitoring\performance_dashboard.py:70:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     67:
     68:         return recent_results
     69:
>>>  70:     def _analyze_performance_trends(self) -> dict[str, Any]:
     71:         """Analyze performance trends over time."""
     72:         recent_results = self._get_recent_results()
     73:


GOD_METHOD: Method '_detect_regressions' is too complex: 7 complexity, 33 lines, 5 max nesting
File: packages\monitoring\performance_dashboard.py:140:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    137:             return "".join(normalized[i] for i in indices)
    138:         return "".join(normalized)
    139:
>>> 140:     def _detect_regressions(self) -> list[dict[str, Any]]:
    141:         """Detect performance regressions."""
    142:         regressions = []
    143:         recent_results = self._get_recent_results(7)  # Last week


GOD_METHOD: Method 'generate_dashboard' is too complex: 24 complexity, 186 lines, 23 max nesting
File: packages\monitoring\performance_dashboard.py:175:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    172:
    173:         return sorted(regressions, key=lambda x: x.get("slowdown", 0), reverse=True)
    174:
>>> 175:     def generate_dashboard(self) -> str:
    176:         """Generate the performance dashboard content."""
    177:         trends = self._analyze_performance_trends()
    178:         regressions = self._detect_regressions()


GOD_METHOD: Method 'detect_sql_injection' is too complex: 6 complexity, 18 lines, 5 max nesting
File: packages\monitoring\security_monitor.py:137:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    134:
    135:         return 0.1  # Low threat
    136:
>>> 137:     def detect_sql_injection(self, input_data: str) -> float:
    138:         """Detect SQL injection attempts."""
    139:         if not input_data:
    140:             return 0.0


GOD_METHOD: Method 'check_alerts' is too complex: 11 complexity, 124 lines, 9 max nesting
File: packages\monitoring\sprint6_monitor.py:347:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    344:         # Mock implementation - would measure actual evolution operations
    345:         return 1.5
    346:
>>> 347:     def check_alerts(self, health: InfrastructureHealth, metrics: PerformanceMetrics) -> None:
    348:         """Check for alert conditions and create alerts."""
    349:         current_alerts = []
    350:


GOD_METHOD: Method '_check_for_stubs' is too complex: 13 complexity, 49 lines, 10 max nesting
File: packages\monitoring\system_health_dashboard.py:160:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    157:
    158:         return min(1.0, functionality_score)
    159:
>>> 160:     def _check_for_stubs(self, content: str) -> list[str]:
    161:         """Check for stub patterns that indicate incomplete implementation."""
    162:         found_stubs: set[str] = set()
    163:


GOD_METHOD: Method '_get_stub_type' is too complex: 15 complexity, 26 lines, 9 max nesting
File: packages\monitoring\system_health_dashboard.py:211:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    208:
    209:         return sorted(found_stubs)
    210:
>>> 211:     def _get_stub_type(self, node: ast.AST) -> str | None:
    212:         """Determine if a function node represents a stub."""
    213:         if not isinstance(node, ast.FunctionDef | ast.AsyncFunctionDef):
    214:             return None


GOD_METHOD: Method 'generate_health_report' is too complex: 5 complexity, 104 lines, 4 max nesting
File: packages\monitoring\system_health_dashboard.py:366:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    363:             ),
    364:         }
    365:
>>> 366:     def generate_health_report(
    367:         self,
    368:         component_results: dict[str, dict[str, Any]],
    369:         overall_health: dict[str, Any],


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_calculate_functionality_score'
File: packages\monitoring\system_health_dashboard.py:137:4
Recommendation: Extract common code into a shared function or utility
Code context:
    134:         implementation_score = base_score * runtime_factor * (1 - stub_ratio)
    135:         return max(0.0, min(1.0, implementation_score))
    136:
>>> 137:     def _calculate_functionality_score(self, content: str) -> float:
    138:         """Calculate how much real functionality exists."""
    139:         # Look for specific functionality patterns
    140:         functionality_patterns = [


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_check_for_working_code'
File: packages\monitoring\system_health_dashboard.py:270:4
Recommendation: Extract common code into a shared function or utility
Code context:
    267:             metrics["ping_success"] = 0.0
    268:         return metrics
    269:
>>> 270:     def _check_for_working_code(self, content: str) -> list[str]:
    271:         """Check for indicators of working, non-stub code."""
    272:         working_patterns = [
    273:             "ACTUALLY WORKS",


GOD_METHOD: Method 'from_pytest_json' is too complex: 6 complexity, 50 lines, 5 max nesting
File: packages\monitoring\test_monitor.py:38:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     35:     modules: dict[str, dict[str, Any]]
     36:
     37:     @classmethod
>>>  38:     def from_pytest_json(cls, report_data: dict[str, Any]) -> "MonitorStats":
     39:         """Create MonitorStats from pytest JSON report."""
     40:         summary = report_data.get("summary", {})
     41:


GOD_METHOD: Method 'identify_hot_issues' is too complex: 7 complexity, 34 lines, 5 max nesting
File: packages\monitoring\test_monitor.py:195:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    192:         sparkline = "".join(normalized)
    193:         return f"{min_rate:.1f}%-{max_rate:.1f}%: {sparkline}"
    194:
>>> 195:     def identify_hot_issues(self) -> list[dict[str, Any]]:
    196:         """Identify current hot issues."""
    197:         if not self.history:
    198:             return []


GOD_METHOD: Method 'identify_degrading_modules' is too complex: 9 complexity, 59 lines, 8 max nesting
File: packages\monitoring\trend_analyzer.py:96:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     93:
     94:         return points
     95:
>>>  96:     def identify_degrading_modules(self, threshold: float = 10.0, min_runs: int = 5) -> list[dict[str, Any]]:
     97:         """Find modules with declining test success."""
     98:         if len(self.runs) < min_runs:
     99:             return []


GOD_METHOD: Method 'detect_flaky_tests' is too complex: 9 complexity, 47 lines, 7 max nesting
File: packages\monitoring\trend_analyzer.py:157:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    154:
    155:         return degrading_modules
    156:
>>> 157:     def detect_flaky_tests(self, instability_threshold: float = 0.2, min_runs: int = 10) -> list[dict[str, Any]]:
    158:         """Identify tests that intermittently fail."""
    159:         if len(self.runs) < min_runs:
    160:             return []


GOD_METHOD: Method 'generate_ascii_trend_graph' is too complex: 15 complexity, 59 lines, 12 max nesting
File: packages\monitoring\trend_analyzer.py:206:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    203:
    204:         return flaky_modules[:10]  # Top 10 most flaky
    205:
>>> 206:     def generate_ascii_trend_graph(self, data: list[float], width: int = 50, height: int = 10) -> str:
    207:         """Generate ASCII art trend graph for markdown embedding."""
    208:         if not data or len(data) < 2:
    209:             return "Insufficient data for graph"


GOD_METHOD: Method 'main' is too complex: 6 complexity, 28 lines, 5 max nesting
File: packages\monitoring\trend_analyzer.py:313:0
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    310:         return "improving" if lower_is_better else "declining"
    311:
    312:
>>> 313: def main() -> None:
    314:     """CLI interface for trend analysis."""
    315:     import argparse
    316:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\tokenomics\credit_system.py:68:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     65:         cursor = self.conn.cursor()
     66:
     67:         # Enable WAL mode for better concurrency
>>>  68:         cursor.execute("PRAGMA journal_mode=WAL")
     69:
     70:         # Set busy timeout to handle locked database files (BN requirement: 3000ms minimum)
     71:         cursor.execute("PRAGMA busy_timeout=3000")  # 3 seconds as specified


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\tokenomics\credit_system.py:71:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     68:         cursor.execute("PRAGMA journal_mode=WAL")
     69:
     70:         # Set busy timeout to handle locked database files (BN requirement: 3000ms minimum)
>>>  71:         cursor.execute("PRAGMA busy_timeout=3000")  # 3 seconds as specified
     72:
     73:         # Additional optimizations
     74:         cursor.execute("PRAGMA synchronous=NORMAL")  # Balance safety/performance


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\tokenomics\credit_system.py:74:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     71:         cursor.execute("PRAGMA busy_timeout=3000")  # 3 seconds as specified
     72:
     73:         # Additional optimizations
>>>  74:         cursor.execute("PRAGMA synchronous=NORMAL")  # Balance safety/performance
     75:         cursor.execute("PRAGMA temp_store=MEMORY")  # Use memory for temp tables
     76:         cursor.execute("PRAGMA mmap_size=268435456")  # 256MB memory mapping
     77:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\tokenomics\credit_system.py:75:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     72:
     73:         # Additional optimizations
     74:         cursor.execute("PRAGMA synchronous=NORMAL")  # Balance safety/performance
>>>  75:         cursor.execute("PRAGMA temp_store=MEMORY")  # Use memory for temp tables
     76:         cursor.execute("PRAGMA mmap_size=268435456")  # 256MB memory mapping
     77:
     78:         cursor.close()


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\tokenomics\credit_system.py:76:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     73:         # Additional optimizations
     74:         cursor.execute("PRAGMA synchronous=NORMAL")  # Balance safety/performance
     75:         cursor.execute("PRAGMA temp_store=MEMORY")  # Use memory for temp tables
>>>  76:         cursor.execute("PRAGMA mmap_size=268435456")  # 256MB memory mapping
     77:
     78:         cursor.close()
     79:         self.conn.commit()


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\tokenomics\credit_system.py:79:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     76:         cursor.execute("PRAGMA mmap_size=268435456")  # 256MB memory mapping
     77:
     78:         cursor.close()
>>>  79:         self.conn.commit()
     80:         logger.debug("SQLite configured with WAL mode and 5s busy timeout")
     81:
     82:     def execute(self, query: str, params: tuple | None = None) -> sqlite3.Cursor:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\tokenomics\credit_system.py:96:24
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     93:                 cur = self.conn.cursor()
     94:                 try:
     95:                     if params:
>>>  96:                         cur.execute(query, params)
     97:                     else:
     98:                         cur.executescript(query)
     99:                     self.conn.commit()


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\tokenomics\credit_system.py:99:20
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     96:                         cur.execute(query, params)
     97:                     else:
     98:                         cur.executescript(query)
>>>  99:                     self.conn.commit()
    100:                     return cur
    101:                 except sqlite3.OperationalError as e:
    102:                     if "database is locked" in str(e).lower() or "busy" in str(e).lower():


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\tokenomics\credit_system.py:157:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    154:
    155:     def init_tables(self) -> None:
    156:         """Create necessary database tables."""
>>> 157:         self.db.execute(
    158:             """
    159:             CREATE TABLE IF NOT EXISTS balances (
    160:                 user_id TEXT PRIMARY KEY,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\tokenomics\credit_system.py:189:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    186:
    187:     def add_earning_rule(self, rule: EarningRule) -> None:
    188:         """Insert or replace an earning rule."""
>>> 189:         self.db.execute(
    190:             (
    191:                 "INSERT OR REPLACE INTO earning_rules "
    192:                 "(action, base_credits, multipliers, conditions) VALUES (?, ?, ?, ?)"


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\tokenomics\credit_system.py:204:14
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    201:         logger.info("Earning rule for %s added", rule.action)
    202:
    203:     def get_earning_rule(self, action: str) -> EarningRule:
>>> 204:         cur = self.db.execute(
    205:             ("SELECT action, base_credits, multipliers, conditions " "FROM earning_rules WHERE action = ?"),
    206:             (action,),
    207:         )


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\tokenomics\credit_system.py:221:14
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    218:         )
    219:
    220:     def is_first_time(self, user_id: str, action: str) -> bool:
>>> 221:         cur = self.db.execute(
    222:             ("SELECT COUNT(*) as cnt FROM transactions " "WHERE user_id = ? AND category = ?"),
    223:             (user_id, action),
    224:         )


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\tokenomics\credit_system.py:245:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    242:         metadata: dict[str, str],
    243:     ) -> None:
    244:         tx_id = f"{user_id}-{int(time.time() * 1000)}"
>>> 245:         self.db.execute(
    246:             (
    247:                 "INSERT INTO transactions "
    248:                 "(id, user_id, amount, tx_type, category, metadata, timestamp) "


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\tokenomics\credit_system.py:264:14
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    261:         logger.info("Transaction %s recorded for user %s", tx_id, user_id)
    262:
    263:     def update_balance(self, user_id: str, delta: int) -> None:
>>> 264:         cur = self.db.execute(
    265:             "SELECT balance, earned_total, spent_total FROM balances WHERE user_id = ?",
    266:             (user_id,),
    267:         )


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\tokenomics\credit_system.py:273:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    270:             balance = max(delta, 0)
    271:             earned_total = max(delta, 0)
    272:             spent_total = max(-delta, 0)
>>> 273:             self.db.execute(
    274:                 (
    275:                     "INSERT INTO balances (user_id, balance, earned_total, "
    276:                     "spent_total, last_updated) VALUES (?, ?, ?, ?, ?)"


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\tokenomics\credit_system.py:284:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    281:             balance = row["balance"] + delta
    282:             earned_total = row["earned_total"] + max(delta, 0)
    283:             spent_total = row["spent_total"] + max(-delta, 0)
>>> 284:             self.db.execute(
    285:                 (
    286:                     "UPDATE balances SET balance = ?, earned_total = ?, "
    287:                     "spent_total = ?, last_updated = ? WHERE user_id = ?"


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\tokenomics\credit_system.py:317:14
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    314:         return credit_amount
    315:
    316:     def spend_credits(self, user_id: str, amount: int, category: str, metadata: dict[str, str]) -> None:
>>> 317:         cur = self.db.execute("SELECT balance FROM balances WHERE user_id = ?", (user_id,))
    318:         row = cur.fetchone()
    319:         if row is None or row["balance"] < amount:
    320:             logger.error("User %s has insufficient balance", user_id)


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\tokenomics\credit_system.py:327:14
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    324:         self.update_balance(user_id, -amount)
    325:
    326:     def get_balance(self, user_id: str) -> int:
>>> 327:         cur = self.db.execute("SELECT balance FROM balances WHERE user_id = ?", (user_id,))
    328:         row = cur.fetchone()
    329:         return row["balance"] if row else 0
    330:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\tokenomics\jurisdiction.py:77:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     74:
     75:     def disable_crypto_features(self, user_id: str) -> None:
     76:         logger.info("Disabling crypto features for %s", user_id)
>>>  77:         self.disabled_features.setdefault(user_id, set()).update({"crypto"})
     78:
     79:     def limit_crypto_features(self, user_id: str) -> None:
     80:         logger.info("Limiting crypto features for %s", user_id)


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\tokenomics\jurisdiction.py:81:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     78:
     79:     def limit_crypto_features(self, user_id: str) -> None:
     80:         logger.info("Limiting crypto features for %s", user_id)
>>>  81:         self.disabled_features.setdefault(user_id, set()).update({"defi"})
     82:
     83:     def enable_mining(self, user_id: str) -> None:
     84:         logger.info("Enabling mining for %s", user_id)


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\tokenomics\sovereign_fund.py:28:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     25:
     26:     def allocate_conservative(self, allocations: dict[str, float]) -> None:
     27:         logger.info("Conservative allocation: %s", allocations)
>>>  28:         self.conservative.update(allocations)
     29:
     30:     def allocate_aggressive(self, allocations: dict[str, float]) -> None:
     31:         logger.info("Aggressive allocation: %s", allocations)


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\tokenomics\sovereign_fund.py:32:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     29:
     30:     def allocate_aggressive(self, allocations: dict[str, float]) -> None:
     31:         logger.info("Aggressive allocation: %s", allocations)
>>>  32:         self.aggressive.update(allocations)
     33:
     34:
     35: class DigitalSovereignWealthFund:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\agents\bridges\fog_tools.py:572:47
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    569:                         # Include recent logs if requested
    570:                         if include_logs:
    571:                             log_tool = StreamLogsTool(self.fog_gateway_url)
>>> 572:                             log_result = await log_tool.execute({"job_id": job_id, "tail_lines": 10, "follow": False})
    573:
    574:                             if log_result["status"] == "success":
    575:                                 result["recent_logs"] = log_result["logs"]


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\agents\core\agent_orchestration_system.py:178:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    175:             )
    176:
    177:             # Update metrics
>>> 178:             self.health_metrics.update(
    179:                 {
    180:                     "total_agents": agent_count,
    181:                     "active_agents": active_count,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\agents\core\agent_orchestration_system.py:927:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    924:                 current_time = datetime.now()
    925:                 uptime = (current_time - self.stats["system_start_time"]).total_seconds()
    926:
>>> 927:                 self.stats.update(
    928:                     {
    929:                         "system_uptime_seconds": uptime,
    930:                         "active_agents": len([a for a in self.agents.values() if a.status == AgentStatus.ACTIVE]),


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\agents\core\agent_services.py:161:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    158:         for provider in self._status_providers:
    159:             try:
    160:                 provider_status = await provider.get_status()
>>> 161:                 status.update(provider_status)
    162:             except Exception as e:
    163:                 logger.warning(f"Status provider {provider.__class__.__name__} failed: {e}")
    164:                 status[f"{provider.__class__.__name__}_error"] = str(e)


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\agents\core\base_agent_template.py:175:28
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    172:
    173:         try:
    174:             # Query the unified RAG system
>>> 175:             results = await self.rag_client.query(
    176:                 query=query, mode=mode, include_sources=True, max_results=parameters.get("max_results", 10)
    177:             )
    178:


GOD_METHOD: Method '__init__' is too complex: 1 complexity, 52 lines, 0 max nesting
File: packages\agents\core\base_agent_template.py:246:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    243:     - Geometric self-awareness
    244:     """
    245:
>>> 246:     def __init__(self, metadata: AgentMetadata):
    247:         super().__init__(metadata)
    248:
    249:         # Core agent identification


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\agents\core\base_agent_template.py:332:21
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    329:
    330:     async def query_group_memory(self, query: str, mode: str = "balanced", max_results: int = 10) -> dict[str, Any]:
    331:         """Query RAG system as read-only group memory through MCP"""
>>> 332:         return await self.mcp_tools["rag_query"].execute(
    333:             {"query": query, "mode": mode, "max_results": max_results, "sender_id": self.agent_id}
    334:         )
    335:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\agents\core\base_agent_template.py:346:21
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    343:         self, namespace: str, runtime: str = "wasi", resources: dict[str, Any] | None = None, name: str | None = None
    344:     ) -> dict[str, Any]:
    345:         """Create isolated execution environment in fog network through MCP"""
>>> 346:         return await self.mcp_tools["create_sandbox"].execute(
    347:             {
    348:                 "namespace": namespace,
    349:                 "runtime": runtime,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\agents\core\base_agent_template.py:366:21
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    363:         timeout_s: int = 300,
    364:     ) -> dict[str, Any]:
    365:         """Submit job to fog gateway for remote execution through MCP"""
>>> 366:         return await self.mcp_tools["run_job"].execute(
    367:             {
    368:                 "namespace": namespace,
    369:                 "image": image,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\agents\core\base_agent_template.py:382:21
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    379:         self, job_id: str, tail_lines: int = 50, follow: bool = False, timeout_s: int = 30
    380:     ) -> dict[str, Any]:
    381:         """Stream real-time logs from fog job execution through MCP"""
>>> 382:         return await self.mcp_tools["stream_logs"].execute(
    383:             {"job_id": job_id, "tail_lines": tail_lines, "follow": follow, "timeout_s": timeout_s}
    384:         )
    385:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\agents\core\base_agent_template.py:390:21
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    387:         self, job_id: str, artifact_types: list[str] | None = None, download_files: bool = False
    388:     ) -> dict[str, Any]:
    389:         """Download results and outputs from completed fog jobs through MCP"""
>>> 390:         return await self.mcp_tools["fetch_artifacts"].execute(
    391:             {
    392:                 "job_id": job_id,
    393:                 "artifact_types": artifact_types or ["stdout", "stderr", "metrics"],


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\agents\core\base_agent_template.py:400:21
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    397:
    398:     async def check_fog_job_status(self, job_id: str, include_logs: bool = False) -> dict[str, Any]:
    399:         """Check status and progress of fog job execution through MCP"""
>>> 400:         return await self.mcp_tools["fog_job_status"].execute({"job_id": job_id, "include_logs": include_logs})
    401:
    402:     async def offload_computation_to_fog(
    403:         self,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\agents\core\base_agent_template.py:798:21
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    795:         metadata: dict[str, Any] | None = None,
    796:     ) -> dict[str, Any]:
    797:         """Send message through communication channels using MCP"""
>>> 798:         return await self.mcp_tools["communicate"].execute(
    799:             {
    800:                 "recipient": recipient,
    801:                 "message": message,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\agents\core\base_agent_template.py:862:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    859:
    860:             # Initialize specialized MCP tools
    861:             specialized_tools = await self.get_specialized_mcp_tools()
>>> 862:             self.mcp_tools.update(specialized_tools)
    863:
    864:             # Initialize geometric self-awareness
    865:             await self.update_geometric_self_awareness()


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\agents\core\coordination_system.py:31:0
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     28: from typing import Any
     29:
     30: # Add src to path for imports
>>>  31: sys.path.insert(0, str(Path(__file__).parent.parent))
     32:
     33:
     34: class AgentStatus(Enum):


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\agents\core\coordination_system.py:210:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    207:     def _init_storage(self):
    208:         """Initialize storage backend."""
    209:         with self._get_db() as conn:
>>> 210:             conn.execute(
    211:                 """
    212:                 CREATE TABLE IF NOT EXISTS agents (
    213:                     agent_id TEXT PRIMARY KEY,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\agents\core\coordination_system.py:258:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    255:
    256:             # Persist to storage
    257:             with self._get_db() as conn:
>>> 258:                 conn.execute(
    259:                     """
    260:                     INSERT OR REPLACE INTO agents (
    261:                         agent_id, name, agent_type, capabilities, status,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\agents\core\coordination_system.py:281:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    278:                         json.dumps(agent.performance_metrics),
    279:                     ),
    280:                 )
>>> 281:                 conn.commit()
    282:
    283:         return True
    284:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\agents\core\coordination_system.py:309:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    306:
    307:             # Remove from storage
    308:             with self._get_db() as conn:
>>> 309:                 conn.execute("DELETE FROM agents WHERE agent_id = ?", (agent_id,))
    310:                 conn.commit()
    311:
    312:         return True


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\agents\core\coordination_system.py:310:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    307:             # Remove from storage
    308:             with self._get_db() as conn:
    309:                 conn.execute("DELETE FROM agents WHERE agent_id = ?", (agent_id,))
>>> 310:                 conn.commit()
    311:
    312:         return True
    313:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\agents\core\coordination_system.py:341:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    338:                 agent.current_load = load
    339:
    340:             if metrics:
>>> 341:                 agent.performance_metrics.update(metrics)
    342:
    343:     def find_agents_by_capability(self, task_type: str, status_filter: list[AgentStatus] = None) -> list[Agent]:
    344:         """Find agents by capability.


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\agents\core\coordination_system.py:421:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    418:     def _init_storage(self):
    419:         """Initialize task storage."""
    420:         with self._get_db() as conn:
>>> 421:             conn.execute(
    422:                 """
    423:                 CREATE TABLE IF NOT EXISTS tasks (
    424:                     task_id TEXT PRIMARY KEY,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\agents\core\coordination_system.py:472:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    469:
    470:             # Persist to storage
    471:             with self._get_db() as conn:
>>> 472:                 conn.execute(
    473:                     """
    474:                     INSERT INTO tasks (
    475:                         task_id, task_type, description, priority, payload,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\agents\core\coordination_system.py:498:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    495:                         task.parent_task_id,
    496:                     ),
    497:                 )
>>> 498:                 conn.commit()
    499:
    500:         return task.task_id
    501:


GOD_METHOD: Method 'get_messages' is too complex: 8 complexity, 31 lines, 5 max nesting
File: packages\agents\core\coordination_system.py:724:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    721:                 # Broadcast message
    722:                 self.broadcast_queue.append(message)
    723:
>>> 724:     def get_messages(self, agent_id: str, limit: int = 10) -> list[Message]:
    725:         """Get messages for agent.
    726:
    727:         Args:


GOD_METHOD: Method '_cleanup_expired_messages' is too complex: 6 complexity, 19 lines, 5 max nesting
File: packages\agents\core\coordination_system.py:1022:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    1019:                     (-task.priority, time.time(), task),
    1020:                 )
    1021:
>>> 1022:     def _cleanup_expired_messages(self):
    1023:         """Clean up expired messages from queues."""
    1024:         current_time = time.time()
    1025:


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_get_db'
File: packages\agents\core\coordination_system.py:230:4
Recommendation: Extract common code into a shared function or utility
Code context:
    227:             )
    228:
    229:     @contextmanager
>>> 230:     def _get_db(self):
    231:         """Get database connection."""
    232:         conn = sqlite3.connect(self.storage_backend)
    233:         conn.row_factory = sqlite3.Row


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_get_db'
File: packages\agents\core\coordination_system.py:448:4
Recommendation: Extract common code into a shared function or utility
Code context:
    445:             )
    446:
    447:     @contextmanager
>>> 448:     def _get_db(self):
    449:         """Get database connection."""
    450:         conn = sqlite3.connect(self.storage_backend)
    451:         conn.row_factory = sqlite3.Row


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'process_messages'
File: packages\agents\core\coordination_system.py:768:4
Recommendation: Extract common code into a shared function or utility
Code context:
    765:         """
    766:         return time.time() - message.timestamp < message.ttl_seconds
    767:
>>> 768:     def process_messages(self, agent_id: str):
    769:         """Process pending messages for agent.
    770:
    771:         Args:


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_process_agent_heartbeats'
File: packages\agents\core\coordination_system.py:980:4
Recommendation: Extract common code into a shared function or utility
Code context:
    977:         task.started_at = time.time()
    978:         task.status = TaskStatus.RUNNING
    979:
>>> 980:     def _process_agent_heartbeats(self):
    981:         """Process agent heartbeats and handle timeouts."""
    982:         current_time = time.time()
    983:         timeout_threshold = 60.0  # 60 seconds


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\agents\specialized\architect_agent.py:68:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     65:
     66:     async def introspect(self) -> dict[str, Any]:
     67:         info = await super().introspect()
>>>  68:         info.update(
     69:             {
     70:                 "architecture_patterns": len(self.architecture_patterns),
     71:                 "design_principles": len(self.design_principles),


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\agents\specialized\architect_agent.py:261:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    258:         }
    259:
    260:         if architecture_style == "microservices":
>>> 261:             base_monitoring.update(
    262:                 {
    263:                     "distributed_tracing": "Jaeger/Zipkin",
    264:                     "service_mesh": "Istio (optional)",


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\agents\specialized\architect_agent.py:283:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    280:         }
    281:
    282:         if scale == "large":
>>> 283:             scalability_plan.update(
    284:                 {
    285:                     "auto_scaling": "Kubernetes HPA/VPA",
    286:                     "database_sharding": "Horizontal partitioning",


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_get_components_for_style'
File: packages\agents\specialized\architect_agent.py:111:4
Recommendation: Extract common code into a shared function or utility
Code context:
    108:             logger.error(f"Architecture design failed: {e}")
    109:             return {"error": str(e)}
    110:
>>> 111:     def _get_components_for_style(self, style: str) -> list[dict[str, Any]]:
    112:         """Get recommended components for architecture style"""
    113:         if style == "microservices":
    114:             return [


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_plan_deployment'
File: packages\agents\specialized\architect_agent.py:180:4
Recommendation: Extract common code into a shared function or utility
Code context:
    177:             "monitoring": "Prometheus + Grafana",
    178:         }
    179:
>>> 180:     def _plan_deployment(self, scale: str, budget: str) -> dict[str, Any]:
    181:         """Plan deployment strategy"""
    182:         if scale == "large" and budget != "low":
    183:             return {


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_plan_security'
File: packages\agents\specialized\architect_agent.py:228:4
Recommendation: Extract common code into a shared function or utility
Code context:
    225:             "backup_strategy": "Daily automated backups",
    226:         }
    227:
>>> 228:     def _plan_security(self, architecture_style: str) -> list[str]:
    229:         """Plan security measures"""
    230:         base_security = [
    231:             "HTTPS/TLS encryption",


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_plan_monitoring'
File: packages\agents\specialized\architect_agent.py:251:4
Recommendation: Extract common code into a shared function or utility
Code context:
    248:
    249:         return base_security
    250:
>>> 251:     def _plan_monitoring(self, architecture_style: str) -> dict[str, Any]:
    252:         """Plan monitoring and observability"""
    253:         base_monitoring = {
    254:             "metrics": "Prometheus + Grafana",


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_plan_scalability'
File: packages\agents\specialized\architect_agent.py:272:4
Recommendation: Extract common code into a shared function or utility
Code context:
    269:
    270:         return base_monitoring
    271:
>>> 272:     def _plan_scalability(self, scale: str, architecture_style: str) -> dict[str, Any]:
    273:         """Plan scalability approach"""
    274:         scalability_plan = {
    275:             "horizontal_scaling": "Container/pod scaling",


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\agents\specialized\creative_agent.py:89:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     86:     async def introspect(self) -> dict[str, Any]:
     87:         """Return agent capabilities and status"""
     88:         info = await super().introspect()
>>>  89:         info.update(
     90:             {
     91:                 "active_projects": len(self.creative_projects),
     92:                 "style_library_size": len(self.style_library),


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\agents\specialized\data_science_agent.py:99:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     96:     async def introspect(self) -> dict[str, Any]:
     97:         """Return agent capabilities and status"""
     98:         info = await super().introspect()
>>>  99:         info.update(
    100:             {
    101:                 "models_cached": len(self.models_cache),
    102:                 "analyses_performed": len(self.analysis_history),


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\agents\specialized\devops_agent.py:87:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     84:     async def introspect(self) -> dict[str, Any]:
     85:         """Return agent capabilities and status"""
     86:         info = await super().introspect()
>>>  87:         info.update(
     88:             {
     89:                 "active_deployments": len(self.deployments),
     90:                 "pipeline_count": len(self.pipelines),


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\agents\specialized\devops_agent.py:264:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    261:         }
    262:
    263:         if resource_type == "kubernetes_cluster":
>>> 264:             result.update(
    265:                 {
    266:                     "node_count": config.get("node_count", 3),
    267:                     "node_type": config.get("node_type", "t3.medium"),


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\agents\specialized\financial_agent.py:85:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     82:     async def introspect(self) -> dict[str, Any]:
     83:         """Return agent capabilities and status"""
     84:         info = await super().introspect()
>>>  85:         info.update(
     86:             {
     87:                 "portfolios_managed": len(self.portfolios),
     88:                 "market_data_points": len(self.market_data),


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\agents\specialized\social_agent.py:72:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     69:
     70:     async def introspect(self) -> dict[str, Any]:
     71:         info = await super().introspect()
>>>  72:         info.update(
     73:             {
     74:                 "active_communities": len(self.community_health),
     75:                 "interactions_handled": len(self.interaction_history),


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\agents\specialized\social_agent.py:100:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     97:             flagged_patterns = [pattern for pattern in harmful_patterns if pattern in content.lower()]
     98:
     99:             if flagged_patterns:
>>> 100:                 moderation_result.update(
    101:                     {
    102:                         "action": "flagged_for_review",
    103:                         "flags": flagged_patterns,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\agents\specialized\tester_agent.py:77:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     74:
     75:     async def introspect(self) -> dict[str, Any]:
     76:         info = await super().introspect()
>>>  77:         info.update(
     78:             {
     79:                 "test_suites": len(self.test_suites),
     80:                 "test_executions": len(self.test_results),


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\agents\specialized\translator_agent.py:86:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     83:
     84:     async def introspect(self) -> dict[str, Any]:
     85:         info = await super().introspect()
>>>  86:         info.update(
     87:             {
     88:                 "supported_languages": len(self.supported_languages),
     89:                 "cached_translations": len(self.translation_cache),


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\agents\core\components\capabilities.py:342:27
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    339:
    340:         # Execute tool and update metrics
    341:         try:
>>> 342:             result = await tool.execute(parameters)
    343:             tool.log_usage()
    344:
    345:             # Update tool definition metrics


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\agents\core\components\communication.py:300:21
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    297:             raise ValueError(f"Communication tool {tool_name} not available")
    298:
    299:         tool = self._mcp_tools[tool_name]
>>> 300:         return await tool.execute(parameters)
    301:
    302:     def _update_metrics(
    303:         self, sent: bool = False, received: bool = False, failed: bool = False, latency_ms: float = 0


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\agents\core\components\configuration.py:378:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    375:             self.set_configuration(key, value, ConfigurationLevel.DEFAULT, f"Default {key}")
    376:
    377:         # Add basic validation rules
>>> 378:         self._validation_rules.update(
    379:             {
    380:                 "positive_number": lambda x: isinstance(x, (int, float)) and x > 0,
    381:                 "percentage": lambda x: isinstance(x, (int, float)) and 0 <= x <= 1,


GOD_METHOD: Method 'get_current_metrics' is too complex: 3 complexity, 51 lines, 1 max nesting
File: packages\agents\core\components\metrics.py:294:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    291:         self.record_metric(MetricType.PERFORMANCE, "error_rate", error_rate, "%")
    292:         self.record_metric(MetricType.PERFORMANCE, "throughput", throughput, "tasks/min")
    293:
>>> 294:     def get_current_metrics(self) -> dict[str, Any]:
    295:         """Get current aggregated metrics.
    296:
    297:         Returns:


GOD_METHOD: Method 'get_metric_history' is too complex: 10 complexity, 35 lines, 5 max nesting
File: packages\agents\core\components\metrics.py:347:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    344:
    345:         return metrics
    346:
>>> 347:     def get_metric_history(
    348:         self,
    349:         metric_name: str | None = None,
    350:         metric_type: MetricType | None = None,


GOD_METHOD: Method 'update_geometric_state' is too complex: 3 complexity, 69 lines, 1 max nesting
File: packages\agents\core\components\awareness\geometric_awareness.py:113:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    110:         self._task_history: List[Dict[str, Any]] = []
    111:         self._modification_history: List[Dict[str, Any]] = []
    112:
>>> 113:     def update_geometric_state(
    114:         self,
    115:         task_history: List[Dict[str, Any]],
    116:         modification_history: List[Dict[str, Any]],


GOD_METHOD: Method 'get_health_summary' is too complex: 7 complexity, 41 lines, 6 max nesting
File: packages\agents\core\components\awareness\geometric_awareness.py:357:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    354:             return False
    355:         return self._current_state.is_healthy()
    356:
>>> 357:     def get_health_summary(self) -> Dict[str, Any]:
    358:         """Get comprehensive health summary.
    359:
    360:         Returns:


GOD_METHOD: Method '__init__' is too complex: 1 complexity, 52 lines, 0 max nesting
File: packages\agents\specialized\culture_making\horticulturist_agent.py:119:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    116:     services including crop management, soil monitoring, and sustainable farming guidance.
    117:     """
    118:
>>> 119:     def __init__(self, agent_id: str = "horticulturist_agent"):
    120:         self.agent_id = agent_id
    121:         self.agent_type = "Horticulturist"
    122:         self.capabilities = [


GOD_METHOD: Method '__init__' is too complex: 1 complexity, 55 lines, 0 max nesting
File: packages\agents\specialized\governance\auditor_agent.py:86:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     83:     for the entire AIVillage ecosystem, ensuring transparency and accountability.
     84:     """
     85:
>>>  86:     def __init__(self, agent_id: str = "auditor_agent"):
     87:         self.agent_id = agent_id
     88:         self.agent_type = "Auditor"
     89:         self.capabilities = [


GOD_METHOD: Method '__init__' is too complex: 1 complexity, 65 lines, 0 max nesting
File: packages\agents\specialized\governance\enhanced_king_agent.py:325:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    322:     - Geometric self-awareness for performance monitoring
    323:     """
    324:
>>> 325:     def __init__(self, agent_id: str = "enhanced_king_agent"):
    326:         # Create agent metadata with King-specific capabilities
    327:         metadata = AgentMetadata(
    328:             agent_id=agent_id,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\agents\specialized\governance\enhanced_king_agent.py:449:31
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    446:
    447:             else:
    448:                 # Try to decompose as general task
>>> 449:                 result = await self.mcp_tools["task_decomposition"].execute(
    450:                     {
    451:                         "task_description": task_data.get("description", ""),
    452:                         "constraints": task_data.get("constraints", {}),


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\agents\specialized\governance\enhanced_king_agent.py:475:37
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    472:         """Full orchestration of complex multi-agent task"""
    473:
    474:         # Step 1: Decompose task
>>> 475:         decomposition_result = await self.mcp_tools["task_decomposition"].execute(
    476:             {"task_description": task_data.get("description", ""), "constraints": task_data.get("constraints", {})}
    477:         )
    478:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\agents\specialized\governance\enhanced_king_agent.py:484:34
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    481:
    482:         # Step 2: Assign agents optimally
    483:         task_id = decomposition_result["task"]["task_id"]
>>> 484:         assignment_result = await self.mcp_tools["agent_assignment"].execute(
    485:             {
    486:                 "task_id": task_id,
    487:                 "optimization_config": task_data.get("optimization_config", self.default_optimization.__dict__),


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\agents\specialized\governance\enhanced_king_agent.py:728:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    725:         # Capability coverage
    726:         all_capabilities = set()
    727:         for agent in agents:
>>> 728:             all_capabilities.update(agent.get("capabilities", []))
    729:
    730:         required = set(task.required_capabilities)
    731:         coverage = len(required.intersection(all_capabilities)) / len(required) if required else 1


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\agents\specialized\governance\enhanced_king_agent.py:957:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    954:         }
    955:
    956:         # Merge with base introspection
>>> 957:         base_info.update(king_specific)
    958:         return base_info
    959:
    960:     async def communicate(self, message: str, recipient) -> str:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\agents\specialized\governance\king_agent.py:421:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    418:         # Capability coverage score
    419:         all_agent_caps = set()
    420:         for agent in agents:
>>> 421:             all_agent_caps.update(agent["capabilities"])
    422:
    423:         required_caps = set(task.required_capabilities)
    424:         coverage = len(required_caps & all_agent_caps) / len(required_caps) if required_caps else 1


GOD_METHOD: Method '__init__' is too complex: 1 complexity, 60 lines, 0 max nesting
File: packages\agents\specialized\governance\shield_agent.py:87:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     84:     constitution and protecting against security threats.
     85:     """
     86:
>>>  87:     def __init__(self, agent_id: str = "shield_agent"):
     88:         self.agent_id = agent_id
     89:         self.agent_type = "Shield"
     90:         self.capabilities = [


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\agents\specialized\governance\shield_agent.py:745:24
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    742:                 if file_size > self.max_file_size_mb * 1024 * 1024:
    743:                     # Stream large files in chunks to stay within memory limits
    744:                     while chunk := f.read(self.chunk_size_bytes):
>>> 745:                         hash_obj.update(chunk)
    746:                 else:
    747:                     # Small files can be read entirely
    748:                     hash_obj.update(f.read())


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\agents\specialized\governance\shield_agent.py:748:20
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    745:                         hash_obj.update(chunk)
    746:                 else:
    747:                     # Small files can be read entirely
>>> 748:                     hash_obj.update(f.read())
    749:         except Exception as e:
    750:             logger.warning(f"Could not read file {file_path}: {e}")
    751:             return hashlib.sha256(file_path.encode()).hexdigest()


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\agents\specialized\infrastructure\sustainer_agent.py:315:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    312:         constraints = {}
    313:
    314:         if device_class == DeviceClass.MOBILE:
>>> 315:             constraints.update(
    316:                 {
    317:                     "max_cpu_usage": 0.6,
    318:                     "max_memory_mb": min(spec.get("memory_gb", 8.0) * 1024 * 0.7, 512),


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\agents\specialized\infrastructure\sustainer_agent.py:325:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    322:                 }
    323:             )
    324:         elif device_class == DeviceClass.EDGE:
>>> 325:             constraints.update(
    326:                 {
    327:                     "max_cpu_usage": 0.8,
    328:                     "max_memory_mb": spec.get("memory_gb", 16.0) * 1024 * 0.8,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\agents\specialized\infrastructure\sustainer_agent.py:335:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    332:                 }
    333:             )
    334:         elif device_class == DeviceClass.IOT:
>>> 335:             constraints.update(
    336:                 {
    337:                     "max_cpu_usage": 0.4,
    338:                     "max_memory_mb": spec.get("memory_gb", 2.0) * 1024 * 0.6,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\agents\specialized\infrastructure\sustainer_agent.py:346:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    343:             )
    344:         else:
    345:             # Server/Desktop - fewer constraints
>>> 346:             constraints.update(
    347:                 {
    348:                     "max_cpu_usage": 0.9,
    349:                     "max_memory_mb": spec.get("memory_gb", 32.0) * 1024 * 0.9,


GOD_METHOD: Method '__init__' is too complex: 1 complexity, 55 lines, 0 max nesting
File: packages\agents\specialized\language_education_health\tutor_agent.py:114:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    111:     paths, assessments, content generation, and progress tracking.
    112:     """
    113:
>>> 114:     def __init__(self, agent_id: str = "tutor_agent"):
    115:         self.agent_id = agent_id
    116:         self.agent_type = "Tutor"
    117:         self.capabilities = [


GOD_METHOD: Method '_initialize_phases' is too complex: 10 complexity, 112 lines, 8 max nesting
File: packages\agent_forge\core\unified_pipeline.py:155:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    152:         # Initialize phase controllers from consolidated modules
    153:         self.phases = self._initialize_phases()
    154:
>>> 155:     def _initialize_phases(self):
    156:         """Initialize all phase controllers and return enabled phases."""
    157:         phases = []
    158:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\agent_forge\core\unified_pipeline.py:504:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    501:     if config_path:
    502:         with open(config_path) as f:
    503:             config_dict = json.load(f)
>>> 504:         config_dict.update(kwargs)
    505:         config = UnifiedConfig(**config_dict)
    506:     else:
    507:         config = UnifiedConfig(**kwargs)


GOD_METHOD: Method 'evaluate_model' is too complex: 4 complexity, 64 lines, 3 max nesting
File: packages\agent_forge\evaluation\evaluator.py:59:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     56:         self.cache_dir = cache_dir or Path("data/eval_cache")
     57:         self.cache_dir.mkdir(parents=True, exist_ok=True)
     58:
>>>  59:     def evaluate_model(
     60:         self,
     61:         model_or_path: Union[torch.nn.Module, str, Path],
     62:         eval_data: Optional[List[Dict[str, Any]]] = None,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\agent_forge\experiments\demo_evomerge_50gen.py:22:0
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     19: import numpy as np
     20:
     21: # Add current directory to Python path
>>>  22: sys.path.insert(0, os.path.abspath("."))
     23:
     24: # Configure logging
     25: logging.basicConfig(


GOD_METHOD: Method 'download_benchmark_datasets' is too complex: 10 complexity, 89 lines, 8 max nesting
File: packages\agent_forge\experiments\download_benchmarks.py:29:0
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     26: logger = logging.getLogger(__name__)
     27:
     28:
>>>  29: def download_benchmark_datasets():
     30:     """Download all benchmark datasets for EvoMerge evaluation."""
     31:
     32:     datasets_to_download = [


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\agent_forge\experiments\export_hrrm_hf.py:15:0
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     12: from transformers import PretrainedConfig, PreTrainedModel
     13:
     14: # Add the current directory to Python path
>>>  15: sys.path.insert(0, os.path.abspath("."))
     16:
     17: from packages.hrrm.memory.model import MemoryAsContextTiny, MemoryConfig
     18: from packages.hrrm.planner.heads import PlannerConfig


GOD_METHOD: Method 'export_model_to_hf' is too complex: 1 complexity, 83 lines, 0 max nesting
File: packages\agent_forge\experiments\export_hrrm_hf.py:76:0
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     73:         return self.hrrm_model(input_ids, labels=labels, attn_mask=attention_mask)
     74:
     75:
>>>  76: def export_model_to_hf(model_type, output_dir):
     77:     """Export a single HRRM model to HuggingFace format."""
     78:     logger.info(f"Exporting {model_type} to HuggingFace format...")
     79:


GOD_METHOD: Method 'create_tokenizer' is too complex: 4 complexity, 53 lines, 3 max nesting
File: packages\agent_forge\experiments\export_hrrm_hf.py:162:0
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    159:     return model_output_dir
    160:
    161:
>>> 162: def create_tokenizer(output_dir):
    163:     """Create a simple tokenizer for HRRM models."""
    164:     logger.info("Creating HRRM tokenizer...")
    165:


GOD_METHOD: Method 'main' is too complex: 7 complexity, 73 lines, 4 max nesting
File: packages\agent_forge\experiments\export_hrrm_hf.py:218:0
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    215:     return tokenizer_dir
    216:
    217:
>>> 218: def main():
    219:     """Main export function."""
    220:     logger.info("🤖 Starting HRRM HuggingFace Export Process...")
    221:     logger.info("=" * 60)


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\agent_forge\experiments\run_evomerge_50gen.py:23:0
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     20: )
     21:
     22: # Add packages directory to path
>>>  23: sys.path.insert(0, str(Path(__file__).parent / "packages"))
     24:
     25: # Import and execute the actual script
     26: try:


GOD_METHOD: Method '_assign_phases_to_participants' is too complex: 11 complexity, 33 lines, 9 max nesting
File: packages\agent_forge\integration\federated_training.py:276:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    273:             self.logger.error(f"Task distribution failed: {e}")
    274:             raise
    275:
>>> 276:     def _assign_phases_to_participants(self) -> dict[str, list[str]]:
    277:         """Assign Agent Forge phases to participants based on capabilities."""
    278:         assignments = {}
    279:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\agent_forge\integration\federated_training.py:317:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    314:         config_dict = self.base_config.__dict__.copy()
    315:
    316:         # Enable only assigned phases
>>> 317:         config_dict.update(
    318:             {
    319:                 "enable_evomerge": "evomerge" in assigned_phases,
    320:                 "enable_quietstar": "quietstar" in assigned_phases,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\agent_forge\integration\federated_training.py:489:24
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    486:                 all_keys = set()
    487:                 for result in results_list:
    488:                     if result.get("metrics"):
>>> 489:                         all_keys.update(result["metrics"].keys())
    490:
    491:                 # Average metrics
    492:                 for key in all_keys:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\agent_forge\integration\federated_training.py:892:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    889:     if config_path:
    890:         with open(config_path) as f:
    891:             base_config_dict = json.load(f)
>>> 892:         base_config_dict.update(kwargs)
    893:         base_config = UnifiedConfig(**base_config_dict)
    894:     else:
    895:         base_config = UnifiedConfig(**kwargs)


GOD_METHOD: Method '_extract_comparable_metrics' is too complex: 13 complexity, 32 lines, 12 max nesting
File: packages\agent_forge\integration\fog_burst.py:221:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    218:             logger.error(f"Parity validation failed for {phase_name} task {task_id}: {e}")
    219:             return validation
    220:
>>> 221:     def _extract_comparable_metrics(self, metrics: dict[str, Any], phase_name: str) -> dict[str, int | float]:
    222:         """Extract numerical metrics that can be compared between local and fog execution"""
    223:
    224:         comparable = {}


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\agent_forge\integration\fog_burst.py:441:29
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    438:             if not execution_plan["use_fog"] or strategy == FogBurstStrategy.LOCAL_ONLY:
    439:                 # Execute locally
    440:                 logger.info(f"Executing {phase_name} locally (no suitable fog nodes)")
>>> 441:                 return await phase.execute(config)
    442:
    443:             # Execute on fog nodes
    444:             task.status = "running"


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\agent_forge\integration\fog_burst.py:456:33
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    453:
    454:                 if not parity_result["parity_passed"]:
    455:                     logger.warning(f"Parity validation failed for {phase_name} - using local fallback")
>>> 456:                     return await phase.execute(config)
    457:
    458:             # Convert fog result to PhaseResult
    459:             phase_result = self._convert_fog_result_to_phase_result(fog_result, phase_name)


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\agent_forge\integration\fog_burst.py:474:29
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    471:             # Fallback to local execution
    472:             if strategy != FogBurstStrategy.FOG_REQUIRED:
    473:                 logger.info(f"Falling back to local execution for {phase_name}")
>>> 474:                 return await phase.execute(config)
    475:             else:
    476:                 raise Exception(f"Fog execution required but failed: {str(e)}")
    477:


GOD_METHOD: Method '_node_meets_requirements' is too complex: 12 complexity, 29 lines, 7 max nesting
File: packages\agent_forge\integration\fog_burst.py:586:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    583:
    584:         return plan
    585:
>>> 586:     def _node_meets_requirements(
    587:         self, node_caps: FogNodeCapabilities, requirements: dict[str, Any], phase_name: str
    588:     ) -> bool:
    589:         """Check if node meets requirements for phase execution"""


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\agent_forge\integration\fog_burst.py:758:33
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    755:             logger.info(f"Running local validation for {task.phase_name}")
    756:
    757:             # Execute locally for comparison
>>> 758:             local_result = await phase.execute(config)
    759:             task.local_comparison = {
    760:                 "metrics": local_result.metrics,
    761:                 "metadata": local_result.metadata,


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_extract_comparable_metrics'
File: packages\agent_forge\integration\fog_burst.py:221:4
Recommendation: Extract common code into a shared function or utility
Code context:
    218:             logger.error(f"Parity validation failed for {phase_name} task {task_id}: {e}")
    219:             return validation
    220:
>>> 221:     def _extract_comparable_metrics(self, metrics: dict[str, Any], phase_name: str) -> dict[str, int | float]:
    222:         """Extract numerical metrics that can be compared between local and fog execution"""
    223:
    224:         comparable = {}


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_estimate_speedup'
File: packages\agent_forge\integration\fog_burst.py:617:4
Recommendation: Extract common code into a shared function or utility
Code context:
    614:
    615:         return True
    616:
>>> 617:     def _estimate_speedup(self, phase_name: str, node_caps: FogNodeCapabilities) -> float:
    618:         """Estimate speedup from using fog node vs local execution"""
    619:
    620:         base_speedup = 1.0


GOD_METHOD: Method 'download_and_pin_model' is too complex: 4 complexity, 59 lines, 2 max nesting
File: packages\agent_forge\model-management\download_magi_seeds.py:34:0
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     31: ]
     32:
     33:
>>>  34: def download_and_pin_model(repo_id: str, category: str) -> dict:
     35:     """Download model and get pinned revision info"""
     36:     print(f"\n=== Downloading {category.upper()}: {repo_id} ===")
     37:


GOD_METHOD: Method 'estimate_params_from_config' is too complex: 9 complexity, 29 lines, 5 max nesting
File: packages\agent_forge\model-management\search_magi_candidates.py:11:0
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
      8: from huggingface_hub.utils import HfHubHTTPError
      9:
     10:
>>>  11: def estimate_params_from_config(config: dict) -> float | None:
     12:     """Estimate parameters from model config"""
     13:     try:
     14:         if "num_parameters" in config:


GOD_METHOD: Method 'search_models_by_category' is too complex: 8 complexity, 55 lines, 4 max nesting
File: packages\agent_forge\model-management\search_magi_candidates.py:43:0
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     40:     return None
     41:
     42:
>>>  43: def search_models_by_category():
     44:     """Search for models by category using HuggingFace API"""
     45:     api = HfApi()
     46:


GOD_METHOD: Method 'analyze_model_details' is too complex: 8 complexity, 33 lines, 5 max nesting
File: packages\agent_forge\model-management\search_magi_candidates.py:129:0
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    126:     return categorized
    127:
    128:
>>> 129: def analyze_model_details(model_info: ModelInfo) -> dict:
    130:     """Analyze model details for candidate evaluation"""
    131:     details = {
    132:         "repo_id": model_info.id,


GOD_METHOD: Method 'analyze_specific_model' is too complex: 12 complexity, 49 lines, 6 max nesting
File: packages\agent_forge\model-management\search_magi_targeted.py:37:0
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     34:     }
     35:
     36:
>>>  37: def analyze_specific_model(repo_id: str) -> dict:
     38:     """Get detailed info for a specific model"""
     39:     HfApi()
     40:


GOD_METHOD: Method 'main' is too complex: 7 complexity, 40 lines, 5 max nesting
File: packages\agent_forge\model-management\search_magi_targeted.py:89:0
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     86:         return {"repo_id": repo_id, "exists": False, "error": f"Unknown error: {e!s}"}
     87:
     88:
>>>  89: def main():
     90:     """Main targeted search"""
     91:     print("Performing targeted search for known 1.5B models...")
     92:


GOD_METHOD: Method 'validate_json_output' is too complex: 13 complexity, 44 lines, 9 max nesting
File: packages\agent_forge\model-management\validate_magi_seeds.py:21:0
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     18:     TORCH_AVAILABLE = False
     19:
     20:
>>>  21: def validate_json_output(text: str, expected_function: str = "get_weather") -> dict:
     22:     """Validate if output contains valid JSON with expected function call"""
     23:     result = {
     24:         "has_json": False,


GOD_METHOD: Method 'test_model' is too complex: 12 complexity, 115 lines, 6 max nesting
File: packages\agent_forge\model-management\validate_magi_seeds.py:68:0
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     65:     return result
     66:
     67:
>>>  68: def test_model(model_path: Path, category: str) -> dict:
     69:     """Test a single model with category-specific prompts"""
     70:     result = {
     71:         "model_path": str(model_path),


GOD_METHOD: Method 'main' is too complex: 7 complexity, 73 lines, 6 max nesting
File: packages\agent_forge\model-management\validate_magi_seeds.py:186:0
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    183:     return result
    184:
    185:
>>> 186: def main():
    187:     """Main validation function"""
    188:     if not TORCH_AVAILABLE:
    189:         print("ERROR: PyTorch and transformers are required but not available")


GOD_METHOD: Method 'compose_architectures' is too complex: 10 complexity, 35 lines, 6 max nesting
File: packages\agent_forge\phases\adas.py:55:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     52:         self.composition_scale = composition_scale
     53:         self.logger = logging.getLogger(__name__)
     54:
>>>  55:     def compose_architectures(
     56:         self, base_config: dict[str, Any], target_config: dict[str, Any], composition_vector: np.ndarray
     57:     ) -> dict[str, Any]:
     58:         """


GOD_METHOD: Method '_compose_dicts' is too complex: 10 complexity, 18 lines, 6 max nesting
File: packages\agent_forge\phases\adas.py:133:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    130:
    131:         return composed
    132:
>>> 133:     def _compose_dicts(self, base: dict, target: dict, alpha: float) -> dict:
    134:         """Compose dictionaries using recursive vector composition."""
    135:         composed = base.copy()
    136:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\agent_forge\phases\adas.py:301:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    298:         efficiency_score = self._estimate_efficiency(config)
    299:         scalability_score = self._estimate_scalability(config)
    300:
>>> 301:         metrics.update(
    302:             {
    303:                 "complexity": complexity_score,
    304:                 "efficiency": efficiency_score,


GOD_METHOD: Method '_check_architecture_feasibility' is too complex: 12 complexity, 29 lines, 7 max nesting
File: packages\agent_forge\phases\adas.py:322:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    319:         metrics["final_performance"] = performance_score
    320:         return performance_score, metrics
    321:
>>> 322:     def _check_architecture_feasibility(self, config: ArchitectureConfig) -> float:
    323:         """Check if architecture configuration is feasible."""
    324:         score = 1.0
    325:


GOD_METHOD: Method '_estimate_efficiency' is too complex: 9 complexity, 28 lines, 6 max nesting
File: packages\agent_forge\phases\adas.py:370:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    367:         complexity_score = math.log10(max(total_params, 1e6)) / math.log10(1e10)
    368:         return min(complexity_score, 1.0)
    369:
>>> 370:     def _estimate_efficiency(self, config: ArchitectureConfig) -> float:
    371:         """Estimate computational efficiency (higher is better)."""
    372:         # Penalize excessive parameters
    373:         efficiency = 1.0


GOD_METHOD: Method '_estimate_scalability' is too complex: 6 complexity, 20 lines, 5 max nesting
File: packages\agent_forge\phases\adas.py:400:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    397:
    398:         return min(efficiency, 1.0)
    399:
>>> 400:     def _estimate_scalability(self, config: ArchitectureConfig) -> float:
    401:         """Estimate architecture scalability score."""
    402:         scalability = 1.0
    403:


GOD_METHOD: Method '_mutate_config' is too complex: 6 complexity, 29 lines, 5 max nesting
File: packages\agent_forge\phases\adas.py:563:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    560:
    561:         return ArchitectureConfig.from_dict(child_dict)
    562:
>>> 563:     def _mutate_config(self, config: ArchitectureConfig) -> ArchitectureConfig:
    564:         """Mutate an architecture configuration."""
    565:         mutated_dict = config.to_dict()
    566:


GOD_METHOD: Method '_fast_non_dominated_sort' is too complex: 14 complexity, 49 lines, 13 max nesting
File: packages\agent_forge\phases\adas.py:634:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    631:
    632:         return next_gen[: self.population_size]
    633:
>>> 634:     def _fast_non_dominated_sort(self, population: list[ArchitectureConfig]) -> list[list[ArchitectureConfig]]:
    635:         """Fast non-dominated sorting for NSGA-II."""
    636:         fronts = []
    637:         first_front = []


GOD_METHOD: Method 'train_architecture' is too complex: 8 complexity, 61 lines, 6 max nesting
File: packages\agent_forge\phases\adas.py:738:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    735:         self.training_steps = training_steps
    736:         self.logger = logging.getLogger(__name__)
    737:
>>> 738:     def train_architecture(self, config: ArchitectureConfig, base_model: nn.Module) -> tuple[nn.Module, dict[str, Any]]:
    739:         """
    740:         Train architecture candidate with Grokfast acceleration.
    741:


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'compose_architectures'
File: packages\agent_forge\phases\adas.py:55:4
Recommendation: Extract common code into a shared function or utility
Code context:
     52:         self.composition_scale = composition_scale
     53:         self.logger = logging.getLogger(__name__)
     54:
>>>  55:     def compose_architectures(
     56:         self, base_config: dict[str, Any], target_config: dict[str, Any], composition_vector: np.ndarray
     57:     ) -> dict[str, Any]:
     58:         """


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_compose_dicts'
File: packages\agent_forge\phases\adas.py:133:4
Recommendation: Extract common code into a shared function or utility
Code context:
    130:
    131:         return composed
    132:
>>> 133:     def _compose_dicts(self, base: dict, target: dict, alpha: float) -> dict:
    134:         """Compose dictionaries using recursive vector composition."""
    135:         composed = base.copy()
    136:


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_generate_offspring'
File: packages\agent_forge\phases\adas.py:520:4
Recommendation: Extract common code into a shared function or utility
Code context:
    517:                 score, _ = evaluator.evaluate_architecture(config, test_data)
    518:                 config.performance_score = score
    519:
>>> 520:     def _generate_offspring(self, population: list[ArchitectureConfig]) -> list[ArchitectureConfig]:
    521:         """Generate offspring through crossover and mutation."""
    522:         offspring = []
    523:


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_estimate_memory_usage'
File: packages\agent_forge\phases\adas.py:422:4
Recommendation: Extract common code into a shared function or utility
Code context:
    419:
    420:         return min(scalability, 1.0)
    421:
>>> 422:     def _estimate_memory_usage(self, config: ArchitectureConfig) -> float:
    423:         """Estimate memory usage in GB."""
    424:         # Rough parameter count calculation
    425:         total_params = config.vocab_size * config.hidden_size + config.num_layers * (  # Embeddings


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_dominates'
File: packages\agent_forge\phases\adas.py:685:4
Recommendation: Extract common code into a shared function or utility
Code context:
    682:
    683:         return fronts
    684:
>>> 685:     def _dominates(self, obj1: tuple[float, float, float], obj2: tuple[float, float, float]) -> bool:
    686:         """Check if obj1 dominates obj2 (all objectives better or equal, at least one strictly better)."""
    687:         better_equal = all(o1 >= o2 for o1, o2 in zip(obj1, obj2))
    688:         strictly_better = any(o1 > o2 for o1, o2 in zip(obj1, obj2))


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_estimate_inference_speed'
File: packages\agent_forge\phases\adas.py:434:4
Recommendation: Extract common code into a shared function or utility
Code context:
    431:         memory_gb = (total_params * 4) / (1024**3) * 2  # Model + gradients approximation
    432:         return memory_gb
    433:
>>> 434:     def _estimate_inference_speed(self, config: ArchitectureConfig) -> float:
    435:         """Estimate relative inference speed (higher is faster)."""
    436:         # Simplified speed estimation based on architecture
    437:         base_speed = 1.0


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_adapt_model_architecture'
File: packages\agent_forge\phases\adas.py:801:4
Recommendation: Extract common code into a shared function or utility
Code context:
    798:
    799:         return trained_model, metrics
    800:
>>> 801:     def _adapt_model_architecture(self, base_model: nn.Module, config: ArchitectureConfig) -> nn.Module:
    802:         """Adapt base model to match architecture configuration."""
    803:         # In a real implementation, this would modify the model architecture
    804:         # For now, we'll return the base model with updated configuration info


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_extract_model_config'
File: packages\agent_forge\phases\adas.py:1016:4
Recommendation: Extract common code into a shared function or utility
Code context:
    1013:
    1014:         return initial_configs
    1015:
>>> 1016:     def _extract_model_config(self, model: nn.Module) -> ArchitectureConfig:
    1017:         """Extract architecture configuration from model."""
    1018:         # Default configuration
    1019:         config = ArchitectureConfig()


GOD_METHOD: Method 'quantize_tensor' is too complex: 4 complexity, 64 lines, 2 max nesting
File: packages\agent_forge\phases\bitnet_compression.py:135:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    132:             "sparsity_ratio": 0.0,
    133:         }
    134:
>>> 135:     def quantize_tensor(self, tensor: torch.Tensor, preserve_precision: bool = False) -> dict[str, Any]:
    136:         """
    137:         Apply BitNet 1.58-bit quantization to a tensor.
    138:


GOD_METHOD: Method '_should_preserve_precision' is too complex: 8 complexity, 16 lines, 5 max nesting
File: packages\agent_forge\phases\bitnet_compression.py:261:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    258:         # Replace original weights with compressed versions
    259:         self._apply_compressed_weights()
    260:
>>> 261:     def _should_preserve_precision(self, layer_name: str, module: nn.Module) -> bool:
    262:         """Determine if a layer should preserve full precision."""
    263:         # Preserve embedding layers
    264:         if self.quantizer.config.preserve_embedding_precision:


GOD_METHOD: Method '_compress_with_calibration' is too complex: 9 complexity, 52 lines, 7 max nesting
File: packages\agent_forge\phases\bitnet_compression.py:509:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    506:
    507:         return model, tokenizer
    508:
>>> 509:     def _compress_with_calibration(
    510:         self, model: nn.Module, calibration_dataset: CalibrationDataset
    511:     ) -> BitNetCompressedModel:
    512:         """Compress model with calibration for better quantization."""


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\agent_forge\phases\bitnet_compression.py:818:23
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    815:             enable_fine_tuning=True,
    816:         )
    817:
>>> 818:         result = await phase.execute("./phase2_quietstar_output")
    819:
    820:         print(f"Phase Result: {result.success}")
    821:         print(f"Compression Ratio: {result.metrics.get('compression_ratio', 0):.2f}x")


GOD_METHOD: Method 'linear_merge' is too complex: 6 complexity, 41 lines, 5 max nesting
File: packages\agent_forge\phases\evomerge.py:120:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    117:     """
    118:
    119:     @staticmethod
>>> 120:     def linear_merge(
    121:         models: list[nn.Module], weights: list[float] | None = None, chunk_size: int = 1000000
    122:     ) -> nn.Module:
    123:         """Linear weighted average of model parameters with chunked processing."""


GOD_METHOD: Method 'calculate_pareto_front' is too complex: 7 complexity, 26 lines, 5 max nesting
File: packages\agent_forge\phases\evomerge.py:572:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    569:         tournament = random.sample(population, min(tournament_size, len(population)))
    570:         return max(tournament, key=lambda x: x.aggregated_fitness)
    571:
>>> 572:     def calculate_pareto_front(self, population: list[MergeCandidate]) -> list[MergeCandidate]:
    573:         """Calculate Pareto-optimal solutions for multi-objective optimization."""
    574:         pareto_front = []
    575:


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'slerp_merge'
File: packages\agent_forge\phases\evomerge.py:164:4
Recommendation: Extract common code into a shared function or utility
Code context:
    161:         return merged
    162:
    163:     @staticmethod
>>> 164:     def slerp_merge(model1: nn.Module, model2: nn.Module, t: float = 0.5, chunk_size: int = 1000000) -> nn.Module:
    165:         """Spherical linear interpolation with chunked processing."""
    166:         merged = model1.__class__(model1.config)
    167:         merged_state = {}


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'ties_merge'
File: packages\agent_forge\phases\evomerge.py:207:4
Recommendation: Extract common code into a shared function or utility
Code context:
    204:         return merged
    205:
    206:     @staticmethod
>>> 207:     def ties_merge(models: list[nn.Module], threshold: float = 0.1, chunk_size: int = 1000000) -> nn.Module:
    208:         """TIES merging: Trim, Interpolate, Elect, Sign with disk-based processing."""
    209:         merged = models[0].__class__(models[0].config)
    210:         merged_state = {}


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'dare_merge'
File: packages\agent_forge\phases\evomerge.py:249:4
Recommendation: Extract common code into a shared function or utility
Code context:
    246:         return merged
    247:
    248:     @staticmethod
>>> 249:     def dare_merge(models: list[nn.Module], threshold: float = 0.1, amplification: float = 2.0) -> nn.Module:
    250:         """DARE merging: Drop And REscale."""
    251:         merged = models[0].__class__(models[0].config)
    252:         merged_state = {}


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'task_arithmetic_merge'
File: packages\agent_forge\phases\evomerge.py:312:4
Recommendation: Extract common code into a shared function or utility
Code context:
    309:         return MergeOperators.slerp_merge(left, right, merge_ratio)
    310:
    311:     @staticmethod
>>> 312:     def task_arithmetic_merge(models: list[nn.Module], base_model: nn.Module, scaling_factor: float = 1.0) -> nn.Module:
    313:         """Task Arithmetic: Merge by averaging task vectors."""
    314:         merged = base_model.__class__(base_model.config)
    315:         merged_state = {}


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'dfs_merge'
File: packages\agent_forge\phases\evomerge.py:298:4
Recommendation: Extract common code into a shared function or utility
Code context:
    295:         return merged
    296:
    297:     @staticmethod
>>> 298:     def dfs_merge(models: list[nn.Module], merge_ratio: float = 0.3) -> nn.Module:
    299:         """DFS merge: Depth-First Search inspired hierarchical merging."""
    300:         if len(models) == 1:
    301:             return models[0]


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_check_convergence'
File: packages\agent_forge\phases\evomerge.py:1036:4
Recommendation: Extract common code into a shared function or utility
Code context:
    1033:             self.best_model = self.population[0]
    1034:             self.logger.info(f"New best model: fitness={self.best_model.aggregated_fitness:.4f}")
    1035:
>>> 1036:     def _check_convergence(self) -> bool:
    1037:         """Check if evolution has converged."""
    1038:         if len(self.fitness_history) < 5:
    1039:             return False


GOD_METHOD: Method '__init__' is too complex: 6 complexity, 24 lines, 5 max nesting
File: packages\agent_forge\phases\final_compression.py:60:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     57:     quantized coefficients and shared exponent are stored.
     58:     """
     59:
>>>  60:     def __init__(self, bits_per_weight: int = 4, max_candidates: int = 16):
     61:         self.bits_per_weight = bits_per_weight
     62:
     63:         # Configure block and latent dimensions based on bit width


GOD_METHOD: Method '_search_params' is too complex: 8 complexity, 55 lines, 7 max nesting
File: packages\agent_forge\phases\final_compression.py:388:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    385:
    386:         return best_params
    387:
>>> 388:     def _search_params(self, weights: torch.Tensor, trajectory_type: str) -> dict[str, Any]:
    389:         """Search for optimal parameters for specified trajectory type."""
    390:         mean = weights.mean().item()
    391:         std = weights.std().item()


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\agent_forge\phases\final_compression.py:440:28
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    437:                         err = torch.sum((weights - traj) ** 2).item()
    438:
    439:                         if err < best["err"]:
>>> 440:                             best.update(params)
    441:                             best["err"] = err
    442:
    443:         return best


GOD_METHOD: Method '_calculate_compressed_size' is too complex: 7 complexity, 19 lines, 6 max nesting
File: packages\agent_forge\phases\final_compression.py:840:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    837:             total_size += weight.numel() * weight.element_size()
    838:         return total_size
    839:
>>> 840:     def _calculate_compressed_size(self, compressed_weights: dict[str, Any]) -> float:
    841:         """Estimate compressed size in bytes."""
    842:         # This is a simplified estimation
    843:         # In practice would calculate actual storage requirements


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_find_best_seed'
File: packages\agent_forge\phases\final_compression.py:129:4
Recommendation: Extract common code into a shared function or utility
Code context:
    126:
    127:         return compressed
    128:
>>> 129:     def _find_best_seed(self, block: np.ndarray) -> tuple[int, np.ndarray]:
    130:         """Find best seed and coefficients for block approximation."""
    131:         best_seed, best_c, best_err = 0, None, float("inf")
    132:


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_extract_model_weights'
File: packages\agent_forge\phases\final_compression.py:825:4
Recommendation: Extract common code into a shared function or utility
Code context:
    822:                 duration_seconds=duration,
    823:             )
    824:
>>> 825:     def _extract_model_weights(self, model: nn.Module) -> dict[str, torch.Tensor]:
    826:         """Extract all weight tensors from model."""
    827:         weights = {}
    828:         for name, param in model.named_parameters():


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_calculate_model_size'
File: packages\agent_forge\phases\final_compression.py:833:4
Recommendation: Extract common code into a shared function or utility
Code context:
    830:                 weights[name] = param.data.clone()
    831:         return weights
    832:
>>> 833:     def _calculate_model_size(self, weights: dict[str, torch.Tensor]) -> float:
    834:         """Calculate total size of weights in bytes."""
    835:         total_size = 0
    836:         for weight in weights.values():


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_calculate_compressed_size'
File: packages\agent_forge\phases\final_compression.py:840:4
Recommendation: Extract common code into a shared function or utility
Code context:
    837:             total_size += weight.numel() * weight.element_size()
    838:         return total_size
    839:
>>> 840:     def _calculate_compressed_size(self, compressed_weights: dict[str, Any]) -> float:
    841:         """Estimate compressed size in bytes."""
    842:         # This is a simplified estimation
    843:         # In practice would calculate actual storage requirements


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '__init__'
File: packages\agent_forge\phases\final_compression.py:183:4
Recommendation: Extract common code into a shared function or utility
Code context:
    180:     all vectors efficiently through vector quantization.
    181:     """
    182:
>>> 183:     def __init__(self, bits: int = 2, vector_dim: int = 4, iterations: int = 10):
    184:         self.bits = bits
    185:         self.codebook_size = 2**bits
    186:         self.vector_dim = vector_dim


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '__init__'
File: packages\agent_forge\phases\final_compression.py:310:4
Recommendation: Extract common code into a shared function or utility
Code context:
    307:     achieving additional compression beyond traditional quantization methods.
    308:     """
    309:
>>> 310:     def __init__(
    311:         self, num_clusters: int = 16, trajectory_types: list[str] | None = None, max_search_iterations: int = 100
    312:     ):
    313:         self.num_clusters = num_clusters


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_init_codebook'
File: packages\agent_forge\phases\final_compression.py:226:4
Recommendation: Extract common code into a shared function or utility
Code context:
    223:
    224:         return compressed
    225:
>>> 226:     def _init_codebook(self, vectors: torch.Tensor) -> torch.Tensor:
    227:         """Initialize codebook using k-means++ algorithm."""
    228:         n = vectors.size(0)
    229:         codebook = torch.empty(self.codebook_size, self.vector_dim, device=vectors.device)


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_cluster_weights'
File: packages\agent_forge\phases\final_compression.py:357:4
Recommendation: Extract common code into a shared function or utility
Code context:
    354:
    355:         return compressed
    356:
>>> 357:     def _cluster_weights(self, weights: torch.Tensor) -> list[dict[str, Any]]:
    358:         """Cluster weights by magnitude for trajectory fitting."""
    359:         flat = weights.flatten()
    360:         idx = torch.argsort(flat.abs())


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_generate_sinusoidal_trajectory'
File: packages\agent_forge\phases\final_compression.py:459:4
Recommendation: Extract common code into a shared function or utility
Code context:
    456:             # Fallback to sinusoidal
    457:             return self._generate_sinusoidal_trajectory(length, params)
    458:
>>> 459:     def _generate_sinusoidal_trajectory(self, length: int, params: dict[str, Any]) -> torch.Tensor:
    460:         """Generate sinusoidal trajectory: A*sin(2π*α*t) + B*cos(2π*α*t) + D."""
    461:         t = torch.arange(length, dtype=torch.float32)
    462:         alpha = params["an"] / params["ad"]


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_generate_spiral_trajectory'
File: packages\agent_forge\phases\final_compression.py:467:4
Recommendation: Extract common code into a shared function or utility
Code context:
    464:
    465:         return params["A"] * torch.sin(theta) + params["B"] * torch.cos(theta) + params["D"]
    466:
>>> 467:     def _generate_spiral_trajectory(self, length: int, params: dict[str, Any]) -> torch.Tensor:
    468:         """Generate spiral trajectory: A*t*sin(2π*α*t) + B*t*cos(2π*α*t) + D."""
    469:         t = torch.arange(length, dtype=torch.float32) / length  # Normalize to [0,1]
    470:         alpha = params["an"] / params["ad"]


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_optimize_vptq_params'
File: packages\agent_forge\phases\final_compression.py:541:4
Recommendation: Extract common code into a shared function or utility
Code context:
    538:         else:
    539:             return {}  # No optimization needed for SeedLM
    540:
>>> 541:     def _optimize_vptq_params(self, weights: torch.Tensor, iterations: int) -> dict[str, Any]:
    542:         """Optimize VPTQ vector dimension using Grokfast."""
    543:         # Test different vector dimensions
    544:         vector_dims = [2, 4, 8, 16, 32]


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_optimize_hyper_params'
File: packages\agent_forge\phases\final_compression.py:573:4
Recommendation: Extract common code into a shared function or utility
Code context:
    570:         self.logger.info(f"Optimized VPTQ vector dimension: {best_dim}")
    571:         return {"optimized_vector_dim": best_dim, "optimization_score": best_score}
    572:
>>> 573:     def _optimize_hyper_params(self, weights: torch.Tensor, iterations: int) -> dict[str, Any]:
    574:         """Optimize hypercompression cluster count using Grokfast."""
    575:         cluster_counts = [8, 16, 32, 64]
    576:         best_clusters = 16


GOD_METHOD: Method 'step' is too complex: 11 complexity, 55 lines, 8 max nesting
File: packages\agent_forge\phases\forge_training.py:182:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    179:                     state["grokfast_initialized"] = False
    180:
    181:     @torch.no_grad()
>>> 182:     def step(self, closure: Callable | None = None, grokfast_lambda_override: float | None = None):
    183:         """Perform optimization step with Grokfast filtering."""
    184:         loss = None
    185:         if closure is not None:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\agent_forge\phases\forge_training.py:814:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    811:
    812:             # Update edge-of-chaos controller
    813:             if self.config.enable_edge_control and len(batch_accuracies) >= 10:
>>> 814:                 self.edge_controller.update(batch_accuracies[-10:])
    815:                 # Apply difficulty settings to future batches (implementation specific)
    816:
    817:             # Dream cycle


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\agent_forge\phases\forge_training.py:1136:23
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    1133:             enable_dream_cycles=True,
    1134:         )
    1135:
>>> 1136:         result = await phase.execute("./phase3_bitnet_output")
    1137:
    1138:         print(f"Phase Result: {result.success}")
    1139:         print(f"Final Loss: {result.metrics.get('final_loss', 0):.4f}")


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_prepare_language_modeling_examples'
File: packages\agent_forge\phases\forge_training.py:608:4
Recommendation: Extract common code into a shared function or utility
Code context:
    605:             pattern_examples = self._generate_pattern_examples(500)
    606:             self.examples.extend(pattern_examples)
    607:
>>> 608:     def _prepare_language_modeling_examples(self, dataset) -> list[dict]:
    609:         """Prepare language modeling examples."""
    610:         examples = []
    611:


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_generate_arithmetic_examples'
File: packages\agent_forge\phases\forge_training.py:623:4
Recommendation: Extract common code into a shared function or utility
Code context:
    620:
    621:         return examples
    622:
>>> 623:     def _generate_arithmetic_examples(self, num_examples: int) -> list[dict]:
    624:         """Generate arithmetic examples for grokking."""
    625:         examples = []
    626:


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_generate_pattern_examples'
File: packages\agent_forge\phases\forge_training.py:646:4
Recommendation: Extract common code into a shared function or utility
Code context:
    643:
    644:         return examples
    645:
>>> 646:     def _generate_pattern_examples(self, num_examples: int) -> list[dict]:
    647:         """Generate pattern recognition examples."""
    648:         examples = []
    649:


GOD_METHOD: Method 'parse_thought_segments' is too complex: 10 complexity, 68 lines, 7 max nesting
File: packages\agent_forge\phases\quietstar.py:188:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    185:                 if hasattr(self.base_lm_head, "bias") and self.base_lm_head.bias is not None:
    186:                     self.output_projection.bias.copy_(self.base_lm_head.bias)
    187:
>>> 188:     def parse_thought_segments(
    189:         self, input_ids: torch.Tensor, special_token_ids: dict[str, int]
    190:     ) -> list[list[ThoughtSegment]]:
    191:         """Parse input sequences to identify thought segments."""


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\agent_forge\phases\quietstar.py:1154:23
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    1151:             convergence_threshold=0.85,  # Lower for testing
    1152:         )
    1153:
>>> 1154:         result = await phase.execute("./champion_model_from_evomerge")
    1155:
    1156:         print(f"Phase Result: {result.success}")
    1157:         print(f"Convergence Rate: {result.metrics.get('final_convergence_rate', 0):.2%}")


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'mix_contexts'
File: packages\agent_forge\phases\quietstar.py:298:4
Recommendation: Extract common code into a shared function or utility
Code context:
    295:
    296:         return encoded_states
    297:
>>> 298:     def mix_contexts(
    299:         self, regular_hidden: torch.Tensor, thought_hidden: torch.Tensor, thought_mask: torch.Tensor
    300:     ) -> torch.Tensor:
    301:         """Mix regular and thought contexts using gating mechanism."""


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '__getitem__'
File: packages\agent_forge\phases\quietstar.py:731:4
Recommendation: Extract common code into a shared function or utility
Code context:
    728:     def __len__(self) -> int:
    729:         return len(self.examples)
    730:
>>> 731:     def __getitem__(self, idx):
    732:         example = self.examples[idx]
    733:
    734:         # Construct input with baked thoughts


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '__init__'
File: packages\agent_forge\phases\quietstar.py:382:4
Recommendation: Extract common code into a shared function or utility
Code context:
    379:     Provides structured reasoning with critique/alternatives/evaluation cycles.
    380:     """
    381:
>>> 382:     def __init__(self, model: nn.Module, tokenizer, config: QuietSTaRConfig):
    383:         self.model = model
    384:         self.tokenizer = tokenizer
    385:         self.config = config


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '__init__'
File: packages\agent_forge\phases\quietstar.py:722:4
Recommendation: Extract common code into a shared function or utility
Code context:
    719: class BakingDataset(Dataset):
    720:     """Dataset for prompt baking training."""
    721:
>>> 722:     def __init__(self, examples: list[dict], tokenizer, config: QuietSTaRConfig):
    723:         self.examples = examples
    724:         self.tokenizer = tokenizer
    725:         self.config = config


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_find_lm_head'
File: packages\agent_forge\phases\quietstar.py:583:4
Recommendation: Extract common code into a shared function or utility
Code context:
    580:             self.config.no_thought_token: self.tokenizer.convert_tokens_to_ids(self.config.no_thought_token),
    581:         }
    582:
>>> 583:     def _find_lm_head(self) -> nn.Module | None:
    584:         """Find the language model head in the base model."""
    585:         lm_head_names = ["lm_head", "output_layer", "classifier", "projection"]
    586:


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_prepare_gsm8k'
File: packages\agent_forge\phases\quietstar.py:915:4
Recommendation: Extract common code into a shared function or utility
Code context:
    912:
    913:         logger.info(f"Loaded {len(self.examples)} examples from {dataset_name}")
    914:
>>> 915:     def _prepare_gsm8k(self, dataset, num_samples: int) -> list[dict]:
    916:         """Prepare GSM8K examples."""
    917:         examples = []
    918:


GOD_METHOD: Method 'step' is too complex: 11 complexity, 54 lines, 7 max nesting
File: packages\agent_forge\phases\tool_persona_baking.py:220:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    217:                     state["grokfast_initialized"] = False
    218:
    219:     @torch.no_grad()
>>> 220:     def step(self, closure=None, grokfast_lambda_override: float | None = None):
    221:         """Perform optimization step with Grokfast filtering."""
    222:         loss = None
    223:         if closure is not None:


GOD_METHOD: Method '_safe_eval' is too complex: 9 complexity, 18 lines, 5 max nesting
File: packages\agent_forge\phases\tool_persona_baking.py:351:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    348:         except Exception as e:
    349:             return {"success": False, "error": str(e), "tool": "calculator"}
    350:
>>> 351:     def _safe_eval(self, expression: str) -> float:
    352:         """Safely evaluate a mathematical expression."""
    353:         if not re.fullmatch(r"[0-9+\-*/().\s^]*", expression):
    354:             raise ValueError("Invalid characters in expression")


GOD_METHOD: Method 'generate_persona_examples' is too complex: 7 complexity, 58 lines, 6 max nesting
File: packages\agent_forge\phases\tool_persona_baking.py:456:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    453:         self.config = config
    454:         self.persona_performance = defaultdict(lambda: {"scores": [], "avg_score": 0.0})
    455:
>>> 456:     def generate_persona_examples(self, persona: str, task: str) -> list[str]:
    457:         """Generate training examples for a specific persona."""
    458:         template = self.config.persona_templates.get(persona, "I'll help with {task}.")
    459:         base_prompt = template.format(task=task)


GOD_METHOD: Method 'evaluate_persona_response' is too complex: 20 complexity, 47 lines, 19 max nesting
File: packages\agent_forge\phases\tool_persona_baking.py:516:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    513:
    514:         return examples
    515:
>>> 516:     def evaluate_persona_response(self, persona: str, task: str, response: str) -> float:
    517:         """Evaluate how well a response matches the expected persona."""
    518:         # Simplified persona evaluation
    519:         score = 0.5  # Base score


GOD_METHOD: Method 'get_best_persona_for_task' is too complex: 6 complexity, 16 lines, 5 max nesting
File: packages\agent_forge\phases\tool_persona_baking.py:571:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    568:         scores = self.persona_performance[persona]["scores"]
    569:         self.persona_performance[persona]["avg_score"] = np.mean(scores)
    570:
>>> 571:     def get_best_persona_for_task(self, task: str) -> str:
    572:         """Determine the best persona for a given task."""
    573:         # Simple task-persona matching
    574:         task_lower = task.lower()


GOD_METHOD: Method '_generate_examples' is too complex: 10 complexity, 35 lines, 9 max nesting
File: packages\agent_forge\phases\tool_persona_baking.py:608:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    605:
    606:         self._generate_examples()
    607:
>>> 608:     def _generate_examples(self):
    609:         """Generate training examples for tools and personas."""
    610:         # Generate tool usage examples
    611:         for tool_name in self.config.available_tools:


GOD_METHOD: Method '_response_shows_convergence' is too complex: 7 complexity, 21 lines, 6 max nesting
File: packages\agent_forge\phases\tool_persona_baking.py:1147:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    1144:         convergence_score = correct_responses / total_responses
    1145:         return convergence_score
    1146:
>>> 1147:     def _response_shows_convergence(self, prompt: str, response: str) -> bool:
    1148:         """Check if response shows converged pattern usage."""
    1149:         prompt_lower = prompt.lower()
    1150:         response_lower = response.lower()


GOD_METHOD: Method 'get_available_phases' is too complex: 8 complexity, 19 lines, 7 max nesting
File: packages\agent_forge\phases\__init__.py:123:0
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    120: __all__ = [name for name in __all__ if globals().get(name) is not None]
    121:
    122:
>>> 123: def get_available_phases():
    124:     """Get list of available phase controllers."""
    125:     phases = []
    126:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\aivillage-module\__init__.py:10:4
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
      7:
      8: _src = Path(__file__).resolve().parent.parent / "src"
      9: if str(_src) not in sys.path:
>>>  10:     sys.path.insert(0, str(_src))
     11:
     12: # Expose submodules under src through this package
     13: __path__ = [str(_src)]


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\backup\backup_manager.py:173:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    170:             with open(self.config_path) as f:
    171:                 user_config = json.load(f)
    172:                 # Merge with defaults
>>> 173:                 default_config.update(user_config)
    174:         else:
    175:             # Create default config
    176:             self.config_path.parent.mkdir(parents=True, exist_ok=True)


GOD_METHOD: Method '_init_metadata_db' is too complex: 1 complexity, 59 lines, 0 max nesting
File: packages\core\backup\backup_manager.py:182:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    179:
    180:         return default_config
    181:
>>> 182:     def _init_metadata_db(self):
    183:         """Initialize backup metadata database."""
    184:         conn = sqlite3.connect(self.metadata_db)
    185:         cursor = conn.cursor()


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\backup\backup_manager.py:187:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    184:         conn = sqlite3.connect(self.metadata_db)
    185:         cursor = conn.cursor()
    186:
>>> 187:         cursor.execute(
    188:             """
    189:             CREATE TABLE IF NOT EXISTS backups (
    190:                 backup_id TEXT PRIMARY KEY,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\backup\backup_manager.py:211:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    208:         """
    209:         )
    210:
>>> 211:         cursor.execute(
    212:             """
    213:             CREATE TABLE IF NOT EXISTS restore_history (
    214:                 id INTEGER PRIMARY KEY AUTOINCREMENT,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\backup\backup_manager.py:226:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    223:         """
    224:         )
    225:
>>> 226:         cursor.execute(
    227:             """
    228:             CREATE INDEX IF NOT EXISTS idx_backup_created
    229:             ON backups(created_at)


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\backup\backup_manager.py:233:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    230:         """
    231:         )
    232:
>>> 233:         cursor.execute(
    234:             """
    235:             CREATE INDEX IF NOT EXISTS idx_backup_type
    236:             ON backups(backup_type, status)


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\backup\backup_manager.py:240:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    237:         """
    238:         )
    239:
>>> 240:         conn.commit()
    241:         conn.close()
    242:
    243:     def _load_backup_metadata(self):


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\backup\backup_manager.py:248:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    245:         conn = sqlite3.connect(self.metadata_db)
    246:         cursor = conn.cursor()
    247:
>>> 248:         cursor.execute("SELECT * FROM backups ORDER BY created_at DESC")
    249:         rows = cursor.fetchall()
    250:
    251:         for row in rows:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\backup\backup_manager.py:959:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    956:         hash_sha256 = hashlib.sha256()
    957:         with open(file_path, "rb") as f:
    958:             for chunk in iter(lambda: f.read(4096), b""):
>>> 959:                 hash_sha256.update(chunk)
    960:         return hash_sha256.hexdigest()
    961:
    962:     async def _encrypt_file(self, source_path: Path, dest_path: Path):


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\backup\backup_manager.py:1013:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    1010:         conn = sqlite3.connect(self.metadata_db)
    1011:         cursor = conn.cursor()
    1012:
>>> 1013:         cursor.execute(
    1014:             """
    1015:             INSERT OR REPLACE INTO backups
    1016:             (backup_id, backup_type, created_at, completed_at, status, size_bytes,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\backup\backup_manager.py:1042:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    1039:             ),
    1040:         )
    1041:
>>> 1042:         conn.commit()
    1043:         conn.close()
    1044:
    1045:     async def _get_backup_metadata(self, backup_id: str) -> BackupMetadata | None:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\backup\backup_manager.py:1050:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    1047:         conn = sqlite3.connect(self.metadata_db)
    1048:         cursor = conn.cursor()
    1049:
>>> 1050:         cursor.execute("SELECT * FROM backups WHERE backup_id = ?", (backup_id,))
    1051:         row = cursor.fetchone()
    1052:         conn.close()
    1053:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\backup\backup_manager.py:1081:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    1078:         conn = sqlite3.connect(self.metadata_db)
    1079:         cursor = conn.cursor()
    1080:
>>> 1081:         cursor.execute("SELECT backup_id FROM backups WHERE status = 'completed' ORDER BY created_at DESC LIMIT 1")
    1082:         row = cursor.fetchone()
    1083:         conn.close()
    1084:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\backup\backup_manager.py:1181:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    1178:         query += " ORDER BY created_at DESC LIMIT ?"
    1179:         params.append(limit)
    1180:
>>> 1181:         cursor.execute(query, params)
    1182:         rows = cursor.fetchall()
    1183:         conn.close()
    1184:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\backup\backup_scheduler.py:130:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    127:         if config_path.exists():
    128:             with open(config_path) as f:
    129:                 user_config = json.load(f)
>>> 130:                 default_config.update(user_config)
    131:         else:
    132:             config_path.parent.mkdir(parents=True, exist_ok=True)
    133:             with open(config_path, "w") as f:


GOD_METHOD: Method '_calculate_next_run' is too complex: 13 complexity, 55 lines, 7 max nesting
File: packages\core\backup\backup_scheduler.py:252:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    249:
    250:         return False
    251:
>>> 252:     def _calculate_next_run(self, job: ScheduledJob):
    253:         """Calculate next run time for job."""
    254:         if not job.enabled:
    255:             job.next_run = None


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\backup\backup_scheduler.py:661:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    658:         # Remove from database
    659:         conn = sqlite3.connect(self.backup_manager.metadata_db)
    660:         cursor = conn.cursor()
>>> 661:         cursor.execute("DELETE FROM backups WHERE backup_id = ?", (backup_id,))
    662:         conn.commit()
    663:         conn.close()
    664:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\backup\backup_scheduler.py:662:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    659:         conn = sqlite3.connect(self.backup_manager.metadata_db)
    660:         cursor = conn.cursor()
    661:         cursor.execute("DELETE FROM backups WHERE backup_id = ?", (backup_id,))
>>> 662:         conn.commit()
    663:         conn.close()
    664:
    665:     async def _send_alert(self, message: str, severity: str = "info"):


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\backup\restore_manager.py:124:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    121:         conn = sqlite3.connect(self.restore_db)
    122:         cursor = conn.cursor()
    123:
>>> 124:         cursor.execute(
    125:             """
    126:             CREATE TABLE IF NOT EXISTS restores (
    127:                 restore_id TEXT PRIMARY KEY,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\backup\restore_manager.py:149:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    146:         """
    147:         )
    148:
>>> 149:         cursor.execute(
    150:             """
    151:             CREATE INDEX IF NOT EXISTS idx_restore_created
    152:             ON restores(created_at)


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\backup\restore_manager.py:156:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    153:         """
    154:         )
    155:
>>> 156:         cursor.execute(
    157:             """
    158:             CREATE INDEX IF NOT EXISTS idx_restore_backup
    159:             ON restores(backup_id)


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\backup\restore_manager.py:163:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    160:         """
    161:         )
    162:
>>> 163:         conn.commit()
    164:         conn.close()
    165:
    166:     # Main restore operations


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\backup\restore_manager.py:1140:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    1137:         conn = sqlite3.connect(self.restore_db)
    1138:         cursor = conn.cursor()
    1139:
>>> 1140:         cursor.execute(
    1141:             """
    1142:             INSERT OR REPLACE INTO restores
    1143:             (restore_id, backup_id, restore_type, strategy, created_at, completed_at,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\backup\restore_manager.py:1171:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    1168:             ),
    1169:         )
    1170:
>>> 1171:         conn.commit()
    1172:         conn.close()
    1173:
    1174:     # Public query methods


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\backup\restore_manager.py:1191:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    1188:         query += " ORDER BY created_at DESC LIMIT ?"
    1189:         params.append(limit)
    1190:
>>> 1191:         cursor.execute(query, params)
    1192:         rows = cursor.fetchall()
    1193:         conn.close()
    1194:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\backup\restore_manager.py:1231:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    1228:         conn = sqlite3.connect(self.restore_db)
    1229:         cursor = conn.cursor()
    1230:
>>> 1231:         cursor.execute("SELECT * FROM restores WHERE restore_id = ?", (restore_id,))
    1232:         row = cursor.fetchone()
    1233:         conn.close()
    1234:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\benchmarks\benchmark_advanced_compression.py:12:0
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
      9:
     10: from torch import nn
     11:
>>>  12: sys.path.insert(0, str(Path(__file__).resolve().parents[1] / "src"))
     13:
     14: from core.compression.advanced_pipeline import AdvancedCompressionPipeline
     15: from core.compression.simple_quantizer import SimpleQuantizer


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\benchmarks\benchmark_compression.py:14:0
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     11: from torch import nn
     12:
     13: src_root = Path(__file__).parent.parent / "src"
>>>  14: sys.path.insert(0, str(src_root))
     15: spec = importlib.util.spec_from_file_location(
     16:     "simple_quantizer", src_root / "core" / "compression" / "simple_quantizer.py"
     17: )


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\benchmarks\benchmark_unified_compression.py:12:0
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
      9: import psutil
     10: from torch import nn
     11:
>>>  12: sys.path.insert(0, str(Path(__file__).parent.parent / "src"))
     13:
     14: from compression.pipeline import UnifiedCompressor
     15: from core.compression.advanced_pipeline import AdvancedCompressionPipeline


GOD_METHOD: Method 'benchmark_all_methods' is too complex: 11 complexity, 81 lines, 9 max nesting
File: packages\core\benchmarks\benchmark_unified_compression.py:33:0
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     30:     }
     31:
     32:
>>>  33: def benchmark_all_methods() -> None:
     34:     print("Comprehensive Compression Benchmark")
     35:     print("=" * 80)
     36:     print("Comparing: Sprint 9 SimpleQuantizer vs Advanced Pipeline vs Unified")


GOD_METHOD: Method '_create_cross_domain_pairs' is too complex: 1 complexity, 129 lines, 0 max nesting
File: packages\core\benchmarks\hyperag_creativity.py:106:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    103:         ]
    104:         return tasks
    105:
>>> 106:     def _create_cross_domain_pairs(self) -> list[CrossDomainPair]:
    107:         """Create cross-domain concept connection tasks."""
    108:         pairs = [
    109:             # Biology ↔ Finance


GOD_METHOD: Method 'create_sample_user_scores' is too complex: 7 complexity, 23 lines, 6 max nesting
File: packages\core\benchmarks\hyperag_creativity.py:647:0
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    644:         logger.info(f"Metrics saved to {metrics_file}")
    645:
    646:
>>> 647: def create_sample_user_scores():
    648:     """Create a sample user evaluation scores file."""
    649:     sample_scores = {}
    650:


GOD_METHOD: Method '_create_movielens_queries' is too complex: 1 complexity, 94 lines, 0 max nesting
File: packages\core\benchmarks\hyperag_personalization.py:87:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     84:         self.movielens_queries = self._create_movielens_queries()
     85:         self.doc_click_queries = self._create_doc_click_queries()
     86:
>>>  87:     def _create_movielens_queries(self) -> list[UserQuery]:
     88:         """Create MovieLens-style queries."""
     89:         queries = []
     90:


GOD_METHOD: Method '_create_doc_click_queries' is too complex: 1 complexity, 94 lines, 0 max nesting
File: packages\core\benchmarks\hyperag_personalization.py:183:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    180:
    181:         return queries
    182:
>>> 183:     def _create_doc_click_queries(self) -> list[UserQuery]:
    184:         """Create document click-based queries."""
    185:         queries = []
    186:


GOD_METHOD: Method 'get_personalization_contexts' is too complex: 1 complexity, 82 lines, 0 max nesting
File: packages\core\benchmarks\hyperag_personalization.py:279:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    276:
    277:         return queries
    278:
>>> 279:     def get_personalization_contexts(self) -> dict[str, PersonalizationContext]:
    280:         """Get user personalization contexts."""
    281:         contexts = {}
    282:


GOD_METHOD: Method '_calculate_alpha_factor' is too complex: 12 complexity, 27 lines, 7 max nesting
File: packages\core\benchmarks\hyperag_personalization.py:534:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    531:
    532:         return results
    533:
>>> 534:     def _calculate_alpha_factor(self, item_id: str, context: PersonalizationContext) -> float:
    535:         """Calculate α rescoring factor based on user preferences."""
    536:         # Mock α calculation based on user preferences
    537:         alpha_score = 0.5


GOD_METHOD: Method '_calculate_icl_factor' is too complex: 12 complexity, 42 lines, 6 max nesting
File: packages\core\benchmarks\hyperag_personalization.py:612:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    609:
    610:         return results
    611:
>>> 612:     def _calculate_icl_factor(self, query: UserQuery, item_id: str, context: PersonalizationContext) -> float:
    613:         """Calculate ICL enhancement factor using single triple context."""
    614:         # Mock ICL calculation - in reality would use language models
    615:         icl_score = 0.5


GOD_METHOD: Method '_generate_comparison_analysis' is too complex: 8 complexity, 38 lines, 6 max nesting
File: packages\core\benchmarks\hyperag_personalization.py:854:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    851:         logger.info(f"Results saved to {results_file}")
    852:         logger.info(f"Metrics saved to {metrics_file}")
    853:
>>> 854:     def _generate_comparison_analysis(self, results: dict[str, PersonalizationMetrics]) -> dict[str, Any]:
    855:         """Generate comparative analysis of approaches."""
    856:         base_result = results.get("Base PPR")
    857:         if not base_result:


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_create_movielens_queries'
File: packages\core\benchmarks\hyperag_personalization.py:87:4
Recommendation: Extract common code into a shared function or utility
Code context:
     84:         self.movielens_queries = self._create_movielens_queries()
     85:         self.doc_click_queries = self._create_doc_click_queries()
     86:
>>>  87:     def _create_movielens_queries(self) -> list[UserQuery]:
     88:         """Create MovieLens-style queries."""
     89:         queries = []
     90:


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_create_doc_click_queries'
File: packages\core\benchmarks\hyperag_personalization.py:183:4
Recommendation: Extract common code into a shared function or utility
Code context:
    180:
    181:         return queries
    182:
>>> 183:     def _create_doc_click_queries(self) -> list[UserQuery]:
    184:         """Create document click-based queries."""
    185:         queries = []
    186:


GOD_METHOD: Method 'inject_allergy_conflict' is too complex: 13 complexity, 71 lines, 8 max nesting
File: packages\core\benchmarks\hyperag_repair_test_suite.py:193:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    190:
    191:         return nodes, edges
    192:
>>> 193:     def inject_allergy_conflict(self, nodes: list[TestGraphNode], edges: list[TestGraphEdge]) -> InjectedViolation:
    194:         """Inject an allergy conflict violation."""
    195:         violation_id = f"violation_{uuid.uuid4().hex[:8]}"
    196:


GOD_METHOD: Method '_calculate_repair_metrics' is too complex: 4 complexity, 51 lines, 2 max nesting
File: packages\core\benchmarks\hyperag_repair_test_suite.py:795:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    792:
    793:         return residual_violations
    794:
>>> 795:     def _calculate_repair_metrics(
    796:         self,
    797:         violations: list[InjectedViolation],
    798:         detections: list[dict[str, Any]],


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'inject_temporal_inconsistency'
File: packages\core\benchmarks\hyperag_repair_test_suite.py:312:4
Recommendation: Extract common code into a shared function or utility
Code context:
    309:             },
    310:         )
    311:
>>> 312:     def inject_temporal_inconsistency(
    313:         self, nodes: list[TestGraphNode], edges: list[TestGraphEdge]
    314:     ) -> InjectedViolation:
    315:         """Inject a temporal inconsistency violation."""


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'inject_missing_critical_property'
File: packages\core\benchmarks\hyperag_repair_test_suite.py:360:4
Recommendation: Extract common code into a shared function or utility
Code context:
    357:             },
    358:         )
    359:
>>> 360:     def inject_missing_critical_property(
    361:         self, nodes: list[TestGraphNode], edges: list[TestGraphEdge]
    362:     ) -> InjectedViolation:
    363:         """Inject a missing critical property violation."""


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\benchmarks\production_benchmark_suite.py:27:0
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     24:     sys.exit(1)
     25:
     26: # Add src to path for imports
>>>  27: sys.path.insert(0, str(Path(__file__).parent.parent / "src"))
     28:
     29: # Configure logging
     30: logging.basicConfig(


GOD_METHOD: Method 'run_compression_test' is too complex: 5 complexity, 64 lines, 1 max nesting
File: packages\core\benchmarks\production_benchmark_suite.py:84:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     81:     def __init__(self) -> None:
     82:         self.results = {}
     83:
>>>  84:     def run_compression_test(self) -> dict[str, Any]:
     85:         """Test compression pipeline with sample model."""
     86:         logger.info("Starting compression pipeline benchmark...")
     87:         monitor = PerformanceMonitor()


GOD_METHOD: Method 'run_evolution_test' is too complex: 3 complexity, 51 lines, 0 max nesting
File: packages\core\benchmarks\production_benchmark_suite.py:157:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    154:     def __init__(self) -> None:
    155:         self.results = {}
    156:
>>> 157:     def run_evolution_test(self) -> dict[str, Any]:
    158:         """Test evolution system with mini tournament."""
    159:         logger.info("Starting evolution system benchmark...")
    160:         monitor = PerformanceMonitor()


GOD_METHOD: Method 'run_rag_test' is too complex: 4 complexity, 80 lines, 1 max nesting
File: packages\core\benchmarks\production_benchmark_suite.py:217:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    214:     def __init__(self) -> None:
    215:         self.results = {}
    216:
>>> 217:     def run_rag_test(self) -> dict[str, Any]:
    218:         """Test RAG pipeline with sample documents and queries."""
    219:         logger.info("Starting RAG pipeline benchmark...")
    220:         monitor = PerformanceMonitor()


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\benchmarks\production_benchmark_suite.py:258:25
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    255:
    256:             for query in test_queries:
    257:                 query_start = time.time()
>>> 258:                 result = rag_manager.query(query, top_k=3)
    259:                 query_time = time.time() - query_start
    260:                 total_query_time += query_time
    261:


GOD_METHOD: Method 'compare_with_baseline' is too complex: 10 complexity, 40 lines, 6 max nesting
File: packages\core\benchmarks\production_benchmark_suite.py:360:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    357:         logger.info(f"Results saved to {filepath}")
    358:         return str(filepath)
    359:
>>> 360:     def compare_with_baseline(self, results: dict[str, Any]) -> dict[str, Any]:
    361:         """Compare current results with baseline if available."""
    362:         try:
    363:             baseline_path = Path(__file__).parent / "benchmark_results" / "baseline.json"


GOD_METHOD: Method 'main' is too complex: 11 complexity, 91 lines, 9 max nesting
File: packages\core\benchmarks\production_benchmark_suite.py:403:0
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    400:             return {"status": "comparison_failed", "error": str(e)}
    401:
    402:
>>> 403: def main() -> int | None:
    404:     """Run the production benchmark suite."""
    405:     print("=" * 60)
    406:     print("AIVillage Production System Benchmark Suite")


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'run_compression_test'
File: packages\core\benchmarks\production_benchmark_suite.py:84:4
Recommendation: Extract common code into a shared function or utility
Code context:
     81:     def __init__(self) -> None:
     82:         self.results = {}
     83:
>>>  84:     def run_compression_test(self) -> dict[str, Any]:
     85:         """Test compression pipeline with sample model."""
     86:         logger.info("Starting compression pipeline benchmark...")
     87:         monitor = PerformanceMonitor()


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'run_evolution_test'
File: packages\core\benchmarks\production_benchmark_suite.py:157:4
Recommendation: Extract common code into a shared function or utility
Code context:
    154:     def __init__(self) -> None:
    155:         self.results = {}
    156:
>>> 157:     def run_evolution_test(self) -> dict[str, Any]:
    158:         """Test evolution system with mini tournament."""
    159:         logger.info("Starting evolution system benchmark...")
    160:         monitor = PerformanceMonitor()


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'run_rag_test'
File: packages\core\benchmarks\production_benchmark_suite.py:217:4
Recommendation: Extract common code into a shared function or utility
Code context:
    214:     def __init__(self) -> None:
    215:         self.results = {}
    216:
>>> 217:     def run_rag_test(self) -> dict[str, Any]:
    218:         """Test RAG pipeline with sample documents and queries."""
    219:         logger.info("Starting RAG pipeline benchmark...")
    220:         monitor = PerformanceMonitor()


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\bin\admin_server.py:26:0
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     23:
     24: # Add the project root to the Python path
     25: project_root = Path(__file__).parent.parent.parent.parent
>>>  26: sys.path.insert(0, str(project_root))
     27:
     28: # Configure logging
     29: logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s")


GOD_METHOD: Method 'setup_routes' is too complex: 6 complexity, 150 lines, 2 max nesting
File: packages\core\bin\admin_server.py:55:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     52:             allow_headers=["*"],
     53:         )
     54:
>>>  55:     def setup_routes(self):
     56:         """Setup API routes"""
     57:
     58:         @self.app.get("/", response_class=HTMLResponse)


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\bin\main.py:30:0
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     27: from src.cli.base import build_parser, dispatch
     28:
     29: # Add project root to path
>>>  30: sys.path.insert(0, str(Path(__file__).parent))
     31:
     32:
     33: def _configure(parser) -> None:


GOD_METHOD: Method 'run_king_mode' is too complex: 7 complexity, 20 lines, 5 max nesting
File: packages\core\bin\main.py:75:0
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     72:         return 1
     73:
     74:
>>>  75: def run_king_mode(args):
     76:     """Run KING agent mode."""
     77:     try:
     78:         from agents.king.main import main as king_main


GOD_METHOD: Method 'run_rag_mode' is too complex: 8 complexity, 22 lines, 6 max nesting
File: packages\core\bin\main.py:98:0
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     95:         return 1
     96:
     97:
>>>  98: def run_rag_mode(args):
     99:     """Run RAG system mode."""
    100:     try:
    101:         from rag_system.main import main as rag_main


GOD_METHOD: Method 'is_enabled_for_user' is too complex: 11 complexity, 32 lines, 7 max nesting
File: packages\core\common\flags.py:55:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     52:         self.created_at = time.time()
     53:         self.updated_at = time.time()
     54:
>>>  55:     def is_enabled_for_user(self, user_id: str | None = None, environment: str = "production") -> bool:
     56:         """Check if flag is enabled for a specific user/environment."""
     57:         # Check environment filter
     58:         if self.environments != ["all"] and environment not in self.environments:


GOD_METHOD: Method '_initialize_builtin_rules' is too complex: 2 complexity, 144 lines, 1 max nesting
File: packages\core\compliance\pii_phi_manager.py:156:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    153:         self.compiled_patterns: dict[str, re.Pattern] = {}
    154:         self._initialize_builtin_rules()
    155:
>>> 156:     def _initialize_builtin_rules(self):
    157:         """Initialize built-in detection rules for common PII/PHI."""
    158:
    159:         rules = [


GOD_METHOD: Method 'detect_in_text' is too complex: 9 complexity, 30 lines, 8 max nesting
File: packages\core\compliance\pii_phi_manager.py:310:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    307:         except re.error as e:
    308:             logger.error(f"Invalid regex pattern for rule {rule.rule_id}: {e}")
    309:
>>> 310:     def detect_in_text(self, text: str) -> list[tuple[PIIDetectionRule, list[str]]]:
    311:         """Detect PII/PHI in text content."""
    312:         detections = []
    313:


GOD_METHOD: Method 'calculate_confidence' is too complex: 7 complexity, 28 lines, 6 max nesting
File: packages\core\compliance\pii_phi_manager.py:355:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    352:
    353:         return matches
    354:
>>> 355:     def calculate_confidence(
    356:         self, rule: PIIDetectionRule, matches: list[str], field_name: str = "", total_samples: int = 1
    357:     ) -> float:
    358:         """Calculate confidence score for a detection."""


GOD_METHOD: Method '_validate_match' is too complex: 9 complexity, 25 lines, 6 max nesting
File: packages\core\compliance\pii_phi_manager.py:385:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    382:
    383:         return min(base_confidence, 1.0)
    384:
>>> 385:     def _validate_match(self, rule: PIIDetectionRule, match: str) -> bool:
    386:         """Validate a match using additional checks."""
    387:         # Add specific validation logic for different data types
    388:         if rule.rule_id == "ssn":


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\compliance\pii_phi_manager.py:490:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    487:         if self.config_path.exists():
    488:             with open(self.config_path) as f:
    489:                 user_config = json.load(f)
>>> 490:                 default_config.update(user_config)
    491:         else:
    492:             self.config_path.parent.mkdir(parents=True, exist_ok=True)
    493:             with open(self.config_path, "w") as f:


GOD_METHOD: Method '_init_database' is too complex: 1 complexity, 114 lines, 0 max nesting
File: packages\core\compliance\pii_phi_manager.py:498:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    495:
    496:         return default_config
    497:
>>> 498:     def _init_database(self):
    499:         """Initialize compliance database."""
    500:         conn = sqlite3.connect(self.compliance_db)
    501:         cursor = conn.cursor()


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\compliance\pii_phi_manager.py:504:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    501:         cursor = conn.cursor()
    502:
    503:         # Data locations table
>>> 504:         cursor.execute(
    505:             """
    506:             CREATE TABLE IF NOT EXISTS data_locations (
    507:                 location_id TEXT PRIMARY KEY,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\compliance\pii_phi_manager.py:535:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    532:         )
    533:
    534:         # Retention jobs table
>>> 535:         cursor.execute(
    536:             """
    537:             CREATE TABLE IF NOT EXISTS retention_jobs (
    538:                 job_id TEXT PRIMARY KEY,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\compliance\pii_phi_manager.py:565:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    562:         )
    563:
    564:         # Audit log table
>>> 565:         cursor.execute(
    566:             """
    567:             CREATE TABLE IF NOT EXISTS audit_log (
    568:                 audit_id TEXT PRIMARY KEY,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\compliance\pii_phi_manager.py:585:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    582:         )
    583:
    584:         # Detection history table
>>> 585:         cursor.execute(
    586:             """
    587:             CREATE TABLE IF NOT EXISTS detection_history (
    588:                 detection_id TEXT PRIMARY KEY,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\compliance\pii_phi_manager.py:603:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    600:         )
    601:
    602:         # Create indexes
>>> 603:         cursor.execute("CREATE INDEX IF NOT EXISTS idx_locations_classification ON data_locations(classification)")
    604:         cursor.execute("CREATE INDEX IF NOT EXISTS idx_locations_tenant ON data_locations(tenant_id)")
    605:         cursor.execute("CREATE INDEX IF NOT EXISTS idx_locations_compliance ON data_locations(compliant)")
    606:         cursor.execute("CREATE INDEX IF NOT EXISTS idx_jobs_enabled ON retention_jobs(enabled)")


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\compliance\pii_phi_manager.py:604:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    601:
    602:         # Create indexes
    603:         cursor.execute("CREATE INDEX IF NOT EXISTS idx_locations_classification ON data_locations(classification)")
>>> 604:         cursor.execute("CREATE INDEX IF NOT EXISTS idx_locations_tenant ON data_locations(tenant_id)")
    605:         cursor.execute("CREATE INDEX IF NOT EXISTS idx_locations_compliance ON data_locations(compliant)")
    606:         cursor.execute("CREATE INDEX IF NOT EXISTS idx_jobs_enabled ON retention_jobs(enabled)")
    607:         cursor.execute("CREATE INDEX IF NOT EXISTS idx_jobs_next_run ON retention_jobs(next_run)")


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\compliance\pii_phi_manager.py:605:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    602:         # Create indexes
    603:         cursor.execute("CREATE INDEX IF NOT EXISTS idx_locations_classification ON data_locations(classification)")
    604:         cursor.execute("CREATE INDEX IF NOT EXISTS idx_locations_tenant ON data_locations(tenant_id)")
>>> 605:         cursor.execute("CREATE INDEX IF NOT EXISTS idx_locations_compliance ON data_locations(compliant)")
    606:         cursor.execute("CREATE INDEX IF NOT EXISTS idx_jobs_enabled ON retention_jobs(enabled)")
    607:         cursor.execute("CREATE INDEX IF NOT EXISTS idx_jobs_next_run ON retention_jobs(next_run)")
    608:         cursor.execute("CREATE INDEX IF NOT EXISTS idx_audit_timestamp ON audit_log(timestamp)")


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\compliance\pii_phi_manager.py:606:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    603:         cursor.execute("CREATE INDEX IF NOT EXISTS idx_locations_classification ON data_locations(classification)")
    604:         cursor.execute("CREATE INDEX IF NOT EXISTS idx_locations_tenant ON data_locations(tenant_id)")
    605:         cursor.execute("CREATE INDEX IF NOT EXISTS idx_locations_compliance ON data_locations(compliant)")
>>> 606:         cursor.execute("CREATE INDEX IF NOT EXISTS idx_jobs_enabled ON retention_jobs(enabled)")
    607:         cursor.execute("CREATE INDEX IF NOT EXISTS idx_jobs_next_run ON retention_jobs(next_run)")
    608:         cursor.execute("CREATE INDEX IF NOT EXISTS idx_audit_timestamp ON audit_log(timestamp)")
    609:         cursor.execute("CREATE INDEX IF NOT EXISTS idx_audit_event_type ON audit_log(event_type)")


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\compliance\pii_phi_manager.py:607:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    604:         cursor.execute("CREATE INDEX IF NOT EXISTS idx_locations_tenant ON data_locations(tenant_id)")
    605:         cursor.execute("CREATE INDEX IF NOT EXISTS idx_locations_compliance ON data_locations(compliant)")
    606:         cursor.execute("CREATE INDEX IF NOT EXISTS idx_jobs_enabled ON retention_jobs(enabled)")
>>> 607:         cursor.execute("CREATE INDEX IF NOT EXISTS idx_jobs_next_run ON retention_jobs(next_run)")
    608:         cursor.execute("CREATE INDEX IF NOT EXISTS idx_audit_timestamp ON audit_log(timestamp)")
    609:         cursor.execute("CREATE INDEX IF NOT EXISTS idx_audit_event_type ON audit_log(event_type)")
    610:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\compliance\pii_phi_manager.py:608:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    605:         cursor.execute("CREATE INDEX IF NOT EXISTS idx_locations_compliance ON data_locations(compliant)")
    606:         cursor.execute("CREATE INDEX IF NOT EXISTS idx_jobs_enabled ON retention_jobs(enabled)")
    607:         cursor.execute("CREATE INDEX IF NOT EXISTS idx_jobs_next_run ON retention_jobs(next_run)")
>>> 608:         cursor.execute("CREATE INDEX IF NOT EXISTS idx_audit_timestamp ON audit_log(timestamp)")
    609:         cursor.execute("CREATE INDEX IF NOT EXISTS idx_audit_event_type ON audit_log(event_type)")
    610:
    611:         conn.commit()


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\compliance\pii_phi_manager.py:609:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    606:         cursor.execute("CREATE INDEX IF NOT EXISTS idx_jobs_enabled ON retention_jobs(enabled)")
    607:         cursor.execute("CREATE INDEX IF NOT EXISTS idx_jobs_next_run ON retention_jobs(next_run)")
    608:         cursor.execute("CREATE INDEX IF NOT EXISTS idx_audit_timestamp ON audit_log(timestamp)")
>>> 609:         cursor.execute("CREATE INDEX IF NOT EXISTS idx_audit_event_type ON audit_log(event_type)")
    610:
    611:         conn.commit()
    612:         conn.close()


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\compliance\pii_phi_manager.py:611:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    608:         cursor.execute("CREATE INDEX IF NOT EXISTS idx_audit_timestamp ON audit_log(timestamp)")
    609:         cursor.execute("CREATE INDEX IF NOT EXISTS idx_audit_event_type ON audit_log(event_type)")
    610:
>>> 611:         conn.commit()
    612:         conn.close()
    613:
    614:     def _load_existing_data(self):


GOD_METHOD: Method '_load_existing_data' is too complex: 6 complexity, 63 lines, 2 max nesting
File: packages\core\compliance\pii_phi_manager.py:614:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    611:         conn.commit()
    612:         conn.close()
    613:
>>> 614:     def _load_existing_data(self):
    615:         """Load existing data locations and retention jobs from database."""
    616:         conn = sqlite3.connect(self.compliance_db)
    617:         conn.row_factory = sqlite3.Row


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\compliance\pii_phi_manager.py:621:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    618:         cursor = conn.cursor()
    619:
    620:         # Load data locations
>>> 621:         cursor.execute("SELECT * FROM data_locations")
    622:         for row in cursor.fetchall():
    623:             location = DataLocation(
    624:                 location_id=row["location_id"],


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\compliance\pii_phi_manager.py:649:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    646:             self.data_locations[location.location_id] = location
    647:
    648:         # Load retention jobs
>>> 649:         cursor.execute("SELECT * FROM retention_jobs")
    650:         for row in cursor.fetchall():
    651:             job = RetentionJob(
    652:                 job_id=row["job_id"],


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\compliance\pii_phi_manager.py:690:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    687:             cursor = conn.cursor()
    688:
    689:             # Get all tables
>>> 690:             cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
    691:             tables = [row[0] for row in cursor.fetchall()]
    692:
    693:             for table_name in tables:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\compliance\pii_phi_manager.py:699:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    696:                     continue
    697:
    698:                 # Get table schema
>>> 699:                 cursor.execute(f"PRAGMA table_info({table_name})")
    700:                 columns = cursor.fetchall()
    701:
    702:                 for col_info in columns:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\compliance\pii_phi_manager.py:710:24
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    707:
    708:                     if field_rules:
    709:                         # Sample data from column
>>> 710:                         cursor.execute(
    711:                             f"SELECT DISTINCT {col_name} FROM {table_name} WHERE {col_name} IS NOT NULL LIMIT 100"
    712:                         )
    713:                         samples = [row[0] for row in cursor.fetchall() if row[0]]


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\compliance\pii_phi_manager.py:735:32
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    732:                                 )
    733:
    734:                                 # Get record count
>>> 735:                                 cursor.execute(f"SELECT COUNT(*) FROM {table_name}")
    736:                                 record_count = cursor.fetchone()[0]
    737:
    738:                                 location = DataLocation(


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\compliance\pii_phi_manager.py:1078:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    1075:             # In production, this would be customized per table structure
    1076:
    1077:             # Try to find a timestamp column
>>> 1078:             cursor.execute(f"PRAGMA table_info({location.table_name})")
    1079:             columns = cursor.fetchall()
    1080:
    1081:             timestamp_columns = []


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\compliance\pii_phi_manager.py:1090:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    1087:             if timestamp_columns:
    1088:                 # Delete records older than cutoff date
    1089:                 timestamp_col = timestamp_columns[0]
>>> 1090:                 cursor.execute(
    1091:                     f"""
    1092:                     DELETE FROM {location.table_name}
    1093:                     WHERE {timestamp_col} < ?


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\compliance\pii_phi_manager.py:1099:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    1096:                 )
    1097:
    1098:                 deleted_count = cursor.rowcount
>>> 1099:                 conn.commit()
    1100:
    1101:                 logger.info(f"Deleted {deleted_count} records from {location.table_name}")
    1102:             else:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\compliance\pii_phi_manager.py:1140:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    1137:         conn = sqlite3.connect(self.compliance_db)
    1138:         cursor = conn.cursor()
    1139:
>>> 1140:         cursor.execute(
    1141:             """
    1142:             INSERT OR REPLACE INTO data_locations
    1143:             (location_id, source_type, path, table_name, column_name, field_name, tenant_id,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\compliance\pii_phi_manager.py:1174:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    1171:             ),
    1172:         )
    1173:
>>> 1174:         conn.commit()
    1175:         conn.close()
    1176:
    1177:     async def _save_retention_job(self, job: RetentionJob):


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\compliance\pii_phi_manager.py:1182:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    1179:         conn = sqlite3.connect(self.compliance_db)
    1180:         cursor = conn.cursor()
    1181:
>>> 1182:         cursor.execute(
    1183:             """
    1184:             INSERT OR REPLACE INTO retention_jobs
    1185:             (job_id, name, description, location_ids, retention_policy, custom_retention_days,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\compliance\pii_phi_manager.py:1215:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    1212:             ),
    1213:         )
    1214:
>>> 1215:         conn.commit()
    1216:         conn.close()
    1217:
    1218:     async def _log_audit_event(


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\compliance\pii_phi_manager.py:1235:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    1232:         conn = sqlite3.connect(self.compliance_db)
    1233:         cursor = conn.cursor()
    1234:
>>> 1235:         cursor.execute(
    1236:             """
    1237:             INSERT INTO audit_log
    1238:             (audit_id, event_type, timestamp, user_id, tenant_id, location_id, job_id,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\compliance\pii_phi_manager.py:1257:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    1254:             ),
    1255:         )
    1256:
>>> 1257:         conn.commit()
    1258:         conn.close()
    1259:
    1260:     def _calculate_risk_level(self, classification: DataClassification | None, details: dict | None) -> str:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\cost_management\cloud_cost_tagging.py:241:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    238:         try:
    239:             with open(self.config_path) as f:
    240:                 user_config = json.load(f)
>>> 241:             default_config.update(user_config)
    242:         except Exception as e:
    243:             logger.warning(f"Could not load config from {self.config_path}: {e}")
    244:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\cost_management\cloud_cost_tagging.py:279:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    276:         # Add custom tags
    277:         tag_dict = phase_tags.to_dict()
    278:         if custom_tags:
>>> 279:             tag_dict.update(custom_tags)
    280:
    281:         tagged_count = 0
    282:


GOD_METHOD: Method 'get_cost_allocation_report' is too complex: 7 complexity, 48 lines, 5 max nesting
File: packages\core\cost_management\cloud_cost_tagging.py:656:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    653:             "recommendations": recommendations,
    654:         }
    655:
>>> 656:     def get_cost_allocation_report(self, phase: str | None = None) -> dict[str, Any]:
    657:         """Generate comprehensive cost allocation report."""
    658:
    659:         if phase:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\cost_management\cost_governance_dashboard.py:215:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    212:         try:
    213:             with open(config_path) as f:
    214:                 user_config = json.load(f)
>>> 215:             default_config.update(user_config)
    216:         except Exception as e:
    217:             logger.warning(f"Could not load config from {config_path}: {e}")
    218:


GOD_METHOD: Method 'get_governance_report' is too complex: 2 complexity, 57 lines, 1 max nesting
File: packages\core\cost_management\cost_governance_dashboard.py:716:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    713:         # This would implement actual shutdown logic
    714:         logger.critical(f"Emergency shutdown executed for {category}")
    715:
>>> 716:     def get_governance_report(self) -> dict[str, Any]:
    717:         """Generate comprehensive governance report."""
    718:
    719:         # Budget status summary


GOD_METHOD: Method '_validate_device_capabilities' is too complex: 7 complexity, 20 lines, 5 max nesting
File: packages\core\cost_management\edge_cost_allocation.py:235:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    232:
    233:         return True
    234:
>>> 235:     def _validate_device_capabilities(self, capabilities: DeviceCapabilities) -> bool:
    236:         """Validate device capabilities for minimum requirements."""
    237:         # Minimum hardware requirements
    238:         if capabilities.cpu_cores < 1:


GOD_METHOD: Method '_determine_participation_level' is too complex: 9 complexity, 31 lines, 6 max nesting
File: packages\core\cost_management\edge_cost_allocation.py:510:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    507:             "hourly_cost": hourly_cost,
    508:         }
    509:
>>> 510:     def _determine_participation_level(
    511:         self,
    512:         device: DeviceCapabilities,
    513:         cpu_allocation: float,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\cost_management\p2p_transport_optimizer.py:392:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    389:         if self.edge_manager and hasattr(self.edge_manager, "get_device_status"):
    390:             try:
    391:                 status = await self.edge_manager.get_device_status()
>>> 392:                 context.update(status)
    393:             except Exception as e:
    394:                 logger.warning(f"Could not get device context: {e}")
    395:


GOD_METHOD: Method 'get_cost_optimization_report' is too complex: 4 complexity, 52 lines, 3 max nesting
File: packages\core\cost_management\p2p_transport_optimizer.py:494:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    491:
    492:         return usage_cost
    493:
>>> 494:     def get_cost_optimization_report(self) -> dict[str, Any]:
    495:         """Generate comprehensive cost optimization report."""
    496:         if not self.routing_decisions:
    497:             return {"message": "No routing decisions recorded yet"}


GOD_METHOD: Method '_generate_optimization_recommendations' is too complex: 10 complexity, 40 lines, 8 max nesting
File: packages\core\cost_management\p2p_transport_optimizer.py:548:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    545:             "recommendations": self._generate_optimization_recommendations(),
    546:         }
    547:
>>> 548:     def _generate_optimization_recommendations(self) -> list[str]:
    549:         """Generate optimization recommendations based on usage patterns."""
    550:         recommendations = []
    551:


GOD_METHOD: Method '_load_pricing_data' is too complex: 1 complexity, 102 lines, 0 max nesting
File: packages\core\deployment\cloud_cost_analyzer.py:156:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    153:
    154:         logger.info("Cloud cost analyzer initialized")
    155:
>>> 156:     def _load_pricing_data(self) -> dict[str, Any]:
    157:         """Load cloud provider pricing data."""
    158:         # In production, this would load from external pricing APIs
    159:         # For now, we'll use estimated pricing based on recent data (August 2025)


GOD_METHOD: Method '_load_deployment_configs' is too complex: 1 complexity, 220 lines, 0 max nesting
File: packages\core\deployment\cloud_cost_analyzer.py:260:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    257:             },
    258:         }
    259:
>>> 260:     def _load_deployment_configs(self) -> dict[DeploymentType, dict[str, Any]]:
    261:         """Load deployment configurations."""
    262:         return {
    263:             DeploymentType.DEVELOPMENT: {


GOD_METHOD: Method 'estimate_resource_cost' is too complex: 16 complexity, 107 lines, 15 max nesting
File: packages\core\deployment\cloud_cost_analyzer.py:482:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    479:             },
    480:         }
    481:
>>> 482:     def estimate_resource_cost(
    483:         self, resource_spec: ResourceSpecification, provider: CloudProvider, region: str = "us-east-1"
    484:     ) -> CostEstimate:
    485:         """Estimate cost for a single resource."""


GOD_METHOD: Method '_generate_optimization_recommendations' is too complex: 10 complexity, 81 lines, 8 max nesting
File: packages\core\deployment\cloud_cost_analyzer.py:644:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    641:         logger.info(f"Analysis complete: ${total_monthly}/month, ${total_annual}/year")
    642:         return analysis
    643:
>>> 644:     def _generate_optimization_recommendations(self, analysis: DeploymentCostAnalysis):
    645:         """Generate cost optimization recommendations."""
    646:         monthly_cost = analysis.total_monthly_cost
    647:


GOD_METHOD: Method 'generate_cost_report' is too complex: 5 complexity, 61 lines, 4 max nesting
File: packages\core\deployment\cloud_cost_analyzer.py:740:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    737:
    738:         return comparisons
    739:
>>> 740:     def generate_cost_report(self, analysis: DeploymentCostAnalysis, output_format: str = "detailed") -> dict[str, Any]:
    741:         """Generate comprehensive cost report."""
    742:         report = {
    743:             "summary": {


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\deployment\cloud_cost_analyzer.py:775:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    772:             }
    773:
    774:             if output_format == "detailed":
>>> 775:                 resource_info.update(
    776:                     {
    777:                         "hourly_cost": float(cost_estimate.hourly_cost),
    778:                         "compute_cost": float(cost_estimate.compute_cost) if cost_estimate.compute_cost else None,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\deployment\continuous_deployment_automation.py:277:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    274:             try:
    275:                 import sys
    276:
>>> 277:                 sys.path.insert(0, str(self.project_root))
    278:
    279:                 # Test core imports
    280:                 logger.info("Core imports successful")


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\deployment\continuous_deployment_automation.py:446:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    443:                 # Insert at beginning after title
    444:                 lines = readme_content.split("\n")
    445:                 insert_pos = 2  # After title and first blank line
>>> 446:                 lines.insert(insert_pos, achievement_update.strip())
    447:                 readme_content = "\n".join(lines)
    448:
    449:                 with open(readme_path, "w", encoding="utf-8") as f:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\deployment\continuous_deployment_automation.py:497:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    494:         try:
    495:             import sys
    496:
>>> 497:             sys.path.insert(0, str(self.project_root))
    498:
    499:             # Test key imports
    500:             return True


GOD_METHOD: Method 'detect_current_state' is too complex: 18 complexity, 95 lines, 14 max nesting
File: packages\core\global_south\mobile_optimization_bridge.py:70:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     67:     timestamp: datetime = field(default_factory=datetime.utcnow)
     68:
     69:     @classmethod
>>>  70:     def detect_current_state(cls) -> "MobileDeviceState":
     71:         """Detect current mobile device state."""
     72:         try:
     73:             # Battery detection


GOD_METHOD: Method 'for_device_state' is too complex: 9 complexity, 69 lines, 8 max nesting
File: packages\core\global_south\mobile_optimization_bridge.py:183:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    180:     cache_aggressive_eviction: bool = False
    181:
    182:     @classmethod
>>> 183:     def for_device_state(cls, state: MobileDeviceState) -> "OptimizationPolicy":
    184:         """Create optimization policy based on device state."""
    185:         policy = cls()
    186:


GOD_METHOD: Method '__init__' is too complex: 3 complexity, 101 lines, 1 max nesting
File: packages\core\global_south\p2p_mesh_integration.py:179:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    176:     and collaborative caching using BitChat and BetaNet transports.
    177:     """
    178:
>>> 179:     def __init__(
    180:         self,
    181:         device_id: str = None,
    182:         peer_type: PeerType = PeerType.MOBILE,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\global_south\p2p_mesh_integration.py:620:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    617:         # Add transport manager stats if available
    618:         if self.transport_manager:
    619:             transport_stats = self.transport_manager.get_status().get("statistics", {})
>>> 620:             base_stats.update({f"transport_{k}": v for k, v in transport_stats.items()})
    621:
    622:         return {
    623:             **base_stats,


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'get_status'
File: packages\core\global_south\p2p_mesh_integration.py:572:4
Recommendation: Extract common code into a shared function or utility
Code context:
    569:         if expired_keys:
    570:             logger.debug(f"Cleaned up {len(expired_keys)} cache entries")
    571:
>>> 572:     def get_status(self) -> dict[str, Any]:
    573:         """Get comprehensive status of P2P mesh integration."""
    574:         transport_status = {}
    575:         if self.transport_manager:


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'get_network_stats'
File: packages\core\global_south\p2p_mesh_integration.py:613:4
Recommendation: Extract common code into a shared function or utility
Code context:
    610:             "total_peers": len(self.peers),
    611:         }
    612:
>>> 613:     def get_network_stats(self) -> dict[str, Any]:
    614:         """Get comprehensive network statistics."""
    615:         base_stats = self.stats.copy()
    616:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\global_south\test_p2p_integration.py:15:0
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     12: from pathlib import Path
     13:
     14: # Add the packages directory to the Python path
>>>  15: sys.path.insert(0, str(Path(__file__).parent.parent.parent))
     16:
     17: try:
     18:     from packages.core.global_south.offline_coordinator import GlobalSouthOfflineCoordinator


GOD_METHOD: Method '_process_log_file' is too complex: 10 complexity, 50 lines, 8 max nesting
File: packages\core\jobs\hyperag_scan_hidden_links.py:228:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    225:
    226:         return sorted(log_files, key=lambda f: f.stat().st_mtime, reverse=True)
    227:
>>> 228:     def _process_log_file(
    229:         self,
    230:         log_file: Path,
    231:         co_mention_counts: dict,


GOD_METHOD: Method '__init__' is too complex: 2 complexity, 71 lines, 1 max nesting
File: packages\core\legacy\config_manager.py:49:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     46: class CODEXConfigManager:
     47:     """Comprehensive configuration manager for CODEX integration."""
     48:
>>>  49:     def __init__(self, config_dir: str = "config", enable_hot_reload: bool = True) -> None:
     50:         self.config_dir = Path(config_dir)
     51:         self.enable_hot_reload = enable_hot_reload
     52:         self.config_data = {}


GOD_METHOD: Method 'apply_environment_overrides' is too complex: 10 complexity, 38 lines, 9 max nesting
File: packages\core\legacy\config_manager.py:187:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    184:
    185:         current[keys[-1]] = value
    186:
>>> 187:     def apply_environment_overrides(self, config: dict[str, Any]) -> dict[str, Any]:
    188:         """Apply environment variable overrides to configuration."""
    189:         config_copy = copy.deepcopy(config)
    190:


GOD_METHOD: Method 'validate_configuration' is too complex: 24 complexity, 86 lines, 20 max nesting
File: packages\core\legacy\config_manager.py:276:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    273:                 msg = f"Configuration reload failed: {e}"
    274:                 raise ConfigurationError(msg)
    275:
>>> 276:     def validate_configuration(self, config: dict[str, Any]) -> None:
    277:         """Validate configuration consistency and requirements."""
    278:         errors = []
    279:         warnings = []


GOD_METHOD: Method 'safe_execute' is too complex: 9 complexity, 67 lines, 5 max nesting
File: packages\core\legacy\error_handling.py:389:0
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    386: F = TypeVar("F", bound=Callable[..., Any])
    387:
    388:
>>> 389: def safe_execute(
    390:     func: Callable[..., T] | None = None,
    391:     *,
    392:     component: str = "unknown",


GOD_METHOD: Method 'with_error_handling' is too complex: 9 complexity, 80 lines, 5 max nesting
File: packages\core\legacy\error_handling.py:459:0
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    456:         return fallback
    457:
    458:
>>> 459: def with_error_handling(*args, **kwargs) -> Callable[[F], F]:
    460:     """Decorator for adding error handling to functions.
    461:
    462:     Usage patterns:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\evolution_metrics_api.py:17:0
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     14: from pathlib import Path
     15:
     16: # Add parent to path
>>>  17: sys.path.insert(0, str(Path(__file__).parent.parent))
     18:
     19: # Try to import the integrated metrics module
     20: try:


GOD_METHOD: Method 'get_health_status' is too complex: 5 complexity, 56 lines, 3 max nesting
File: packages\core\legacy\evolution_metrics_api.py:84:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     81:         else:
     82:             self.send_error(404, f"Agent {agent_id} not found")
     83:
>>>  84:     def get_health_status(self):
     85:         """Get health status data."""
     86:         if INTEGRATED_AVAILABLE:
     87:             return get_health_status()


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\evolution_metrics_api.py:120:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    117:                 cursor = conn.cursor()
    118:
    119:                 # Check WAL mode
>>> 120:                 cursor.execute("PRAGMA journal_mode")
    121:                 mode = cursor.fetchone()[0]
    122:                 health["database"]["wal_mode"] = mode.lower() == "wal"
    123:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\evolution_metrics_api.py:125:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    122:                 health["database"]["wal_mode"] = mode.lower() == "wal"
    123:
    124:                 # Get metrics count
>>> 125:                 cursor.execute("SELECT COUNT(*) FROM fitness_metrics")
    126:                 health["metrics"]["total_collected"] = cursor.fetchone()[0]
    127:
    128:                 # Get current round


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\evolution_metrics_api.py:129:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    126:                 health["metrics"]["total_collected"] = cursor.fetchone()[0]
    127:
    128:                 # Get current round
>>> 129:                 cursor.execute("SELECT id, status FROM evolution_rounds ORDER BY id DESC LIMIT 1")
    130:                 row = cursor.fetchone()
    131:                 if row:
    132:                     health["database"]["current_round"] = row[0]


GOD_METHOD: Method 'get_current_metrics' is too complex: 9 complexity, 57 lines, 1 max nesting
File: packages\core\legacy\evolution_metrics_api.py:142:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    139:
    140:         return health
    141:
>>> 142:     def get_current_metrics(self):
    143:         """Get current metrics summary."""
    144:         db_path = os.getenv("AIVILLAGE_DB_PATH", "./data/evolution_metrics.db")
    145:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\evolution_metrics_api.py:154:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    151:             cursor = conn.cursor()
    152:
    153:             # Get latest round metrics
>>> 154:             cursor.execute(
    155:                 """
    156:                 SELECT
    157:                     COUNT(DISTINCT agent_id) as agent_count,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\evolution_metrics_api.py:179:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    176:             }
    177:
    178:             # Get resource usage
>>> 179:             cursor.execute(
    180:                 """
    181:                 SELECT
    182:                     AVG(cpu_usage) as avg_cpu,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\evolution_metrics_api.py:212:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    209:             conn = sqlite3.connect(db_path)
    210:             cursor = conn.cursor()
    211:
>>> 212:             cursor.execute(
    213:                 """
    214:                 SELECT
    215:                     agent_id,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\evolution_metrics_api.py:254:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    251:             conn = sqlite3.connect(db_path)
    252:             cursor = conn.cursor()
    253:
>>> 254:             cursor.execute(
    255:                 """
    256:                 SELECT
    257:                     fitness_score,


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'handle_health_check'
File: packages\core\legacy\evolution_metrics_api.py:44:4
Recommendation: Extract common code into a shared function or utility
Code context:
     41:         else:
     42:             self.send_error(404, "Not Found")
     43:
>>>  44:     def handle_health_check(self) -> None:
     45:         """Handle health check endpoint."""
     46:         health_data = self.get_health_status()
     47:


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'handle_current_metrics'
File: packages\core\legacy\evolution_metrics_api.py:53:4
Recommendation: Extract common code into a shared function or utility
Code context:
     50:         self.end_headers()
     51:         self.wfile.write(json.dumps(health_data, indent=2).encode())
     52:
>>>  53:     def handle_current_metrics(self) -> None:
     54:         """Handle current metrics endpoint."""
     55:         metrics_data = self.get_current_metrics()
     56:


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'handle_leaderboard'
File: packages\core\legacy\evolution_metrics_api.py:62:4
Recommendation: Extract common code into a shared function or utility
Code context:
     59:         self.end_headers()
     60:         self.wfile.write(json.dumps(metrics_data, indent=2).encode())
     61:
>>>  62:     def handle_leaderboard(self) -> None:
     63:         """Handle leaderboard endpoint."""
     64:         leaderboard = self.get_leaderboard()
     65:


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'get_current_metrics'
File: packages\core\legacy\evolution_metrics_api.py:142:4
Recommendation: Extract common code into a shared function or utility
Code context:
    139:
    140:         return health
    141:
>>> 142:     def get_current_metrics(self):
    143:         """Get current metrics summary."""
    144:         db_path = os.getenv("AIVILLAGE_DB_PATH", "./data/evolution_metrics.db")
    145:


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'get_leaderboard'
File: packages\core\legacy\evolution_metrics_api.py:201:4
Recommendation: Extract common code into a shared function or utility
Code context:
    198:         except Exception as e:
    199:             return {"error": str(e)}
    200:
>>> 201:     def get_leaderboard(self):
    202:         """Get agent leaderboard."""
    203:         db_path = os.getenv("AIVILLAGE_DB_PATH", "./data/evolution_metrics.db")
    204:


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'get_agent_metrics'
File: packages\core\legacy\evolution_metrics_api.py:243:4
Recommendation: Extract common code into a shared function or utility
Code context:
    240:         except Exception as e:
    241:             return {"error": str(e)}
    242:
>>> 243:     def get_agent_metrics(self, agent_id):
    244:         """Get metrics for specific agent."""
    245:         db_path = os.getenv("AIVILLAGE_DB_PATH", "./data/evolution_metrics.db")
    246:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\evolution_metrics_integrated.py:186:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    183:         """Initialize SQLite database with WAL mode."""
    184:         try:
    185:             self.db_conn = sqlite3.connect(self.db_path, check_same_thread=False)
>>> 186:             self.db_conn.execute("PRAGMA journal_mode=WAL")
    187:             self.db_conn.execute("PRAGMA synchronous=NORMAL")
    188:             self.db_conn.execute("PRAGMA cache_size=10000")
    189:             self.db_conn.execute("PRAGMA temp_store=MEMORY")


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\evolution_metrics_integrated.py:187:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    184:         try:
    185:             self.db_conn = sqlite3.connect(self.db_path, check_same_thread=False)
    186:             self.db_conn.execute("PRAGMA journal_mode=WAL")
>>> 187:             self.db_conn.execute("PRAGMA synchronous=NORMAL")
    188:             self.db_conn.execute("PRAGMA cache_size=10000")
    189:             self.db_conn.execute("PRAGMA temp_store=MEMORY")
    190:             self.db_conn.execute("PRAGMA mmap_size=268435456")


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\evolution_metrics_integrated.py:188:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    185:             self.db_conn = sqlite3.connect(self.db_path, check_same_thread=False)
    186:             self.db_conn.execute("PRAGMA journal_mode=WAL")
    187:             self.db_conn.execute("PRAGMA synchronous=NORMAL")
>>> 188:             self.db_conn.execute("PRAGMA cache_size=10000")
    189:             self.db_conn.execute("PRAGMA temp_store=MEMORY")
    190:             self.db_conn.execute("PRAGMA mmap_size=268435456")
    191:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\evolution_metrics_integrated.py:189:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    186:             self.db_conn.execute("PRAGMA journal_mode=WAL")
    187:             self.db_conn.execute("PRAGMA synchronous=NORMAL")
    188:             self.db_conn.execute("PRAGMA cache_size=10000")
>>> 189:             self.db_conn.execute("PRAGMA temp_store=MEMORY")
    190:             self.db_conn.execute("PRAGMA mmap_size=268435456")
    191:
    192:             logger.info(f"SQLite database initialized at {self.db_path} with WAL mode")


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\evolution_metrics_integrated.py:190:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    187:             self.db_conn.execute("PRAGMA synchronous=NORMAL")
    188:             self.db_conn.execute("PRAGMA cache_size=10000")
    189:             self.db_conn.execute("PRAGMA temp_store=MEMORY")
>>> 190:             self.db_conn.execute("PRAGMA mmap_size=268435456")
    191:
    192:             logger.info(f"SQLite database initialized at {self.db_path} with WAL mode")
    193:         except Exception as e:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\evolution_metrics_integrated.py:268:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    265:
    266:         try:
    267:             cursor = self.db_conn.cursor()
>>> 268:             cursor.execute(
    269:                 """
    270:                 INSERT INTO evolution_rounds (round_number, generation, status, timestamp)
    271:                 VALUES (?, ?, ?, ?)


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\evolution_metrics_integrated.py:281:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    278:                 ),
    279:             )
    280:             self.current_round_id = cursor.lastrowid
>>> 281:             self.db_conn.commit()
    282:             logger.info(f"Started evolution round {self.current_round_id}")
    283:         except Exception as e:
    284:             logger.exception(f"Failed to start evolution round: {e}")


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\evolution_metrics_integrated.py:293:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    290:
    291:         try:
    292:             cursor = self.db_conn.cursor()
>>> 293:             cursor.execute(
    294:                 """
    295:                 UPDATE evolution_rounds
    296:                 SET status = 'completed'


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\evolution_metrics_integrated.py:301:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    298:             """,
    299:                 (self.current_round_id,),
    300:             )
>>> 301:             self.db_conn.commit()
    302:             logger.info(f"Completed evolution round {self.current_round_id}")
    303:         except Exception as e:
    304:             logger.exception(f"Failed to complete evolution round: {e}")


GOD_METHOD: Method '_persist_metrics' is too complex: 6 complexity, 83 lines, 3 max nesting
File: packages\core\legacy\evolution_metrics_integrated.py:382:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    379:             except Exception as e:
    380:                 logger.exception(f"Worker error: {e}")
    381:
>>> 382:     def _persist_metrics(self, metrics_list: list[EvolutionMetricsData]) -> None:
    383:         """Persist metrics to database."""
    384:         if not self.db_conn or not self.current_round_id:
    385:             return


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\evolution_metrics_integrated.py:392:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    389:
    390:             for metrics in metrics_list:
    391:                 # Insert fitness metrics
>>> 392:                 cursor.execute(
    393:                     """
    394:                     INSERT INTO fitness_metrics
    395:                     (round_id, agent_id, fitness_score, performance_metrics, timestamp)


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\evolution_metrics_integrated.py:425:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    422:                 )
    423:
    424:                 # Insert resource metrics
>>> 425:                 cursor.execute(
    426:                     """
    427:                     INSERT INTO resource_metrics
    428:                     (round_id, cpu_usage, memory_usage_mb, network_io_kb, disk_io_kb, gpu_usage, timestamp)


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\evolution_metrics_integrated.py:444:20
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    441:
    442:                 # Insert selection outcomes if applicable
    443:                 if metrics.selection_method:
>>> 444:                     cursor.execute(
    445:                         """
    446:                         INSERT INTO selection_outcomes
    447:                         (round_id, parent_agent_id, selection_method, mutation_applied, survival_reason, timestamp)


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\evolution_metrics_integrated.py:460:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    457:                         ),
    458:                     )
    459:
>>> 460:             self.db_conn.commit()
    461:             logger.debug(f"Persisted {len(metrics_list)} metrics to database")
    462:
    463:         except Exception as e:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\evolution_metrics_integrated.py:527:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    524:
    525:         try:
    526:             cursor = self.db_conn.cursor()
>>> 527:             cursor.execute(
    528:                 """
    529:                 SELECT
    530:                     fm.fitness_score,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\evolution_metrics_integrated.py:594:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    591:         if self.db_conn:
    592:             try:
    593:                 cursor = self.db_conn.cursor()
>>> 594:                 cursor.execute("SELECT COUNT(*) FROM fitness_metrics")
    595:                 count = cursor.fetchone()[0]
    596:                 status["database"]["total_records"] = count
    597:             except Exception as e:


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'get_current_metrics'
File: packages\core\legacy\evolution_metrics_integrated.py:498:4
Recommendation: Extract common code into a shared function or utility
Code context:
    495:         except Exception as e:
    496:             logger.debug(f"Redis operation failed (non-critical): {e}")
    497:
>>> 498:     def get_current_metrics(self) -> dict[str, Any]:
    499:         """Get current metrics summary."""
    500:         summary = {
    501:             "total_metrics_collected": self.total_metrics_collected,


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'collect_system_metrics'
File: packages\core\legacy\evolution_metrics_integrated.py:604:4
Recommendation: Extract common code into a shared function or utility
Code context:
    601:
    602:         return status
    603:
>>> 604:     def collect_system_metrics(self) -> EvolutionMetricsData:
    605:         """Collect current system resource metrics."""
    606:         metrics = EvolutionMetricsData(agent_id="system", timestamp=time.time())
    607:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\logging_config.py:76:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     73:         """Process log message with additional context."""
     74:         # Merge extra context
     75:         if "extra" in kwargs:
>>>  76:             kwargs["extra"].update(self.extra)
     77:         else:
     78:             kwargs["extra"] = self.extra.copy()
     79:


GOD_METHOD: Method 'create_logging_config' is too complex: 7 complexity, 116 lines, 4 max nesting
File: packages\core\legacy\logging_config.py:83:0
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     80:         return msg, kwargs
     81:
     82:
>>>  83: def create_logging_config(
     84:     log_level: str = "INFO",
     85:     log_dir: str | None = None,
     86:     structured_logging: bool = True,


GOD_METHOD: Method 'log_function_call' is too complex: 8 complexity, 94 lines, 5 max nesting
File: packages\core\legacy\logging_config.py:264:0
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    261:     return AIVillageLoggerAdapter(base_logger, extra_context)
    262:
    263:
>>> 264: def log_function_call(
    265:     logger: logging.Logger,
    266:     level: int = logging.DEBUG,
    267:     include_args: bool = False,


GOD_METHOD: Method 'decorator' is too complex: 8 complexity, 77 lines, 5 max nesting
File: packages\core\legacy\logging_config.py:279:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    276:         include_result: Whether to include function result
    277:     """
    278:
>>> 279:     def decorator(func):
    280:         import functools
    281:
    282:         @functools.wraps(func)


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\operations\artifact_collector.py:340:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    337:
    338:             # Validate content based on artifact type
    339:             content_validation = await self._validate_artifact_content(artifact_type, file_path, rules)
>>> 340:             validation_result["metadata"].update(content_validation)
    341:
    342:             validation_result["valid"] = True
    343:             return validation_result


GOD_METHOD: Method 'search_artifacts' is too complex: 6 complexity, 27 lines, 5 max nesting
File: packages\core\operations\artifact_collector.py:444:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    441:
    442:         logger.info(f"Updated artifacts index: {len(self.artifacts)} artifacts")
    443:
>>> 444:     def search_artifacts(
    445:         self,
    446:         artifact_type: ArtifactType | None = None,
    447:         pipeline_id: str | None = None,


GOD_METHOD: Method 'generate_workflow_yaml' is too complex: 4 complexity, 319 lines, 3 max nesting
File: packages\core\operations\github_workflow_integration.py:59:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     56:         if not self.github_token:
     57:             logger.warning("No GitHub token provided - GitHub API features disabled")
     58:
>>>  59:     def generate_workflow_yaml(self) -> str:
     60:         """Generate GitHub Actions workflow YAML for artifact collection."""
     61:
     62:         workflow_yaml = f"""name: {self.config.workflow_name}


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\security\multi_tenant_manager.py:86:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     83:         conn = sqlite3.connect(self.db_path)
     84:         cursor = conn.cursor()
     85:
>>>  86:         cursor.execute(
     87:             """
     88:             CREATE TABLE IF NOT EXISTS resources (
     89:                 resource_id TEXT PRIMARY KEY,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\security\multi_tenant_manager.py:104:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    101:         """
    102:         )
    103:
>>> 104:         cursor.execute(
    105:             """
    106:             CREATE INDEX IF NOT EXISTS idx_tenant_resources
    107:             ON resources(tenant_id, resource_type)


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\security\multi_tenant_manager.py:111:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    108:         """
    109:         )
    110:
>>> 111:         cursor.execute(
    112:             """
    113:             CREATE TABLE IF NOT EXISTS resource_usage (
    114:                 id INTEGER PRIMARY KEY AUTOINCREMENT,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\security\multi_tenant_manager.py:126:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    123:         """
    124:         )
    125:
>>> 126:         conn.commit()
    127:         conn.close()
    128:
    129:     def _load_resources(self):


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\security\multi_tenant_manager.py:134:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    131:         conn = sqlite3.connect(self.db_path)
    132:         cursor = conn.cursor()
    133:
>>> 134:         cursor.execute("SELECT * FROM resources WHERE status = 'active'")
    135:         rows = cursor.fetchall()
    136:
    137:         for row in rows:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\security\multi_tenant_manager.py:526:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    523:         # Store sharing configuration in database
    524:         sharing_db_path = self.data_path / "tenant_sharing.db"
    525:         with sqlite3.connect(sharing_db_path) as conn:
>>> 526:             conn.execute(
    527:                 """CREATE TABLE IF NOT EXISTS resource_sharing (
    528:                     id INTEGER PRIMARY KEY AUTOINCREMENT,
    529:                     resource_id TEXT NOT NULL,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\security\multi_tenant_manager.py:539:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    536:                 )"""
    537:             )
    538:
>>> 539:             conn.execute(
    540:                 """INSERT INTO resource_sharing
    541:                    (resource_id, owner_tenant, shared_with, permissions, shared_at, shared_by)
    542:                    VALUES (?, ?, ?, ?, ?, ?)""",


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\security\multi_tenant_manager.py:552:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    549:                     user_id,
    550:                 ),
    551:             )
>>> 552:             conn.commit()
    553:
    554:         # Update resource metadata to include sharing info
    555:         if resource.metadata is None:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\security\multi_tenant_manager.py:615:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    612:         if not resource:
    613:             return
    614:
>>> 615:         cursor.execute(
    616:             """
    617:             INSERT INTO resource_usage
    618:             (tenant_id, resource_type, timestamp, cpu_percent, memory_mb, storage_gb, network_mb)


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\security\multi_tenant_manager.py:632:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    629:             ),
    630:         )
    631:
>>> 632:         conn.commit()
    633:         conn.close()
    634:
    635:     # Cleanup and Maintenance


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\security\multi_tenant_manager.py:671:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    668:         conn = sqlite3.connect(self.db_path)
    669:         cursor = conn.cursor()
    670:
>>> 671:         cursor.execute(
    672:             """
    673:             INSERT OR REPLACE INTO resources
    674:             (resource_id, tenant_id, resource_type, name, created_at,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\security\multi_tenant_manager.py:692:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    689:             ),
    690:         )
    691:
>>> 692:         conn.commit()
    693:         conn.close()
    694:
    695:     def _delete_resource(self, resource_id: str):


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\security\multi_tenant_manager.py:700:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    697:         conn = sqlite3.connect(self.db_path)
    698:         cursor = conn.cursor()
    699:
>>> 700:         cursor.execute("UPDATE resources SET status = 'deleted' WHERE resource_id = ?", (resource_id,))
    701:
    702:         conn.commit()
    703:         conn.close()


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\security\multi_tenant_manager.py:702:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    699:
    700:         cursor.execute("UPDATE resources SET status = 'deleted' WHERE resource_id = ?", (resource_id,))
    701:
>>> 702:         conn.commit()
    703:         conn.close()
    704:
    705:     def _update_resource_size(self, resource_id: str, size_bytes: int):


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\security\multi_tenant_manager.py:710:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    707:         conn = sqlite3.connect(self.db_path)
    708:         cursor = conn.cursor()
    709:
>>> 710:         cursor.execute("UPDATE resources SET size_bytes = ? WHERE resource_id = ?", (size_bytes, resource_id))
    711:
    712:         conn.commit()
    713:         conn.close()


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\security\multi_tenant_manager.py:712:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    709:
    710:         cursor.execute("UPDATE resources SET size_bytes = ? WHERE resource_id = ?", (size_bytes, resource_id))
    711:
>>> 712:         conn.commit()
    713:         conn.close()
    714:
    715:     async def _get_resource_by_id(self, resource_id: str) -> TenantResource | None:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\security\multi_tenant_manager.py:720:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    717:         conn = sqlite3.connect(self.db_path)
    718:         cursor = conn.cursor()
    719:
>>> 720:         cursor.execute("SELECT * FROM resources WHERE resource_id = ? AND status = 'active'", (resource_id,))
    721:         row = cursor.fetchone()
    722:         conn.close()
    723:


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_save_resource'
File: packages\core\security\multi_tenant_manager.py:666:4
Recommendation: Extract common code into a shared function or utility
Code context:
    663:
    664:     # Database Operations
    665:
>>> 666:     def _save_resource(self, resource: TenantResource):
    667:         """Save resource to database."""
    668:         conn = sqlite3.connect(self.db_path)
    669:         cursor = conn.cursor()


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_delete_resource'
File: packages\core\security\multi_tenant_manager.py:695:4
Recommendation: Extract common code into a shared function or utility
Code context:
    692:         conn.commit()
    693:         conn.close()
    694:
>>> 695:     def _delete_resource(self, resource_id: str):
    696:         """Delete resource from database."""
    697:         conn = sqlite3.connect(self.db_path)
    698:         cursor = conn.cursor()


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_update_resource_size'
File: packages\core\security\multi_tenant_manager.py:705:4
Recommendation: Extract common code into a shared function or utility
Code context:
    702:         conn.commit()
    703:         conn.close()
    704:
>>> 705:     def _update_resource_size(self, resource_id: str, size_bytes: int):
    706:         """Update resource size in database."""
    707:         conn = sqlite3.connect(self.db_path)
    708:         cursor = conn.cursor()


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\security\multi_tenant_system.py:167:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    164:         """Get database connection."""
    165:         conn = sqlite3.connect(self.db_path, timeout=30.0)
    166:         conn.row_factory = sqlite3.Row
>>> 167:         conn.execute("PRAGMA foreign_keys=ON")
    168:         try:
    169:             yield conn
    170:             conn.commit()


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\security\multi_tenant_system.py:170:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    167:         conn.execute("PRAGMA foreign_keys=ON")
    168:         try:
    169:             yield conn
>>> 170:             conn.commit()
    171:         except Exception:
    172:             conn.rollback()
    173:             raise


GOD_METHOD: Method '_init_database' is too complex: 2 complexity, 217 lines, 1 max nesting
File: packages\core\security\multi_tenant_system.py:177:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    174:         finally:
    175:             conn.close()
    176:
>>> 177:     def _init_database(self):
    178:         """Initialize database schema."""
    179:         with self._get_connection() as conn:
    180:             # Organizations table


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\security\multi_tenant_system.py:181:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    178:         """Initialize database schema."""
    179:         with self._get_connection() as conn:
    180:             # Organizations table
>>> 181:             conn.execute(
    182:                 """
    183:                 CREATE TABLE IF NOT EXISTS organizations (
    184:                     id TEXT PRIMARY KEY,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\security\multi_tenant_system.py:220:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    217:             )
    218:
    219:             # Workspaces table (sub-tenants within organizations)
>>> 220:             conn.execute(
    221:                 """
    222:                 CREATE TABLE IF NOT EXISTS workspaces (
    223:                     id TEXT PRIMARY KEY,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\security\multi_tenant_system.py:249:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    246:             )
    247:
    248:             # Tenant memberships
>>> 249:             conn.execute(
    250:                 """
    251:                 CREATE TABLE IF NOT EXISTS tenant_memberships (
    252:                     id INTEGER PRIMARY KEY AUTOINCREMENT,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\security\multi_tenant_system.py:278:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    275:             )
    276:
    277:             # Resource quotas
>>> 278:             conn.execute(
    279:                 """
    280:                 CREATE TABLE IF NOT EXISTS resource_quotas (
    281:                     id INTEGER PRIMARY KEY AUTOINCREMENT,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\security\multi_tenant_system.py:306:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    303:             )
    304:
    305:             # Resource usage tracking
>>> 306:             conn.execute(
    307:                 """
    308:                 CREATE TABLE IF NOT EXISTS resource_usage (
    309:                     id INTEGER PRIMARY KEY AUTOINCREMENT,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\security\multi_tenant_system.py:336:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    333:             )
    334:
    335:             # Tenant data isolation mapping
>>> 336:             conn.execute(
    337:                 """
    338:                 CREATE TABLE IF NOT EXISTS tenant_data_isolation (
    339:                     id INTEGER PRIMARY KEY AUTOINCREMENT,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\security\multi_tenant_system.py:362:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    359:             )
    360:
    361:             # Audit log for tenant operations
>>> 362:             conn.execute(
    363:                 """
    364:                 CREATE TABLE IF NOT EXISTS tenant_audit_log (
    365:                     id INTEGER PRIMARY KEY AUTOINCREMENT,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\security\multi_tenant_system.py:394:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    391:             ]
    392:
    393:             for index_sql in indexes:
>>> 394:                 conn.execute(index_sql)
    395:
    396:     def _init_platform_tenant(self):
    397:         """Initialize the platform-level tenant."""


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\security\multi_tenant_system.py:400:21
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    397:         """Initialize the platform-level tenant."""
    398:         with self._get_connection() as conn:
    399:             # Check if platform tenant exists
>>> 400:             cursor = conn.execute("SELECT id FROM organizations WHERE id = 'platform' AND tenant_type = 'platform'")
    401:             if not cursor.fetchone():
    402:                 # Create platform tenant
    403:                 self.create_organization(


GOD_METHOD: Method 'create_organization' is too complex: 3 complexity, 114 lines, 0 max nesting
File: packages\core\security\multi_tenant_system.py:414:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    411:                 )
    412:                 logger.info("Created platform tenant")
    413:
>>> 414:     def create_organization(
    415:         self,
    416:         org_id: str | None = None,
    417:         name: str = None,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\security\multi_tenant_system.py:449:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    446:         with self._get_connection() as conn:
    447:             try:
    448:                 # Create organization
>>> 449:                 conn.execute(
    450:                     """
    451:                     INSERT INTO organizations (
    452:                         id, name, display_name, description,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\security\multi_tenant_system.py:475:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    472:
    473:                 # Set default quotas based on tenant type
    474:                 quota = DEFAULT_QUOTAS[tenant_type]
>>> 475:                 conn.execute(
    476:                     """
    477:                     INSERT INTO resource_quotas (
    478:                         tenant_id, tenant_type,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\security\multi_tenant_system.py:498:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    495:                 )
    496:
    497:                 # Initialize usage tracking
>>> 498:                 conn.execute(
    499:                     """
    500:                     INSERT INTO resource_usage (tenant_id, tenant_type)
    501:                     VALUES (?, 'organization')


GOD_METHOD: Method 'create_workspace' is too complex: 4 complexity, 69 lines, 2 max nesting
File: packages\core\security\multi_tenant_system.py:530:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    527:                 logger.error(f"Failed to create organization: {e}")
    528:                 raise ValueError(f"Organization with name '{name}' already exists")
    529:
>>> 530:     def create_workspace(
    531:         self,
    532:         organization_id: str,
    533:         name: str,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\security\multi_tenant_system.py:559:25
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    556:         # Get organization's isolation level if not specified
    557:         if isolation_level is None:
    558:             with self._get_connection() as conn:
>>> 559:                 cursor = conn.execute("SELECT isolation_level FROM organizations WHERE id = ?", (organization_id,))
    560:                 row = cursor.fetchone()
    561:                 if not row:
    562:                     raise ValueError(f"Organization {organization_id} not found")


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\security\multi_tenant_system.py:567:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    564:
    565:         with self._get_connection() as conn:
    566:             try:
>>> 567:                 conn.execute(
    568:                     """
    569:                     INSERT INTO workspaces (
    570:                         id, organization_id, name, display_name,


GOD_METHOD: Method 'add_user_to_tenant' is too complex: 4 complexity, 66 lines, 1 max nesting
File: packages\core\security\multi_tenant_system.py:601:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    598:             except sqlite3.IntegrityError:
    599:                 raise ValueError(f"Workspace '{name}' already exists in organization")
    600:
>>> 601:     def add_user_to_tenant(
    602:         self,
    603:         user_id: str,
    604:         organization_id: str,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\security\multi_tenant_system.py:629:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    626:                 if not self._check_user_quota(organization_id):
    627:                     raise ValueError("User quota exceeded for organization")
    628:
>>> 629:                 conn.execute(
    630:                     """
    631:                     INSERT OR REPLACE INTO tenant_memberships (
    632:                         user_id, organization_id, workspace_id,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\security\multi_tenant_system.py:687:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    684:         """
    685:         with self._get_connection() as conn:
    686:             if workspace_id:
>>> 687:                 conn.execute(
    688:                     """
    689:                     DELETE FROM tenant_memberships
    690:                     WHERE user_id = ? AND organization_id = ? AND workspace_id = ?


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\security\multi_tenant_system.py:695:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    692:                     (user_id, organization_id, workspace_id),
    693:                 )
    694:             else:
>>> 695:                 conn.execute(
    696:                     """
    697:                     DELETE FROM tenant_memberships
    698:                     WHERE user_id = ? AND organization_id = ?


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\security\multi_tenant_system.py:727:21
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    724:             List of tenant memberships
    725:         """
    726:         with self._get_connection() as conn:
>>> 727:             cursor = conn.execute(
    728:                 """
    729:                 SELECT
    730:                     m.organization_id,


GOD_METHOD: Method 'get_tenant_context' is too complex: 7 complexity, 70 lines, 4 max nesting
File: packages\core\security\multi_tenant_system.py:749:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    746:
    747:             return [dict(row) for row in cursor.fetchall()]
    748:
>>> 749:     def get_tenant_context(
    750:         self,
    751:         tenant_id: str,
    752:         user_id: str | None = None,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\security\multi_tenant_system.py:770:21
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    767:
    768:         with self._get_connection() as conn:
    769:             # Try as organization first
>>> 770:             cursor = conn.execute(
    771:                 """
    772:                 SELECT id, isolation_level, settings
    773:                 FROM organizations


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\security\multi_tenant_system.py:790:25
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    787:                 )
    788:             else:
    789:                 # Try as workspace
>>> 790:                 cursor = conn.execute(
    791:                     """
    792:                     SELECT w.id, w.organization_id, w.isolation_level, w.settings
    793:                     FROM workspaces w


GOD_METHOD: Method 'check_tenant_access' is too complex: 11 complexity, 64 lines, 7 max nesting
File: packages\core\security\multi_tenant_system.py:821:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    818:
    819:             return context
    820:
>>> 821:     def check_tenant_access(
    822:         self,
    823:         user_id: str,
    824:         tenant_id: str,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\security\multi_tenant_system.py:841:21
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    838:         """
    839:         with self._get_connection() as conn:
    840:             # Check organization membership
>>> 841:             cursor = conn.execute(
    842:                 """
    843:                 SELECT role, permissions
    844:                 FROM tenant_memberships


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\security\multi_tenant_system.py:853:25
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    850:
    851:             if not row:
    852:                 # Check workspace membership
>>> 853:                 cursor = conn.execute(
    854:                     """
    855:                     SELECT m.role, m.permissions
    856:                     FROM tenant_memberships m


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\security\multi_tenant_system.py:991:21
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    988:             Whether quota allows more users
    989:         """
    990:         with self._get_connection() as conn:
>>> 991:             cursor = conn.execute(
    992:                 """
    993:                 SELECT q.max_users, u.current_users
    994:                 FROM resource_quotas q


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\security\multi_tenant_system.py:1038:21
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    1035:         usage_field, quota_field = resource_mapping[resource_type]
    1036:
    1037:         with self._get_connection() as conn:
>>> 1038:             cursor = conn.execute(
    1039:                 f"""
    1040:                 SELECT q.{quota_field} as quota, u.{usage_field} as usage
    1041:                 FROM resource_quotas q


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\security\multi_tenant_system.py:1083:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    1080:         field = field_mapping[resource_type]
    1081:
    1082:         with self._get_connection() as conn:
>>> 1083:             conn.execute(
    1084:                 f"""
    1085:                 UPDATE resource_usage
    1086:                 SET {field} = MAX(0, {field} + ?),


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\security\multi_tenant_system.py:1117:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    1114:             error_message: Error message if failed
    1115:         """
    1116:         with self._get_connection() as conn:
>>> 1117:             conn.execute(
    1118:                 """
    1119:                 INSERT INTO tenant_audit_log (
    1120:                     tenant_id, user_id, action,


GOD_METHOD: Method 'get_tenant_stats' is too complex: 4 complexity, 64 lines, 0 max nesting
File: packages\core\security\multi_tenant_system.py:1137:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    1134:                 ),
    1135:             )
    1136:
>>> 1137:     def get_tenant_stats(self, tenant_id: str) -> dict[str, Any]:
    1138:         """Get statistics for a tenant.
    1139:
    1140:         Args:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\security\multi_tenant_system.py:1148:21
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    1145:         """
    1146:         with self._get_connection() as conn:
    1147:             # Get basic info
>>> 1148:             cursor = conn.execute(
    1149:                 """
    1150:                 SELECT * FROM organizations WHERE id = ?
    1151:             """,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\security\multi_tenant_system.py:1157:21
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    1154:             org = dict(cursor.fetchone() or {})
    1155:
    1156:             # Get quotas and usage
>>> 1157:             cursor = conn.execute(
    1158:                 """
    1159:                 SELECT * FROM resource_quotas WHERE tenant_id = ?
    1160:             """,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\security\multi_tenant_system.py:1165:21
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    1162:             )
    1163:             quotas = dict(cursor.fetchone() or {})
    1164:
>>> 1165:             cursor = conn.execute(
    1166:                 """
    1167:                 SELECT * FROM resource_usage WHERE tenant_id = ?
    1168:             """,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\security\multi_tenant_system.py:1174:21
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    1171:             usage = dict(cursor.fetchone() or {})
    1172:
    1173:             # Get member count
>>> 1174:             cursor = conn.execute(
    1175:                 """
    1176:                 SELECT COUNT(*) as member_count
    1177:                 FROM tenant_memberships


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\security\multi_tenant_system.py:1185:21
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    1182:             members = cursor.fetchone()["member_count"]
    1183:
    1184:             # Get workspace count
>>> 1185:             cursor = conn.execute(
    1186:                 """
    1187:                 SELECT COUNT(*) as workspace_count
    1188:                 FROM workspaces


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'create_workspace'
File: packages\core\security\multi_tenant_system.py:530:4
Recommendation: Extract common code into a shared function or utility
Code context:
    527:                 logger.error(f"Failed to create organization: {e}")
    528:                 raise ValueError(f"Organization with name '{name}' already exists")
    529:
>>> 530:     def create_workspace(
    531:         self,
    532:         organization_id: str,
    533:         name: str,


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'get_tenant_context'
File: packages\core\security\multi_tenant_system.py:749:4
Recommendation: Extract common code into a shared function or utility
Code context:
    746:
    747:             return [dict(row) for row in cursor.fetchall()]
    748:
>>> 749:     def get_tenant_context(
    750:         self,
    751:         tenant_id: str,
    752:         user_id: str | None = None,


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'check_resource_quota'
File: packages\core\security\multi_tenant_system.py:1006:4
Recommendation: Extract common code into a shared function or utility
Code context:
    1003:                 return row["current_users"] < row["max_users"]
    1004:             return True
    1005:
>>> 1006:     def check_resource_quota(
    1007:         self,
    1008:         tenant_id: str,
    1009:         resource_type: str,


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_update_resource_usage'
File: packages\core\security\multi_tenant_system.py:1053:4
Recommendation: Extract common code into a shared function or utility
Code context:
    1050:                 return row["usage"] + requested_amount <= row["quota"]
    1051:             return True
    1052:
>>> 1053:     def _update_resource_usage(
    1054:         self,
    1055:         tenant_id: str,
    1056:         resource_type: str,


GOD_METHOD: Method '_setup_fastapi_routes' is too complex: 31 complexity, 430 lines, 23 max nesting
File: packages\core\security\rbac_api_server.py:95:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     92:         else:
     93:             logger.warning("FastAPI not available, using basic HTTP server")
     94:
>>>  95:     def _setup_fastapi_routes(self):
     96:         """Set up FastAPI routes."""
     97:         if not self.app:
     98:             return


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\security\rbac_api_server.py:285:9
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    282:
    283:             return result["data"]
    284:
>>> 285:         @self.app.delete("/agents/{agent_id}")
    286:         async def delete_agent(agent_id: str, current_user: dict = Depends(get_current_user)):
    287:             result = await self.integration.secure_api_call(
    288:                 system="agents",


GOD_METHOD: Method 'measure_inference_latency' is too complex: 4 complexity, 68 lines, 2 max nesting
File: packages\core\tools\measure_compression.py:79:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     76:                 "parameter_ratio": 0,
     77:             }
     78:
>>>  79:     def measure_inference_latency(
     80:         self, model_path: str, num_samples: int = 10, max_length: int = 100
     81:     ) -> dict[str, float]:
     82:         """Measure inference latency.


GOD_METHOD: Method 'generate_report' is too complex: 11 complexity, 55 lines, 10 max nesting
File: packages\core\tools\stub_fix.py:99:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     96:
     97:         return all_stubs
     98:
>>>  99:     def generate_report(self, stubs: list[dict]) -> str:
    100:         """Generate summary report."""
    101:         if not stubs:
    102:             return "✅ No stubs found!"


GOD_METHOD: Method 'main' is too complex: 8 complexity, 62 lines, 6 max nesting
File: packages\core\tools\stub_fix.py:214:0
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    211:             return "low"
    212:
    213:
>>> 214: def main():
    215:     """Main CLI entry point."""
    216:     parser = argparse.ArgumentParser(description="Detect and fix implementation stubs")
    217:     parser.add_argument("path", help="Path to scan (file or directory)")


GOD_METHOD: Method '_initialize_core_agent_specs' is too complex: 1 complexity, 251 lines, 0 max nesting
File: packages\core\legacy\agents\specialist_agent_registry.py:135:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    132:
    133:         logger.info("SpecialistAgentRegistry initialized with " f"{len(self.specifications)} agent types")
    134:
>>> 135:     def _initialize_core_agent_specs(self):
    136:         """Initialize specifications for all 18 core agents."""
    137:
    138:         # Leadership Tier (Strategic Decision Making)


GOD_METHOD: Method '_build_capability_indexes' is too complex: 7 complexity, 18 lines, 6 max nesting
File: packages\core\legacy\agents\specialist_agent_registry.py:388:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    385:             resource_requirements={"monitoring_intensive": True},
    386:         )
    387:
>>> 388:     def _build_capability_indexes(self):
    389:         """Build indexes for fast capability and role-based lookups."""
    390:         for agent_type, spec in self.specifications.items():
    391:             # Index by role


GOD_METHOD: Method 'route_task_to_agent' is too complex: 11 complexity, 67 lines, 9 max nesting
File: packages\core\legacy\agents\specialist_agent_registry.py:466:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    463:
    464:         return instances
    465:
>>> 466:     def route_task_to_agent(self, task: dict[str, Any]) -> AgentInstance | None:
    467:         """Route a task to the most suitable available agent."""
    468:         required_capability = task.get("required_capability")
    469:         agent_type_preference = task.get("agent_type_preference")


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\compatibility\bridge_system.py:95:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     92:         try:
     93:             key = f"{mapping.old_module}.{mapping.old_class or ''}"
     94:             self.mappings[key] = mapping
>>>  95:             self.allowed_modules.update({mapping.old_module, mapping.new_module})
     96:
     97:             # Register deprecation if specified
     98:             if mapping.deprecated_in:


GOD_METHOD: Method 'generate_migration_report' is too complex: 7 complexity, 61 lines, 6 max nesting
File: packages\core\legacy\compatibility\bridge_system.py:318:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    315:
    316:         return deprecated_usage
    317:
>>> 318:     def generate_migration_report(self) -> str:
    319:         """
    320:         Generate a comprehensive migration report.
    321:


GOD_METHOD: Method '_load_builtin_mappings' is too complex: 2 complexity, 55 lines, 1 max nesting
File: packages\core\legacy\compatibility\bridge_system.py:381:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    378:
    379:         return "\n".join(report)
    380:
>>> 381:     def _load_builtin_mappings(self):
    382:         """Load built-in compatibility mappings for AIVillage architecture."""
    383:         builtin_mappings = [
    384:             # Agent Forge migrations


GOD_METHOD: Method 'deprecated_api' is too complex: 2 complexity, 51 lines, 1 max nesting
File: packages\core\legacy\compatibility\bridge_system.py:510:0
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    507:     return compatibility_bridge.get_migration_guidance(api_name)
    508:
    509:
>>> 510: def deprecated_api(deprecated_since: str, replacement: str, removal_version: str = "2.0.0"):
    511:     """
    512:     Decorator to mark APIs as deprecated.
    513:


GOD_METHOD: Method 'decompress_model' is too complex: 9 complexity, 45 lines, 7 max nesting
File: packages\core\legacy\compression\advanced_pipeline.py:84:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     81:         return blob
     82:
     83:     # ------------------------------------------------------------------
>>>  84:     def decompress_model(self, data: bytes) -> dict[str, torch.Tensor]:
     85:         payload = lzma.decompress(data)
     86:         if len(payload) < 8:
     87:             raise ValueError("Corrupted payload: header missing")


GOD_METHOD: Method '_optimize_model' is too complex: 6 complexity, 9 lines, 5 max nesting
File: packages\core\legacy\compression\simple_quantizer.py:79:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     76:         torch.save(model, buffer, _use_new_zipfile_serialization=False)
     77:         return buffer.tell()
     78:
>>>  79:     def _optimize_model(self, model: torch.nn.Module) -> None:
     80:         for param in model.parameters():
     81:             param.requires_grad = False
     82:             if hasattr(param, "grad"):


GOD_METHOD: Method '_load_env_file' is too complex: 7 complexity, 20 lines, 5 max nesting
File: packages\core\legacy\config\configuration_manager.py:248:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    245:         )
    246:         logger.debug(f"Loaded {len(self.profile.defaults)} default values for profile '{self.profile_name}'")
    247:
>>> 248:     def _load_env_file(self) -> None:
    249:         """Load .env file if available."""
    250:         env_files = [".env", f".env.{self.profile_name}", ".env.local"]
    251:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\config\configuration_manager.py:310:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    307:             full_key = f"{prefix}_{key}".upper() if prefix else key.upper()
    308:
    309:             if isinstance(value, dict):
>>> 310:                 result.update(self._flatten_config(value, full_key))
    311:             else:
    312:                 result[full_key] = str(value)
    313:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\config\environment_validator.py:305:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    302:         # Count total variables we're checking
    303:         all_required = set()
    304:         for component_vars in self.REQUIRED_VARIABLES.values():
>>> 305:             all_required.update(component_vars)
    306:         self.report.total_variables = len(all_required)
    307:
    308:         # Validate required variables exist


GOD_METHOD: Method '_validate_types' is too complex: 9 complexity, 32 lines, 8 max nesting
File: packages\core\legacy\config\environment_validator.py:358:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    355:                 else:
    356:                     self.report.valid_variables += 1
    357:
>>> 358:     def _validate_types(self, env_vars: dict[str, str]) -> None:
    359:         """Validate variable types."""
    360:         for var_type, variables in self.TYPE_RULES.items():
    361:             if var_type == "enum":


GOD_METHOD: Method '_validate_type' is too complex: 11 complexity, 28 lines, 8 max nesting
File: packages\core\legacy\config\environment_validator.py:392:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    389:                                 )
    390:                             )
    391:
>>> 392:     def _validate_type(self, value: str, expected_type: str) -> bool:
    393:         """Validate individual type."""
    394:         try:
    395:             if expected_type == "int":


GOD_METHOD: Method '_validate_security' is too complex: 16 complexity, 106 lines, 12 max nesting
File: packages\core\legacy\config\environment_validator.py:422:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    419:         except ValueError:
    420:             return False
    421:
>>> 422:     def _validate_security(self, env_vars: dict[str, str]) -> None:
    423:         """Validate security-critical configurations."""
    424:         # Validate encryption key
    425:         if "DIGITAL_TWIN_ENCRYPTION_KEY" in env_vars:


GOD_METHOD: Method '_validate_paths' is too complex: 18 complexity, 104 lines, 12 max nesting
File: packages\core\legacy\config\environment_validator.py:530:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    527:                         )
    528:                     )
    529:
>>> 530:     def _validate_paths(self, env_vars: dict[str, str]) -> None:
    531:         """Validate file paths and directory permissions."""
    532:         for var in self.TYPE_RULES["path"]:
    533:             if var in env_vars:


GOD_METHOD: Method '_validate_ports' is too complex: 14 complexity, 78 lines, 9 max nesting
File: packages\core\legacy\config\environment_validator.py:636:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    633:                             )
    634:                         )
    635:
>>> 636:     def _validate_ports(self, env_vars: dict[str, str]) -> None:
    637:         """Validate port availability and ranges."""
    638:         used_ports = set()
    639:


GOD_METHOD: Method '_validate_environment_profile' is too complex: 10 complexity, 53 lines, 6 max nesting
File: packages\core\legacy\config\environment_validator.py:755:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    752:                         )
    753:                     )
    754:
>>> 755:     def _validate_environment_profile(self, env_vars: dict[str, str]) -> None:
    756:         """Validate environment-specific requirements."""
    757:         env_type = env_vars.get("AIVILLAGE_ENV", "development")
    758:


GOD_METHOD: Method 'generate_report' is too complex: 8 complexity, 53 lines, 7 max nesting
File: packages\core\legacy\config\environment_validator.py:810:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    807:                     )
    808:                 )
    809:
>>> 810:     def generate_report(self) -> str:
    811:         """Generate human-readable validation report."""
    812:         report_lines = [
    813:             "=" * 80,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\database\database_manager.py:389:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    386:         try:
    387:             # Enable WAL mode for concurrent access
    388:             if db_path != ":memory:":
>>> 389:                 conn.execute("PRAGMA journal_mode=WAL")
    390:                 conn.execute("PRAGMA synchronous=NORMAL")
    391:                 conn.execute("PRAGMA cache_size=10000")
    392:                 conn.execute("PRAGMA temp_store=memory")


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\database\database_manager.py:390:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    387:             # Enable WAL mode for concurrent access
    388:             if db_path != ":memory:":
    389:                 conn.execute("PRAGMA journal_mode=WAL")
>>> 390:                 conn.execute("PRAGMA synchronous=NORMAL")
    391:                 conn.execute("PRAGMA cache_size=10000")
    392:                 conn.execute("PRAGMA temp_store=memory")
    393:                 conn.execute("PRAGMA mmap_size=268435456")  # 256MB


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\database\database_manager.py:391:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    388:             if db_path != ":memory:":
    389:                 conn.execute("PRAGMA journal_mode=WAL")
    390:                 conn.execute("PRAGMA synchronous=NORMAL")
>>> 391:                 conn.execute("PRAGMA cache_size=10000")
    392:                 conn.execute("PRAGMA temp_store=memory")
    393:                 conn.execute("PRAGMA mmap_size=268435456")  # 256MB
    394:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\database\database_manager.py:392:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    389:                 conn.execute("PRAGMA journal_mode=WAL")
    390:                 conn.execute("PRAGMA synchronous=NORMAL")
    391:                 conn.execute("PRAGMA cache_size=10000")
>>> 392:                 conn.execute("PRAGMA temp_store=memory")
    393:                 conn.execute("PRAGMA mmap_size=268435456")  # 256MB
    394:
    395:             # Execute schema


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\database\database_manager.py:393:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    390:                 conn.execute("PRAGMA synchronous=NORMAL")
    391:                 conn.execute("PRAGMA cache_size=10000")
    392:                 conn.execute("PRAGMA temp_store=memory")
>>> 393:                 conn.execute("PRAGMA mmap_size=268435456")  # 256MB
    394:
    395:             # Execute schema
    396:             conn.executescript(config["schema"])


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\database\database_manager.py:400:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    397:
    398:             # Insert schema version
    399:             schema_version = 1
>>> 400:             conn.execute(
    401:                 "INSERT OR REPLACE INTO schema_version (version, description) VALUES (?, ?)",
    402:                 (schema_version, config["description"]),
    403:             )


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\database\database_manager.py:405:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    402:                 (schema_version, config["description"]),
    403:             )
    404:
>>> 405:             conn.commit()
    406:
    407:             # Store connection
    408:             self.connections[name] = conn


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\database\database_manager.py:555:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    552:         for db_name, conn in self.connections.items():
    553:             try:
    554:                 cursor = conn.cursor()
>>> 555:                 cursor.execute("PRAGMA integrity_check")
    556:                 result = cursor.fetchone()
    557:                 results[f"sqlite_{db_name}"] = result[0] == "ok" if result else False
    558:                 logger.info(f"Database {db_name} integrity: {results[f'sqlite_{db_name}']}")


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\database\database_manager.py:615:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    612:                 logger.info(f"Optimizing database {db_name}")
    613:
    614:                 # Analyze tables for query optimization
>>> 615:                 conn.execute("ANALYZE")
    616:
    617:                 # Vacuum if not in WAL mode or if database is small
    618:                 cursor = conn.cursor()


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\database\database_manager.py:619:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    616:
    617:                 # Vacuum if not in WAL mode or if database is small
    618:                 cursor = conn.cursor()
>>> 619:                 cursor.execute("PRAGMA page_count")
    620:                 page_count = cursor.fetchone()[0]
    621:
    622:                 if page_count < 10000:  # Small database, safe to vacuum


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\database\database_manager.py:623:20
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    620:                 page_count = cursor.fetchone()[0]
    621:
    622:                 if page_count < 10000:  # Small database, safe to vacuum
>>> 623:                     conn.execute("VACUUM")
    624:                     logger.info(f"Vacuumed database {db_name}")
    625:
    626:                 conn.commit()


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\database\database_manager.py:626:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    623:                     conn.execute("VACUUM")
    624:                     logger.info(f"Vacuumed database {db_name}")
    625:
>>> 626:                 conn.commit()
    627:
    628:             except Exception as e:
    629:                 logger.exception(f"Optimization failed for {db_name}: {e}")


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\database\database_manager.py:640:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    637:                 cursor = conn.cursor()
    638:
    639:                 # Get table information
>>> 640:                 cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
    641:                 tables = [row[0] for row in cursor.fetchall()]
    642:
    643:                 table_stats = {}


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\database\database_manager.py:648:24
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    645:
    646:                 for table in tables:
    647:                     if table != "sqlite_sequence":
>>> 648:                         cursor.execute(f"SELECT COUNT(*) FROM {table}")
    649:                         count = cursor.fetchone()[0]
    650:                         table_stats[table] = count
    651:                         total_rows += count


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\database\database_manager.py:654:19
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    651:                         total_rows += count
    652:
    653:                 # Get database size
>>> 654:                 if self.connections[db_name].execute("PRAGMA database_list").fetchone()[2] != ":memory:":
    655:                     cursor.execute("PRAGMA page_count")
    656:                     page_count = cursor.fetchone()[0]
    657:                     cursor.execute("PRAGMA page_size")


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\database\database_manager.py:655:20
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    652:
    653:                 # Get database size
    654:                 if self.connections[db_name].execute("PRAGMA database_list").fetchone()[2] != ":memory:":
>>> 655:                     cursor.execute("PRAGMA page_count")
    656:                     page_count = cursor.fetchone()[0]
    657:                     cursor.execute("PRAGMA page_size")
    658:                     page_size = cursor.fetchone()[0]


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\database\database_manager.py:657:20
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    654:                 if self.connections[db_name].execute("PRAGMA database_list").fetchone()[2] != ":memory:":
    655:                     cursor.execute("PRAGMA page_count")
    656:                     page_count = cursor.fetchone()[0]
>>> 657:                     cursor.execute("PRAGMA page_size")
    658:                     page_size = cursor.fetchone()[0]
    659:                     size_bytes = page_count * page_size
    660:                 else:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\database\database_validator.py:115:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    112:                 cursor = conn.cursor()
    113:
    114:                 # Test basic query
>>> 115:                 cursor.execute("SELECT sqlite_version()")
    116:                 version = cursor.fetchone()[0]
    117:
    118:                 # Test write capability


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\database\database_validator.py:119:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    116:                 version = cursor.fetchone()[0]
    117:
    118:                 # Test write capability
>>> 119:                 cursor.execute("SELECT COUNT(*) FROM sqlite_master WHERE type='table'")
    120:                 table_count = cursor.fetchone()[0]
    121:
    122:                 duration_ms = (time.time() - start_time) * 1000


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\database\database_validator.py:158:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    155:                 cursor = conn.cursor()
    156:
    157:                 # Check schema version
>>> 158:                 cursor.execute(
    159:                     """
    160:                 SELECT version, description FROM schema_version
    161:                 ORDER BY version DESC LIMIT 1


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\database\database_validator.py:184:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    181:
    182:                 # Validate required tables exist
    183:                 expected_tables = self._get_expected_tables(database)
>>> 184:                 cursor.execute(
    185:                     """
    186:                 SELECT name FROM sqlite_master
    187:                 WHERE type='table' AND name NOT LIKE 'sqlite_%'


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\database\database_validator.py:196:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    193:                 extra_tables = actual_tables - expected_tables
    194:
    195:                 # Run integrity check
>>> 196:                 cursor.execute("PRAGMA integrity_check")
    197:                 integrity_result = cursor.fetchone()[0]
    198:
    199:                 duration_ms = (time.time() - start_time) * 1000


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\database\database_validator.py:273:20
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    270:                 if database == "evolution_metrics":
    271:                     # Test evolution round creation
    272:                     f"test_round_{int(time.time())}"
>>> 273:                     cursor.execute(
    274:                         """
    275:                     INSERT INTO evolution_rounds (start_time, status, agent_count)
    276:                     VALUES (?, 'testing', 1)


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\database\database_validator.py:284:20
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    281:                     round_id = cursor.lastrowid
    282:
    283:                     # Test fitness metric creation
>>> 284:                     cursor.execute(
    285:                         """
    286:                     INSERT INTO fitness_metrics
    287:                     (round_id, agent_id, evolution_id, fitness_score, timestamp)


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\database\database_validator.py:294:20
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    291:                     )
    292:
    293:                     # Test query
>>> 294:                     cursor.execute(
    295:                         """
    296:                     SELECT COUNT(*) FROM fitness_metrics WHERE round_id = ?
    297:                     """,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\database\database_validator.py:303:20
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    300:                     count = cursor.fetchone()[0]
    301:
    302:                     # Cleanup test data
>>> 303:                     cursor.execute("DELETE FROM fitness_metrics WHERE round_id = ?", (round_id,))
    304:                     cursor.execute("DELETE FROM evolution_rounds WHERE id = ?", (round_id,))
    305:
    306:                     conn.commit()


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\database\database_validator.py:304:20
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    301:
    302:                     # Cleanup test data
    303:                     cursor.execute("DELETE FROM fitness_metrics WHERE round_id = ?", (round_id,))
>>> 304:                     cursor.execute("DELETE FROM evolution_rounds WHERE id = ?", (round_id,))
    305:
    306:                     conn.commit()
    307:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\database\database_validator.py:306:20
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    303:                     cursor.execute("DELETE FROM fitness_metrics WHERE round_id = ?", (round_id,))
    304:                     cursor.execute("DELETE FROM evolution_rounds WHERE id = ?", (round_id,))
    305:
>>> 306:                     conn.commit()
    307:
    308:                     passed = count == 1
    309:                     message = f"CRUD operations successful, inserted and queried {count} record(s)"


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\database\database_validator.py:314:20
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    311:                 elif database == "digital_twin":
    312:                     # Test profile creation
    313:                     test_student_id = f"test_student_{int(time.time())}"
>>> 314:                     cursor.execute(
    315:                         """
    316:                     INSERT INTO learning_profiles
    317:                     (student_id, name, age, grade_level)


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\database\database_validator.py:324:20
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    321:                     )
    322:
    323:                     # Test query
>>> 324:                     cursor.execute(
    325:                         """
    326:                     SELECT name FROM learning_profiles WHERE student_id = ?
    327:                     """,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\database\database_validator.py:333:20
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    330:                     result = cursor.fetchone()
    331:
    332:                     # Cleanup
>>> 333:                     cursor.execute(
    334:                         "DELETE FROM learning_profiles WHERE student_id = ?",
    335:                         (test_student_id,),
    336:                     )


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\database\database_validator.py:337:20
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    334:                         "DELETE FROM learning_profiles WHERE student_id = ?",
    335:                         (test_student_id,),
    336:                     )
>>> 337:                     conn.commit()
    338:
    339:                     passed = result and result[0] == "Test Student"
    340:                     message = f"CRUD operations successful, profile test passed: {passed}"


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\database\database_validator.py:345:20
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    342:                 elif database == "rag_index":
    343:                     # Test document creation
    344:                     test_doc_id = f"test_doc_{int(time.time())}"
>>> 345:                     cursor.execute(
    346:                         """
    347:                     INSERT INTO documents
    348:                     (document_id, title, content_hash, word_count)


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\database\database_validator.py:355:20
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    352:                     )
    353:
    354:                     # Test query
>>> 355:                     cursor.execute(
    356:                         """
    357:                     SELECT title FROM documents WHERE document_id = ?
    358:                     """,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\database\database_validator.py:364:20
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    361:                     result = cursor.fetchone()
    362:
    363:                     # Cleanup
>>> 364:                     cursor.execute("DELETE FROM documents WHERE document_id = ?", (test_doc_id,))
    365:                     conn.commit()
    366:
    367:                     passed = result and result[0] == "Test Document"


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\database\database_validator.py:365:20
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    362:
    363:                     # Cleanup
    364:                     cursor.execute("DELETE FROM documents WHERE document_id = ?", (test_doc_id,))
>>> 365:                     conn.commit()
    366:
    367:                     passed = result and result[0] == "Test Document"
    368:                     message = f"CRUD operations successful, document test passed: {passed}"


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\database\database_validator.py:411:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    408:
    409:                 # Benchmark SELECT performance
    410:                 select_start = time.time()
>>> 411:                 cursor.execute("SELECT COUNT(*) FROM sqlite_master")
    412:                 select_duration = (time.time() - select_start) * 1000
    413:
    414:                 self.performance_metrics.append(


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\database\database_validator.py:432:24
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    429:                     test_data = self._generate_test_data(database, 100)
    430:
    431:                     for data in test_data:
>>> 432:                         cursor.execute(data["sql"], data["params"])
    433:
    434:                     conn.commit()
    435:                     insert_duration = (time.time() - insert_start) * 1000


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\database\database_validator.py:434:20
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    431:                     for data in test_data:
    432:                         cursor.execute(data["sql"], data["params"])
    433:
>>> 434:                     conn.commit()
    435:                     insert_duration = (time.time() - insert_start) * 1000
    436:
    437:                     self.performance_metrics.append(


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\database\database_validator.py:450:24
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    447:                     # Cleanup test data
    448:                     cleanup_sql = self._get_cleanup_sql(database)
    449:                     if cleanup_sql:
>>> 450:                         cursor.execute(cleanup_sql)
    451:                         conn.commit()
    452:
    453:                 # Test query performance on existing data


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\database\database_validator.py:451:24
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    448:                     cleanup_sql = self._get_cleanup_sql(database)
    449:                     if cleanup_sql:
    450:                         cursor.execute(cleanup_sql)
>>> 451:                         conn.commit()
    452:
    453:                 # Test query performance on existing data
    454:                 query_start = time.time()


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\database\database_validator.py:458:24
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    455:                 tables = self._get_expected_tables(database)
    456:                 for table in tables:
    457:                     if table != "schema_version":
>>> 458:                         cursor.execute(f"SELECT COUNT(*) FROM {table}")
    459:                         cursor.fetchone()
    460:
    461:                 query_duration = (time.time() - query_start) * 1000


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\database\database_validator.py:567:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    564:                 cursor = conn.cursor()
    565:
    566:                 # Get database size
>>> 567:                 cursor.execute("PRAGMA page_count")
    568:                 page_count = cursor.fetchone()[0]
    569:                 cursor.execute("PRAGMA page_size")
    570:                 page_size = cursor.fetchone()[0]


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\database\database_validator.py:569:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    566:                 # Get database size
    567:                 cursor.execute("PRAGMA page_count")
    568:                 page_count = cursor.fetchone()[0]
>>> 569:                 cursor.execute("PRAGMA page_size")
    570:                 page_size = cursor.fetchone()[0]
    571:
    572:                 db_size_bytes = page_count * page_size


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\database\database_validator.py:576:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    573:                 db_size_mb = db_size_bytes / (1024 * 1024)
    574:
    575:                 # Check for unused space
>>> 576:                 cursor.execute("PRAGMA freelist_count")
    577:                 freelist_count = cursor.fetchone()[0]
    578:
    579:                 # Analyze table sizes


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\database\database_validator.py:583:24
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    580:                 table_stats = {}
    581:                 for table in self._get_expected_tables(database):
    582:                     if table != "schema_version":
>>> 583:                         cursor.execute(f"SELECT COUNT(*) FROM {table}")
    584:                         row_count = cursor.fetchone()[0]
    585:                         table_stats[table] = row_count
    586:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\database\database_validator.py:588:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    585:                         table_stats[table] = row_count
    586:
    587:                 # Check index usage
>>> 588:                 cursor.execute(
    589:                     """
    590:                 SELECT name, sql FROM sqlite_master
    591:                 WHERE type='index' AND sql IS NOT NULL


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\database\database_validator.py:651:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    648:                 cursor = conn.cursor()
    649:
    650:                 # Check foreign key consistency
>>> 651:                 cursor.execute("PRAGMA foreign_key_check")
    652:                 fk_violations = cursor.fetchall()
    653:
    654:                 # Database-specific consistency checks


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\database\database_validator.py:659:20
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    656:
    657:                 if database == "evolution_metrics":
    658:                     # Check that all fitness_metrics have valid round_ids
>>> 659:                     cursor.execute(
    660:                         """
    661:                     SELECT COUNT(*) FROM fitness_metrics fm
    662:                     LEFT JOIN evolution_rounds er ON fm.round_id = er.id


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\database\database_validator.py:672:20
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    669:
    670:                 elif database == "digital_twin":
    671:                     # Check that all learning_sessions have valid student_ids
>>> 672:                     cursor.execute(
    673:                         """
    674:                     SELECT COUNT(*) FROM learning_sessions ls
    675:                     LEFT JOIN learning_profiles lp ON ls.student_id = lp.student_id


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\database\database_validator.py:685:20
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    682:
    683:                 elif database == "rag_index":
    684:                     # Check that all chunks have valid document_ids
>>> 685:                     cursor.execute(
    686:                         """
    687:                     SELECT COUNT(*) FROM chunks c
    688:                     LEFT JOIN documents d ON c.document_id = d.document_id


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\database\database_validator.py:756:26
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    753:                     get_value = await conn.get(test_key)
    754:
    755:                     # Cleanup
>>> 756:                     await conn.delete(test_key)
    757:
    758:                     pool_duration = (time.time() - pool_start) * 1000
    759:


GOD_METHOD: Method '_generate_validation_summary' is too complex: 10 complexity, 81 lines, 7 max nesting
File: packages\core\legacy\database\database_validator.py:805:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    802:                 )
    803:             )
    804:
>>> 805:     def _generate_validation_summary(self, total_duration_ms: float) -> dict[str, Any]:
    806:         """Generate comprehensive validation summary."""
    807:         summary = {
    808:             "timestamp": datetime.now().isoformat(),


GOD_METHOD: Method '_load_migrations' is too complex: 1 complexity, 112 lines, 0 max nesting
File: packages\core\legacy\database\migrations.py:61:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     58:         }
     59:         self._load_migrations()
     60:
>>>  61:     def _load_migrations(self) -> None:
     62:         """Load all migration definitions."""
     63:         # Evolution Metrics migrations
     64:         self.migrations["evolution_metrics"] = [


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\database\migrations.py:184:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    181:         with self.database_manager.get_connection(database) as conn:
    182:             try:
    183:                 cursor = conn.cursor()
>>> 184:                 cursor.execute("SELECT MAX(version) FROM schema_version")
    185:                 result = cursor.fetchone()
    186:                 return result[0] if result[0] is not None else 0
    187:             except sqlite3.OperationalError:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\database\migrations.py:200:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    197:         with self.database_manager.get_connection(database) as conn:
    198:             try:
    199:                 cursor = conn.cursor()
>>> 200:                 cursor.execute(
    201:                     """
    202:                 SELECT version, applied_at, description
    203:                 FROM schema_version


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\database\migrations.py:295:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    292:         with self.database_manager.get_connection(database) as conn:
    293:             try:
    294:                 # Start transaction
>>> 295:                 conn.execute("BEGIN")
    296:
    297:                 # Check if migration already applied
    298:                 cursor = conn.cursor()


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\database\migrations.py:299:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    296:
    297:                 # Check if migration already applied
    298:                 cursor = conn.cursor()
>>> 299:                 cursor.execute(
    300:                     "SELECT 1 FROM schema_version WHERE version = ?",
    301:                     (migration.version,),
    302:                 )


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\database\migrations.py:317:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    314:                     await migration.data_migration(conn)
    315:
    316:                 # Record migration
>>> 317:                 conn.execute(
    318:                     "INSERT INTO schema_version (version, description) VALUES (?, ?)",
    319:                     (migration.version, migration.description),
    320:                 )


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\database\migrations.py:323:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    320:                 )
    321:
    322:                 # Commit transaction
>>> 323:                 conn.commit()
    324:
    325:                 logger.info(f"Successfully applied migration {migration.version}")
    326:                 return True


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\database\migrations.py:344:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    341:         with self.database_manager.get_connection(database) as conn:
    342:             try:
    343:                 # Start transaction
>>> 344:                 conn.execute("BEGIN")
    345:
    346:                 # Execute rollback SQL
    347:                 conn.executescript(migration.down_sql)


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\database\migrations.py:350:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    347:                 conn.executescript(migration.down_sql)
    348:
    349:                 # Remove migration record
>>> 350:                 conn.execute("DELETE FROM schema_version WHERE version = ?", (migration.version,))
    351:
    352:                 # Commit transaction
    353:                 conn.commit()


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\database\migrations.py:353:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    350:                 conn.execute("DELETE FROM schema_version WHERE version = ?", (migration.version,))
    351:
    352:                 # Commit transaction
>>> 353:                 conn.commit()
    354:
    355:                 logger.info(f"Successfully rolled back migration {migration.version}")
    356:                 return True


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\database\migrations.py:469:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    466:
    467:         with self.database_manager.get_connection("evolution_metrics") as conn:
    468:             try:
>>> 469:                 conn.execute("BEGIN")
    470:
    471:                 # Migrate evolution rounds
    472:                 if "rounds" in data:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\database\migrations.py:474:24
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    471:                 # Migrate evolution rounds
    472:                 if "rounds" in data:
    473:                     for round_data in data["rounds"]:
>>> 474:                         conn.execute(
    475:                             """
    476:                         INSERT OR REPLACE INTO evolution_rounds
    477:                         (start_time, end_time, status, agent_count, success_rate, metadata)


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\database\migrations.py:494:32
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    491:                         # Migrate fitness metrics for this round
    492:                         if "fitness_metrics" in round_data:
    493:                             for metric in round_data["fitness_metrics"]:
>>> 494:                                 conn.execute(
    495:                                     """
    496:                                 INSERT INTO fitness_metrics
    497:                                 (round_id, agent_id, evolution_id, fitness_score, improvement_delta, timestamp, metadata)


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\database\migrations.py:511:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    508:                                     ),
    509:                                 )
    510:
>>> 511:                 conn.commit()
    512:                 logger.info(f"Successfully migrated evolution metrics from {json_file_path}")
    513:                 return True
    514:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\database\migrations.py:531:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    528:
    529:         with self.database_manager.get_connection("digital_twin") as conn:
    530:             try:
>>> 531:                 conn.execute("BEGIN")
    532:
    533:                 # Find all profile JSON files
    534:                 for profile_file in profiles_path.glob("*.json"):


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\database\migrations.py:540:24
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    537:                             profile_data = json.load(f)
    538:
    539:                         # Insert learning profile
>>> 540:                         conn.execute(
    541:                             """
    542:                         INSERT OR REPLACE INTO learning_profiles
    543:                         (student_id, name, age, grade_level, language, region, learning_style,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\database\migrations.py:570:32
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    567:                         if "sessions" in profile_data:
    568:                             student_id = profile_data.get("student_id", profile_file.stem)
    569:                             for session in profile_data["sessions"]:
>>> 570:                                 conn.execute(
    571:                                     """
    572:                                 INSERT INTO learning_sessions
    573:                                 (session_id, student_id, start_time, end_time, duration_minutes,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\database\migrations.py:597:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    594:                         logger.warning(f"Failed to migrate profile {profile_file}: {e}")
    595:                         continue
    596:
>>> 597:                 conn.commit()
    598:                 logger.info(f"Successfully migrated digital twin profiles from {profiles_dir}")
    599:                 return True
    600:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\database\redis_manager.py:72:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     69:         db_path = self.storage_path.parent / "redis_fallback.db"
     70:
     71:         self._sqlite_conn = sqlite3.connect(str(db_path), timeout=30)
>>>  72:         self._sqlite_conn.execute("PRAGMA journal_mode=WAL")
     73:
     74:         # Create fallback tables
     75:         self._sqlite_conn.executescript(


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\database\redis_manager.py:112:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    109:         );
    110:         """
    111:         )
>>> 112:         self._sqlite_conn.commit()
    113:
    114:     async def get(self, key: str) -> Any | None:
    115:         """Get value from fallback storage."""


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\database\redis_manager.py:135:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    132:
    133:         if self.storage_type == "sqlite" and self._sqlite_conn:
    134:             cursor = self._sqlite_conn.cursor()
>>> 135:             cursor.execute(
    136:                 """
    137:             SELECT value, value_type, expires_at
    138:             FROM redis_fallback


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\database\redis_manager.py:209:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    206:                     value_blob = secure_dumps(value)
    207:                     value_type = "secure_serialized"
    208:
>>> 209:                 self._sqlite_conn.execute(
    210:                     """
    211:                 INSERT OR REPLACE INTO redis_fallback
    212:                     (key, value, value_type, expires_at)


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\database\redis_manager.py:218:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    215:                     (key, value_blob, value_type, expires_at),
    216:                 )
    217:
>>> 218:                 self._sqlite_conn.commit()
    219:                 return True
    220:             except Exception as e:
    221:                 logger.exception(f"Failed to set fallback value for {key}: {e}")


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\database\redis_manager.py:250:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    247:
    248:         if self.storage_type == "sqlite" and self._sqlite_conn:
    249:             cursor = self._sqlite_conn.cursor()
>>> 250:             cursor.execute("DELETE FROM redis_fallback WHERE key = ?", (key,))
    251:             self._sqlite_conn.commit()
    252:             return cursor.rowcount > 0
    253:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\database\redis_manager.py:251:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    248:         if self.storage_type == "sqlite" and self._sqlite_conn:
    249:             cursor = self._sqlite_conn.cursor()
    250:             cursor.execute("DELETE FROM redis_fallback WHERE key = ?", (key,))
>>> 251:             self._sqlite_conn.commit()
    252:             return cursor.rowcount > 0
    253:
    254:         if self.storage_type == "file":


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\database\redis_manager.py:273:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    270:         if self.storage_type == "sqlite" and self._sqlite_conn:
    271:             expires_at = time.time() + seconds
    272:             cursor = self._sqlite_conn.cursor()
>>> 273:             cursor.execute(
    274:                 """
    275:             UPDATE redis_fallback
    276:             SET expires_at = ?


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\database\redis_manager.py:281:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    278:             """,
    279:                 (expires_at, key),
    280:             )
>>> 281:             self._sqlite_conn.commit()
    282:             return cursor.rowcount > 0
    283:
    284:         # For other storage types, would need to implement expiration logic


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\database\redis_manager.py:301:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    298:
    299:         if self.storage_type == "sqlite" and self._sqlite_conn:
    300:             cursor = self._sqlite_conn.cursor()
>>> 301:             cursor.execute(
    302:                 """
    303:             DELETE FROM redis_fallback
    304:             WHERE expires_at IS NOT NULL AND expires_at < ?


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\database\redis_manager.py:308:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    305:             """,
    306:                 (time.time(),),
    307:             )
>>> 308:             self._sqlite_conn.commit()
    309:             return cursor.rowcount
    310:
    311:         if self.storage_type == "file":


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\database\redis_manager.py:665:31
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    662:         """Delete value from Redis or fallback storage."""
    663:         if self.redis_client:
    664:             try:
>>> 665:                 result = await self.redis_client.delete(key)
    666:                 return result > 0
    667:             except Exception as e:
    668:                 logger.warning(f"Redis delete failed for {key}: {e}")


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\database\redis_manager.py:672:25
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    669:                 # Fall through to fallback
    670:
    671:         if self.fallback_store:
>>> 672:             return await self.fallback_store.delete(key)
    673:
    674:         return False
    675:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\database\redis_manager.py:756:28
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    753:             print(f"Key exists: {exists}")
    754:
    755:             # Test delete
>>> 756:             deleted = await conn.delete("test_key")
    757:             print(f"Key deleted: {deleted}")
    758:
    759:         # Cleanup expired keys


GOD_METHOD: Method 'log_debug_info' is too complex: 7 complexity, 23 lines, 5 max nesting
File: packages\core\legacy\debug\debug_manager.py:115:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    112:         """Check if performance profiling is enabled."""
    113:         return self.config.profile_performance
    114:
>>> 115:     def log_debug_info(self, component: str, message: str, data: dict[str, Any] | None = None) -> None:
    116:         """Log debug information for a specific component."""
    117:         if not self.is_debug_enabled():
    118:             return


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'log_request_response'
File: packages\core\legacy\debug\debug_manager.py:140:4
Recommendation: Extract common code into a shared function or utility
Code context:
    137:                 for key, value in data.items():
    138:                     self.logger.debug(f"  {key}: {value}")
    139:
>>> 140:     def log_request_response(self, endpoint: str, request_data: Any, response_data: Any, duration_ms: float) -> None:
    141:         """Log request/response data for debugging API calls."""
    142:         if not self.is_debug_enabled():
    143:             return


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'log_database_query'
File: packages\core\legacy\debug\debug_manager.py:155:4
Recommendation: Extract common code into a shared function or utility
Code context:
    152:
    153:         self.log_debug_info("api_requests", f"API call to {endpoint}", debug_info)
    154:
>>> 155:     def log_database_query(self, query: str, params: Any, duration_ms: float, result_count: int) -> None:
    156:         """Log database queries with timing information."""
    157:         if not self.is_debug_enabled():
    158:             return


GOD_METHOD: Method 'setup_debug_logging' is too complex: 6 complexity, 83 lines, 5 max nesting
File: packages\core\legacy\debug\logger_config.py:59:0
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     56:         return super().format(record)
     57:
     58:
>>>  59: def setup_debug_logging(
     60:     log_level: str = "DEBUG",
     61:     log_file: str | None = None,
     62:     enable_console: bool = True,


GOD_METHOD: Method 'log_request' is too complex: 6 complexity, 24 lines, 5 max nesting
File: packages\core\legacy\debug\logger_config.py:181:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    178:         self.logger = logging.getLogger(logger_name)
    179:         self.enabled = os.getenv("AIVILLAGE_DEBUG_MODE", "false").lower() == "true"
    180:
>>> 181:     def log_request(
    182:         self,
    183:         endpoint: str,
    184:         method: str = "POST",


GOD_METHOD: Method '_analyze_database' is too complex: 5 complexity, 60 lines, 2 max nesting
File: packages\core\legacy\debug\troubleshooting.py:172:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    169:
    170:         return results
    171:
>>> 172:     def _analyze_database(self, db_path: str) -> dict[str, Any]:
    173:         """Analyze a single database file."""
    174:         db_info = {
    175:             "path": db_path,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\debug\troubleshooting.py:212:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    209:
    210:                 # Get journal mode
    211:                 cursor = conn.cursor()
>>> 212:                 cursor.execute("PRAGMA journal_mode")
    213:                 db_info["journal_mode"] = cursor.fetchone()[0]
    214:
    215:                 # Test if database is locked by trying a simple operation


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\debug\troubleshooting.py:216:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    213:                 db_info["journal_mode"] = cursor.fetchone()[0]
    214:
    215:                 # Test if database is locked by trying a simple operation
>>> 216:                 cursor.execute("BEGIN IMMEDIATE")
    217:                 cursor.execute("ROLLBACK")
    218:
    219:                 conn.close()


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\debug\troubleshooting.py:217:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    214:
    215:                 # Test if database is locked by trying a simple operation
    216:                 cursor.execute("BEGIN IMMEDIATE")
>>> 217:                 cursor.execute("ROLLBACK")
    218:
    219:                 conn.close()
    220:


GOD_METHOD: Method 'profile_memory_usage' is too complex: 6 complexity, 60 lines, 4 max nesting
File: packages\core\legacy\debug\troubleshooting.py:234:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    231:
    232:         return db_info
    233:
>>> 234:     def profile_memory_usage(self, include_faiss_simulation: bool = True) -> dict[str, Any]:
    235:         """Profile memory usage with FAISS memory simulation.
    236:
    237:         Args:


GOD_METHOD: Method 'run_comprehensive_diagnosis' is too complex: 5 complexity, 51 lines, 3 max nesting
File: packages\core\legacy\debug\troubleshooting.py:612:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    609:
    610:         return env_status
    611:
>>> 612:     def run_comprehensive_diagnosis(self) -> dict[str, Any]:
    613:         """Run comprehensive system diagnosis.
    614:
    615:         Returns:


GOD_METHOD: Method '_calculate_health_score' is too complex: 6 complexity, 24 lines, 5 max nesting
File: packages\core\legacy\debug\troubleshooting.py:665:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    662:
    663:         return diagnosis
    664:
>>> 665:     def _calculate_health_score(self, diagnosis: dict[str, Any]) -> float:
    666:         """Calculate overall system health score."""
    667:         score = 1.0
    668:


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_check_single_port'
File: packages\core\legacy\debug\troubleshooting.py:74:4
Recommendation: Extract common code into a shared function or utility
Code context:
     71:
     72:         return results
     73:
>>>  74:     def _check_single_port(self, port: int) -> dict[str, Any]:
     75:         """Check if a single port is in use."""
     76:         port_info = {
     77:             "port": port,


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_get_all_listening_ports'
File: packages\core\legacy\debug\troubleshooting.py:113:4
Recommendation: Extract common code into a shared function or utility
Code context:
    110:
    111:         return port_info
    112:
>>> 113:     def _get_all_listening_ports(self) -> list[dict[str, Any]]:
    114:         """Get all currently listening ports."""
    115:         listening_ports = []
    116:


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_analyze_database'
File: packages\core\legacy\debug\troubleshooting.py:172:4
Recommendation: Extract common code into a shared function or utility
Code context:
    169:
    170:         return results
    171:
>>> 172:     def _analyze_database(self, db_path: str) -> dict[str, Any]:
    173:         """Analyze a single database file."""
    174:         db_info = {
    175:             "path": db_path,


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_test_connection'
File: packages\core\legacy\debug\troubleshooting.py:421:4
Recommendation: Extract common code into a shared function or utility
Code context:
    418:
    419:         return connectivity_tests
    420:
>>> 421:     def _test_connection(self, host: str, port: int, timeout: float = 5.0) -> dict[str, Any]:
    422:         """Test connection to a specific host and port."""
    423:         result = {
    424:             "host": host,


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_test_dns_resolution'
File: packages\core\legacy\debug\troubleshooting.py:445:4
Recommendation: Extract common code into a shared function or utility
Code context:
    442:
    443:         return result
    444:
>>> 445:     def _test_dns_resolution(self) -> dict[str, Any]:
    446:         """Test DNS resolution."""
    447:         test_hosts = ["localhost", "127.0.0.1"]
    448:         results = {}


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_check_environment_variables'
File: packages\core\legacy\debug\troubleshooting.py:593:4
Recommendation: Extract common code into a shared function or utility
Code context:
    590:         except Exception as e:
    591:             result["errors"].append(f"Invalid TOML: {e}")
    592:
>>> 593:     def _check_environment_variables(self) -> dict[str, Any]:
    594:         """Check important environment variables."""
    595:         important_vars = [
    596:             "AIVILLAGE_DEBUG_MODE",


GOD_METHOD: Method 'resolve_model_path' is too complex: 9 complexity, 40 lines, 8 max nesting
File: packages\core\legacy\knowledge\rag_offline_config.py:31:0
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     28: logger = logging.getLogger(__name__)
     29:
     30:
>>>  31: def resolve_model_path(
     32:     model_name: str,
     33:     device: str | None = None,
     34:     base_dir: str | Path | None = None,


GOD_METHOD: Method 'adapt_for_mobile' is too complex: 1 complexity, 51 lines, 0 max nesting
File: packages\core\legacy\knowledge\rag_offline_config.py:277:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    274:     validation_date: str | None = None
    275:     validation_errors: list[str] = field(default_factory=list)
    276:
>>> 277:     def adapt_for_mobile(self) -> "OfflineRAGConfig":
    278:         """Create mobile-optimized variant of this config."""
    279:         base_dir = Path(self.embedding.model_path).parent if self.embedding.model_path else None
    280:


GOD_METHOD: Method 'validate_config' is too complex: 15 complexity, 56 lines, 14 max nesting
File: packages\core\legacy\knowledge\rag_offline_config.py:330:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    327:
    328:         return mobile_config
    329:
>>> 330:     def validate_config(self) -> bool:
    331:         """Validate configuration for consistency and feasibility."""
    332:         errors = []
    333:


GOD_METHOD: Method '_initialize_default_configs' is too complex: 1 complexity, 85 lines, 0 max nesting
File: packages\core\legacy\knowledge\rag_offline_config.py:403:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    400:
    401:         logger.info(f"OfflineRAGConfigRegistry initialized with {len(self.validated_configs)} validated configs")
    402:
>>> 403:     def _initialize_default_configs(self):
    404:         """Initialize default RAG configurations for common scenarios."""
    405:
    406:         # 1. Standard Offline RAG


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\performance\performance_optimizer.py:135:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    132:
    133:             for pragma_sql, description in optimizations:
    134:                 start_time = time.time()
>>> 135:                 cursor.execute(pragma_sql)
    136:                 duration = (time.time() - start_time) * 1000
    137:                 results[description] = f"Applied in {duration:.2f}ms"
    138:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\performance\performance_optimizer.py:142:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    139:             # Create performance indexes
    140:             self._create_performance_indexes(cursor, db_path)
    141:
>>> 142:             conn.commit()
    143:             conn.close()
    144:
    145:             logger.info(f"Database optimized: {db_path}")


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\performance\performance_optimizer.py:185:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    182:         for index_sql in indexes:
    183:             try:
    184:                 start_time = time.time()
>>> 185:                 cursor.execute(index_sql)
    186:                 duration = (time.time() - start_time) * 1000
    187:                 logger.debug(f"Index created in {duration:.2f}ms: {index_sql.split()[-1]}")
    188:             except Exception as e:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\performance\performance_optimizer.py:201:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    198:             conn.row_factory = sqlite3.Row
    199:
    200:             # Apply runtime optimizations
>>> 201:             conn.execute("PRAGMA journal_mode=WAL")
    202:             conn.execute("PRAGMA synchronous=NORMAL")
    203:             conn.execute("PRAGMA cache_size=10000")
    204:             conn.execute("PRAGMA temp_store=MEMORY")


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\performance\performance_optimizer.py:202:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    199:
    200:             # Apply runtime optimizations
    201:             conn.execute("PRAGMA journal_mode=WAL")
>>> 202:             conn.execute("PRAGMA synchronous=NORMAL")
    203:             conn.execute("PRAGMA cache_size=10000")
    204:             conn.execute("PRAGMA temp_store=MEMORY")
    205:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\performance\performance_optimizer.py:203:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    200:             # Apply runtime optimizations
    201:             conn.execute("PRAGMA journal_mode=WAL")
    202:             conn.execute("PRAGMA synchronous=NORMAL")
>>> 203:             conn.execute("PRAGMA cache_size=10000")
    204:             conn.execute("PRAGMA temp_store=MEMORY")
    205:
    206:             self.connection_pool[connection_key] = conn


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\performance\performance_optimizer.py:204:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    201:             conn.execute("PRAGMA journal_mode=WAL")
    202:             conn.execute("PRAGMA synchronous=NORMAL")
    203:             conn.execute("PRAGMA cache_size=10000")
>>> 204:             conn.execute("PRAGMA temp_store=MEMORY")
    205:
    206:             self.connection_pool[connection_key] = conn
    207:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\performance\performance_optimizer.py:231:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    228:
    229:         with self.get_optimized_connection(db_path) as conn:
    230:             cursor = conn.cursor()
>>> 231:             cursor.execute(query, params)
    232:             result = cursor.fetchall()
    233:
    234:         duration_ms = (time.time() - start_time) * 1000


GOD_METHOD: Method 'get_database_stats' is too complex: 7 complexity, 53 lines, 5 max nesting
File: packages\core\legacy\performance\performance_optimizer.py:257:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    254:
    255:         return duration_ms, result
    256:
>>> 257:     def get_database_stats(self, db_path: str) -> Dict[str, Any]:
    258:         """Get comprehensive database statistics."""
    259:         try:
    260:             with self.get_optimized_connection(db_path) as conn:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\performance\performance_optimizer.py:266:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    263:                 stats = {}
    264:
    265:                 # Basic database info
>>> 266:                 cursor.execute("PRAGMA page_count")
    267:                 page_count = cursor.fetchone()[0]
    268:                 cursor.execute("PRAGMA page_size")
    269:                 page_size = cursor.fetchone()[0]


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\performance\performance_optimizer.py:268:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    265:                 # Basic database info
    266:                 cursor.execute("PRAGMA page_count")
    267:                 page_count = cursor.fetchone()[0]
>>> 268:                 cursor.execute("PRAGMA page_size")
    269:                 page_size = cursor.fetchone()[0]
    270:                 stats["size_mb"] = (page_count * page_size) / (1024 * 1024)
    271:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\performance\performance_optimizer.py:273:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    270:                 stats["size_mb"] = (page_count * page_size) / (1024 * 1024)
    271:
    272:                 # Journal mode
>>> 273:                 cursor.execute("PRAGMA journal_mode")
    274:                 stats["journal_mode"] = cursor.fetchone()[0]
    275:
    276:                 # Cache statistics


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\performance\performance_optimizer.py:277:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    274:                 stats["journal_mode"] = cursor.fetchone()[0]
    275:
    276:                 # Cache statistics
>>> 277:                 cursor.execute("PRAGMA cache_size")
    278:                 stats["cache_size"] = cursor.fetchone()[0]
    279:
    280:                 # WAL size


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\performance\performance_optimizer.py:288:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    285:                     stats["wal_size_mb"] = 0
    286:
    287:                 # Table statistics
>>> 288:                 cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
    289:                 tables = [row[0] for row in cursor.fetchall()]
    290:
    291:                 table_stats = {}


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\performance\performance_optimizer.py:294:24
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    291:                 table_stats = {}
    292:                 for table in tables:
    293:                     if not table.startswith("sqlite_"):
>>> 294:                         cursor.execute(f"SELECT COUNT(*) FROM {table}")
    295:                         table_stats[table] = cursor.fetchone()[0]
    296:
    297:                 stats["tables"] = table_stats


GOD_METHOD: Method '_generate_summary' is too complex: 8 complexity, 50 lines, 7 max nesting
File: packages\core\legacy\performance\performance_optimizer.py:850:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    847:             },
    848:         }
    849:
>>> 850:     def _generate_summary(self, benchmarks: Dict[str, Any]) -> Dict[str, Any]:
    851:         """Generate benchmark summary."""
    852:         summary = {
    853:             "overall_performance": "excellent",


GOD_METHOD: Method '_generate_recommendations' is too complex: 11 complexity, 37 lines, 10 max nesting
File: packages\core\legacy\performance\performance_optimizer.py:902:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    899:
    900:         return summary
    901:
>>> 902:     def _generate_recommendations(self, benchmarks: Dict[str, Any]) -> List[str]:
    903:         """Generate performance recommendations."""
    904:         recommendations = []
    905:


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '__init__'
File: packages\core\legacy\performance\performance_optimizer.py:106:4
Recommendation: Extract common code into a shared function or utility
Code context:
    103: class DatabasePerformanceOptimizer:
    104:     """Database performance optimization and monitoring."""
    105:
>>> 106:     def __init__(self, db_paths: List[str]):
    107:         self.db_paths = db_paths
    108:         self.connection_pool = {}
    109:         self.query_cache = {}


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '__init__'
File: packages\core\legacy\performance\performance_optimizer.py:528:4
Recommendation: Extract common code into a shared function or utility
Code context:
    525: class NetworkPerformanceOptimizer:
    526:     """Network performance optimization for P2P communications."""
    527:
>>> 528:     def __init__(self):
    529:         self.network_stats = deque(maxlen=1000)
    530:         self.message_compression = True
    531:         self.batch_size = 10


GOD_METHOD: Method 'detect_file_stubs' is too complex: 10 complexity, 34 lines, 6 max nesting
File: packages\core\legacy\quality\stub_elimination_system.py:138:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    135:             "Replace with actual implementation",
    136:         ]
    137:
>>> 138:     def detect_file_stubs(self, file_path: Path) -> list[StubAnalysis]:
    139:         """Detect all stubs in a single file."""
    140:         if not file_path.exists() or file_path.suffix != ".py":
    141:             return []


GOD_METHOD: Method '_detect_ast_stubs' is too complex: 8 complexity, 37 lines, 5 max nesting
File: packages\core\legacy\quality\stub_elimination_system.py:214:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    211:
    212:         return stub
    213:
>>> 214:     def _detect_ast_stubs(self, file_path: Path, tree: ast.AST, lines: list[str]) -> list[StubAnalysis]:
    215:         """Detect stubs using AST analysis."""
    216:         stubs = []
    217:


GOD_METHOD: Method 'generate_elimination_report' is too complex: 5 complexity, 54 lines, 4 max nesting
File: packages\core\legacy\quality\stub_elimination_system.py:440:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    437:         logger.info(f"Created elimination plan for top {len(top_stubs)} stubs")
    438:         return top_stubs
    439:
>>> 440:     def generate_elimination_report(self, top_stubs: list[StubAnalysis]) -> dict[str, Any]:
    441:         """Generate comprehensive elimination report."""
    442:
    443:         # Categorize by type and priority


GOD_METHOD: Method '_export_markdown_report' is too complex: 6 complexity, 33 lines, 5 max nesting
File: packages\core\legacy\quality\stub_elimination_system.py:509:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    506:
    507:         logger.info(f"Exported elimination plan to {output_path}")
    508:
>>> 509:     def _export_markdown_report(self, output_path: Path, report: dict[str, Any], top_stubs: list[StubAnalysis]) -> None:
    510:         """Export detailed markdown report."""
    511:         with open(output_path, "w") as f:
    512:             f.write("# Stub Elimination Plan\n\n")


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\resilience\error_handling.py:28:0
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     25: from typing import Any
     26:
     27: # Add src to path for imports
>>>  28: sys.path.insert(0, str(Path(__file__).parent.parent.parent))
     29:
     30:
     31: class ErrorSeverity(Enum):


GOD_METHOD: Method '_categorize_error' is too complex: 6 complexity, 15 lines, 5 max nesting
File: packages\core\legacy\resilience\error_handling.py:208:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    205:
    206:         return error_id
    207:
>>> 208:     def _categorize_error(self, error: Exception) -> ErrorCategory:
    209:         """Automatically categorize error based on type."""
    210:         error_type = type(error).__name__.lower()
    211:


GOD_METHOD: Method '_update_component_health' is too complex: 6 complexity, 10 lines, 5 max nesting
File: packages\core\legacy\resilience\error_handling.py:225:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    222:         else:
    223:             return ErrorCategory.INTERNAL
    224:
>>> 225:     def _update_component_health(self, component: str, severity: ErrorSeverity):
    226:         """Update component health based on error severity."""
    227:         if severity == ErrorSeverity.CRITICAL:
    228:             self.component_health[component] = HealthStatus.CRITICAL


GOD_METHOD: Method 'resilient_call' is too complex: 5 complexity, 53 lines, 2 max nesting
File: packages\core\legacy\resilience\error_handling.py:673:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    670:             self.retry_handlers[name] = RetryHandler(config)
    671:         return self.retry_handlers[name]
    672:
>>> 673:     def resilient_call(
    674:         self,
    675:         component: str,
    676:         operation: str,


GOD_METHOD: Method '_create_constraint_templates' is too complex: 1 complexity, 69 lines, 0 max nesting
File: packages\core\legacy\resources\constraint_manager.py:212:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    209:             can_resume=True,
    210:         )
    211:
>>> 212:     def _create_constraint_templates(self) -> dict[str, ResourceConstraints]:
    213:         """Create pre-defined constraint templates."""
    214:         base = self.default_constraints
    215:


GOD_METHOD: Method '_check_resource_availability' is too complex: 8 complexity, 32 lines, 5 max nesting
File: packages\core\legacy\resources\constraint_manager.py:569:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    566:
    567:         logger.info(f"Task {task_id} unregistered")
    568:
>>> 569:     def _check_resource_availability(self, constraints: ResourceConstraints) -> bool:
    570:         """Check if resources are available for task."""
    571:         current_snapshot = self.device_profiler.current_snapshot
    572:         if not current_snapshot:


GOD_METHOD: Method 'validate_config_dict_for_production' is too complex: 11 complexity, 25 lines, 8 max nesting
File: packages\core\legacy\security\http_security_validator.py:46:0
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     43:     return url
     44:
     45:
>>>  46: def validate_config_dict_for_production(config: dict[str, Any], path: str = "") -> None:
     47:     """Recursively validate configuration dictionary for HTTP URLs in production.
     48:
     49:     Args:


GOD_METHOD: Method 'require_https_in_production' is too complex: 8 complexity, 20 lines, 5 max nesting
File: packages\core\legacy\security\http_security_validator.py:133:0
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    130:     logger.info("Production environment HTTPS validation passed")
    131:
    132:
>>> 133: def require_https_in_production(func):
    134:     """Decorator to validate HTTPS URLs in production before function execution.
    135:
    136:     This decorator can be applied to functions that accept URL parameters.


GOD_METHOD: Method 'wrapper' is too complex: 8 complexity, 12 lines, 5 max nesting
File: packages\core\legacy\security\http_security_validator.py:139:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    136:     This decorator can be applied to functions that accept URL parameters.
    137:     """
    138:
>>> 139:     def wrapper(*args, **kwargs):
    140:         if os.getenv("AIVILLAGE_ENV") == "production":
    141:             # Check all string arguments for HTTP URLs
    142:             for arg in args:


GOD_METHOD: Method '_generate_ca' is too complex: 1 complexity, 74 lines, 0 max nesting
File: packages\core\legacy\security\p2p_mtls_config.py:61:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     58:             logger.info(f"Generating P2P node certificate for {self.node_id}")
     59:             self._generate_node_cert()
     60:
>>>  61:     def _generate_ca(self) -> None:
     62:         """Generate Certificate Authority for P2P network."""
     63:         # Generate CA private key
     64:         ca_private_key = rsa.generate_private_key(


GOD_METHOD: Method '_generate_node_cert' is too complex: 1 complexity, 92 lines, 0 max nesting
File: packages\core\legacy\security\p2p_mtls_config.py:137:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    134:
    135:         logger.info(f"Generated P2P CA certificate: {self.ca_cert_path}")
    136:
>>> 137:     def _generate_node_cert(self) -> None:
    138:         """Generate node certificate signed by CA."""
    139:         # Load CA
    140:         with open(self.ca_cert_path, "rb") as f:


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'create_ssl_context_server'
File: packages\core\legacy\security\p2p_mtls_config.py:231:4
Recommendation: Extract common code into a shared function or utility
Code context:
    228:
    229:         logger.info(f"Generated P2P node certificate: {self.node_cert_path}")
    230:
>>> 231:     def create_ssl_context_server(self) -> ssl.SSLContext:
    232:         """Create SSL context for server-side P2P connections."""
    233:         context = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)
    234:


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'create_ssl_context_client'
File: packages\core\legacy\security\p2p_mtls_config.py:260:4
Recommendation: Extract common code into a shared function or utility
Code context:
    257:
    258:         return context
    259:
>>> 260:     def create_ssl_context_client(self) -> ssl.SSLContext:
    261:         """Create SSL context for client-side P2P connections."""
    262:         context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH)
    263:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\security\rbac_system.py:118:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    115:         """Get database connection."""
    116:         conn = sqlite3.connect(self.db_path, timeout=30.0)
    117:         conn.row_factory = sqlite3.Row
>>> 118:         conn.execute("PRAGMA foreign_keys=ON")
    119:         try:
    120:             yield conn
    121:             conn.commit()


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\security\rbac_system.py:121:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    118:         conn.execute("PRAGMA foreign_keys=ON")
    119:         try:
    120:             yield conn
>>> 121:             conn.commit()
    122:         except Exception:
    123:             conn.rollback()
    124:             raise


GOD_METHOD: Method '_init_database' is too complex: 2 complexity, 138 lines, 1 max nesting
File: packages\core\legacy\security\rbac_system.py:128:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    125:         finally:
    126:             conn.close()
    127:
>>> 128:     def _init_database(self) -> None:
    129:         """Initialize RBAC database schema."""
    130:         with self._get_connection() as conn:
    131:             # Roles table


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\security\rbac_system.py:132:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    129:         """Initialize RBAC database schema."""
    130:         with self._get_connection() as conn:
    131:             # Roles table
>>> 132:             conn.execute(
    133:                 """
    134:                 CREATE TABLE IF NOT EXISTS roles (
    135:                     id INTEGER PRIMARY KEY AUTOINCREMENT,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\security\rbac_system.py:148:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    145:             )
    146:
    147:             # Permissions table
>>> 148:             conn.execute(
    149:                 """
    150:                 CREATE TABLE IF NOT EXISTS permissions (
    151:                     id INTEGER PRIMARY KEY AUTOINCREMENT,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\security\rbac_system.py:163:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    160:             )
    161:
    162:             # Role-Permission assignments
>>> 163:             conn.execute(
    164:                 """
    165:                 CREATE TABLE IF NOT EXISTS role_permissions (
    166:                     id INTEGER PRIMARY KEY AUTOINCREMENT,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\security\rbac_system.py:184:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    181:             )
    182:
    183:             # Users table
>>> 184:             conn.execute(
    185:                 """
    186:                 CREATE TABLE IF NOT EXISTS users (
    187:                     id INTEGER PRIMARY KEY AUTOINCREMENT,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\security\rbac_system.py:214:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    211:             )
    212:
    213:             # User-Role assignments
>>> 214:             conn.execute(
    215:                 """
    216:                 CREATE TABLE IF NOT EXISTS user_roles (
    217:                     id INTEGER PRIMARY KEY AUTOINCREMENT,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\security\rbac_system.py:235:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    232:             )
    233:
    234:             # Access log
>>> 235:             conn.execute(
    236:                 """
    237:                 CREATE TABLE IF NOT EXISTS access_log (
    238:                     id INTEGER PRIMARY KEY AUTOINCREMENT,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\security\rbac_system.py:266:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    263:             ]
    264:
    265:             for index_sql in indexes:
>>> 266:                 conn.execute(index_sql)
    267:
    268:     def _init_default_roles(self) -> None:
    269:         """Initialize default roles and permissions."""


GOD_METHOD: Method '_init_default_roles' is too complex: 5 complexity, 179 lines, 4 max nesting
File: packages\core\legacy\security\rbac_system.py:268:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    265:             for index_sql in indexes:
    266:                 conn.execute(index_sql)
    267:
>>> 268:     def _init_default_roles(self) -> None:
    269:         """Initialize default roles and permissions."""
    270:         # Define default role hierarchy and permissions
    271:         role_configs = {


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\security\rbac_system.py:408:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    405:         with self._get_connection() as conn:
    406:             # Insert roles
    407:             for role, config in role_configs.items():
>>> 408:                 conn.execute(
    409:                     """
    410:                     INSERT OR IGNORE INTO roles (name, display_name, description, parent_role, is_system_role)
    411:                     VALUES (?, ?, ?, ?, 1)


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\security\rbac_system.py:424:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    421:             # Insert permissions
    422:             for permission in Permission:
    423:                 resource, action = permission.value.split(":")
>>> 424:                 conn.execute(
    425:                     """
    426:                     INSERT OR IGNORE INTO permissions (name, display_name, description, resource, action)
    427:                     VALUES (?, ?, ?, ?, ?)


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\security\rbac_system.py:441:20
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    438:             # Assign permissions to roles
    439:             for role, config in role_configs.items():
    440:                 for permission in config["permissions"]:
>>> 441:                     conn.execute(
    442:                         """
    443:                         INSERT OR IGNORE INTO role_permissions (role_name, permission_name, granted_by)
    444:                         VALUES (?, ?, 'SYSTEM_INIT')


GOD_METHOD: Method 'create_user' is too complex: 4 complexity, 56 lines, 1 max nesting
File: packages\core\legacy\security\rbac_system.py:449:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    446:                         (role.value, permission.value),
    447:                     )
    448:
>>> 449:     def create_user(
    450:         self,
    451:         user_id: str,
    452:         username: str,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\security\rbac_system.py:476:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    473:         with self._get_connection() as conn:
    474:             try:
    475:                 # Create user
>>> 476:                 conn.execute(
    477:                     """
    478:                     INSERT INTO users (
    479:                         user_id, username, email, password_hash, password_salt,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\security\rbac_system.py:527:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    524:         """
    525:         with self._get_connection() as conn:
    526:             try:
>>> 527:                 conn.execute(
    528:                     """
    529:                     INSERT OR REPLACE INTO user_roles (user_id, role_name, assigned_by, expires_at)
    530:                     VALUES (?, ?, ?, ?)


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\security\rbac_system.py:553:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    550:             True if role revoked successfully
    551:         """
    552:         with self._get_connection() as conn:
>>> 553:             conn.execute(
    554:                 """
    555:                 DELETE FROM user_roles WHERE user_id = ? AND role_name = ?
    556:             """,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\security\rbac_system.py:573:21
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    570:             List of active roles
    571:         """
    572:         with self._get_connection() as conn:
>>> 573:             cursor = conn.execute(
    574:                 """
    575:                 SELECT role_name FROM user_roles
    576:                 WHERE user_id = ?


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\security\rbac_system.py:599:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    596:
    597:         for role in user_roles:
    598:             role_permissions = self.get_role_permissions(role)
>>> 599:             all_permissions.update(role_permissions)
    600:
    601:             # Add inherited permissions from parent roles
    602:             parent_permissions = self._get_inherited_permissions(role)


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\security\rbac_system.py:603:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    600:
    601:             # Add inherited permissions from parent roles
    602:             parent_permissions = self._get_inherited_permissions(role)
>>> 603:             all_permissions.update(parent_permissions)
    604:
    605:         # Super admin gets all permissions
    606:         if Role.SUPER_ADMIN in user_roles:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\security\rbac_system.py:621:21
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    618:             Set of permissions
    619:         """
    620:         with self._get_connection() as conn:
>>> 621:             cursor = conn.execute(
    622:                 """
    623:                 SELECT permission_name FROM role_permissions
    624:                 WHERE role_name = ?


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\security\rbac_system.py:646:21
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    643:
    644:         with self._get_connection() as conn:
    645:             # Find parent role
>>> 646:             cursor = conn.execute(
    647:                 """
    648:                 SELECT parent_role FROM roles WHERE name = ?
    649:             """,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\security\rbac_system.py:659:20
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    656:                     parent_role = Role(row[0])
    657:                     # Get parent role's permissions
    658:                     parent_permissions = self.get_role_permissions(parent_role)
>>> 659:                     inherited_permissions.update(parent_permissions)
    660:
    661:                     # Recursively get grandparent permissions
    662:                     grandparent_permissions = self._get_inherited_permissions(parent_role)


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\security\rbac_system.py:663:20
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    660:
    661:                     # Recursively get grandparent permissions
    662:                     grandparent_permissions = self._get_inherited_permissions(parent_role)
>>> 663:                     inherited_permissions.update(grandparent_permissions)
    664:                 except ValueError:
    665:                     pass  # Invalid parent role
    666:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\security\rbac_system.py:727:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    724:             session_id: Session identifier
    725:         """
    726:         with self._get_connection() as conn:
>>> 727:             conn.execute(
    728:                 """
    729:                 INSERT INTO access_log (
    730:                     user_id, action, resource, permission_required,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\security\rbac_system.py:759:25
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    756:         """
    757:         with self._get_connection() as conn:
    758:             if user_id:
>>> 759:                 cursor = conn.execute(
    760:                     """
    761:                     SELECT * FROM access_log WHERE user_id = ?
    762:                     ORDER BY timestamp DESC LIMIT ?


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\security\rbac_system.py:767:25
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    764:                     (user_id, limit),
    765:                 )
    766:             else:
>>> 767:                 cursor = conn.execute(
    768:                     """
    769:                     SELECT * FROM access_log
    770:                     ORDER BY timestamp DESC LIMIT ?


GOD_METHOD: Method 'get_rbac_stats' is too complex: 1 complexity, 55 lines, 0 max nesting
File: packages\core\legacy\security\rbac_system.py:777:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    774:
    775:             return [dict(row) for row in cursor.fetchall()]
    776:
>>> 777:     def get_rbac_stats(self) -> dict[str, Any]:
    778:         """Get RBAC system statistics.
    779:
    780:         Returns:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\security\rbac_system.py:787:21
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    784:             stats = {}
    785:
    786:             # User statistics
>>> 787:             cursor = conn.execute("SELECT COUNT(*) FROM users")
    788:             stats["total_users"] = cursor.fetchone()[0]
    789:
    790:             cursor = conn.execute("SELECT COUNT(*) FROM users WHERE is_active = 1")


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\security\rbac_system.py:790:21
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    787:             cursor = conn.execute("SELECT COUNT(*) FROM users")
    788:             stats["total_users"] = cursor.fetchone()[0]
    789:
>>> 790:             cursor = conn.execute("SELECT COUNT(*) FROM users WHERE is_active = 1")
    791:             stats["active_users"] = cursor.fetchone()[0]
    792:
    793:             # Role statistics


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\security\rbac_system.py:794:21
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    791:             stats["active_users"] = cursor.fetchone()[0]
    792:
    793:             # Role statistics
>>> 794:             cursor = conn.execute("SELECT COUNT(*) FROM roles")
    795:             stats["total_roles"] = cursor.fetchone()[0]
    796:
    797:             cursor = conn.execute("SELECT COUNT(*) FROM permissions")


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\security\rbac_system.py:797:21
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    794:             cursor = conn.execute("SELECT COUNT(*) FROM roles")
    795:             stats["total_roles"] = cursor.fetchone()[0]
    796:
>>> 797:             cursor = conn.execute("SELECT COUNT(*) FROM permissions")
    798:             stats["total_permissions"] = cursor.fetchone()[0]
    799:
    800:             # Assignment statistics


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\security\rbac_system.py:801:21
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    798:             stats["total_permissions"] = cursor.fetchone()[0]
    799:
    800:             # Assignment statistics
>>> 801:             cursor = conn.execute("SELECT COUNT(*) FROM user_roles")
    802:             stats["role_assignments"] = cursor.fetchone()[0]
    803:
    804:             cursor = conn.execute("SELECT COUNT(*) FROM role_permissions")


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\security\rbac_system.py:804:21
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    801:             cursor = conn.execute("SELECT COUNT(*) FROM user_roles")
    802:             stats["role_assignments"] = cursor.fetchone()[0]
    803:
>>> 804:             cursor = conn.execute("SELECT COUNT(*) FROM role_permissions")
    805:             stats["permission_assignments"] = cursor.fetchone()[0]
    806:
    807:             # Access log statistics


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\security\rbac_system.py:808:21
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    805:             stats["permission_assignments"] = cursor.fetchone()[0]
    806:
    807:             # Access log statistics
>>> 808:             cursor = conn.execute("SELECT COUNT(*) FROM access_log")
    809:             stats["total_access_attempts"] = cursor.fetchone()[0]
    810:
    811:             cursor = conn.execute(


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\security\rbac_system.py:811:21
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    808:             cursor = conn.execute("SELECT COUNT(*) FROM access_log")
    809:             stats["total_access_attempts"] = cursor.fetchone()[0]
    810:
>>> 811:             cursor = conn.execute(
    812:                 """
    813:                 SELECT COUNT(*) FROM access_log
    814:                 WHERE access_granted = 0 AND timestamp > datetime('now', '-24 hours')


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\security\rbac_system.py:820:21
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    817:             stats["denied_access_24h"] = cursor.fetchone()[0]
    818:
    819:             # Most active users
>>> 820:             cursor = conn.execute(
    821:                 """
    822:                 SELECT user_id, COUNT(*) as access_count
    823:                 FROM access_log


GOD_METHOD: Method 'validate_json' is too complex: 22 complexity, 65 lines, 15 max nesting
File: packages\core\legacy\security\secure_api_server.py:185:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    182:     """Input validation and sanitization."""
    183:
    184:     @staticmethod
>>> 185:     def validate_json(data: Any, schema: dict[str, Any]) -> dict[str, Any]:
    186:         """Validate JSON data against schema."""
    187:         if not isinstance(data, dict):
    188:             msg = "Request body must be JSON object"


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\security\secure_api_server.py:626:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    623:         try:
    624:             # Execute a lightweight query to ensure the connection is healthy
    625:             with self.profile_db.get_connection() as conn:
>>> 626:                 conn.execute("SELECT 1")
    627:             db_health["latency_ms"] = (time.perf_counter() - start_time) * 1000
    628:         except Exception as exc:  # pragma: no cover - defensive, errors handled below
    629:             db_health["status"] = "degraded"


GOD_METHOD: Method '_generate_self_signed_cert' is too complex: 1 complexity, 57 lines, 0 max nesting
File: packages\core\legacy\security\secure_api_server.py:828:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    825:
    826:         return context
    827:
>>> 828:     def _generate_self_signed_cert(self) -> None:
    829:         """Generate self-signed certificate for development."""
    830:         # Create certificates directory
    831:         cert_dir = Path(self.cert_file).parent


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'create_access_token'
File: packages\core\legacy\security\secure_api_server.py:110:4
Recommendation: Extract common code into a shared function or utility
Code context:
    107:             msg = "API_SECRET_KEY must be at least 32 characters long"
    108:             raise SecurityError(msg)
    109:
>>> 110:     def create_access_token(
    111:         self,
    112:         user_id: str,
    113:         roles: list[str] | None = None,


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'create_refresh_token'
File: packages\core\legacy\security\secure_api_server.py:130:4
Recommendation: Extract common code into a shared function or utility
Code context:
    127:
    128:         return jwt.encode(payload, self.secret_key, algorithm=self.algorithm)
    129:
>>> 130:     def create_refresh_token(self, user_id: str) -> str:
    131:         """Create JWT refresh token."""
    132:         now = datetime.utcnow()
    133:         payload = {


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'hash_password'
File: packages\core\legacy\security\secure_api_server.py:161:4
Recommendation: Extract common code into a shared function or utility
Code context:
    158:             msg = f"Invalid token: {e}"
    159:             raise AuthenticationError(msg)
    160:
>>> 161:     def hash_password(self, password: str) -> tuple[str, str]:
    162:         """Hash password with salt using PBKDF2."""
    163:         salt = os.urandom(32)
    164:         password_hash = hashlib.pbkdf2_hmac("sha256", password.encode("utf-8"), salt, 100000)


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\security\secure_digital_twin_db.py:57:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     54:         try:
     55:             # Configure SQLite for security and performance
     56:             if self.enable_wal:
>>>  57:                 conn.execute("PRAGMA journal_mode=WAL")
     58:
     59:             conn.execute("PRAGMA synchronous=NORMAL")
     60:             conn.execute("PRAGMA cache_size=10000")


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\security\secure_digital_twin_db.py:59:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     56:             if self.enable_wal:
     57:                 conn.execute("PRAGMA journal_mode=WAL")
     58:
>>>  59:             conn.execute("PRAGMA synchronous=NORMAL")
     60:             conn.execute("PRAGMA cache_size=10000")
     61:             conn.execute("PRAGMA temp_store=MEMORY")
     62:             conn.execute("PRAGMA mmap_size=268435456")  # 256MB


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\security\secure_digital_twin_db.py:60:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     57:                 conn.execute("PRAGMA journal_mode=WAL")
     58:
     59:             conn.execute("PRAGMA synchronous=NORMAL")
>>>  60:             conn.execute("PRAGMA cache_size=10000")
     61:             conn.execute("PRAGMA temp_store=MEMORY")
     62:             conn.execute("PRAGMA mmap_size=268435456")  # 256MB
     63:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\security\secure_digital_twin_db.py:61:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     58:
     59:             conn.execute("PRAGMA synchronous=NORMAL")
     60:             conn.execute("PRAGMA cache_size=10000")
>>>  61:             conn.execute("PRAGMA temp_store=MEMORY")
     62:             conn.execute("PRAGMA mmap_size=268435456")  # 256MB
     63:
     64:             # Enable foreign key constraints


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\security\secure_digital_twin_db.py:62:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     59:             conn.execute("PRAGMA synchronous=NORMAL")
     60:             conn.execute("PRAGMA cache_size=10000")
     61:             conn.execute("PRAGMA temp_store=MEMORY")
>>>  62:             conn.execute("PRAGMA mmap_size=268435456")  # 256MB
     63:
     64:             # Enable foreign key constraints
     65:             conn.execute("PRAGMA foreign_keys=ON")


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\security\secure_digital_twin_db.py:65:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     62:             conn.execute("PRAGMA mmap_size=268435456")  # 256MB
     63:
     64:             # Enable foreign key constraints
>>>  65:             conn.execute("PRAGMA foreign_keys=ON")
     66:
     67:             conn.row_factory = sqlite3.Row
     68:             yield conn


GOD_METHOD: Method 'init_database' is too complex: 2 complexity, 181 lines, 1 max nesting
File: packages\core\legacy\security\secure_digital_twin_db.py:73:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     70:         finally:
     71:             conn.close()
     72:
>>>  73:     def init_database(self) -> None:
     74:         """Initialize database schema with encryption and compliance features."""
     75:         with self.get_connection() as conn:
     76:             # Learning profiles with encrypted sensitive data


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\security\secure_digital_twin_db.py:77:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     74:         """Initialize database schema with encryption and compliance features."""
     75:         with self.get_connection() as conn:
     76:             # Learning profiles with encrypted sensitive data
>>>  77:             conn.execute(
     78:                 """
     79:                 CREATE TABLE IF NOT EXISTS learning_profiles (
     80:                     id INTEGER PRIMARY KEY AUTOINCREMENT,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\security\secure_digital_twin_db.py:111:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    108:             )
    109:
    110:             # Learning sessions with privacy protection
>>> 111:             conn.execute(
    112:                 """
    113:                 CREATE TABLE IF NOT EXISTS learning_sessions (
    114:                     id INTEGER PRIMARY KEY AUTOINCREMENT,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\security\secure_digital_twin_db.py:148:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    145:             )
    146:
    147:             # Knowledge states with domain protection
>>> 148:             conn.execute(
    149:                 """
    150:                 CREATE TABLE IF NOT EXISTS knowledge_states (
    151:                     id INTEGER PRIMARY KEY AUTOINCREMENT,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\security\secure_digital_twin_db.py:177:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    174:             )
    175:
    176:             # Compliance audit log
>>> 177:             conn.execute(
    178:                 """
    179:                 CREATE TABLE IF NOT EXISTS compliance_audit_log (
    180:                     id INTEGER PRIMARY KEY AUTOINCREMENT,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\security\secure_digital_twin_db.py:209:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    206:             )
    207:
    208:             # Data retention tracking
>>> 209:             conn.execute(
    210:                 """
    211:                 CREATE TABLE IF NOT EXISTS data_retention_tracking (
    212:                     id INTEGER PRIMARY KEY AUTOINCREMENT,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\security\secure_digital_twin_db.py:251:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    248:             ]
    249:
    250:             for index_sql in indexes:
>>> 251:                 conn.execute(index_sql)
    252:
    253:             conn.execute("COMMIT")
    254:             logger.info("Database schema initialized successfully")


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\security\secure_digital_twin_db.py:253:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    250:             for index_sql in indexes:
    251:                 conn.execute(index_sql)
    252:
>>> 253:             conn.execute("COMMIT")
    254:             logger.info("Database schema initialized successfully")
    255:
    256:     def create_learning_profile(self, profile_data: dict[str, Any]) -> str:


GOD_METHOD: Method 'create_learning_profile' is too complex: 4 complexity, 100 lines, 2 max nesting
File: packages\core\legacy\security\secure_digital_twin_db.py:256:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    253:             conn.execute("COMMIT")
    254:             logger.info("Database schema initialized successfully")
    255:
>>> 256:     def create_learning_profile(self, profile_data: dict[str, Any]) -> str:
    257:         """Create new learning profile with encryption.
    258:
    259:         Args:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\security\secure_digital_twin_db.py:301:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    298:                     )
    299:
    300:             # Insert profile
>>> 301:             conn.execute(
    302:                 """
    303:                 INSERT INTO learning_profiles (
    304:                     profile_id, user_id_hash, preferred_difficulty,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\security\secure_digital_twin_db.py:324:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    321:             )
    322:
    323:             # Create retention tracking record
>>> 324:             conn.execute(
    325:                 """
    326:                 INSERT INTO data_retention_tracking (
    327:                     profile_id, created_at, scheduled_deletion_at, retention_policy


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\security\secure_digital_twin_db.py:354:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    351:                 ),
    352:             )
    353:
>>> 354:             conn.execute("COMMIT")
    355:             logger.info(f"Created encrypted learning profile: {profile_id}")
    356:             return profile_id
    357:


GOD_METHOD: Method 'get_learning_profile' is too complex: 7 complexity, 74 lines, 5 max nesting
File: packages\core\legacy\security\secure_digital_twin_db.py:358:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    355:             logger.info(f"Created encrypted learning profile: {profile_id}")
    356:             return profile_id
    357:
>>> 358:     def get_learning_profile(self, profile_id: str, decrypt: bool = True) -> dict[str, Any] | None:
    359:         """Retrieve learning profile with optional decryption.
    360:
    361:         Args:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\security\secure_digital_twin_db.py:369:21
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    366:             Profile data or None if not found
    367:         """
    368:         with self.get_connection() as conn:
>>> 369:             cursor = conn.execute(
    370:                 """
    371:                 SELECT * FROM learning_profiles WHERE profile_id = ?
    372:             """,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\security\secure_digital_twin_db.py:383:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    380:             profile = dict(row)
    381:
    382:             # Update access tracking
>>> 383:             conn.execute(
    384:                 """
    385:                 UPDATE learning_profiles
    386:                 SET last_accessed = CURRENT_TIMESTAMP, access_count = access_count + 1


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\security\secure_digital_twin_db.py:431:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    428:                 compliance_type="GENERAL",
    429:             )
    430:
>>> 431:             conn.execute("COMMIT")
    432:             return profile
    433:
    434:     def update_learning_profile(self, profile_id: str, updates: dict[str, Any]) -> bool:


GOD_METHOD: Method 'update_learning_profile' is too complex: 7 complexity, 75 lines, 6 max nesting
File: packages\core\legacy\security\secure_digital_twin_db.py:434:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    431:             conn.execute("COMMIT")
    432:             return profile
    433:
>>> 434:     def update_learning_profile(self, profile_id: str, updates: dict[str, Any]) -> bool:
    435:         """Update learning profile with encryption.
    436:
    437:         Args:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\security\secure_digital_twin_db.py:483:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    480:             values.append(profile_id)
    481:
    482:             # Execute update
>>> 483:             conn.execute(
    484:                 f"""
    485:                 UPDATE learning_profiles
    486:                 SET {", ".join(set_clauses)}


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\security\secure_digital_twin_db.py:507:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    504:                 ),
    505:             )
    506:
>>> 507:             conn.execute("COMMIT")
    508:             logger.info(f"Updated encrypted learning profile: {profile_id}")
    509:             return True
    510:


GOD_METHOD: Method 'delete_learning_profile' is too complex: 2 complexity, 53 lines, 1 max nesting
File: packages\core\legacy\security\secure_digital_twin_db.py:511:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    508:             logger.info(f"Updated encrypted learning profile: {profile_id}")
    509:             return True
    510:
>>> 511:     def delete_learning_profile(self, profile_id: str, reason: str = "user_request") -> bool:
    512:         """Delete learning profile with GDPR compliance.
    513:
    514:         Args:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\security\secure_digital_twin_db.py:523:21
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    520:         """
    521:         with self.get_connection() as conn:
    522:             # Get profile for audit logging
>>> 523:             cursor = conn.execute(
    524:                 """
    525:                 SELECT user_id_hash FROM learning_profiles WHERE profile_id = ?
    526:             """,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\security\secure_digital_twin_db.py:536:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    533:             user_id_hash = row[0]
    534:
    535:             # Delete profile (cascades to sessions and knowledge states)
>>> 536:             conn.execute("DELETE FROM learning_profiles WHERE profile_id = ?", (profile_id,))
    537:
    538:             # Update retention tracking
    539:             conn.execute(


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\security\secure_digital_twin_db.py:539:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    536:             conn.execute("DELETE FROM learning_profiles WHERE profile_id = ?", (profile_id,))
    537:
    538:             # Update retention tracking
>>> 539:             conn.execute(
    540:                 """
    541:                 DELETE FROM data_retention_tracking WHERE profile_id = ?
    542:             """,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\security\secure_digital_twin_db.py:562:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    559:                 ),
    560:             )
    561:
>>> 562:             conn.execute("COMMIT")
    563:             logger.info(f"Deleted learning profile with GDPR compliance: {profile_id}")
    564:             return True
    565:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\security\secure_digital_twin_db.py:627:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    624:             compliance_type: Type of compliance
    625:             additional_data: Extra context as JSON
    626:         """
>>> 627:         conn.execute(
    628:             """
    629:             INSERT INTO compliance_audit_log (
    630:                 action, profile_id, user_id_hash, field_name,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\security\secure_digital_twin_db.py:653:21
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    650:             List of expired profiles requiring deletion
    651:         """
    652:         with self.get_connection() as conn:
>>> 653:             cursor = conn.execute(
    654:                 """
    655:                 SELECT profile_id, user_id_hash, ttl_expires_at, compliance_flags
    656:                 FROM learning_profiles


GOD_METHOD: Method 'export_user_data' is too complex: 5 complexity, 80 lines, 4 max nesting
File: packages\core\legacy\security\secure_digital_twin_db.py:693:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    690:         logger.info(f"Cleaned up {deleted_count} expired profiles")
    691:         return deleted_count
    692:
>>> 693:     def export_user_data(self, user_id_hash: str) -> dict[str, Any]:
    694:         """Export all user data for GDPR compliance.
    695:
    696:         Args:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\security\secure_digital_twin_db.py:704:21
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    701:         """
    702:         with self.get_connection() as conn:
    703:             # Get all profiles for user
>>> 704:             cursor = conn.execute(
    705:                 """
    706:                 SELECT * FROM learning_profiles WHERE user_id_hash = ?
    707:             """,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\security\secure_digital_twin_db.py:720:33
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    717:             # Get all sessions
    718:             sessions = []
    719:             for profile in profiles:
>>> 720:                 session_cursor = conn.execute(
    721:                     """
    722:                     SELECT * FROM learning_sessions WHERE profile_id = ?
    723:                 """,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\security\secure_digital_twin_db.py:731:27
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    728:                     sessions.append(dict(session_row))
    729:
    730:             # Get audit log
>>> 731:             audit_cursor = conn.execute(
    732:                 """
    733:                 SELECT * FROM compliance_audit_log
    734:                 WHERE user_id_hash = ?


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\security\secure_digital_twin_db.py:772:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    769:                 ),
    770:             )
    771:
>>> 772:             conn.execute("COMMIT")
    773:             return export_data
    774:
    775:     def get_compliance_stats(self) -> dict[str, Any]:


GOD_METHOD: Method 'get_compliance_stats' is too complex: 1 complexity, 57 lines, 0 max nesting
File: packages\core\legacy\security\secure_digital_twin_db.py:775:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    772:             conn.execute("COMMIT")
    773:             return export_data
    774:
>>> 775:     def get_compliance_stats(self) -> dict[str, Any]:
    776:         """Get compliance and security statistics.
    777:
    778:         Returns:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\security\secure_digital_twin_db.py:785:21
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    782:             stats = {}
    783:
    784:             # Profile statistics
>>> 785:             cursor = conn.execute(
    786:                 """
    787:                 SELECT
    788:                     COUNT(*) as total_profiles,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\security\secure_digital_twin_db.py:799:21
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    796:             stats["profiles"] = profile_stats
    797:
    798:             # Compliance audit statistics
>>> 799:             cursor = conn.execute(
    800:                 """
    801:                 SELECT
    802:                     compliance_type,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\security\secure_digital_twin_db.py:824:21
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    821:             }
    822:
    823:             # Database health
>>> 824:             cursor = conn.execute("PRAGMA integrity_check")
    825:             integrity_result = cursor.fetchone()[0]
    826:             stats["database_health"] = {
    827:                 "integrity_check": integrity_result,


GOD_METHOD: Method '__init__' is too complex: 2 complexity, 160 lines, 0 max nesting
File: packages\core\legacy\security\secure_file_upload.py:34:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     31: class SecureFileUploadValidator:
     32:     """Secure file upload validation and processing."""
     33:
>>>  34:     def __init__(self, config: dict[str, Any] | None = None) -> None:
     35:         """Initialize file upload validator.
     36:
     37:         Args:


GOD_METHOD: Method 'validate_file' is too complex: 9 complexity, 85 lines, 5 max nesting
File: packages\core\legacy\security\secure_file_upload.py:213:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    210:
    211:         return None
    212:
>>> 213:     def validate_file(
    214:         self, file_path: str, filename: str | None = None, content: bytes | None = None
    215:     ) -> dict[str, Any]:
    216:         """Validate uploaded file for security issues.


GOD_METHOD: Method '_validate_filename' is too complex: 7 complexity, 46 lines, 5 max nesting
File: packages\core\legacy\security\secure_file_upload.py:312:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    309:
    310:         result["metadata"]["file_size"] = file_size
    311:
>>> 312:     def _validate_filename(self, filename: str, result: dict[str, Any]) -> None:
    313:         """Validate filename for security issues."""
    314:         # Check for path traversal attempts
    315:         if ".." in filename or "/" in filename or "\\" in filename:


GOD_METHOD: Method '_analyze_file_content' is too complex: 10 complexity, 27 lines, 8 max nesting
File: packages\core\legacy\security\secure_file_upload.py:415:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    412:                 f"File signature mismatch: signature '{detected_signature}', " f"MIME type '{detected_mime}'"
    413:             )
    414:
>>> 415:     def _analyze_file_content(self, content: bytes, filename: str, result: dict[str, Any]) -> None:
    416:         """Analyze file content for dangerous patterns."""
    417:         # Check for dangerous patterns
    418:         for pattern in self.dangerous_patterns:


GOD_METHOD: Method '_validate_zip_archive' is too complex: 9 complexity, 33 lines, 6 max nesting
File: packages\core\legacy\security\secure_file_upload.py:484:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    481:         except Exception as e:
    482:             result["warnings"].append(f"Archive validation failed: {e}")
    483:
>>> 484:     def _validate_zip_archive(self, zip_file: zipfile.ZipFile, result: dict[str, Any]) -> None:
    485:         """Validate ZIP archive contents."""
    486:         file_count = 0
    487:         total_uncompressed_size = 0


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_validate_file_size'
File: packages\core\legacy\security\secure_file_upload.py:300:4
Recommendation: Extract common code into a shared function or utility
Code context:
    297:             msg = f"File validation failed: {e}"
    298:             raise FileUploadError(msg)
    299:
>>> 300:     def _validate_file_size(self, content: bytes, result: dict[str, Any]) -> None:
    301:         """Validate file size limits."""
    302:         file_size = len(content)
    303:


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_validate_file_extension'
File: packages\core\legacy\security\secure_file_upload.py:360:4
Recommendation: Extract common code into a shared function or utility
Code context:
    357:         if basename in reserved_names:
    358:             result["errors"].append(f"Filename uses reserved name: {basename}")
    359:
>>> 360:     def _validate_file_extension(self, filename: str, result: dict[str, Any]) -> None:
    361:         """Validate file extension."""
    362:         # Get file extension
    363:         extension = filename.lower().split(".")[-1] if "." in filename else ""


GOD_METHOD: Method 'create_secure_redis_client' is too complex: 23 complexity, 121 lines, 13 max nesting
File: packages\core\legacy\security\secure_redis_client.py:27:0
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     24:     """Raised when Redis security validation fails."""
     25:
     26:
>>>  27: def create_secure_redis_client(
     28:     redis_url: str,
     29:     ssl_required: bool | None = None,
     30:     ssl_cert_reqs: str = "required",


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\security\secure_redis_client.py:121:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    118:         if ssl_certfile and ssl_keyfile:
    119:             ssl_context.load_cert_chain(ssl_certfile, ssl_keyfile)
    120:
>>> 121:         connection_params.update(
    122:             {
    123:                 "ssl": True,
    124:                 "ssl_context": ssl_context,


GOD_METHOD: Method 'validate_redis_url_security' is too complex: 6 complexity, 31 lines, 5 max nesting
File: packages\core\legacy\security\secure_redis_client.py:151:0
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    148:         return None
    149:
    150:
>>> 151: def validate_redis_url_security(redis_url: str) -> None:
    152:     """Validate Redis URL for production security requirements.
    153:
    154:     Args:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\legacy\security\secure_redis_client.py:217:4
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    214:
    215:     # Get production configuration
    216:     config = get_production_redis_config()
>>> 217:     config.update(kwargs)
    218:
    219:     # Validate URL security
    220:     validate_redis_url_security(redis_url)


GOD_METHOD: Method '_validate_data_security' is too complex: 6 complexity, 18 lines, 5 max nesting
File: packages\core\legacy\security\secure_serializer.py:147:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    144:             if field not in obj or not isinstance(obj[field], expected_type):
    145:                 raise SerializationError(f"Field '{field}' missing or not of type {expected_type.__name__}")
    146:
>>> 147:     def _validate_data_security(self, data: Any) -> None:
    148:         """Validate data for security concerns."""
    149:         if isinstance(data, str | bytes):
    150:             if len(data) > self.max_size_bytes:


GOD_METHOD: Method '_prepare_data' is too complex: 11 complexity, 57 lines, 10 max nesting
File: packages\core\legacy\security\secure_serializer.py:167:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    164:                 if pattern in data.lower():
    165:                     logger.warning(f"Suspicious pattern detected in data: {pattern}")
    166:
>>> 167:     def _prepare_data(self, obj: Any) -> dict[str, Any]:
    168:         """Convert object to serializable dictionary with type metadata."""
    169:
    170:         def convert_item(item):


GOD_METHOD: Method 'convert_item' is too complex: 11 complexity, 52 lines, 10 max nesting
File: packages\core\legacy\security\secure_serializer.py:170:8
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    167:     def _prepare_data(self, obj: Any) -> dict[str, Any]:
    168:         """Convert object to serializable dictionary with type metadata."""
    169:
>>> 170:         def convert_item(item):
    171:             if item is None:
    172:                 return {"__type__": "NoneType", "__value__": None}
    173:             elif isinstance(item, str | int | float | bool):


GOD_METHOD: Method '_restore_data' is too complex: 16 complexity, 48 lines, 14 max nesting
File: packages\core\legacy\security\secure_serializer.py:226:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    223:
    224:         return convert_item(obj)
    225:
>>> 226:     def _restore_data(self, data: dict[str, Any]) -> Any:
    227:         """Restore object from serializable dictionary with type metadata."""
    228:         if not isinstance(data, dict) or "__type__" not in data:
    229:             return data


GOD_METHOD: Method 'dumps' is too complex: 5 complexity, 58 lines, 3 max nesting
File: packages\core\legacy\security\secure_serializer.py:276:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    273:             logger.error(f"Unknown type: {obj_type}")
    274:             raise ValueError(f"Unknown type: {obj_type}")
    275:
>>> 276:     def dumps(
    277:         self,
    278:         obj: Any,
    279:         serialization_type: SerializationType = SerializationType.JSON,


GOD_METHOD: Method 'loads' is too complex: 9 complexity, 52 lines, 5 max nesting
File: packages\core\legacy\security\secure_serializer.py:336:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    333:         except Exception as e:
    334:             raise SerializationError(f"Serialization failed: {e}") from e
    335:
>>> 336:     def loads(self, data: bytes, schema: dict[str, type] | None = None) -> Any:
    337:         """
    338:         Deserialize object from secure byte format.
    339:


GOD_METHOD: Method 'validate' is too complex: 17 complexity, 90 lines, 12 max nesting
File: packages\core\legacy\security\security_gates.py:95:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     92:     def __init__(self, security_level: SecurityLevel = SecurityLevel.PRODUCTION):
     93:         super().__init__("HTTPS Enforcement", security_level)
     94:
>>>  95:     def validate(self, context: dict[str, Any]) -> GateReport:
     96:         start_time = time.time()
     97:         issues = []
     98:


GOD_METHOD: Method 'validate' is too complex: 8 complexity, 70 lines, 6 max nesting
File: packages\core\legacy\security\security_gates.py:194:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    191:     def __init__(self, security_level: SecurityLevel = SecurityLevel.PRODUCTION):
    192:         super().__init__("Pickle Security", security_level)
    193:
>>> 194:     def validate(self, context: dict[str, Any]) -> GateReport:
    195:         start_time = time.time()
    196:         issues = []
    197:


GOD_METHOD: Method 'validate' is too complex: 9 complexity, 88 lines, 6 max nesting
File: packages\core\legacy\security\security_gates.py:273:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    270:     def __init__(self, security_level: SecurityLevel = SecurityLevel.PRODUCTION):
    271:         super().__init__("Dependency Security", security_level)
    272:
>>> 273:     def validate(self, context: dict[str, Any]) -> GateReport:
    274:         start_time = time.time()
    275:         issues = []
    276:


GOD_METHOD: Method 'validate' is too complex: 10 complexity, 74 lines, 7 max nesting
File: packages\core\legacy\security\security_gates.py:380:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    377:             (r"[A-Za-z0-9]{20,}", "Generic secret-like string"),
    378:         ]
    379:
>>> 380:     def validate(self, context: dict[str, Any]) -> GateReport:
    381:         start_time = time.time()
    382:         issues = []
    383:


GOD_METHOD: Method 'run_all_gates' is too complex: 8 complexity, 53 lines, 7 max nesting
File: packages\core\legacy\security\security_gates.py:475:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    472:         """Register a security gate."""
    473:         self.gates.append(gate)
    474:
>>> 475:     def run_all_gates(self, context: dict[str, Any] = None) -> dict[str, Any]:
    476:         """Run all registered security gates."""
    477:         if context is None:
    478:             context = {"project_root": Path.cwd()}


GOD_METHOD: Method 'get_security_summary' is too complex: 6 complexity, 26 lines, 5 max nesting
File: packages\core\legacy\security\security_gates.py:530:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    527:             "security_level": self.security_level.value,
    528:         }
    529:
>>> 530:     def get_security_summary(self) -> dict[str, Any]:
    531:         """Get comprehensive security summary."""
    532:         all_issues = []
    533:         for report in self.reports:


GOD_METHOD: Method 'measure_current_coverage' is too complex: 7 complexity, 63 lines, 2 max nesting
File: packages\core\legacy\testing\coverage_harness.py:85:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     82:             "src/token_economy",
     83:         ]
     84:
>>>  85:     def measure_current_coverage(self) -> dict[str, CoverageMetrics]:
     86:         """Measure current test coverage across the project."""
     87:         print("Measuring current test coverage...")
     88:


GOD_METHOD: Method '_enhance_coverage_metrics' is too complex: 7 complexity, 75 lines, 5 max nesting
File: packages\core\legacy\testing\coverage_harness.py:172:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    169:             except (subprocess.TimeoutExpired, FileNotFoundError):
    170:                 continue
    171:
>>> 172:     def _enhance_coverage_metrics(self, file_path: Path, metrics: CoverageMetrics):
    173:         """Enhance coverage metrics with component-specific analysis."""
    174:         try:
    175:             with open(file_path, encoding="utf-8") as f:


GOD_METHOD: Method 'execute_coverage_campaign' is too complex: 3 complexity, 81 lines, 2 max nesting
File: packages\core\legacy\testing\coverage_harness.py:340:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    337:         self.target_coverage = target_coverage
    338:         self.analyzer = CoverageAnalyzer(project_root)
    339:
>>> 340:     def execute_coverage_campaign(self) -> dict[str, Any]:
    341:         """Execute comprehensive coverage improvement campaign."""
    342:         print(f"\n=== Coverage Harness Campaign - Target: {self.target_coverage}% ===")
    343:


GOD_METHOD: Method '_generate_test_file_content' is too complex: 1 complexity, 55 lines, 0 max nesting
File: packages\core\legacy\testing\coverage_harness.py:505:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    502:             "coverage_boost": coverage_boost,
    503:         }
    504:
>>> 505:     def _generate_test_file_content(self, gap: CoverageTarget) -> str:
    506:         """Generate basic test file content for a coverage gap."""
    507:         module_name = gap.component.split(".")[-1]
    508:


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_generate_mock_coverage_data'
File: packages\core\legacy\testing\coverage_harness.py:249:4
Recommendation: Extract common code into a shared function or utility
Code context:
    246:         except Exception as e:
    247:             logger.warning(f"Error enhancing metrics for {file_path}: {e}")
    248:
>>> 249:     def _generate_mock_coverage_data(self) -> dict[str, CoverageMetrics]:
    250:         """Generate mock coverage data for demonstration when real coverage fails."""
    251:         mock_data = {}
    252:


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_implement_coverage_improvements'
File: packages\core\legacy\testing\coverage_harness.py:471:4
Recommendation: Extract common code into a shared function or utility
Code context:
    468:             "templates_used": list(test_templates.keys()),
    469:         }
    470:
>>> 471:     def _implement_coverage_improvements(self, priority_gaps: list[CoverageTarget]) -> dict[str, Any]:
    472:         """Implement actual coverage improvements for priority gaps."""
    473:         improvements_count = 0
    474:         coverage_boost = 0.0


GOD_METHOD: Method '_generate_mobile_transport_candidates' is too complex: 4 complexity, 58 lines, 3 max nesting
File: packages\core\legacy\transport\navigator_mobile_integration.py:298:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    295:
    296:         return constraints
    297:
>>> 298:     def _generate_mobile_transport_candidates(
    299:         self, target: str, message_size: int, constraints: TransportConstraints
    300:     ) -> list[TransportCandidate]:
    301:         """Generate mobile-optimized transport candidates."""


GOD_METHOD: Method '_apply_constraint_filtering' is too complex: 9 complexity, 30 lines, 8 max nesting
File: packages\core\legacy\transport\navigator_mobile_integration.py:358:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    355:
    356:         return candidates
    357:
>>> 358:     def _apply_constraint_filtering(
    359:         self, transports: list[TransportCandidate], constraints: TransportConstraints
    360:     ) -> list[TransportCandidate]:
    361:         """Filter transports based on active constraints."""


GOD_METHOD: Method '_score_transports_for_constraints' is too complex: 6 complexity, 37 lines, 5 max nesting
File: packages\core\legacy\transport\navigator_mobile_integration.py:390:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    387:
    388:         return filtered
    389:
>>> 390:     def _score_transports_for_constraints(
    391:         self,
    392:         transports: list[TransportCandidate],
    393:         constraints: TransportConstraints,


GOD_METHOD: Method '_generate_decision_reason' is too complex: 6 complexity, 23 lines, 5 max nesting
File: packages\core\legacy\transport\navigator_mobile_integration.py:491:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    488:
    489:         return min(5.0, estimated_drain)  # Cap at 5% drain per message
    490:
>>> 491:     def _generate_decision_reason(
    492:         self, constraints: TransportConstraints, selected_transport: TransportCandidate
    493:     ) -> str:
    494:         """Generate human-readable decision reason."""


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_calculate_power_efficiency'
File: packages\core\legacy\transport\navigator_mobile_integration.py:442:4
Recommendation: Extract common code into a shared function or utility
Code context:
    439:             metadata={"fallback": True, "reason": "no_suitable_transports"},
    440:         )
    441:
>>> 442:     def _calculate_power_efficiency(self, transport: TransportCandidate, message_size: int) -> float:
    443:         """Calculate power efficiency score for transport."""
    444:         transport_type = transport.transport_type
    445:         if transport_type in self.transport_efficiency:


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_estimate_data_usage'
File: packages\core\legacy\transport\navigator_mobile_integration.py:455:4
Recommendation: Extract common code into a shared function or utility
Code context:
    452:
    453:         return 0.5  # Default efficiency
    454:
>>> 455:     def _estimate_data_usage(self, transport: TransportCandidate, message_size: int) -> float:
    456:         """Estimate data usage in MB."""
    457:         transport_type = transport.transport_type
    458:         if transport_type in self.transport_efficiency:


GOD_METHOD: Method '_init_database' is too complex: 1 complexity, 60 lines, 0 max nesting
File: packages\core\tools\bitchat\kpi_tracker.py:91:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     88:         self.conn.row_factory = sqlite3.Row
     89:         self._init_database()
     90:
>>>  91:     def _init_database(self):
     92:         """Initialize database schema"""
     93:         cursor = self.conn.cursor()
     94:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\tools\bitchat\kpi_tracker.py:96:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     93:         cursor = self.conn.cursor()
     94:
     95:         # Message metrics table
>>>  96:         cursor.execute(
     97:             """
     98:             CREATE TABLE IF NOT EXISTS message_metrics (
     99:                 message_id TEXT PRIMARY KEY,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\tools\bitchat\kpi_tracker.py:115:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    112:         )
    113:
    114:         # Peer metrics table
>>> 115:         cursor.execute(
    116:             """
    117:             CREATE TABLE IF NOT EXISTS peer_metrics (
    118:                 peer_id TEXT PRIMARY KEY,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\tools\bitchat\kpi_tracker.py:133:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    130:         )
    131:
    132:         # Network snapshots table
>>> 133:         cursor.execute(
    134:             """
    135:             CREATE TABLE IF NOT EXISTS network_snapshots (
    136:                 id INTEGER PRIMARY KEY AUTOINCREMENT,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\tools\bitchat\kpi_tracker.py:151:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    148:         """
    149:         )
    150:
>>> 151:         self.conn.commit()
    152:
    153:     def record_message(self, metrics: MessageMetrics):
    154:         """Record message transmission metrics"""


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\tools\bitchat\kpi_tracker.py:156:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    153:     def record_message(self, metrics: MessageMetrics):
    154:         """Record message transmission metrics"""
    155:         cursor = self.conn.cursor()
>>> 156:         cursor.execute(
    157:             """
    158:             INSERT OR REPLACE INTO message_metrics
    159:             VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\tools\bitchat\kpi_tracker.py:175:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    172:                 metrics.transport_type,
    173:             ),
    174:         )
>>> 175:         self.conn.commit()
    176:
    177:     def update_peer(self, peer: PeerMetrics):
    178:         """Update peer connectivity metrics"""


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\tools\bitchat\kpi_tracker.py:180:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    177:     def update_peer(self, peer: PeerMetrics):
    178:         """Update peer connectivity metrics"""
    179:         cursor = self.conn.cursor()
>>> 180:         cursor.execute(
    181:             """
    182:             INSERT OR REPLACE INTO peer_metrics
    183:             VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\tools\bitchat\kpi_tracker.py:198:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    195:                 1 if peer.is_active else 0,
    196:             ),
    197:         )
>>> 198:         self.conn.commit()
    199:
    200:     def calculate_delivery_rate(self, window_minutes: int = 5) -> float:
    201:         """Calculate message delivery success rate"""


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\tools\bitchat\kpi_tracker.py:205:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    202:         cursor = self.conn.cursor()
    203:         cutoff = time.time() - (window_minutes * 60)
    204:
>>> 205:         cursor.execute(
    206:             """
    207:             SELECT COUNT(*) as total,
    208:                    SUM(CASE WHEN status = 'delivered' THEN 1 ELSE 0 END) as delivered


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\tools\bitchat\kpi_tracker.py:225:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    222:         cursor = self.conn.cursor()
    223:         cutoff = time.time() - (window_minutes * 60)
    224:
>>> 225:         cursor.execute(
    226:             """
    227:             SELECT AVG(latency_ms) as avg_latency
    228:             FROM message_metrics


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\tools\bitchat\kpi_tracker.py:242:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    239:         cursor = self.conn.cursor()
    240:         cutoff = time.time() - timeout_seconds
    241:
>>> 242:         cursor.execute(
    243:             """
    244:             SELECT COUNT(*) as active_count
    245:             FROM peer_metrics


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\tools\bitchat\kpi_tracker.py:262:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    259:
    260:         # Estimate based on average connections per peer
    261:         cursor = self.conn.cursor()
>>> 262:         cursor.execute(
    263:             """
    264:             SELECT AVG(messages_sent + messages_received) as avg_messages
    265:             FROM peer_metrics


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\tools\bitchat\kpi_tracker.py:295:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    292:
    293:         # Store snapshot
    294:         cursor = self.conn.cursor()
>>> 295:         cursor.execute(
    296:             """
    297:             INSERT INTO network_snapshots
    298:             VALUES (NULL, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\tools\bitchat\kpi_tracker.py:313:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    310:                 snapshot.battery_impact,
    311:             ),
    312:         )
>>> 313:         self.conn.commit()
    314:
    315:         return snapshot
    316:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\tools\bitchat\kpi_tracker.py:320:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    317:     def _get_total_peer_count(self) -> int:
    318:         """Get total number of known peers"""
    319:         cursor = self.conn.cursor()
>>> 320:         cursor.execute("SELECT COUNT(*) as total FROM peer_metrics")
    321:         row = cursor.fetchone()
    322:         return row["total"] if row else 0
    323:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\tools\bitchat\kpi_tracker.py:329:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    326:         cursor = self.conn.cursor()
    327:         cutoff = time.time() - 60
    328:
>>> 329:         cursor.execute(
    330:             """
    331:             SELECT COUNT(*) as count
    332:             FROM message_metrics


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\tools\bitchat\kpi_tracker.py:346:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    343:         cursor = self.conn.cursor()
    344:         cutoff = time.time() - 300  # 5 minutes
    345:
>>> 346:         cursor.execute(
    347:             """
    348:             SELECT COUNT(*) as total,
    349:                    SUM(CASE WHEN status IN ('stored', 'forwarded') THEN 1 ELSE 0 END) as sf_count


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\tools\bitchat\kpi_tracker.py:366:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    363:         cursor = self.conn.cursor()
    364:         cutoff = time.time() - 300
    365:
>>> 366:         cursor.execute(
    367:             """
    368:             SELECT AVG(hop_count) as avg_hops
    369:             FROM message_metrics


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\tools\bitchat\kpi_tracker.py:382:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    379:         """Estimate battery impact from peer reports"""
    380:         cursor = self.conn.cursor()
    381:
>>> 382:         cursor.execute(
    383:             """
    384:             SELECT AVG(battery_level) as avg_battery
    385:             FROM peer_metrics


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\tools\bitchat\kpi_tracker.py:399:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    396:
    397:         # Get historical data for trends
    398:         cursor = self.conn.cursor()
>>> 399:         cursor.execute(
    400:             """
    401:             SELECT * FROM network_snapshots
    402:             ORDER BY timestamp DESC


GOD_METHOD: Method '_generate_recommendations' is too complex: 7 complexity, 19 lines, 5 max nesting
File: packages\core\tools\bitchat\kpi_tracker.py:459:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    456:
    457:         return sum(scores)
    458:
>>> 459:     def _generate_recommendations(self, snapshot: NetworkSnapshot) -> list[str]:
    460:         """Generate performance improvement recommendations"""
    461:         recommendations = []
    462:


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'record_message'
File: packages\core\tools\bitchat\kpi_tracker.py:153:4
Recommendation: Extract common code into a shared function or utility
Code context:
    150:
    151:         self.conn.commit()
    152:
>>> 153:     def record_message(self, metrics: MessageMetrics):
    154:         """Record message transmission metrics"""
    155:         cursor = self.conn.cursor()
    156:         cursor.execute(


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'update_peer'
File: packages\core\tools\bitchat\kpi_tracker.py:177:4
Recommendation: Extract common code into a shared function or utility
Code context:
    174:         )
    175:         self.conn.commit()
    176:
>>> 177:     def update_peer(self, peer: PeerMetrics):
    178:         """Update peer connectivity metrics"""
    179:         cursor = self.conn.cursor()
    180:         cursor.execute(


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'calculate_delivery_rate'
File: packages\core\tools\bitchat\kpi_tracker.py:200:4
Recommendation: Extract common code into a shared function or utility
Code context:
    197:         )
    198:         self.conn.commit()
    199:
>>> 200:     def calculate_delivery_rate(self, window_minutes: int = 5) -> float:
    201:         """Calculate message delivery success rate"""
    202:         cursor = self.conn.cursor()
    203:         cutoff = time.time() - (window_minutes * 60)


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_calculate_store_forward_rate'
File: packages\core\tools\bitchat\kpi_tracker.py:341:4
Recommendation: Extract common code into a shared function or utility
Code context:
    338:         row = cursor.fetchone()
    339:         return row["count"] if row else 0.0
    340:
>>> 341:     def _calculate_store_forward_rate(self) -> float:
    342:         """Calculate store-and-forward usage rate"""
    343:         cursor = self.conn.cursor()
    344:         cutoff = time.time() - 300  # 5 minutes


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'generate_report'
File: packages\core\tools\bitchat\kpi_tracker.py:393:4
Recommendation: Extract common code into a shared function or utility
Code context:
    390:         row = cursor.fetchone()
    391:         return row["avg_battery"] if row and row["avg_battery"] else None
    392:
>>> 393:     def generate_report(self) -> dict:
    394:         """Generate comprehensive KPI report"""
    395:         snapshot = self.take_network_snapshot()
    396:


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'calculate_avg_latency'
File: packages\core\tools\bitchat\kpi_tracker.py:220:4
Recommendation: Extract common code into a shared function or utility
Code context:
    217:             return row["delivered"] / row["total"]
    218:         return 0.0
    219:
>>> 220:     def calculate_avg_latency(self, window_minutes: int = 5) -> float:
    221:         """Calculate average message latency"""
    222:         cursor = self.conn.cursor()
    223:         cutoff = time.time() - (window_minutes * 60)


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'get_active_peer_count'
File: packages\core\tools\bitchat\kpi_tracker.py:237:4
Recommendation: Extract common code into a shared function or utility
Code context:
    234:         row = cursor.fetchone()
    235:         return row["avg_latency"] if row and row["avg_latency"] else 0.0
    236:
>>> 237:     def get_active_peer_count(self, timeout_seconds: int = 60) -> int:
    238:         """Get count of currently active peers"""
    239:         cursor = self.conn.cursor()
    240:         cutoff = time.time() - timeout_seconds


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_calculate_message_rate'
File: packages\core\tools\bitchat\kpi_tracker.py:324:4
Recommendation: Extract common code into a shared function or utility
Code context:
    321:         row = cursor.fetchone()
    322:         return row["total"] if row else 0
    323:
>>> 324:     def _calculate_message_rate(self) -> float:
    325:         """Calculate messages per minute"""
    326:         cursor = self.conn.cursor()
    327:         cutoff = time.time() - 60


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_calculate_avg_hop_count'
File: packages\core\tools\bitchat\kpi_tracker.py:361:4
Recommendation: Extract common code into a shared function or utility
Code context:
    358:             return row["sf_count"] / row["total"]
    359:         return 0.0
    360:
>>> 361:     def _calculate_avg_hop_count(self) -> float:
    362:         """Calculate average hop count for delivered messages"""
    363:         cursor = self.conn.cursor()
    364:         cutoff = time.time() - 300


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_get_total_peer_count'
File: packages\core\tools\bitchat\kpi_tracker.py:317:4
Recommendation: Extract common code into a shared function or utility
Code context:
    314:
    315:         return snapshot
    316:
>>> 317:     def _get_total_peer_count(self) -> int:
    318:         """Get total number of known peers"""
    319:         cursor = self.conn.cursor()
    320:         cursor.execute("SELECT COUNT(*) as total FROM peer_metrics")


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_estimate_battery_impact'
File: packages\core\tools\bitchat\kpi_tracker.py:378:4
Recommendation: Extract common code into a shared function or utility
Code context:
    375:         row = cursor.fetchone()
    376:         return row["avg_hops"] if row and row["avg_hops"] else 0.0
    377:
>>> 378:     def _estimate_battery_impact(self) -> float | None:
    379:         """Estimate battery impact from peer reports"""
    380:         cursor = self.conn.cursor()
    381:


GOD_METHOD: Method 'detect_available_tools' is too complex: 10 complexity, 69 lines, 0 max nesting
File: packages\core\tools\linting\lint.py:74:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     71:             else:
     72:                 base[key] = value
     73:
>>>  74:     def detect_available_tools(self) -> dict[str, bool]:
     75:         """Detect which linting tools are available."""
     76:         tools = {}
     77:


GOD_METHOD: Method 'lint_python' is too complex: 12 complexity, 58 lines, 9 max nesting
File: packages\core\tools\linting\lint.py:370:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    367:         except Exception as e:
    368:             return {"status": "error", "error": str(e)}
    369:
>>> 370:     def lint_python(self, path: str = ".", fix: bool = False, parallel: bool = True) -> dict[str, Any]:
    371:         """Run comprehensive Python linting."""
    372:         print(f"[PYTHON] Running Python linting on: {path}")
    373:


GOD_METHOD: Method 'main' is too complex: 11 complexity, 59 lines, 8 max nesting
File: packages\core\tools\linting\lint.py:502:0
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    499:         return "\n".join(lines)
    500:
    501:
>>> 502: def main():
    503:     """Main entry point for the unified linting system."""
    504:     parser = argparse.ArgumentParser(description="AIVillage Unified Linting System")
    505:     parser.add_argument("path", nargs="?", default=".", help="Path to lint (default: current directory)")


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'run_ruff'
File: packages\core\tools\linting\lint.py:164:4
Recommendation: Extract common code into a shared function or utility
Code context:
    161:
    162:         return sorted(python_files)
    163:
>>> 164:     def run_ruff(self, files: list[Path] = None, fix: bool = False) -> dict[str, Any]:
    165:         """Run Ruff linting."""
    166:         if not self.available_tools.get("ruff", False):
    167:             return {"status": "skipped", "reason": "ruff not available"}


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'run_isort'
File: packages\core\tools\linting\lint.py:257:4
Recommendation: Extract common code into a shared function or utility
Code context:
    254:         except Exception as e:
    255:             return {"status": "error", "error": str(e)}
    256:
>>> 257:     def run_isort(self, files: list[Path] = None, check_only: bool = True) -> dict[str, Any]:
    258:         """Run isort import sorting."""
    259:         if not self.available_tools.get("isort", False):
    260:             return {"status": "skipped", "reason": "isort not available"}


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'run_mypy'
File: packages\core\tools\linting\lint.py:295:4
Recommendation: Extract common code into a shared function or utility
Code context:
    292:         except Exception as e:
    293:             return {"status": "error", "error": str(e)}
    294:
>>> 295:     def run_mypy(self, files: list[Path] = None) -> dict[str, Any]:
    296:         """Run mypy type checking."""
    297:         if not self.available_tools.get("mypy", False):
    298:             return {"status": "skipped", "reason": "mypy not available"}


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'run_flake8'
File: packages\core\tools\linting\lint.py:331:4
Recommendation: Extract common code into a shared function or utility
Code context:
    328:         except Exception as e:
    329:             return {"status": "error", "error": str(e)}
    330:
>>> 331:     def run_flake8(self, files: list[Path] = None) -> dict[str, Any]:
    332:         """Run flake8 linting."""
    333:         if not self.available_tools.get("flake8", False):
    334:             return {"status": "skipped", "reason": "flake8 not available"}


GOD_METHOD: Method '_determine_hardware_status' is too complex: 13 complexity, 48 lines, 9 max nesting
File: packages\core\tools\p2p\hw_probe.py:361:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    358:             logger.debug(f"Command error: {' '.join(command)} - {e}")
    359:             return None
    360:
>>> 361:     def _determine_hardware_status(self):
    362:         """Determine overall hardware status and recommendations"""
    363:         bluetooth_ok = self.results["bluetooth"].get("available", False)
    364:         wifi_ok = self.results["wifi"].get("available", False)


GOD_METHOD: Method 'print_hardware_status' is too complex: 6 complexity, 17 lines, 5 max nesting
File: packages\core\tools\p2p\hw_probe.py:412:0
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    409:                 self.results["summary"]["reason"] = "Bluetooth available but no WiFi for Betanet"
    410:
    411:
>>> 412: def print_hardware_status(results: dict[str, Any], verbose: bool = False):
    413:     """Print hardware status in required format"""
    414:     hardware_ok = results["summary"]["hardware_ok"]
    415:


GOD_METHOD: Method 'print_detailed_report' is too complex: 14 complexity, 72 lines, 12 max nesting
File: packages\core\tools\p2p\hw_probe.py:432:0
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    429:                     print(f"# Suggestion: {rec}")
    430:
    431:
>>> 432: def print_detailed_report(results: dict[str, Any]):
    433:     """Print detailed hardware report"""
    434:     print("\n" + "=" * 60)
    435:     print("BitChat/Betanet Hardware Probe Report")


GOD_METHOD: Method 'demonstrate_cleanup' is too complex: 5 complexity, 108 lines, 4 max nesting
File: packages\core\tools\scripts\demonstrate_cleanup.py:9:0
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
      6: from pathlib import Path
      7:
      8:
>>>   9: def demonstrate_cleanup() -> None:
     10:     base_path = Path.cwd()
     11:
     12:     print("=== AIVillage Documentation Cleanup Demonstration ===\n")


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\tools\scripts\deploy_production.py:55:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     52:             try:
     53:                 with open(config_file) as f:
     54:                     user_config = json.load(f)
>>>  55:                 default_config.update(user_config)
     56:             except Exception as e:
     57:                 logger.warning(f"Failed to load config from {config_file}: {e}")
     58:


GOD_METHOD: Method 'wait_for_deployment' is too complex: 8 complexity, 46 lines, 5 max nesting
File: packages\core\tools\scripts\deploy_production.py:206:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    203:         logger.info("✅ Helm deployment successful")
    204:         return True
    205:
>>> 206:     def wait_for_deployment(self) -> bool:
    207:         """Wait for deployment to be ready."""
    208:         logger.info("⏳ Waiting for deployment to be ready...")
    209:


GOD_METHOD: Method 'deploy' is too complex: 12 complexity, 44 lines, 10 max nesting
File: packages\core\tools\scripts\deploy_production.py:334:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    331:         logger.info("✅ Cleanup completed")
    332:         return True
    333:
>>> 334:     def deploy(self) -> bool:
    335:         """Run the complete deployment process."""
    336:         logger.info(f"🚀 Starting deployment to {self.environment}")
    337:


GOD_METHOD: Method 'get_deployment_status' is too complex: 5 complexity, 54 lines, 2 max nesting
File: packages\core\tools\scripts\deploy_production.py:380:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    377:
    378:             return False
    379:
>>> 380:     def get_deployment_status(self) -> dict[str, Any]:
    381:         """Get current deployment status."""
    382:         logger.info("📊 Getting deployment status...")
    383:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\tools\scripts\execute_cleanup.py:37:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     34:
     35:     # If subprocess fails, try importing and running directly
     36:     try:
>>>  37:         sys.path.insert(0, str(PROJECT_ROOT))
     38:         from cleanup_documentation import DocumentationCleanup
     39:
     40:         print("Running cleanup directly...")


GOD_METHOD: Method 'install_dependencies' is too complex: 7 complexity, 25 lines, 5 max nesting
File: packages\core\tools\scripts\setup_dev_env.py:67:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     64:
     65:         return status
     66:
>>>  67:     def install_dependencies(self) -> bool:
     68:         """Install project dependencies."""
     69:         logger.info("Installing dependencies...")
     70:


GOD_METHOD: Method 'run_setup' is too complex: 8 complexity, 27 lines, 5 max nesting
File: packages\core\tools\scripts\setup_dev_env.py:180:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    177:
    178:         return True
    179:
>>> 180:     def run_setup(self, skip_deps: bool = False, skip_validation: bool = False) -> bool:
    181:         """Run the complete setup process."""
    182:         logger.info("Starting development environment setup...")
    183:


GOD_METHOD: Method 'validate_json_field' is too complex: 13 complexity, 28 lines, 8 max nesting
File: packages\core\tools\security\test_security_standalone.py:127:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    124: class TestInputValidation(unittest.TestCase):
    125:     """Test input validation and sanitization."""
    126:
>>> 127:     def validate_json_field(self, value, field_rules):
    128:         """Basic JSON field validation."""
    129:         # Check required
    130:         if field_rules.get("required", False) and value is None:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\tools\security\test_security_standalone.py:374:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    371:         conn = sqlite3.connect(db_path, timeout=30.0, isolation_level=None)
    372:
    373:         # Security and performance settings
>>> 374:         conn.execute("PRAGMA journal_mode=WAL")
    375:         conn.execute("PRAGMA synchronous=NORMAL")
    376:         conn.execute("PRAGMA foreign_keys=ON")
    377:         conn.execute("PRAGMA temp_store=MEMORY")


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\tools\security\test_security_standalone.py:375:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    372:
    373:         # Security and performance settings
    374:         conn.execute("PRAGMA journal_mode=WAL")
>>> 375:         conn.execute("PRAGMA synchronous=NORMAL")
    376:         conn.execute("PRAGMA foreign_keys=ON")
    377:         conn.execute("PRAGMA temp_store=MEMORY")
    378:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\tools\security\test_security_standalone.py:376:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    373:         # Security and performance settings
    374:         conn.execute("PRAGMA journal_mode=WAL")
    375:         conn.execute("PRAGMA synchronous=NORMAL")
>>> 376:         conn.execute("PRAGMA foreign_keys=ON")
    377:         conn.execute("PRAGMA temp_store=MEMORY")
    378:
    379:         return conn


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\tools\security\test_security_standalone.py:377:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    374:         conn.execute("PRAGMA journal_mode=WAL")
    375:         conn.execute("PRAGMA synchronous=NORMAL")
    376:         conn.execute("PRAGMA foreign_keys=ON")
>>> 377:         conn.execute("PRAGMA temp_store=MEMORY")
    378:
    379:         return conn
    380:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\tools\security\test_security_standalone.py:387:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    384:             conn = self.create_secure_connection(temp_db.name)
    385:
    386:             # Create test table
>>> 387:             conn.execute(
    388:                 """
    389:                 CREATE TABLE users (
    390:                     id INTEGER PRIMARY KEY,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\tools\security\test_security_standalone.py:400:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    397:             # Test parameterized insert (safe)
    398:             username = "test_user"
    399:             email = "test@example.com"
>>> 400:             conn.execute("INSERT INTO users (username, email) VALUES (?, ?)", (username, email))
    401:
    402:             # Test parameterized select (safe)
    403:             cursor = conn.execute("SELECT * FROM users WHERE username = ?", (username,))


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\tools\security\test_security_standalone.py:403:21
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    400:             conn.execute("INSERT INTO users (username, email) VALUES (?, ?)", (username, email))
    401:
    402:             # Test parameterized select (safe)
>>> 403:             cursor = conn.execute("SELECT * FROM users WHERE username = ?", (username,))
    404:             result = cursor.fetchone()
    405:
    406:             self.assertIsNotNone(result)


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\tools\security\test_security_standalone.py:420:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    417:         try:
    418:             # Create database
    419:             conn = self.create_secure_connection(db_path)
>>> 420:             conn.execute("CREATE TABLE test (id INTEGER)")
    421:             conn.close()
    422:
    423:             # Check file exists


GOD_METHOD: Method 'verify_security_configuration' is too complex: 5 complexity, 56 lines, 3 max nesting
File: packages\core\tools\security\verify_p2p_security.py:24:0
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     21:     print("=" * 60)
     22:
     23:
>>>  24: def verify_security_configuration():
     25:     """Verify security configuration matches CODEX requirements."""
     26:     print_header("SECURITY CONFIGURATION VERIFICATION")
     27:


GOD_METHOD: Method 'test_message_encryption' is too complex: 10 complexity, 95 lines, 6 max nesting
File: packages\core\tools\security\verify_p2p_security.py:83:0
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     80:     return True
     81:
     82:
>>>  83: def test_message_encryption():
     84:     """Test message encryption and MAC verification."""
     85:     print_header("MESSAGE ENCRYPTION & MAC TESTING")
     86:


GOD_METHOD: Method 'test_peer_reputation_system' is too complex: 10 complexity, 95 lines, 7 max nesting
File: packages\core\tools\security\verify_p2p_security.py:181:0
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    178:     return False
    179:
    180:
>>> 181: def test_peer_reputation_system():
    182:     """Test peer reputation and blocking mechanisms."""
    183:     print_header("PEER REPUTATION SYSTEM TESTING")
    184:


GOD_METHOD: Method 'test_rate_limiting' is too complex: 17 complexity, 103 lines, 14 max nesting
File: packages\core\tools\security\verify_p2p_security.py:279:0
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    276:     return True
    277:
    278:
>>> 279: def test_rate_limiting():
    280:     """Test rate limiting mechanisms."""
    281:     print_header("RATE LIMITING TESTING")
    282:


GOD_METHOD: Method 'check_rate_limits' is too complex: 7 complexity, 33 lines, 6 max nesting
File: packages\core\tools\security\verify_p2p_security.py:292:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    289:     connection_attempts = {}
    290:     message_attempts = {}
    291:
>>> 292:     def check_rate_limits(peer_id: str, attempt_type: str) -> bool:
    293:         now = time.time()
    294:
    295:         if attempt_type == "connection":


GOD_METHOD: Method 'test_replay_attack_prevention' is too complex: 13 complexity, 99 lines, 12 max nesting
File: packages\core\tools\security\verify_p2p_security.py:385:0
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    382:     return False
    383:
    384:
>>> 385: def test_replay_attack_prevention():
    386:     """Test replay attack prevention mechanisms."""
    387:     print_header("REPLAY ATTACK PREVENTION TESTING")
    388:


GOD_METHOD: Method 'test_security_monitoring' is too complex: 10 complexity, 101 lines, 8 max nesting
File: packages\core\tools\security\verify_p2p_security.py:487:0
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    484:     return True
    485:
    486:
>>> 487: def test_security_monitoring():
    488:     """Test security event monitoring and alerting."""
    489:     print_header("SECURITY MONITORING TESTING")
    490:


GOD_METHOD: Method 'main' is too complex: 5 complexity, 56 lines, 3 max nesting
File: packages\core\tools\security\verify_p2p_security.py:638:0
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    635:         return False
    636:
    637:
>>> 638: def main():
    639:     """Run all security verification tests."""
    640:     print("=" * 60)
    641:     print("P2P NETWORK SECURITY VERIFICATION")


GOD_METHOD: Method 'generate_utls_template' is too complex: 2 complexity, 140 lines, 1 max nesting
File: packages\core\tools\utlsgen\calibrate_fingerprint.py:189:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    186:
    187:         return fingerprint
    188:
>>> 189:     def generate_utls_template(self, browser: str = "chrome", version: str = "120") -> dict:
    190:         """Generate uTLS template for specific browser."""
    191:         logger.info(f"Generating uTLS template for {browser} {version}")
    192:


GOD_METHOD: Method 'download_benchmark_datasets' is too complex: 10 complexity, 89 lines, 8 max nesting
File: packages\core\training\scripts\download_benchmarks.py:29:0
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     26: logger = logging.getLogger(__name__)
     27:
     28:
>>>  29: def download_benchmark_datasets():
     30:     """Download all benchmark datasets for EvoMerge evaluation."""
     31:
     32:     datasets_to_download = [


GOD_METHOD: Method '__init__' is too complex: 2 complexity, 57 lines, 1 max nesting
File: packages\core\training\scripts\download_training_datasets.py:32:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     29:     Extends existing HRRM training with benchmark datasets for improved performance.
     30:     """
     31:
>>>  32:     def __init__(self, output_dir: str = "packages/core/training/datasets"):
     33:         self.output_dir = Path(output_dir)
     34:         self.output_dir.mkdir(parents=True, exist_ok=True)
     35:


GOD_METHOD: Method 'process_for_training' is too complex: 6 complexity, 24 lines, 5 max nesting
File: packages\core\training\scripts\download_training_datasets.py:122:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    119:             logger.error(f"Failed to download {dataset_name}: {e}")
    120:             return None
    121:
>>> 122:     def process_for_training(self, enhancement_type: str, datasets: list[dict[str, Any]]) -> dict[str, list[str]]:
    123:         """Process datasets into HRRM-specific training format."""
    124:         config = self.datasets[enhancement_type]
    125:         model_target = config["model_target"]


GOD_METHOD: Method '_process_for_reasoner' is too complex: 12 complexity, 35 lines, 8 max nesting
File: packages\core\training\scripts\download_training_datasets.py:148:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    145:
    146:         return {model_target: training_data}
    147:
>>> 148:     def _process_for_reasoner(self, dataset, name: str) -> list[str]:
    149:         """Process datasets for reasoner enhancement (GSM8K, ARC, MATH format)."""
    150:         examples = []
    151:


GOD_METHOD: Method '_process_for_planner' is too complex: 12 complexity, 30 lines, 8 max nesting
File: packages\core\training\scripts\download_training_datasets.py:185:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    182:
    183:         return examples
    184:
>>> 185:     def _process_for_planner(self, dataset, name: str) -> list[str]:
    186:         """Process datasets for planner enhancement (code planning format)."""
    187:         examples = []
    188:


GOD_METHOD: Method '_process_for_memory' is too complex: 17 complexity, 52 lines, 11 max nesting
File: packages\core\training\scripts\download_training_datasets.py:217:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    214:
    215:         return examples
    216:
>>> 217:     def _process_for_memory(self, dataset, name: str) -> list[str]:
    218:         """Process datasets for memory enhancement (contextual knowledge format)."""
    219:         examples = []
    220:


GOD_METHOD: Method '_process_code_dataset' is too complex: 9 complexity, 30 lines, 6 max nesting
File: packages\core\training\scripts\download_training_datasets.py:271:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    268:
    269:         return examples
    270:
>>> 271:     def _process_code_dataset(self, dataset, name: str) -> dict[str, list[str]]:
    272:         """Process code datasets for HRRM training."""
    273:         data = {"planner": [], "reasoner": [], "memory": []}
    274:


GOD_METHOD: Method '_process_math_dataset' is too complex: 8 complexity, 29 lines, 5 max nesting
File: packages\core\training\scripts\download_training_datasets.py:303:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    300:
    301:         return data
    302:
>>> 303:     def _process_math_dataset(self, dataset, name: str) -> dict[str, list[str]]:
    304:         """Process math datasets for HRRM training."""
    305:         data = {"planner": [], "reasoner": [], "memory": []}
    306:


GOD_METHOD: Method '_process_multilingual_dataset' is too complex: 8 complexity, 33 lines, 5 max nesting
File: packages\core\training\scripts\download_training_datasets.py:334:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    331:
    332:         return data
    333:
>>> 334:     def _process_multilingual_dataset(self, dataset, name: str) -> dict[str, list[str]]:
    335:         """Process multilingual datasets for HRRM training."""
    336:         data = {"planner": [], "reasoner": [], "memory": []}
    337:


GOD_METHOD: Method '_process_structured_dataset' is too complex: 10 complexity, 45 lines, 7 max nesting
File: packages\core\training\scripts\download_training_datasets.py:369:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    366:
    367:         return data
    368:
>>> 369:     def _process_structured_dataset(self, dataset, name: str) -> dict[str, list[str]]:
    370:         """Process structured reasoning datasets for HRRM training."""
    371:         data = {"planner": [], "reasoner": [], "memory": []}
    372:


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_process_for_reasoner'
File: packages\core\training\scripts\download_training_datasets.py:148:4
Recommendation: Extract common code into a shared function or utility
Code context:
    145:
    146:         return {model_target: training_data}
    147:
>>> 148:     def _process_for_reasoner(self, dataset, name: str) -> list[str]:
    149:         """Process datasets for reasoner enhancement (GSM8K, ARC, MATH format)."""
    150:         examples = []
    151:


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_process_for_planner'
File: packages\core\training\scripts\download_training_datasets.py:185:4
Recommendation: Extract common code into a shared function or utility
Code context:
    182:
    183:         return examples
    184:
>>> 185:     def _process_for_planner(self, dataset, name: str) -> list[str]:
    186:         """Process datasets for planner enhancement (code planning format)."""
    187:         examples = []
    188:


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_process_for_memory'
File: packages\core\training\scripts\download_training_datasets.py:217:4
Recommendation: Extract common code into a shared function or utility
Code context:
    214:
    215:         return examples
    216:
>>> 217:     def _process_for_memory(self, dataset, name: str) -> list[str]:
    218:         """Process datasets for memory enhancement (contextual knowledge format)."""
    219:         examples = []
    220:


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_process_code_dataset'
File: packages\core\training\scripts\download_training_datasets.py:271:4
Recommendation: Extract common code into a shared function or utility
Code context:
    268:
    269:         return examples
    270:
>>> 271:     def _process_code_dataset(self, dataset, name: str) -> dict[str, list[str]]:
    272:         """Process code datasets for HRRM training."""
    273:         data = {"planner": [], "reasoner": [], "memory": []}
    274:


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_process_math_dataset'
File: packages\core\training\scripts\download_training_datasets.py:303:4
Recommendation: Extract common code into a shared function or utility
Code context:
    300:
    301:         return data
    302:
>>> 303:     def _process_math_dataset(self, dataset, name: str) -> dict[str, list[str]]:
    304:         """Process math datasets for HRRM training."""
    305:         data = {"planner": [], "reasoner": [], "memory": []}
    306:


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_process_multilingual_dataset'
File: packages\core\training\scripts\download_training_datasets.py:334:4
Recommendation: Extract common code into a shared function or utility
Code context:
    331:
    332:         return data
    333:
>>> 334:     def _process_multilingual_dataset(self, dataset, name: str) -> dict[str, list[str]]:
    335:         """Process multilingual datasets for HRRM training."""
    336:         data = {"planner": [], "reasoner": [], "memory": []}
    337:


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_process_structured_dataset'
File: packages\core\training\scripts\download_training_datasets.py:369:4
Recommendation: Extract common code into a shared function or utility
Code context:
    366:
    367:         return data
    368:
>>> 369:     def _process_structured_dataset(self, dataset, name: str) -> dict[str, list[str]]:
    370:         """Process structured reasoning datasets for HRRM training."""
    371:         data = {"planner": [], "reasoner": [], "memory": []}
    372:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\training\scripts\enhanced_hrrm_training.py:17:0
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     14: import yaml
     15:
     16: # Add paths to enable imports
>>>  17: sys.path.insert(0, os.path.abspath("."))
     18: sys.path.insert(0, os.path.abspath("packages"))
     19:
     20: # Import HRRM models


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\training\scripts\enhanced_hrrm_training.py:18:0
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     15:
     16: # Add paths to enable imports
     17: sys.path.insert(0, os.path.abspath("."))
>>>  18: sys.path.insert(0, os.path.abspath("packages"))
     19:
     20: # Import HRRM models
     21: from packages.hrrm.memory.model import MemoryAsContextTiny, MemoryConfig


GOD_METHOD: Method '_load_benchmark_data' is too complex: 11 complexity, 43 lines, 10 max nesting
File: packages\core\training\scripts\enhanced_hrrm_training.py:127:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    124:             data.append(batch)
    125:         return data
    126:
>>> 127:     def _load_benchmark_data(self, model_type: str) -> list[str]:
    128:         """Load benchmark training data for specific model type."""
    129:         data = []
    130:


GOD_METHOD: Method '_train_phase' is too complex: 8 complexity, 85 lines, 6 max nesting
File: packages\core\training\scripts\enhanced_hrrm_training.py:200:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    197:         logger.info(f"Created {len(batches)} benchmark batches")
    198:         return batches
    199:
>>> 200:     def _train_phase(self, model, optimizer, data, model_name: str, phase_name: str, epochs: int = 3):
    201:         """Train model for one phase."""
    202:         model.train()
    203:         model.to(self.device)


GOD_METHOD: Method 'run_enhanced_training' is too complex: 2 complexity, 76 lines, 0 max nesting
File: packages\core\training\scripts\enhanced_hrrm_training.py:451:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    448:         model_path = self._save_model(memory, memory_config, "memory", finetune_loss)
    449:         return model_path, finetune_loss
    450:
>>> 451:     def run_enhanced_training(self):
    452:         """Run the complete enhanced training pipeline."""
    453:         logger.info("=" * 80)
    454:         logger.info("ENHANCED HRRM TRAINING PIPELINE - COMBINING PRETRAINING + BENCHMARKS")


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'train_enhanced_reasoner'
File: packages\core\training\scripts\enhanced_hrrm_training.py:313:4
Recommendation: Extract common code into a shared function or utility
Code context:
    310:         logger.info(f"Saved enhanced {model_name} to {model_dir}")
    311:         return str(model_dir)
    312:
>>> 313:     def train_enhanced_reasoner(self):
    314:         """Train the reasoner model with synthetic pretraining + benchmark fine-tuning."""
    315:         logger.info("=" * 60)
    316:         logger.info("TRAINING ENHANCED HRM REASONER")


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'train_enhanced_memory'
File: packages\core\training\scripts\enhanced_hrrm_training.py:404:4
Recommendation: Extract common code into a shared function or utility
Code context:
    401:         model_path = self._save_model(planner, planner_config, "planner", finetune_loss)
    402:         return model_path, finetune_loss
    403:
>>> 404:     def train_enhanced_memory(self):
    405:         """Train the memory model with synthetic pretraining + contextual fine-tuning."""
    406:         logger.info("=" * 60)
    407:         logger.info("TRAINING ENHANCED MEMORY MODEL")


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\training\scripts\simple_train_hrrm.py:16:0
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     13: from typing import Any
     14:
     15: # Add the current directory to Python path
>>>  16: sys.path.insert(0, os.path.abspath("."))
     17:
     18: from ..config.training_config import HRRMTrainingConfig, TokenizerConfig
     19: from ..data.data_generator import MockTokenizer, SyntheticDataGenerator


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\training\scripts\simple_train_hrrm_original.py:14:0
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     11: import torch.optim as optim
     12:
     13: # Add the current directory to Python path
>>>  14: sys.path.insert(0, os.path.abspath("."))
     15:
     16: from packages.hrrm.memory.model import MemoryAsContextTiny, MemoryConfig
     17: from packages.hrrm.planner.heads import PlannerConfig


GOD_METHOD: Method 'train_model' is too complex: 7 complexity, 64 lines, 6 max nesting
File: packages\core\training\scripts\simple_train_hrrm_original.py:35:0
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     32:     return data
     33:
     34:
>>>  35: def train_model(model, optimizer, data, model_name, epochs=3):
     36:     """Simple training loop."""
     37:     model.train()
     38:     device = torch.device("cuda" if torch.cuda.is_available() else "cpu")


GOD_METHOD: Method 'main' is too complex: 2 complexity, 122 lines, 1 max nesting
File: packages\core\training\scripts\simple_train_hrrm_original.py:124:0
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    121:     logger.info(f"Saved {model_name} to {checkpoint_dir}")
    122:
    123:
>>> 124: def main():
    125:     """Main training function."""
    126:     # Create tokenizer (simple approach)
    127:     logger.info("Creating tokenizer...")


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\training\scripts\train_50m_hrrm.py:16:0
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     13: from transformers import AutoTokenizer
     14:
     15: # Add paths
>>>  16: sys.path.insert(0, os.path.abspath("."))
     17: sys.path.insert(0, os.path.abspath("packages"))
     18:
     19: # Import training constants


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\training\scripts\train_50m_hrrm.py:17:0
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     14:
     15: # Add paths
     16: sys.path.insert(0, os.path.abspath("."))
>>>  17: sys.path.insert(0, os.path.abspath("packages"))
     18:
     19: # Import training constants
     20: from packages.core.training.constants import (


GOD_METHOD: Method 'create_50m_config' is too complex: 10 complexity, 110 lines, 9 max nesting
File: packages\core\training\scripts\train_50m_hrrm.py:56:0
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     53:     return total_params
     54:
     55:
>>>  56: def create_50m_config(model_type, vocab_size):
     57:     """Create configurations for 50M parameter models."""
     58:
     59:     if model_type == "planner":


GOD_METHOD: Method 'load_training_datasets' is too complex: 16 complexity, 63 lines, 10 max nesting
File: packages\core\training\scripts\train_50m_hrrm.py:169:0
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    166:         )
    167:
    168:
>>> 169: def load_training_datasets():
    170:     """Load and prepare training datasets."""
    171:     logger.info("Loading training datasets...")
    172:


GOD_METHOD: Method 'prepare_training_data' is too complex: 12 complexity, 49 lines, 11 max nesting
File: packages\core\training\scripts\train_50m_hrrm.py:235:0
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    232:     return datasets
    233:
    234:
>>> 235: def prepare_training_data(datasets, tokenizer, model_type):
    236:     """Prepare training data for specific model type."""
    237:     all_texts = []
    238:


GOD_METHOD: Method 'train_model' is too complex: 10 complexity, 92 lines, 7 max nesting
File: packages\core\training\scripts\train_50m_hrrm.py:336:0
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    333:     return dataloader
    334:
    335:
>>> 336: def train_model(model, dataloader, model_name, epochs=2):
    337:     """Train model with real datasets."""
    338:     device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    339:     model.to(device)


GOD_METHOD: Method 'save_model_hf_format' is too complex: 2 complexity, 89 lines, 1 max nesting
File: packages\core\training\scripts\train_50m_hrrm.py:431:0
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    428:     return avg_total_loss, trainable_params
    429:
    430:
>>> 431: def save_model_hf_format(model, config, tokenizer, model_name, save_dir):
    432:     """Save model in HuggingFace format for EvoMerge compatibility."""
    433:     save_dir = Path(save_dir)
    434:     save_dir.mkdir(parents=True, exist_ok=True)


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\core\training\scripts\train_50m_hrrm.py:454:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    451:
    452:     # Add model-specific config
    453:     if hasattr(config, "__dict__"):
>>> 454:         hf_config.update(config.__dict__)
    455:
    456:     # Save config.json
    457:     with open(save_dir / "config.json", "w") as f:


GOD_METHOD: Method 'main' is too complex: 3 complexity, 141 lines, 1 max nesting
File: packages\core\training\scripts\train_50m_hrrm.py:523:0
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    520:     logger.info(f"Saved {model_name} to {save_dir} in HuggingFace format")
    521:
    522:
>>> 523: def main():
    524:     """Main training function for 50M parameter models."""
    525:     logger.info("=" * 60)
    526:     logger.info("Training 50M Parameter HRRM Models with Real Datasets")


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\edge\bridges\p2p_integration.py:21:4
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     18: # Add P2P package to path for integration
     19: p2p_path = Path(__file__).parent.parent.parent / "p2p"
     20: if str(p2p_path) not in sys.path:
>>>  21:     sys.path.insert(0, str(p2p_path))
     22:
     23: try:
     24:     from core.message_types import MessagePriority, MessageType, UnifiedMessage


GOD_METHOD: Method '_determine_transport_priority' is too complex: 8 complexity, 23 lines, 5 max nesting
File: packages\edge\bridges\p2p_integration.py:105:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    102:             "max_concurrent_connections": caps.max_concurrent_tasks,
    103:         }
    104:
>>> 105:     def _determine_transport_priority(self, device: "EdgeDevice") -> "TransportPriority":
    106:         """Determine optimal transport priority for device"""
    107:
    108:         if not P2P_AVAILABLE:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\edge\bridges\p2p_integration.py:296:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    293:
    294:         if self.p2p_available and self.transport_manager:
    295:             transport_status = self.transport_manager.get_status()
>>> 296:             status.update(
    297:                 {
    298:                     "transport_status": transport_status,
    299:                     "active_transports": transport_status.get("available_transports", []),


GOD_METHOD: Method '_capabilities_changed_significantly' is too complex: 8 complexity, 17 lines, 5 max nesting
File: packages\edge\core\edge_manager.py:529:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    526:         except Exception as e:
    527:             logger.warning(f"Error updating device {device.device_id}: {e}")
    528:
>>> 529:     def _capabilities_changed_significantly(self, old: DeviceCapabilities, new: DeviceCapabilities) -> bool:
    530:         """Check if capabilities changed enough to warrant policy adaptation"""
    531:
    532:         # Battery level changes


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_classify_device_type'
File: packages\edge\core\edge_manager.py:327:4
Recommendation: Extract common code into a shared function or utility
Code context:
    324:             supports_containers=False,
    325:         )
    326:
>>> 327:     def _classify_device_type(self, capabilities: DeviceCapabilities) -> DeviceType:
    328:         """Classify device type based on capabilities"""
    329:         # Mobile device detection
    330:         if capabilities.battery_powered and capabilities.ram_total_mb <= 6000:


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_capabilities_changed_significantly'
File: packages\edge\core\edge_manager.py:529:4
Recommendation: Extract common code into a shared function or utility
Code context:
    526:         except Exception as e:
    527:             logger.warning(f"Error updating device {device.device_id}: {e}")
    528:
>>> 529:     def _capabilities_changed_significantly(self, old: DeviceCapabilities, new: DeviceCapabilities) -> bool:
    530:         """Check if capabilities changed enough to warrant policy adaptation"""
    531:
    532:         # Battery level changes


GOD_METHOD: Method '_check_mobile_policies' is too complex: 8 complexity, 25 lines, 5 max nesting
File: packages\edge\fog_compute\fog_coordinator.py:377:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    374:         suitable_nodes.sort(key=lambda x: x[1], reverse=True)
    375:         return suitable_nodes[0][0]
    376:
>>> 377:     def _check_mobile_policies(self, capacity: ComputeCapacity, task: FogTask) -> bool:
    378:         """Check mobile-specific scheduling policies"""
    379:
    380:         # Battery level check for battery-powered devices


GOD_METHOD: Method 'get_task_status' is too complex: 6 complexity, 40 lines, 5 max nesting
File: packages\edge\fog_compute\fog_coordinator.py:612:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    609:
    610:         self.stats["battery_saves"] = battery_saves
    611:
>>> 612:     def get_task_status(self, task_id: str) -> dict[str, Any] | None:
    613:         """Get status of a specific task"""
    614:
    615:         # Check active tasks


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\edge\mobile\digital_twin_concierge.py:140:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    137:
    138:         with sqlite3.connect(self.db_path) as conn:
    139:             # Enable WAL mode for better concurrent access
>>> 140:             conn.execute("PRAGMA journal_mode=WAL")
    141:
    142:             conn.execute(
    143:                 """


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\edge\mobile\digital_twin_concierge.py:142:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    139:             # Enable WAL mode for better concurrent access
    140:             conn.execute("PRAGMA journal_mode=WAL")
    141:
>>> 142:             conn.execute(
    143:                 """
    144:                 CREATE TABLE IF NOT EXISTS data_points (
    145:                     data_id TEXT PRIMARY KEY,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\edge\mobile\digital_twin_concierge.py:160:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    157:             """
    158:             )
    159:
>>> 160:             conn.execute(
    161:                 """
    162:                 CREATE INDEX IF NOT EXISTS idx_timestamp ON data_points(timestamp);
    163:                 CREATE INDEX IF NOT EXISTS idx_source ON data_points(source);


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\edge\mobile\digital_twin_concierge.py:312:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    309:         """Store data points in local database"""
    310:         with sqlite3.connect(self.db_path) as conn:
    311:             for dp in data_points:
>>> 312:                 conn.execute(
    313:                     """
    314:                     INSERT OR REPLACE INTO data_points
    315:                     (data_id, source, data_type, privacy_level, timestamp, content, context,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\edge\mobile\digital_twin_concierge.py:338:21
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    335:         cutoff_time = datetime.now() - timedelta(hours=self.preferences.max_data_retention_hours)
    336:
    337:         with sqlite3.connect(self.db_path) as conn:
>>> 338:             result = conn.execute(
    339:                 """
    340:                 DELETE FROM data_points
    341:                 WHERE timestamp < ?


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\edge\mobile\digital_twin_concierge.py:350:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    347:             logger.info(f"Deleted {deleted_count} old data points (older than {cutoff_time})")
    348:
    349:             # Vacuum to reclaim space
>>> 350:             conn.execute("VACUUM")
    351:
    352:
    353: class SurpriseBasedLearning:


GOD_METHOD: Method 'calculate_surprise_score' is too complex: 10 complexity, 33 lines, 6 max nesting
File: packages\edge\mobile\digital_twin_concierge.py:360:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    357:         self.prediction_history: list[dict] = []
    358:         self.baseline_accuracy = 0.5  # Random baseline
    359:
>>> 360:     def calculate_surprise_score(self, predicted: Any, actual: Any, context: dict) -> float:
    361:         """
    362:         Calculate surprise score - how unexpected was the actual outcome
    363:         Lower surprise = better understanding of user


GOD_METHOD: Method '_extract_knowledge_from_datapoint' is too complex: 7 complexity, 31 lines, 5 max nesting
File: packages\edge\mobile\digital_twin_concierge.py:677:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    674:         except Exception as e:
    675:             logger.error(f"Error updating Mini-RAG knowledge: {e}")
    676:
>>> 677:     def _extract_knowledge_from_datapoint(self, dp: DataPoint) -> str | None:
    678:         """Extract actionable knowledge from a data point"""
    679:         if dp.surprise_score > 0.5:  # High surprise = unreliable pattern
    680:             return None


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\edge\mobile\mini_rag_system.py:195:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    192:         self.db_path.parent.mkdir(parents=True, exist_ok=True)
    193:
    194:         with sqlite3.connect(self.db_path) as conn:
>>> 195:             conn.execute("PRAGMA journal_mode=WAL")
    196:
    197:             # Knowledge pieces table
    198:             conn.execute(


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\edge\mobile\mini_rag_system.py:198:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    195:             conn.execute("PRAGMA journal_mode=WAL")
    196:
    197:             # Knowledge pieces table
>>> 198:             conn.execute(
    199:                 """
    200:                 CREATE TABLE IF NOT EXISTS knowledge_pieces (
    201:                     knowledge_id TEXT PRIMARY KEY,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\edge\mobile\mini_rag_system.py:221:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    218:             )
    219:
    220:             # Global contributions tracking
>>> 221:             conn.execute(
    222:                 """
    223:                 CREATE TABLE IF NOT EXISTS global_contributions (
    224:                     contribution_id TEXT PRIMARY KEY,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\edge\mobile\mini_rag_system.py:235:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    232:             )
    233:
    234:             # Indexes for search performance
>>> 235:             conn.execute("CREATE INDEX IF NOT EXISTS idx_relevance ON knowledge_pieces(relevance)")
    236:             conn.execute("CREATE INDEX IF NOT EXISTS idx_source ON knowledge_pieces(source)")
    237:             conn.execute("CREATE INDEX IF NOT EXISTS idx_privacy_level ON knowledge_pieces(privacy_level)")
    238:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\edge\mobile\mini_rag_system.py:236:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    233:
    234:             # Indexes for search performance
    235:             conn.execute("CREATE INDEX IF NOT EXISTS idx_relevance ON knowledge_pieces(relevance)")
>>> 236:             conn.execute("CREATE INDEX IF NOT EXISTS idx_source ON knowledge_pieces(source)")
    237:             conn.execute("CREATE INDEX IF NOT EXISTS idx_privacy_level ON knowledge_pieces(privacy_level)")
    238:
    239:     def _load_existing_knowledge(self):


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\edge\mobile\mini_rag_system.py:237:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    234:             # Indexes for search performance
    235:             conn.execute("CREATE INDEX IF NOT EXISTS idx_relevance ON knowledge_pieces(relevance)")
    236:             conn.execute("CREATE INDEX IF NOT EXISTS idx_source ON knowledge_pieces(source)")
>>> 237:             conn.execute("CREATE INDEX IF NOT EXISTS idx_privacy_level ON knowledge_pieces(privacy_level)")
    238:
    239:     def _load_existing_knowledge(self):
    240:         """Load existing knowledge from database"""


GOD_METHOD: Method '_load_existing_knowledge' is too complex: 2 complexity, 57 lines, 1 max nesting
File: packages\edge\mobile\mini_rag_system.py:239:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    236:             conn.execute("CREATE INDEX IF NOT EXISTS idx_source ON knowledge_pieces(source)")
    237:             conn.execute("CREATE INDEX IF NOT EXISTS idx_privacy_level ON knowledge_pieces(privacy_level)")
    238:
>>> 239:     def _load_existing_knowledge(self):
    240:         """Load existing knowledge from database"""
    241:         with sqlite3.connect(self.db_path) as conn:
    242:             cursor = conn.execute(


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\edge\mobile\mini_rag_system.py:242:21
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    239:     def _load_existing_knowledge(self):
    240:         """Load existing knowledge from database"""
    241:         with sqlite3.connect(self.db_path) as conn:
>>> 242:             cursor = conn.execute(
    243:                 """
    244:                 SELECT knowledge_id, content, source, privacy_level, relevance,
    245:                        embedding, keywords, context, confidence_score, usage_frequency,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\edge\mobile\mini_rag_system.py:523:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    520:         context_json = json.dumps(knowledge.context)
    521:
    522:         with sqlite3.connect(self.db_path) as conn:
>>> 523:             conn.execute(
    524:                 """
    525:                 INSERT OR REPLACE INTO knowledge_pieces
    526:                 (knowledge_id, content, source, privacy_level, relevance, embedding,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\edge\mobile\mini_rag_system.py:580:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    577:             del self.knowledge_base[knowledge_id]
    578:
    579:             with sqlite3.connect(self.db_path) as conn:
>>> 580:                 conn.execute("DELETE FROM knowledge_pieces WHERE knowledge_id = ?", (knowledge_id,))
    581:
    582:         logger.info(f"Cleaned up {len(to_remove)} old knowledge pieces")
    583:


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'anonymize_for_global_sharing'
File: packages\edge\mobile\mini_rag_system.py:70:4
Recommendation: Extract common code into a shared function or utility
Code context:
     67:     contribution_hash: str | None = None
     68:     anonymization_level: float = 0.0  # How much anonymization was applied
     69:
>>>  70:     def anonymize_for_global_sharing(self) -> dict[str, Any]:
     71:         """Create anonymized version for global RAG contribution"""
     72:
     73:         # Remove personal identifiers


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_get_time_bucket'
File: packages\edge\mobile\mini_rag_system.py:139:4
Recommendation: Extract common code into a shared function or utility
Code context:
    136:
    137:         return pattern_content
    138:
>>> 139:     def _get_time_bucket(self) -> str:
    140:         """Get time bucket instead of exact timestamp"""
    141:         now = datetime.now()
    142:


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_extract_keywords'
File: packages\edge\mobile\mini_rag_system.py:500:4
Recommendation: Extract common code into a shared function or utility
Code context:
    497:
    498:         return dot_product / (norm_a * norm_b)
    499:
>>> 500:     def _extract_keywords(self, content: str) -> list[str]:
    501:         """Extract keywords from content"""
    502:         import re
    503:


GOD_METHOD: Method 'create_device_profile_from_env' is too complex: 14 complexity, 98 lines, 10 max nesting
File: packages\edge\mobile\resource_manager.py:232:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    229:         active_vars = {k: v for k, v in config.items() if v is not None}
    230:         logger.info(f"Environment simulation config: {active_vars}")
    231:
>>> 232:     def create_device_profile_from_env(self, device_id: str = "test_device") -> MobileDeviceProfile:
    233:         """Create MobileDeviceProfile from environment variables for testing"""
    234:
    235:         # Default values


GOD_METHOD: Method '_evaluate_power_mode' is too complex: 13 complexity, 36 lines, 4 max nesting
File: packages\edge\mobile\resource_manager.py:420:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    417:
    418:         return optimization
    419:
>>> 420:     def _evaluate_power_mode(self, profile: MobileDeviceProfile) -> PowerMode:
    421:         """Evaluate appropriate power mode based on device state"""
    422:
    423:         # Critical battery - always use critical mode


GOD_METHOD: Method '_evaluate_transport_preference' is too complex: 10 complexity, 32 lines, 5 max nesting
File: packages\edge\mobile\resource_manager.py:458:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    455:         # Otherwise, performance mode is fine
    456:         return PowerMode.PERFORMANCE
    457:
>>> 458:     def _evaluate_transport_preference(self, profile: MobileDeviceProfile) -> TransportPreference:
    459:         """Evaluate transport preference based on battery, network costs, and performance needs"""
    460:
    461:         # Critical battery - BitChat only (offline-first)


GOD_METHOD: Method '_calculate_chunking_config' is too complex: 14 complexity, 45 lines, 13 max nesting
File: packages\edge\mobile\resource_manager.py:492:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    489:         # Default to BitChat-preferred for mobile optimization
    490:         return TransportPreference.BITCHAT_PREFERRED
    491:
>>> 492:     def _calculate_chunking_config(self, profile: MobileDeviceProfile) -> ChunkingConfig:
    493:         """Calculate optimal chunking configuration for current device state"""
    494:
    495:         config = ChunkingConfig()


GOD_METHOD: Method '_calculate_compute_limits' is too complex: 8 complexity, 35 lines, 7 max nesting
File: packages\edge\mobile\resource_manager.py:539:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    536:
    537:         return config
    538:
>>> 539:     def _calculate_compute_limits(self, profile: MobileDeviceProfile) -> tuple[float, int, int]:
    540:         """Calculate CPU/memory limits and max concurrent tasks"""
    541:
    542:         # Base limits


GOD_METHOD: Method '_determine_active_policies' is too complex: 13 complexity, 35 lines, 11 max nesting
File: packages\edge\mobile\resource_manager.py:576:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    573:
    574:         return cpu_limit, memory_limit, max_tasks
    575:
>>> 576:     def _determine_active_policies(self, profile: MobileDeviceProfile) -> list[str]:
    577:         """Determine which policies are currently active"""
    578:
    579:         policies = []


GOD_METHOD: Method '_generate_reasoning' is too complex: 7 complexity, 20 lines, 5 max nesting
File: packages\edge\mobile\resource_manager.py:613:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    610:
    611:         return policies
    612:
>>> 613:     def _generate_reasoning(self, profile: MobileDeviceProfile, policies: list[str]) -> str:
    614:         """Generate human-readable reasoning for optimization decisions"""
    615:
    616:         reasons = []


GOD_METHOD: Method '_estimate_performance' is too complex: 8 complexity, 31 lines, 7 max nesting
File: packages\edge\mobile\resource_manager.py:635:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    632:
    633:         return " | ".join(reasons) if reasons else "normal_operation"
    634:
>>> 635:     def _estimate_performance(
    636:         self, power_mode: PowerMode, transport_preference: TransportPreference, profile: MobileDeviceProfile
    637:     ) -> tuple[str, str, str]:
    638:         """Estimate battery impact, performance, and latency characteristics"""


GOD_METHOD: Method 'get_chunking_recommendations' is too complex: 7 complexity, 34 lines, 5 max nesting
File: packages\edge\mobile\resource_manager.py:720:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    717:
    718:         return decision
    719:
>>> 720:     def get_chunking_recommendations(self, data_type: str = "tensor") -> dict[str, Any]:
    721:         """Get current chunking recommendations for different data types"""
    722:
    723:         if not self.optimization_history:


GOD_METHOD: Method 'risk_gate' is too complex: 11 complexity, 40 lines, 6 max nesting
File: packages\edge\legacy_src\digital_twin\guard.py:31:0
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     28: _SECRET_PATTERN = re.compile(r"(?i)(api[_-]?key|secret|password|private[_-]?key)")
     29:
     30:
>>>  31: def risk_gate(message: dict[str, Any], risk: float | None = None) -> Literal["allow", "ask", "deny"]:
     32:     """Evaluate ``message`` and return the guard decision.
     33:
     34:     Parameters


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\edge\legacy_src\federated_learning\federated_coordinator.py:297:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    294:
    295:         # Add local device if suitable
    296:         if self.p2p_node.local_capabilities and self._is_device_suitable_for_fl(self.p2p_node.local_capabilities):
>>> 297:             suitable_peers.insert(0, self.p2p_node.local_capabilities)
    298:
    299:         # Create participant records
    300:         for peer in suitable_peers:


GOD_METHOD: Method '_simple_average_gradients' is too complex: 6 complexity, 22 lines, 5 max nesting
File: packages\edge\legacy_src\federated_learning\federated_coordinator.py:887:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    884:
    885:         return self._simple_average_gradients(participants)
    886:
>>> 887:     def _simple_average_gradients(self, participants: list[TrainingParticipant]) -> dict[str, torch.Tensor]:
    888:         """Simple averaging of gradients."""
    889:         if not participants:
    890:             return {}


GOD_METHOD: Method '_apply_byzantine_robustness' is too complex: 7 complexity, 43 lines, 6 max nesting
File: packages\edge\legacy_src\federated_learning\federated_coordinator.py:911:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    908:
    909:         return aggregated
    910:
>>> 911:     def _apply_byzantine_robustness(
    912:         self,
    913:         participants: list[TrainingParticipant],
    914:         aggregated_gradients: dict[str, torch.Tensor],


GOD_METHOD: Method '_aggregate_clusters' is too complex: 6 complexity, 22 lines, 5 max nesting
File: packages\edge\legacy_src\federated_learning\federated_coordinator.py:1177:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    1174:
    1175:         return self._simple_average_gradients(participants_with_gradients)
    1176:
>>> 1177:     def _aggregate_clusters(self, cluster_aggregates: list[dict[str, torch.Tensor]]) -> dict[str, torch.Tensor]:
    1178:         """Aggregate cluster-level aggregates into global aggregate."""
    1179:         if not cluster_aggregates:
    1180:             return {}


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_simple_average_gradients'
File: packages\edge\legacy_src\federated_learning\federated_coordinator.py:887:4
Recommendation: Extract common code into a shared function or utility
Code context:
    884:
    885:         return self._simple_average_gradients(participants)
    886:
>>> 887:     def _simple_average_gradients(self, participants: list[TrainingParticipant]) -> dict[str, torch.Tensor]:
    888:         """Simple averaging of gradients."""
    889:         if not participants:
    890:             return {}


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_aggregate_clusters'
File: packages\edge\legacy_src\federated_learning\federated_coordinator.py:1177:4
Recommendation: Extract common code into a shared function or utility
Code context:
    1174:
    1175:         return self._simple_average_gradients(participants_with_gradients)
    1176:
>>> 1177:     def _aggregate_clusters(self, cluster_aggregates: list[dict[str, torch.Tensor]]) -> dict[str, torch.Tensor]:
    1178:         """Aggregate cluster-level aggregates into global aggregate."""
    1179:         if not cluster_aggregates:
    1180:             return {}


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'get_fl_status'
File: packages\edge\legacy_src\federated_learning\federated_coordinator.py:1063:4
Recommendation: Extract common code into a shared function or utility
Code context:
    1060:         # This would trigger evolution in the evolution system
    1061:         # await self.evolution_system.trigger_evolution(evolution_trigger_data)
    1062:
>>> 1063:     def get_fl_status(self) -> dict[str, Any]:
    1064:         """Get current federated learning status."""
    1065:         current_round_info = None
    1066:         if self.current_round:


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_aggregate_cluster'
File: packages\edge\legacy_src\federated_learning\federated_coordinator.py:1167:4
Recommendation: Extract common code into a shared function or utility
Code context:
    1164:
    1165:         return clusters
    1166:
>>> 1167:     def _aggregate_cluster(self, cluster_participants: list[TrainingParticipant]) -> dict[str, torch.Tensor]:
    1168:         """Aggregate gradients within a cluster."""
    1169:         # Filter participants with gradients
    1170:         participants_with_gradients = [p for p in cluster_participants if p.gradients is not None]


GOD_METHOD: Method 'risk_gate' is too complex: 6 complexity, 42 lines, 5 max nesting
File: packages\edge\legacy_src\twin_runtime\guard.py:48:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     45:             (r"private[_-]?key", "private_key"),
     46:         ]
     47:
>>>  48:     def risk_gate(self, msg: dict[str, Any], risk: float | None = None) -> Literal["allow", "ask", "deny"]:
     49:         """Assess risk and determine action.
     50:
     51:         Args:


GOD_METHOD: Method '_keyword_response' is too complex: 7 complexity, 14 lines, 5 max nesting
File: packages\edge\legacy_src\twin_runtime\runner.py:169:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    166:             "Would you like me to elaborate?"
    167:         )
    168:
>>> 169:     def _keyword_response(self, prompt: str) -> str:
    170:         """Fallback keyword-based responses."""
    171:         prompt_lower = prompt.lower()
    172:


GOD_METHOD: Method '__init__' is too complex: 2 complexity, 62 lines, 0 max nesting
File: packages\edge\legacy_src\digital_twin\engine\personalized_tutor.py:93:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     90: class PersonalizedTutorEngine:
     91:     """Advanced personalized tutoring engine with real-time adaptation."""
     92:
>>>  93:     def __init__(self, project_name: str = "aivillage-personalized-tutor") -> None:
     94:         self.project_name = project_name
     95:         self.active_sessions = {}  # session_id -> TutoringSession
     96:         self.tutoring_strategies = {}  # strategy_id -> TutoringStrategy


GOD_METHOD: Method '_update_engagement_score' is too complex: 8 complexity, 38 lines, 7 max nesting
File: packages\edge\legacy_src\digital_twin\engine\personalized_tutor.py:735:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    732:
    733:         return analysis
    734:
>>> 735:     def _update_engagement_score(self, session: TutoringSession, analysis: dict[str, Any]) -> float:
    736:         """Update engagement score based on response analysis."""
    737:         current_engagement = session.engagement_score
    738:         learning_rate = 0.2


GOD_METHOD: Method '_select_interaction_type' is too complex: 9 complexity, 40 lines, 7 max nesting
File: packages\edge\legacy_src\digital_twin\engine\personalized_tutor.py:883:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    880:
    881:         return interaction
    882:
>>> 883:     def _select_interaction_type(
    884:         self,
    885:         strategy: TutoringStrategy,
    886:         analysis: dict[str, Any],


GOD_METHOD: Method 'get_tutor_analytics' is too complex: 2 complexity, 52 lines, 1 max nesting
File: packages\edge\legacy_src\digital_twin\engine\personalized_tutor.py:1215:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    1212:
    1213:         logger.info(f"Updated adaptations for student {student_id[:8]}")
    1214:
>>> 1215:     def get_tutor_analytics(self) -> dict[str, Any]:
    1216:         """Get comprehensive tutoring analytics."""
    1217:         total_sessions = len(self.session_analytics)
    1218:         active_sessions = len(self.active_sessions)


GOD_METHOD: Method 'init_database' is too complex: 2 complexity, 112 lines, 0 max nesting
File: packages\edge\legacy_src\digital_twin\monitoring\parent_tracker.py:190:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    187:         except Exception as e:
    188:             logger.exception("Failed to initialize W&B tracking: %s", e)
    189:
>>> 190:     def init_database(self) -> None:
    191:         """Initialize database for parent tracking data."""
    192:         try:
    193:             conn = sqlite3.connect(self.db_path)


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\edge\legacy_src\digital_twin\monitoring\parent_tracker.py:197:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    194:             cursor = conn.cursor()
    195:
    196:             # Progress milestones table
>>> 197:             cursor.execute(
    198:                 """
    199:                 CREATE TABLE IF NOT EXISTS progress_milestones (
    200:                     milestone_id TEXT PRIMARY KEY,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\edge\legacy_src\digital_twin\monitoring\parent_tracker.py:219:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    216:             )
    217:
    218:             # Learning alerts table
>>> 219:             cursor.execute(
    220:                 """
    221:                 CREATE TABLE IF NOT EXISTS learning_alerts (
    222:                     alert_id TEXT PRIMARY KEY,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\edge\legacy_src\digital_twin\monitoring\parent_tracker.py:240:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    237:             )
    238:
    239:             # Weekly reports table
>>> 240:             cursor.execute(
    241:                 """
    242:                 CREATE TABLE IF NOT EXISTS weekly_reports (
    243:                     report_id TEXT PRIMARY KEY,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\edge\legacy_src\digital_twin\monitoring\parent_tracker.py:254:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    251:             )
    252:
    253:             # Parent insights table
>>> 254:             cursor.execute(
    255:                 """
    256:                 CREATE TABLE IF NOT EXISTS parent_insights (
    257:                     insight_id TEXT PRIMARY KEY,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\edge\legacy_src\digital_twin\monitoring\parent_tracker.py:273:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    270:             )
    271:
    272:             # Parent settings table
>>> 273:             cursor.execute(
    274:                 """
    275:                 CREATE TABLE IF NOT EXISTS parent_settings (
    276:                     student_id TEXT PRIMARY KEY,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\edge\legacy_src\digital_twin\monitoring\parent_tracker.py:290:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    287:             )
    288:
    289:             # Create indexes
>>> 290:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_milestones_student " "ON progress_milestones(student_id)")
    291:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_alerts_student " "ON learning_alerts(student_id)")
    292:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_reports_student " "ON weekly_reports(student_id)")
    293:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_insights_student " "ON parent_insights(student_id)")


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\edge\legacy_src\digital_twin\monitoring\parent_tracker.py:291:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    288:
    289:             # Create indexes
    290:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_milestones_student " "ON progress_milestones(student_id)")
>>> 291:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_alerts_student " "ON learning_alerts(student_id)")
    292:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_reports_student " "ON weekly_reports(student_id)")
    293:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_insights_student " "ON parent_insights(student_id)")
    294:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_alerts_created " "ON learning_alerts(created_at)")


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\edge\legacy_src\digital_twin\monitoring\parent_tracker.py:292:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    289:             # Create indexes
    290:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_milestones_student " "ON progress_milestones(student_id)")
    291:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_alerts_student " "ON learning_alerts(student_id)")
>>> 292:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_reports_student " "ON weekly_reports(student_id)")
    293:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_insights_student " "ON parent_insights(student_id)")
    294:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_alerts_created " "ON learning_alerts(created_at)")
    295:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\edge\legacy_src\digital_twin\monitoring\parent_tracker.py:293:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    290:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_milestones_student " "ON progress_milestones(student_id)")
    291:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_alerts_student " "ON learning_alerts(student_id)")
    292:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_reports_student " "ON weekly_reports(student_id)")
>>> 293:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_insights_student " "ON parent_insights(student_id)")
    294:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_alerts_created " "ON learning_alerts(created_at)")
    295:
    296:             conn.commit()


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\edge\legacy_src\digital_twin\monitoring\parent_tracker.py:294:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    291:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_alerts_student " "ON learning_alerts(student_id)")
    292:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_reports_student " "ON weekly_reports(student_id)")
    293:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_insights_student " "ON parent_insights(student_id)")
>>> 294:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_alerts_created " "ON learning_alerts(created_at)")
    295:
    296:             conn.commit()
    297:             conn.close()


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\edge\legacy_src\digital_twin\monitoring\parent_tracker.py:296:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    293:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_insights_student " "ON parent_insights(student_id)")
    294:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_alerts_created " "ON learning_alerts(created_at)")
    295:
>>> 296:             conn.commit()
    297:             conn.close()
    298:
    299:             logger.info("Parent tracker database initialized")


GOD_METHOD: Method '_analyze_performance_areas' is too complex: 9 complexity, 29 lines, 8 max nesting
File: packages\edge\legacy_src\digital_twin\monitoring\parent_tracker.py:1101:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    1098:
    1099:         return achievements
    1100:
>>> 1101:     def _analyze_performance_areas(self, sessions: list[dict[str, Any]]) -> tuple[list[str], list[str]]:
    1102:         """Analyze performance to identify strengths and improvement areas."""
    1103:         if not sessions:
    1104:             return [], []


GOD_METHOD: Method '_generate_focus_recommendations' is too complex: 12 complexity, 42 lines, 10 max nesting
File: packages\edge\legacy_src\digital_twin\monitoring\parent_tracker.py:1132:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    1129:
    1130:         return strengths, improvements
    1131:
>>> 1132:     def _generate_focus_recommendations(
    1133:         self,
    1134:         student_id: str,
    1135:         sessions: list[dict[str, Any]],


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\edge\legacy_src\digital_twin\monitoring\parent_tracker.py:1290:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    1287:             conn = sqlite3.connect(self.db_path)
    1288:             cursor = conn.cursor()
    1289:
>>> 1290:             cursor.execute(
    1291:                 """
    1292:                 INSERT OR REPLACE INTO progress_milestones
    1293:                 VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\edge\legacy_src\digital_twin\monitoring\parent_tracker.py:1313:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    1310:                 ),
    1311:             )
    1312:
>>> 1313:             conn.commit()
    1314:             conn.close()
    1315:
    1316:         except Exception as e:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\edge\legacy_src\digital_twin\monitoring\parent_tracker.py:1325:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    1322:             conn = sqlite3.connect(self.db_path)
    1323:             cursor = conn.cursor()
    1324:
>>> 1325:             cursor.execute(
    1326:                 """
    1327:                 INSERT INTO learning_alerts VALUES
    1328:                 (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\edge\legacy_src\digital_twin\monitoring\parent_tracker.py:1347:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    1344:                 ),
    1345:             )
    1346:
>>> 1347:             conn.commit()
    1348:             conn.close()
    1349:
    1350:         except Exception as e:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\edge\legacy_src\digital_twin\monitoring\parent_tracker.py:1359:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    1356:             conn = sqlite3.connect(self.db_path)
    1357:             cursor = conn.cursor()
    1358:
>>> 1359:             cursor.execute(
    1360:                 """
    1361:                 INSERT INTO weekly_reports VALUES (?, ?, ?, ?, ?, ?)
    1362:             """,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\edge\legacy_src\digital_twin\monitoring\parent_tracker.py:1373:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    1370:                 ),
    1371:             )
    1372:
>>> 1373:             conn.commit()
    1374:             conn.close()
    1375:
    1376:         except Exception as e:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\edge\legacy_src\digital_twin\monitoring\parent_tracker.py:1385:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    1382:             conn = sqlite3.connect(self.db_path)
    1383:             cursor = conn.cursor()
    1384:
>>> 1385:             cursor.execute(
    1386:                 """
    1387:                 INSERT INTO parent_insights VALUES
    1388:                 (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\edge\legacy_src\digital_twin\monitoring\parent_tracker.py:1405:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    1402:                 ),
    1403:             )
    1404:
>>> 1405:             conn.commit()
    1406:             conn.close()
    1407:
    1408:         except Exception as e:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\edge\legacy_src\digital_twin\monitoring\parent_tracker.py:1417:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    1414:             conn = sqlite3.connect(self.db_path)
    1415:             cursor = conn.cursor()
    1416:
>>> 1417:             cursor.execute(
    1418:                 """
    1419:                 INSERT OR REPLACE INTO parent_settings VALUES
    1420:                 (?, ?, ?, ?, ?, ?, ?, ?, ?)


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\edge\legacy_src\digital_twin\monitoring\parent_tracker.py:1435:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    1432:                 ),
    1433:             )
    1434:
>>> 1435:             conn.commit()
    1436:             conn.close()
    1437:
    1438:         except Exception as e:


GOD_METHOD: Method 'get_parent_dashboard_data' is too complex: 4 complexity, 58 lines, 1 max nesting
File: packages\edge\legacy_src\digital_twin\monitoring\parent_tracker.py:1441:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    1438:         except Exception as e:
    1439:             logger.exception("Failed to save parent settings: %s", e)
    1440:
>>> 1441:     def get_parent_dashboard_data(self, student_id: str) -> dict[str, Any]:
    1442:         """Get comprehensive dashboard data for parents."""
    1443:         # Get recent alerts
    1444:         recent_alerts = [asdict(alert) for alert in self.parent_alerts[student_id][-10:]]


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_get_concepts_mastered_this_week'
File: packages\edge\legacy_src\digital_twin\monitoring\parent_tracker.py:1076:4
Recommendation: Extract common code into a shared function or utility
Code context:
    1073:         # This would integrate with actual session data
    1074:         return []
    1075:
>>> 1076:     def _get_concepts_mastered_this_week(self, student_id: str, week_start: datetime, week_end: datetime) -> list[str]:
    1077:         """Get concepts that were mastered this week."""
    1078:         mastered = []
    1079:


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_get_achievements_this_week'
File: packages\edge\legacy_src\digital_twin\monitoring\parent_tracker.py:1088:4
Recommendation: Extract common code into a shared function or utility
Code context:
    1085:
    1086:         return mastered
    1087:
>>> 1088:     def _get_achievements_this_week(self, student_id: str, week_start: datetime, week_end: datetime) -> list[str]:
    1089:         """Get achievements earned this week."""
    1090:         achievements = []
    1091:


GOD_METHOD: Method '__init__' is too complex: 2 complexity, 52 lines, 0 max nesting
File: packages\edge\legacy_src\digital_twin\security\secure_preference_vault.py:75:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     72: class SecurePreferenceVault:
     73:     """Ultra-secure preference storage with military-grade encryption."""
     74:
>>>  75:     def __init__(self, project_name: str = "aivillage-security") -> None:
     76:         self.project_name = project_name
     77:         self.vault_path = Path("vault")
     78:         self.vault_path.mkdir(exist_ok=True)


GOD_METHOD: Method 'init_secure_database' is too complex: 2 complexity, 90 lines, 0 max nesting
File: packages\edge\legacy_src\digital_twin\security\secure_preference_vault.py:231:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    228:
    229:         return private_key, public_key
    230:
>>> 231:     def init_secure_database(self) -> None:
    232:         """Initialize encrypted SQLite database."""
    233:         try:
    234:             # Enable encryption at database level (if supported)


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\edge\legacy_src\digital_twin\security\secure_preference_vault.py:239:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    236:             cursor = conn.cursor()
    237:
    238:             # Preferences table
>>> 239:             cursor.execute(
    240:                 """
    241:                 CREATE TABLE IF NOT EXISTS secure_preferences (
    242:                     preference_id TEXT PRIMARY KEY,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\edge\legacy_src\digital_twin\security\secure_preference_vault.py:259:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    256:             )
    257:
    258:             # Access tokens table
>>> 259:             cursor.execute(
    260:                 """
    261:                 CREATE TABLE IF NOT EXISTS access_tokens (
    262:                     token_id TEXT PRIMARY KEY,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\edge\legacy_src\digital_twin\security\secure_preference_vault.py:275:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    272:             )
    273:
    274:             # Audit logs table
>>> 275:             cursor.execute(
    276:                 """
    277:                 CREATE TABLE IF NOT EXISTS vault_audit_logs (
    278:                     log_id TEXT PRIMARY KEY,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\edge\legacy_src\digital_twin\security\secure_preference_vault.py:293:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    290:             )
    291:
    292:             # Security events table
>>> 293:             cursor.execute(
    294:                 """
    295:                 CREATE TABLE IF NOT EXISTS security_events (
    296:                     event_id TEXT PRIMARY KEY,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\edge\legacy_src\digital_twin\security\secure_preference_vault.py:310:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    307:             )
    308:
    309:             # Create indexes for performance
>>> 310:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_prefs_student ON secure_preferences(student_id)")
    311:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_tokens_student ON access_tokens(student_id)")
    312:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_audit_student ON vault_audit_logs(student_id)")
    313:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_audit_timestamp ON vault_audit_logs(timestamp)")


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\edge\legacy_src\digital_twin\security\secure_preference_vault.py:311:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    308:
    309:             # Create indexes for performance
    310:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_prefs_student ON secure_preferences(student_id)")
>>> 311:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_tokens_student ON access_tokens(student_id)")
    312:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_audit_student ON vault_audit_logs(student_id)")
    313:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_audit_timestamp ON vault_audit_logs(timestamp)")
    314:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\edge\legacy_src\digital_twin\security\secure_preference_vault.py:312:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    309:             # Create indexes for performance
    310:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_prefs_student ON secure_preferences(student_id)")
    311:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_tokens_student ON access_tokens(student_id)")
>>> 312:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_audit_student ON vault_audit_logs(student_id)")
    313:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_audit_timestamp ON vault_audit_logs(timestamp)")
    314:
    315:             conn.commit()


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\edge\legacy_src\digital_twin\security\secure_preference_vault.py:313:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    310:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_prefs_student ON secure_preferences(student_id)")
    311:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_tokens_student ON access_tokens(student_id)")
    312:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_audit_student ON vault_audit_logs(student_id)")
>>> 313:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_audit_timestamp ON vault_audit_logs(timestamp)")
    314:
    315:             conn.commit()
    316:             conn.close()


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\edge\legacy_src\digital_twin\security\secure_preference_vault.py:315:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    312:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_audit_student ON vault_audit_logs(student_id)")
    313:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_audit_timestamp ON vault_audit_logs(timestamp)")
    314:
>>> 315:             conn.commit()
    316:             conn.close()
    317:
    318:             logger.info("Secure vault database initialized")


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\edge\legacy_src\digital_twin\security\secure_preference_vault.py:653:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    650:             # Remove from database
    651:             conn = sqlite3.connect(str(self.db_path))
    652:             cursor = conn.cursor()
>>> 653:             cursor.execute(
    654:                 "DELETE FROM secure_preferences WHERE preference_id = ?",
    655:                 (preference_id,),
    656:             )


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\edge\legacy_src\digital_twin\security\secure_preference_vault.py:657:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    654:                 "DELETE FROM secure_preferences WHERE preference_id = ?",
    655:                 (preference_id,),
    656:             )
>>> 657:             conn.commit()
    658:             conn.close()
    659:
    660:             # Audit log


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\edge\legacy_src\digital_twin\security\secure_preference_vault.py:909:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    906:             conn = sqlite3.connect(str(self.db_path))
    907:             cursor = conn.cursor()
    908:
>>> 909:             cursor.execute(
    910:                 """
    911:                 INSERT OR REPLACE INTO secure_preferences
    912:                 (preference_id, student_id, category, key_name, encrypted_data, value_type,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\edge\legacy_src\digital_twin\security\secure_preference_vault.py:932:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    929:                 ),
    930:             )
    931:
>>> 932:             conn.commit()
    933:             conn.close()
    934:
    935:         except Exception as e:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\edge\legacy_src\digital_twin\security\secure_preference_vault.py:952:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    949:             conn = sqlite3.connect(str(self.db_path))
    950:             cursor = conn.cursor()
    951:
>>> 952:             cursor.execute(
    953:                 """
    954:                 INSERT OR REPLACE INTO access_tokens
    955:                 (token_id, student_id, encrypted_permissions, issued_at, expires_at, issuer, revoked, checksum)


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\edge\legacy_src\digital_twin\security\secure_preference_vault.py:970:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    967:                 ),
    968:             )
    969:
>>> 970:             conn.commit()
    971:             conn.close()
    972:
    973:         except Exception as e:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\edge\legacy_src\digital_twin\security\secure_preference_vault.py:990:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    987:             conn = sqlite3.connect(str(self.db_path))
    988:             cursor = conn.cursor()
    989:
>>> 990:             cursor.execute(
    991:                 """
    992:                 INSERT INTO vault_audit_logs
    993:                 (log_id, student_id, action, preference_id, accessor, timestamp, ip_address, success, encrypted_details, checksum)


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\edge\legacy_src\digital_twin\security\secure_preference_vault.py:1010:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    1007:                 ),
    1008:             )
    1009:
>>> 1010:             conn.commit()
    1011:             conn.close()
    1012:
    1013:         except Exception as e:


GOD_METHOD: Method '__init__' is too complex: 2 complexity, 60 lines, 0 max nesting
File: packages\edge\legacy_src\digital_twin\security\shield_validator.py:102:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     99: class ShieldValidator:
    100:     """Comprehensive AI safety and content validation system."""
    101:
>>> 102:     def __init__(self, project_name: str = "aivillage-shield") -> None:
    103:         self.project_name = project_name
    104:         self.validation_rules = {}
    105:         self.validation_history = []


GOD_METHOD: Method 'init_database' is too complex: 2 complexity, 68 lines, 0 max nesting
File: packages\edge\legacy_src\digital_twin\security\shield_validator.py:191:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    188:         except Exception as e:
    189:             logger.exception(f"Failed to initialize W&B tracking: {e}")
    190:
>>> 191:     def init_database(self) -> None:
    192:         """Initialize database for validation logs."""
    193:         try:
    194:             conn = sqlite3.connect(self.db_path)


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\edge\legacy_src\digital_twin\security\shield_validator.py:198:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    195:             cursor = conn.cursor()
    196:
    197:             # Validation results table
>>> 198:             cursor.execute(
    199:                 """
    200:                 CREATE TABLE IF NOT EXISTS validation_results (
    201:                     validation_id TEXT PRIMARY KEY,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\edge\legacy_src\digital_twin\security\shield_validator.py:219:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    216:             )
    217:
    218:             # Validation rules table
>>> 219:             cursor.execute(
    220:                 """
    221:                 CREATE TABLE IF NOT EXISTS validation_rules (
    222:                     rule_id TEXT PRIMARY KEY,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\edge\legacy_src\digital_twin\security\shield_validator.py:235:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    232:             )
    233:
    234:             # Shield metrics table
>>> 235:             cursor.execute(
    236:                 """
    237:                 CREATE TABLE IF NOT EXISTS shield_metrics (
    238:                     metric_date TEXT PRIMARY KEY,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\edge\legacy_src\digital_twin\security\shield_validator.py:249:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    246:             )
    247:
    248:             # Create indexes
>>> 249:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_validation_student ON validation_results(student_id)")
    250:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_validation_timestamp ON validation_results(timestamp)")
    251:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_validation_passed ON validation_results(passed)")
    252:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\edge\legacy_src\digital_twin\security\shield_validator.py:250:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    247:
    248:             # Create indexes
    249:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_validation_student ON validation_results(student_id)")
>>> 250:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_validation_timestamp ON validation_results(timestamp)")
    251:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_validation_passed ON validation_results(passed)")
    252:
    253:             conn.commit()


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\edge\legacy_src\digital_twin\security\shield_validator.py:251:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    248:             # Create indexes
    249:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_validation_student ON validation_results(student_id)")
    250:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_validation_timestamp ON validation_results(timestamp)")
>>> 251:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_validation_passed ON validation_results(passed)")
    252:
    253:             conn.commit()
    254:             conn.close()


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\edge\legacy_src\digital_twin\security\shield_validator.py:253:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    250:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_validation_timestamp ON validation_results(timestamp)")
    251:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_validation_passed ON validation_results(passed)")
    252:
>>> 253:             conn.commit()
    254:             conn.close()
    255:
    256:             logger.info("Shield validation database initialized")


GOD_METHOD: Method '_generate_recommendations' is too complex: 9 complexity, 39 lines, 8 max nesting
File: packages\edge\legacy_src\digital_twin\security\shield_validator.py:988:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    985:
    986:         return max(0.0, technical_score)
    987:
>>> 988:     def _generate_recommendations(
    989:         self,
    990:         violations: list,
    991:         warnings: list,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\edge\legacy_src\digital_twin\security\shield_validator.py:1035:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    1032:             conn = sqlite3.connect(self.db_path)
    1033:             cursor = conn.cursor()
    1034:
>>> 1035:             cursor.execute(
    1036:                 """
    1037:                 INSERT INTO validation_results
    1038:                 (validation_id, content_hash, student_id, content_type, timestamp, passed,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\edge\legacy_src\digital_twin\security\shield_validator.py:1060:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    1057:                 ),
    1058:             )
    1059:
>>> 1060:             conn.commit()
    1061:             conn.close()
    1062:
    1063:         except Exception as e:


GOD_METHOD: Method '_update_metrics' is too complex: 6 complexity, 26 lines, 5 max nesting
File: packages\edge\legacy_src\digital_twin\security\shield_validator.py:1066:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    1063:         except Exception as e:
    1064:             logger.exception(f"Failed to save validation result: {e}")
    1065:
>>> 1066:     def _update_metrics(self, result: ValidationResult) -> None:
    1067:         """Update shield metrics."""
    1068:         self.metrics.total_validations += 1
    1069:


GOD_METHOD: Method '__init__' is too complex: 2 complexity, 65 lines, 0 max nesting
File: packages\edge\legacy_src\federation\core\federation_manager.py:47:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     44:     - Intelligent load balancing
     45:     """
     46:
>>>  47:     def __init__(
     48:         self,
     49:         device_id: str = None,
     50:         region: str = "unknown",


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\edge\legacy_src\federation\core\federation_manager.py:357:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    354:         status = self.device_registry.get_federation_status()
    355:
    356:         # Add federation-specific information
>>> 357:         status.update(
    358:             {
    359:                 "federation_role": self.federation_role.value if self.federation_role else None,
    360:                 "privacy_tunnels": len(self.active_tunnels),


GOD_METHOD: Method 'reassemble_from_fragments' is too complex: 6 complexity, 32 lines, 5 max nesting
File: packages\edge\legacy_src\federation\protocols\bitchat_enhanced.py:315:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    312:         return fragments
    313:
    314:     @classmethod
>>> 315:     def reassemble_from_fragments(cls, fragments: list[BitChatFragment]) -> Optional["EnhancedBitChatMessage"]:
    316:         """Reassemble message from fragments"""
    317:         if not fragments:
    318:             return None


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\edge\legacy_src\federation\protocols\bitchat_enhanced.py:582:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    579:         """Get enhanced BitChat status"""
    580:         base_status = self.get_status()
    581:
>>> 582:         base_status.update(
    583:             {
    584:                 "crypto_enabled": self.enable_crypto,
    585:                 "peer_keys_exchanged": len(self.peer_keys),


GOD_METHOD: Method 'reassemble_from_fragments' is too complex: 7 complexity, 33 lines, 6 max nesting
File: packages\edge\legacy_src\federation\protocols\enhanced_bitchat.py:329:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    326:         return fragments
    327:
    328:     @classmethod
>>> 329:     def reassemble_from_fragments(cls, fragments: list[BitChatFragment]) -> Optional["BitChatMessage"]:
    330:         """Reassemble message from fragments"""
    331:         if not fragments:
    332:             return None


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'from_bytes'
File: packages\edge\legacy_src\federation\protocols\enhanced_bitchat.py:119:4
Recommendation: Extract common code into a shared function or utility
Code context:
    116:         return header + self.data
    117:
    118:     @classmethod
>>> 119:     def from_bytes(cls, data: bytes) -> "BitChatFragment":
    120:         """Deserialize fragment from bytes"""
    121:         header = struct.unpack("!16sHHI", data[:24])
    122:         fragment_id = header[0].rstrip(b"\x00").decode()


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'get_status'
File: packages\edge\legacy_src\federation\protocols\enhanced_bitchat.py:684:4
Recommendation: Extract common code into a shared function or utility
Code context:
    681:             return self.channels[channel_name].members.copy()
    682:         return set()
    683:
>>> 684:     def get_status(self) -> dict[str, Any]:
    685:         """Get transport status"""
    686:         self.stats["cache_size"] = sum(len(msgs) for msgs in self.store_forward_cache.values())
    687:         self.stats["active_channels"] = len(self.joined_channels)


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\execution\security\sandbox_isolation.py:673:27
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    670:             raise ValueError(f"Sandbox not found: {sandbox_id}")
    671:
    672:         try:
>>> 673:             result = await sandbox.execute(executable, args, env, input_data, job_id)
    674:             return result
    675:         finally:
    676:             # Remove sandbox after execution


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\fog\bridges\betanet_integration.py:32:4
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     29:     import sys
     30:
     31:     betanet_path = Path(__file__).parent.parent.parent / "p2p" / "betanet-bounty" / "python"
>>>  32:     sys.path.insert(0, str(betanet_path))
     33:
     34:     from covert_channels import HTTP3CovertChannel, HTTPCovertChannel, WebSocketCovertChannel
     35:     from mixnet_privacy import PrivacyMode, VRFMixnetRouter


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\fog\bridges\betanet_integration.py:273:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    270:     def get_transport_stats(self) -> Dict[str, Any]:
    271:         """Get transport statistics for monitoring"""
    272:         stats = self.stats.copy()
>>> 273:         stats.update(
    274:             {
    275:                 "betanet_available": BETANET_AVAILABLE,
    276:                 "privacy_mode": self.privacy_mode,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\fog\bridges\betanet_integration.py:407:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    404:         }
    405:
    406:         if self.transport:
>>> 407:             base_stats.update(self.transport.get_transport_stats())
    408:
    409:         return base_stats
    410:


GOD_METHOD: Method '_map_device_type' is too complex: 6 complexity, 20 lines, 5 max nesting
File: packages\fog\edge\aivillage_integration.py:308:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    305:         except Exception as e:
    306:             logger.error(f"Failed to setup P2P integration: {e}")
    307:
>>> 308:     def _map_device_type(self) -> FogDeviceType:
    309:         """Map AIVillage device type to fog device type"""
    310:
    311:         # Try to detect device type


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\fog\edge\aivillage_integration.py:403:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    400:         status = {}
    401:
    402:         if self.fog_edge_node:
>>> 403:             status.update(self.fog_edge_node.get_node_status())
    404:
    405:         # Add AIVillage infrastructure status if available
    406:         if self.use_existing_infrastructure:


GOD_METHOD: Method '__init__' is too complex: 1 complexity, 52 lines, 0 max nesting
File: packages\fog\edge\beacon.py:150:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    147:     Acts as the sensory layer that feeds information to the autonomic control layer.
    148:     """
    149:
>>> 150:     def __init__(
    151:         self,
    152:         device_name: str,
    153:         operator_namespace: str,


GOD_METHOD: Method '__init__' is too complex: 1 complexity, 61 lines, 0 max nesting
File: packages\fog\edge\fabric.py:81:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     78:     - Communicates with fog gateway via BetaNet
     79:     """
     80:
>>>  81:     def __init__(
     82:         self,
     83:         device_name: str,
     84:         operator_namespace: str,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\fog\edge\fabric.py:258:27
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    255:             job_status.status = "running"
    256:
    257:             # Execute job using execution fabric
>>> 258:             result = await self.execution_fabric.execute(
    259:                 runtime_type=job_request.runtime_type,
    260:                 payload=job_request.payload,
    261:                 args=job_request.args,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\fog\edge\fabric.py:333:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    330:
    331:         # Add capability information
    332:         capability = self.beacon.get_capability()
>>> 333:         node_info.update(
    334:             {
    335:                 "capabilities": {
    336:                     "cpu_cores": capability.cpu_cores,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\fog\edge\fabric.py:349:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    346:         # Add monitoring information
    347:         if self.monitor:
    348:             monitor_status = self.monitor.get_current_status()
>>> 349:             node_info.update(
    350:                 {
    351:                     "health": {
    352:                         "health_status": monitor_status["health_status"],


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\fog\edge\fabric.py:451:20
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    448:
    449:                 if self.monitor:
    450:                     status = self.monitor.get_current_status()
>>> 451:                     heartbeat_data.update(
    452:                         {
    453:                             "cpu_utilization": status["cpu_percent"],
    454:                             "memory_utilization": status["memory_percent"],


GOD_METHOD: Method 'is_suitable_for_workload' is too complex: 12 complexity, 54 lines, 10 max nesting
File: packages\fog\edge\monitor.py:584:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    581:         """Get device performance profile"""
    582:         return self.performance_profile
    583:
>>> 584:     def is_suitable_for_workload(
    585:         self, cpu_requirement: float, memory_mb: int, duration_s: int
    586:     ) -> tuple[bool, list[str]]:
    587:         """


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\fog\edge\runner.py:294:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    291:
    292:         # Prepare environment
    293:         process_env = os.environ.copy()
>>> 294:         process_env.update(env)
    295:
    296:         # Start process
    297:         proc = await asyncio.create_subprocess_exec(


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\fog\edge\runner.py:833:25
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    830:         """
    831:
    832:         if runtime_type == RuntimeType.WASI:
>>> 833:             return await self.wasi_runner.execute(payload, args, env, resources)
    834:
    835:         elif runtime_type == RuntimeType.MICROVM:
    836:             # For MicroVM, payload should contain both kernel and rootfs


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\fog\edge\runner.py:839:25
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    836:             # For MicroVM, payload should contain both kernel and rootfs
    837:             # This is a simplified interface - real implementation would
    838:             # need separate kernel and rootfs parameters
>>> 839:             return await self.microvm_runner.execute(payload, b"", args, env, resources)  # Simplified
    840:
    841:         elif runtime_type == RuntimeType.NATIVE:
    842:             # Native execution is dangerous and should be heavily restricted


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '__init__'
File: packages\fog\edge\runner.py:105:4
Recommendation: Extract common code into a shared function or utility
Code context:
    102:     - Capability-based security
    103:     """
    104:
>>> 105:     def __init__(self, wasmtime_path: str = "wasmtime", default_timeout: float = 300.0, temp_dir: str | None = None):
    106:         """
    107:         Initialize WASI runner
    108:


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '__init__'
File: packages\fog\edge\runner.py:441:4
Recommendation: Extract common code into a shared function or utility
Code context:
    438:     Used for workloads requiring kernel-level isolation or specific OS features.
    439:     """
    440:
>>> 441:     def __init__(
    442:         self, firecracker_path: str = "firecracker", default_timeout: float = 300.0, temp_dir: str | None = None
    443:     ):
    444:         """


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_check_resource_violations'
File: packages\fog\edge\runner.py:401:4
Recommendation: Extract common code into a shared function or utility
Code context:
    398:         except Exception as e:
    399:             logger.warning(f"Failed to cleanup sandbox {sandbox_dir}: {e}")
    400:
>>> 401:     def _check_resource_violations(self, result: ExecutionResult, resources: ExecutionResources) -> list[str]:
    402:         """Check for resource limit violations"""
    403:
    404:         violations = []


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_check_resource_violations'
File: packages\fog\edge\runner.py:722:4
Recommendation: Extract common code into a shared function or utility
Code context:
    719:         except Exception as e:
    720:             logger.warning(f"Failed to cleanup MicroVM dir {vm_dir}: {e}")
    721:
>>> 722:     def _check_resource_violations(self, result: ExecutionResult, resources: ExecutionResources) -> list[str]:
    723:         """Check for resource limit violations"""
    724:
    725:         violations = []


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\fog\examples\edge_integration_example.py:157:31
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    154:             beacon.update_job_count(1)
    155:
    156:             try:
>>> 157:                 result = await execution_fabric.execute(
    158:                     runtime_type=RuntimeType.WASI,
    159:                     payload=wasm_module,
    160:                     args=["hello", "world"],


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\fog\examples\edge_integration_example.py:321:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    318:     tasks = []
    319:     for i in range(3):
    320:         task = asyncio.create_task(
>>> 321:             execution_fabric.execute(
    322:                 runtime_type=RuntimeType.WASI,
    323:                 payload=stress_wasm,
    324:                 args=[f"worker-{i}"],


GOD_METHOD: Method '_setup_routes' is too complex: 16 complexity, 281 lines, 12 max nesting
File: packages\fog\gateway\api\admin.py:356:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    353:         self._startup_time = time.time()
    354:         self._setup_routes()
    355:
>>> 356:     def _setup_routes(self):
    357:         """Setup API routes"""
    358:
    359:         @self.router.post(


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\fog\gateway\api\admin.py:482:9
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    479:
    480:             return node.to_response()
    481:
>>> 482:         @self.router.delete(
    483:             "/nodes/{node_id}", summary="Deregister node", description="Deregister fog node and drain workloads"
    484:         )
    485:         async def deregister_node(


GOD_METHOD: Method '_calculate_trust_score' is too complex: 9 complexity, 24 lines, 8 max nesting
File: packages\fog\gateway\api\admin.py:639:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    636:                     detail=f"Failed to get performance metrics: {str(e)}",
    637:                 )
    638:
>>> 639:     def _calculate_trust_score(self, node: FogNode) -> float:
    640:         """Calculate initial trust score for node"""
    641:
    642:         score = 0.0


GOD_METHOD: Method '_calculate_job_cost' is too complex: 4 complexity, 51 lines, 3 max nesting
File: packages\fog\gateway\api\billing.py:275:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    272:             pricing_tier_breakdown=pricing_tier_breakdown,
    273:         )
    274:
>>> 275:     def _calculate_job_cost(
    276:         self,
    277:         cpu_cores: float,
    278:         memory_gb: float,


GOD_METHOD: Method '_setup_routes' is too complex: 10 complexity, 157 lines, 6 max nesting
File: packages\fog\gateway\api\jobs.py:230:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    227:         self._jobs: dict[str, FogJob] = {}  # In-memory storage for now
    228:         self._setup_routes()
    229:
>>> 230:     def _setup_routes(self):
    231:         """Setup API routes"""
    232:
    233:         @self.router.post(


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\fog\gateway\api\jobs.py:333:9
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    330:                 "follow": follow,
    331:             }
    332:
>>> 333:         @self.router.delete("/{job_id}", summary="Cancel job", description="Cancel a running or queued job")
    334:         async def cancel_job(
    335:             job_id: str,
    336:             # TODO: Add RBAC dependency


GOD_METHOD: Method '_setup_routes' is too complex: 12 complexity, 179 lines, 9 max nesting
File: packages\fog\gateway\api\sandboxes.py:204:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    201:         self._sandboxes: dict[str, FogSandbox] = {}  # In-memory storage for now
    202:         self._setup_routes()
    203:
>>> 204:     def _setup_routes(self):
    205:         """Setup API routes"""
    206:
    207:         @self.router.post(


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\fog\gateway\api\sandboxes.py:329:9
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    326:                 execution_id=execution_id, exit_code=exit_code, stdout=stdout, stderr="", duration_ms=45.2
    327:             )
    328:
>>> 329:         @self.router.delete(
    330:             "/{sandbox_id}", summary="Delete sandbox", description="Terminate and delete sandbox environment"
    331:         )
    332:         async def delete_sandbox(


GOD_METHOD: Method '_setup_routes' is too complex: 12 complexity, 175 lines, 11 max nesting
File: packages\fog\gateway\api\usage.py:159:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    156:         self._mock_quotas: dict[str, NamespaceQuota] = {}
    157:         self._current_pricing = PricingInfo(effective_date=datetime.now(UTC))
    158:
>>> 159:     def _setup_routes(self):
    160:         """Setup API routes"""
    161:
    162:         @self.router.get(


GOD_METHOD: Method '_init_metrics' is too complex: 1 complexity, 74 lines, 0 max nesting
File: packages\fog\gateway\monitoring\metrics.py:87:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     84:         self._job_queue_counts: dict[str, int] = defaultdict(int)
     85:         self._running_job_counts: dict[RuntimeType, int] = defaultdict(int)
     86:
>>>  87:     def _init_metrics(self):
     88:         """Initialize all Prometheus metrics"""
     89:
     90:         # fog_jobs_queued_total{namespace}


GOD_METHOD: Method 'optimize' is too complex: 7 complexity, 76 lines, 6 max nesting
File: packages\fog\gateway\scheduler\placement.py:261:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    258:         # Performance tracking
    259:         self.optimization_history: list[dict[str, Any]] = []
    260:
>>> 261:     def optimize(
    262:         self, jobs: list[JobRequest], nodes: list[FogNode], strategy: PlacementStrategy = PlacementStrategy.NSGA_II
    263:     ) -> PlacementSolution:
    264:         """


GOD_METHOD: Method '_simple_placement' is too complex: 16 complexity, 61 lines, 15 max nesting
File: packages\fog\gateway\scheduler\placement.py:339:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    336:
    337:         return best_solution
    338:
>>> 339:     def _simple_placement(
    340:         self, jobs: list[JobRequest], nodes: list[FogNode], strategy: PlacementStrategy
    341:     ) -> PlacementSolution:
    342:         """Implement simple placement strategies as fallback"""


GOD_METHOD: Method '_evaluate_solution' is too complex: 10 complexity, 84 lines, 7 max nesting
File: packages\fog\gateway\scheduler\placement.py:446:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    443:
    444:         return population
    445:
>>> 446:     def _evaluate_solution(self, solution: PlacementSolution, jobs: list[JobRequest], nodes: list[FogNode]):
    447:         """Evaluate solution objectives"""
    448:
    449:         if not solution.feasible:


GOD_METHOD: Method '_non_dominated_sort' is too complex: 12 complexity, 40 lines, 11 max nesting
File: packages\fog\gateway\scheduler\placement.py:573:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    570:
    571:         return round(marketplace_price, 4)
    572:
>>> 573:     def _non_dominated_sort(self, population: list[PlacementSolution] | None = None):
    574:         """Perform non-dominated sorting (NSGA-II core algorithm)"""
    575:
    576:         if population is None:


GOD_METHOD: Method '_calculate_crowding_distance' is too complex: 7 complexity, 44 lines, 6 max nesting
File: packages\fog\gateway\scheduler\placement.py:615:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    612:                 fronts.append(next_front)
    613:             front_index += 1
    614:
>>> 615:     def _calculate_crowding_distance(self, population: list[PlacementSolution] | None = None):
    616:         """Calculate crowding distance for diversity preservation"""
    617:
    618:         if population is None:


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'can_handle_job'
File: packages\fog\gateway\scheduler\placement.py:99:4
Recommendation: Extract common code into a shared function or utility
Code context:
     96:         """Get available disk space in GB"""
     97:         return self.disk_gb * (1.0 - self.disk_utilization)
     98:
>>>  99:     def can_handle_job(self, job_requirements: dict[str, float]) -> bool:
    100:         """Check if node can handle job resource requirements"""
    101:         required_cpu = job_requirements.get("cpu_cores", 1.0)
    102:         required_memory = job_requirements.get("memory_gb", 1.0)


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'estimate_latency'
File: packages\fog\gateway\scheduler\placement.py:112:4
Recommendation: Extract common code into a shared function or utility
Code context:
    109:             and self.available_disk() >= required_disk
    110:         )
    111:
>>> 112:     def estimate_latency(self, job_size_mb: float) -> float:
    113:         """Estimate job execution latency"""
    114:         # Base latency + transfer time + queue delay
    115:         transfer_time = job_size_mb / (self.network_bandwidth_mbps / 8)


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_create_empty_solution'
File: packages\fog\gateway\scheduler\placement.py:845:4
Recommendation: Extract common code into a shared function or utility
Code context:
    842:
    843:         return best_solution
    844:
>>> 845:     def _create_empty_solution(self, jobs: list[JobRequest]) -> PlacementSolution:
    846:         """Create empty solution when no placement is possible"""
    847:         solution = PlacementSolution()
    848:         solution.feasible = False


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'estimate_cost'
File: packages\fog\gateway\scheduler\placement.py:121:4
Recommendation: Extract common code into a shared function or utility
Code context:
    118:
    119:         return self.avg_latency_ms + transfer_time + queue_delay + load_penalty
    120:
>>> 121:     def estimate_cost(self, job_requirements: dict[str, float], duration_hours: float) -> float:
    122:         """Estimate job execution cost"""
    123:         cpu_cost = job_requirements.get("cpu_cores", 1.0) * self.cpu_cost_per_hour * duration_hours
    124:         memory_cost = job_requirements.get("memory_gb", 1.0) * self.memory_cost_per_gb_hour * duration_hours


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_tournament_selection'
File: packages\fog\gateway\scheduler\placement.py:685:4
Recommendation: Extract common code into a shared function or utility
Code context:
    682:
    683:         return offspring[: self.population_size]
    684:
>>> 685:     def _tournament_selection(self) -> PlacementSolution:
    686:         """Tournament selection for parent choosing"""
    687:
    688:         tournament = random.sample(self.population, min(self.tournament_size, len(self.population)))


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_filter_capable_nodes'
File: packages\fog\gateway\scheduler\placement.py:402:4
Recommendation: Extract common code into a shared function or utility
Code context:
    399:
    400:         return solution
    401:
>>> 402:     def _filter_capable_nodes(self, jobs: list[JobRequest], nodes: list[FogNode]) -> list[FogNode]:
    403:         """Filter nodes that can handle at least one job"""
    404:         capable_nodes = []
    405:


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_initialize_population'
File: packages\fog\gateway\scheduler\placement.py:418:4
Recommendation: Extract common code into a shared function or utility
Code context:
    415:
    416:         return capable_nodes
    417:
>>> 418:     def _initialize_population(self, jobs: list[JobRequest], nodes: list[FogNode]) -> list[PlacementSolution]:
    419:         """Initialize random population of placement solutions"""
    420:         population = []
    421:


GOD_METHOD: Method 'complete_replica' is too complex: 6 complexity, 22 lines, 5 max nesting
File: packages\fog\gateway\scheduler\sla_classes.py:226:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    223:                 logger.debug(f"Started replica {replica_id} for job {job_id}")
    224:                 break
    225:
>>> 226:     def complete_replica(self, job_id: str, replica_id: str, result_data: dict[str, Any]):
    227:         """Mark a replica as completed with result data"""
    228:         job = self.active_jobs.get(job_id)
    229:         if not job:


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'is_consensus_reached'
File: packages\fog\gateway\scheduler\sla_classes.py:104:4
Recommendation: Extract common code into a shared function or utility
Code context:
    101:         """Get replicas that have completed successfully"""
    102:         return [r for r in self.replicas if r.status == "completed"]
    103:
>>> 104:     def is_consensus_reached(self) -> bool:
    105:         """Check if enough replicas have completed for consensus"""
    106:         completed = len(self.get_completed_replicas())
    107:         required = max(1, (self.requirements.min_replicas + 1) // 2)  # Majority


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_sign_execution'
File: packages\fog\gateway\scheduler\sla_classes.py:286:4
Recommendation: Extract common code into a shared function or utility
Code context:
    283:         logger.debug(f"Generated attestation for replica {replica.replica_id}")
    284:         return attestation
    285:
>>> 286:     def _sign_execution(self, replica: JobReplica, result_data: dict[str, Any]) -> str:
    287:         """Create digital signature for job execution (placeholder)"""
    288:         # In production, this would use actual cryptographic signing
    289:         execution_data = {


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'start_replica'
File: packages\fog\gateway\scheduler\sla_classes.py:204:4
Recommendation: Extract common code into a shared function or utility
Code context:
    201:         logger.debug(f"Added replica {replica_id} for job {job_id} on node {node_id}")
    202:         return replica_id
    203:
>>> 204:     def start_replica(self, job_id: str, replica_id: str):
    205:         """Mark a replica as started"""
    206:         job = self.active_jobs.get(job_id)
    207:         if not job:


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'complete_replica'
File: packages\fog\gateway\scheduler\sla_classes.py:226:4
Recommendation: Extract common code into a shared function or utility
Code context:
    223:                 logger.debug(f"Started replica {replica_id} for job {job_id}")
    224:                 break
    225:
>>> 226:     def complete_replica(self, job_id: str, replica_id: str, result_data: dict[str, Any]):
    227:         """Mark a replica as completed with result data"""
    228:         job = self.active_jobs.get(job_id)
    229:         if not job:


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'fail_replica'
File: packages\fog\gateway\scheduler\sla_classes.py:250:4
Recommendation: Extract common code into a shared function or utility
Code context:
    247:
    248:                 break
    249:
>>> 250:     def fail_replica(self, job_id: str, replica_id: str, reason: str):
    251:         """Mark a replica as failed"""
    252:         job = self.active_jobs.get(job_id)
    253:         if not job:


GOD_METHOD: Method 'matches' is too complex: 9 complexity, 43 lines, 6 max nesting
File: packages\fog\gateway\security\policy.py:170:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    167:     created_at: datetime = field(default_factory=lambda: datetime.now(UTC))
    168:     expires_at: datetime | None = None
    169:
>>> 170:     def matches(self, destination: str, port: int | None = None, protocol: str = "tcp") -> bool:
    171:         """Check if rule matches the destination"""
    172:
    173:         # Check protocol


GOD_METHOD: Method '_generate_cost_recommendations' is too complex: 11 complexity, 23 lines, 6 max nesting
File: packages\fog\sdk\python\fog_client.py:456:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    453:         if not self._connection_manager.is_connected():
    454:             raise FogClientError("Client must be used as async context manager")
    455:
>>> 456:     def _generate_cost_recommendations(self, quote: PriceQuote, bid_type: str) -> list[str]:
    457:         """Generate cost optimization recommendations."""
    458:         recommendations = []
    459:


GOD_METHOD: Method 'simple_train_loop' is too complex: 7 complexity, 22 lines, 5 max nesting
File: packages\hrrm\common\training_utils.py:18:0
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     15:     torch.cuda.manual_seed_all(s)
     16:
     17:
>>>  18: def simple_train_loop(model, loader, max_steps, lr=3e-4, wd=0.1, grad_accum=1):
     19:     acc = Accelerator()
     20:     (model,) = acc.prepare(model)
     21:     opt = torch.optim.AdamW(model.parameters(), lr=lr, weight_decay=wd)


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\hrrm\memory\eval_memory.py:115:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    112:                 v = model.v_proj(q)
    113:
    114:                 # Apply memory update
>>> 115:                 model.mem.update(q, v, loss)
    116:
    117:                 # Measure adaptation (change in memory keys)
    118:                 key_change = torch.norm(model.mem.keys - initial_keys).item()


GOD_METHOD: Method 'main' is too complex: 1 complexity, 64 lines, 0 max nesting
File: packages\hrrm\memory\eval_memory.py:176:0
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    173:     return model, config
    174:
    175:
>>> 176: def main():
    177:     parser = argparse.ArgumentParser(description="Evaluate Memory model")
    178:     parser.add_argument("--ckpt", required=True, help="Checkpoint path")
    179:     parser.add_argument("--samples", type=int, default=100, help="Number of samples for evaluation")


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\hrrm\memory\model.py:96:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     93:         # Update memory if training
     94:         if (targets is not None) and (loss_like is not None):
     95:             with torch.no_grad():
>>>  96:                 self.mem.update(q, v, loss_like)  # online memory update (Titans)
     97:
     98:         # Calculate loss if targets provided
     99:         loss = None


GOD_METHOD: Method 'train_memory' is too complex: 8 complexity, 87 lines, 5 max nesting
File: packages\hrrm\memory\train_memory.py:48:0
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     45:     return MemoryConfig(**config_dict)
     46:
     47:
>>>  48: def train_memory(config: MemoryConfig, max_steps: int = 10000, lr: float = 3e-4):
     49:     """Train Memory model with Titans online updates."""
     50:     set_seed(1337)
     51:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\hrrm\memory\train_memory.py:104:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    101:                 # Use loss as surprise signal for memory update
    102:                 q = unwrapped_model.q_proj(unwrapped_model.tok(batch["x_ids"])[:, -1, :])
    103:                 v = unwrapped_model.v_proj(q)  # Simplified target
>>> 104:                 unwrapped_model.mem.update(q, v, loss)
    105:
    106:         # Backward pass
    107:         accelerator.backward(loss)


GOD_METHOD: Method 'evaluate_control_tokens' is too complex: 7 complexity, 45 lines, 6 max nesting
File: packages\hrrm\planner\eval_planner.py:55:0
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     52:     return {"perplexity": perplexity, "avg_loss": avg_loss, "total_tokens": total_tokens}
     53:
     54:
>>>  55: def evaluate_control_tokens(model, num_samples=50):
     56:     """Evaluate control token detection accuracy."""
     57:     model.eval()
     58:     correct = 0


GOD_METHOD: Method 'main' is too complex: 1 complexity, 53 lines, 0 max nesting
File: packages\hrrm\planner\eval_planner.py:126:0
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    123:     return model, config
    124:
    125:
>>> 126: def main():
    127:     parser = argparse.ArgumentParser(description="Evaluate HRM Planner")
    128:     parser.add_argument("--ckpt", required=True, help="Checkpoint path")
    129:     parser.add_argument("--samples", type=int, default=100, help="Number of samples for evaluation")


GOD_METHOD: Method 'forward' is too complex: 6 complexity, 30 lines, 5 max nesting
File: packages\hrrm\planner\model.py:104:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    101:         self.max_H = config.max_H
    102:         self.inner_T = config.inner_T
    103:
>>> 104:     def forward(self, x_ids, labels=None, attn_mask=None, control_mask=None):
    105:         x = x_ids
    106:         losses = []
    107:


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '__init__'
File: packages\hrrm\planner\model.py:65:4
Recommendation: Extract common code into a shared function or utility
Code context:
     62:
     63:
     64: class TinyDecoder(nn.Module):
>>>  65:     def __init__(self, vocab, d=512, L=16, h=8, rope_base=10000):
     66:         super().__init__()
     67:         self.tok = nn.Embedding(vocab, d)
     68:         self.blocks = nn.ModuleList([TinyBlock(d, h) for _ in range(L)])


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '__init__'
File: packages\hrrm\planner\model.py:96:4
Recommendation: Extract common code into a shared function or utility
Code context:
     93:       - Approximate 1-step gradient: backprop only through final L of each H (memory-safe).
     94:     """
     95:
>>>  96:     def __init__(self, config: PlannerConfig):
     97:         super().__init__()
     98:         self.config = config
     99:         self.core = TinyDecoder(config.vocab_size, config.d_model, config.n_layers, config.n_head)


GOD_METHOD: Method 'train_planner' is too complex: 6 complexity, 77 lines, 4 max nesting
File: packages\hrrm\planner\train_planner.py:49:0
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     46:     return PlannerConfig(**config_dict)
     47:
     48:
>>>  49: def train_planner(config: PlannerConfig, max_steps: int = 10000, lr: float = 3e-4):
     50:     """Train HRM Planner model."""
     51:     set_seed(1337)
     52:


GOD_METHOD: Method 'evaluate_thought_detection' is too complex: 10 complexity, 49 lines, 9 max nesting
File: packages\hrrm\reasoner\eval_reasoner.py:99:0
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     96:     return {"gsm8k_accuracy": accuracy, "correct": correct, "total": total}
     97:
     98:
>>>  99: def evaluate_thought_detection(model, num_samples=50):
    100:     """Evaluate thought span detection accuracy."""
    101:     model.eval()
    102:     correct = 0


GOD_METHOD: Method 'main' is too complex: 1 complexity, 58 lines, 0 max nesting
File: packages\hrrm\reasoner\eval_reasoner.py:173:0
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    170:     return model, config
    171:
    172:
>>> 173: def main():
    174:     parser = argparse.ArgumentParser(description="Evaluate HRM Reasoner")
    175:     parser.add_argument("--ckpt", required=True, help="Checkpoint path")
    176:     parser.add_argument("--samples", type=int, default=100, help="Number of samples for evaluation")


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'evaluate_gsm8k_synthetic'
File: packages\hrrm\reasoner\eval_reasoner.py:55:0
Recommendation: Extract common code into a shared function or utility
Code context:
     52:     return {"perplexity": perplexity, "avg_loss": avg_loss, "total_tokens": total_tokens}
     53:
     54:
>>>  55: def evaluate_gsm8k_synthetic(model, num_samples=50):
     56:     """Evaluate on synthetic GSM8K-like problems."""
     57:     model.eval()
     58:     correct = 0


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'evaluate_thought_detection'
File: packages\hrrm\reasoner\eval_reasoner.py:99:0
Recommendation: Extract common code into a shared function or utility
Code context:
     96:     return {"gsm8k_accuracy": accuracy, "correct": correct, "total": total}
     97:
     98:
>>>  99: def evaluate_thought_detection(model, num_samples=50):
    100:     """Evaluate thought span detection accuracy."""
    101:     model.eval()
    102:     correct = 0


GOD_METHOD: Method 'forward' is too complex: 6 complexity, 45 lines, 5 max nesting
File: packages\hrrm\reasoner\model.py:108:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    105:         self.max_H = config.max_H
    106:         self.inner_T = config.inner_T
    107:
>>> 108:     def forward(self, x_ids, labels=None, attn_mask=None, thought_mask=None):
    109:         """
    110:         Forward pass with HRM loop and scratchpad supervision.
    111:


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '__init__'
File: packages\hrrm\reasoner\model.py:62:4
Recommendation: Extract common code into a shared function or utility
Code context:
     59:
     60:
     61: class TinyDecoder(nn.Module):
>>>  62:     def __init__(self, vocab, d=512, L=16, h=8, rope_base=10000):
     63:         super().__init__()
     64:         self.tok = nn.Embedding(vocab, d)
     65:         self.blocks = nn.ModuleList([TinyBlock(d, h) for _ in range(L)])


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '__init__'
File: packages\hrrm\reasoner\model.py:100:4
Recommendation: Extract common code into a shared function or utility
Code context:
     97:     and approximate 1-step gradients for reasoning stability.
     98:     """
     99:
>>> 100:     def __init__(self, config: ReasonerConfig):
    101:         super().__init__()
    102:         self.config = config
    103:         self.core = TinyDecoder(config.vocab_size, config.d_model, config.n_layers, config.n_head)


GOD_METHOD: Method '__iter__' is too complex: 7 complexity, 19 lines, 6 max nesting
File: packages\hrrm\reasoner\train_reasoner.py:30:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     27:         self.sot_token_id = 32006  # <SoT>
     28:         self.eot_token_id = 32007  # <EoT>
     29:
>>>  30:     def __iter__(self):
     31:         for batch in self.data_iter:
     32:             x_ids = batch["x_ids"]
     33:             labels = batch["labels"]


GOD_METHOD: Method 'train_reasoner' is too complex: 6 complexity, 76 lines, 4 max nesting
File: packages\hrrm\reasoner\train_reasoner.py:59:0
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     56:     return ReasonerConfig(**config_dict)
     57:
     58:
>>>  59: def train_reasoner(config: ReasonerConfig, max_steps: int = 10000, lr: float = 3e-4):
     60:     """Train HRM Reasoner model."""
     61:     set_seed(1337)
     62:


GOD_METHOD: Method 'create_hf_config' is too complex: 4 complexity, 54 lines, 3 max nesting
File: packages\hrrm\scripts\export_hf_format.py:17:0
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     14: logger = logging.getLogger(__name__)
     15:
     16:
>>>  17: def create_hf_config(model_type: str, config: Any, param_count: int) -> dict[str, Any]:
     18:     """Create HuggingFace model configuration."""
     19:
     20:     base_config = {


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\hrrm\scripts\export_hf_format.py:40:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     37:
     38:     # Model-specific configurations
     39:     if model_type == "planner":
>>>  40:         base_config.update(
     41:             {
     42:                 "control_tokens": config.control_tokens,
     43:                 "max_H": config.max_H,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\hrrm\scripts\export_hf_format.py:49:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     46:             }
     47:         )
     48:     elif model_type == "reasoner":
>>>  49:         base_config.update(
     50:             {
     51:                 "max_H": config.max_H,
     52:                 "inner_T": config.inner_T,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\hrrm\scripts\export_hf_format.py:59:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     56:             }
     57:         )
     58:     elif model_type == "memory":
>>>  59:         base_config.update(
     60:             {
     61:                 "mem_dim": config.mem_dim,
     62:                 "mem_tokens": config.mem_tokens,


GOD_METHOD: Method 'export_model' is too complex: 5 complexity, 117 lines, 4 max nesting
File: packages\hrrm\scripts\export_hf_format.py:74:0
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     71:     return base_config
     72:
     73:
>>>  74: def export_model(checkpoint_path: Path, output_dir: Path, model_type: str):
     75:     """Export a single model to HuggingFace format."""
     76:
     77:     logger.info(f"Exporting {model_type} model from {checkpoint_path}")


GOD_METHOD: Method '_score_node_for_shard' is too complex: 8 complexity, 34 lines, 5 max nesting
File: packages\models\hrrm\export_adapters.py:730:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    727:
    728:         return plan
    729:
>>> 730:     def _score_node_for_shard(self, shard: ModelShard, node: Dict[str, Any]) -> float:
    731:         """Score how well a fog node matches a shard's requirements"""
    732:
    733:         score = 0.0


GOD_METHOD: Method '_determine_pipeline_order' is too complex: 6 complexity, 28 lines, 5 max nesting
File: packages\models\hrrm\export_adapters.py:766:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    763:
    764:         return score
    765:
>>> 766:     def _determine_pipeline_order(self, shards: List[ModelShard]) -> List[str]:
    767:         """Determine execution order for pipeline parallelism"""
    768:
    769:         # Build dependency graph


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\models\hrrm\export_adapters.py:817:24
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    814:                 shard_input = task.input_data.copy()
    815:                 for dep_id in shard.depends_on:
    816:                     if dep_id in intermediate_results:
>>> 817:                         shard_input.update(intermediate_results[dep_id])
    818:
    819:                 # Execute shard
    820:                 result = await self._execute_shard_on_node(shard, shard_input, node_id)


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_estimate_parameter_count'
File: packages\models\hrrm\export_adapters.py:291:4
Recommendation: Extract common code into a shared function or utility
Code context:
    288:         size_mb = (params * 4) / (1024 * 1024)
    289:         return size_mb
    290:
>>> 291:     def _estimate_parameter_count(self, model_config: Dict[str, Any]) -> int:
    292:         """Estimate total parameter count"""
    293:
    294:         hidden_size = model_config.get("hidden_size", 768)


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_analyze_fog_node_capabilities'
File: packages\models\hrrm\export_adapters.py:316:4
Recommendation: Extract common code into a shared function or utility
Code context:
    313:         else:
    314:             return "transformer_based"
    315:
>>> 316:     def _analyze_fog_node_capabilities(self, fog_nodes: List[Dict[str, Any]]) -> Dict[str, Any]:
    317:         """Analyze collective fog node capabilities"""
    318:
    319:         total_cpu = sum(node.get("cpu_cores", 0) for node in fog_nodes)


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_estimate_distributed_performance'
File: packages\models\hrrm\export_adapters.py:473:4
Recommendation: Extract common code into a shared function or utility
Code context:
    470:
    471:         return configurations
    472:
>>> 473:     def _estimate_distributed_performance(
    474:         self,
    475:         shard_configs: List[Dict[str, Any]],
    476:         node_analysis: Dict[str, Any]


GOD_METHOD: Method 'verify_ticket' is too complex: 9 complexity, 49 lines, 6 max nesting
File: packages\p2p\betanet\access_tickets.py:145:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    142:             # If somehow we get here, use a deterministic but weak signature
    143:             return hashlib.sha256(ticket_data + b"betanet_fallback").digest()
    144:
>>> 145:     def verify_ticket(self, ticket: AccessTicket) -> bool:
    146:         """Verify access ticket signature and validity with real cryptography."""
    147:         if ticket.is_expired:
    148:             logger.warning(f"Ticket {ticket.ticket_id} has expired")


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\p2p\betanet\htx_transport.py:471:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    468:         }
    469:
    470:         if self.connection:
>>> 471:             status.update(
    472:                 {
    473:                     "connection_id": self.connection.connection_id,
    474:                     "handshake_completed": self.connection.handshake_completed,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\p2p\betanet\noise_protocol.py:148:29
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    145:                     algorithms.ChaCha20(self.encryption_key, nonce), mode=None  # ChaCha20 doesn't use a mode
    146:                 )
    147:                 encryptor = cipher.encryptor()
>>> 148:                 ciphertext = encryptor.update(plaintext) + encryptor.finalize()
    149:
    150:                 return nonce + ciphertext
    151:             except Exception:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\p2p\betanet\noise_protocol.py:172:23
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    169:
    170:                 cipher = Cipher(algorithms.ChaCha20(self.decryption_key, nonce), mode=None)
    171:                 decryptor = cipher.decryptor()
>>> 172:                 return decryptor.update(actual_ciphertext) + decryptor.finalize()
    173:             except Exception:
    174:                 # Fall through to XOR fallback
    175:                 pass


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'encrypt'
File: packages\p2p\betanet\noise_protocol.py:133:4
Recommendation: Extract common code into a shared function or utility
Code context:
    130:         logger.debug("Completed Noise XK handshake")
    131:         return True
    132:
>>> 133:     def encrypt(self, plaintext: bytes) -> bytes:
    134:         """Encrypt data with ChaCha20-Poly1305 (or AES-GCM fallback)."""
    135:         if not self.handshake_completed or not self.encryption_key:
    136:             raise RuntimeError("Handshake not completed")


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'decrypt'
File: packages\p2p\betanet\noise_protocol.py:159:4
Recommendation: Extract common code into a shared function or utility
Code context:
    156:         key_stream = (self.encryption_key * ((len(plaintext) // 32) + 1))[: len(plaintext)]
    157:         return bytes(a ^ b for a, b in zip(plaintext, key_stream))
    158:
>>> 159:     def decrypt(self, ciphertext: bytes) -> bytes:
    160:         """Decrypt data with ChaCha20-Poly1305 (or XOR fallback)."""
    161:         if not self.handshake_completed or not self.decryption_key:
    162:             raise RuntimeError("Handshake not completed")


GOD_METHOD: Method 'count_lines_of_code' is too complex: 7 complexity, 32 lines, 6 max nesting
File: packages\p2p\betanet-bounty\generate_coverage_report.py:17:0
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     14: from pathlib import Path
     15:
     16:
>>>  17: def count_lines_of_code(file_path):
     18:     """Count lines of code, excluding comments and empty lines"""
     19:     with open(file_path, encoding="utf-8") as f:
     20:         lines = f.readlines()


GOD_METHOD: Method 'analyze_test_coverage' is too complex: 3 complexity, 65 lines, 2 max nesting
File: packages\p2p\betanet-bounty\generate_coverage_report.py:52:0
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     49:     return code_lines
     50:
     51:
>>>  52: def analyze_test_coverage():
     53:     """Analyze test coverage from betanet-htx crate"""
     54:
     55:     base_path = Path("crates/betanet-htx/src")


GOD_METHOD: Method 'analyze_fuzz_harnesses' is too complex: 7 complexity, 29 lines, 6 max nesting
File: packages\p2p\betanet-bounty\generate_coverage_report.py:120:0
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    117:     return coverage_data, total_loc, total_tested_functions, total_functions
    118:
    119:
>>> 120: def analyze_fuzz_harnesses():
    121:     """Analyze fuzz harness coverage"""
    122:
    123:     fuzz_path = Path("crates/betanet-htx/fuzz/fuzz_targets")


GOD_METHOD: Method 'generate_coverage_report' is too complex: 5 complexity, 119 lines, 4 max nesting
File: packages\p2p\betanet-bounty\generate_coverage_report.py:152:0
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    149:     return harnesses
    150:
    151:
>>> 152: def generate_coverage_report():
    153:     """Generate comprehensive coverage report"""
    154:
    155:     print("Analyzing HTX Crate Test Coverage...")


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\p2p\bitchat\mesh_network.py:69:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     66:             existing_node.signal_strength = max(existing_node.signal_strength, node.signal_strength)
     67:             if node.battery_level is not None:
     68:                 existing_node.battery_level = node.battery_level
>>>  69:             existing_node.capabilities.update(node.capabilities)
     70:         else:
     71:             # Add new node
     72:             self.nodes[node.node_id] = node


GOD_METHOD: Method '_update_routing_table' is too complex: 8 complexity, 28 lines, 7 max nesting
File: packages\p2p\bitchat\mesh_network.py:113:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    110:         for node_id in offline_nodes:
    111:             self.remove_node(node_id)
    112:
>>> 113:     def _update_routing_table(self):
    114:         """Update routing table using simplified distance-vector algorithm."""
    115:         # Clear current routing table
    116:         self.routing_table.clear()


GOD_METHOD: Method 'find_path_to' is too complex: 6 complexity, 20 lines, 5 max nesting
File: packages\p2p\bitchat\mesh_network.py:157:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    154:             "max_hop_count": max((node.hop_count for node in self.nodes.values()), default=0),
    155:         }
    156:
>>> 157:     def find_path_to(self, destination: str, max_hops: int = 7) -> list[str] | None:
    158:         """Find complete path to destination (for debugging)."""
    159:         if destination not in self.nodes:
    160:             return None


GOD_METHOD: Method '_rank_protocols' is too complex: 13 complexity, 61 lines, 8 max nesting
File: packages\p2p\bounty-tmp\adaptive_navigator.py:211:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    208:
    209:         return protocol, metadata
    210:
>>> 211:     def _rank_protocols(
    212:         self,
    213:         conditions: AdaptiveNetworkConditions,
    214:         available_protocols: list[str],


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\p2p\bounty-tmp\verify_500ms_switching.py:14:0
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     11: import time
     12:
     13: # Add path for imports
>>>  14: sys.path.insert(0, os.path.join(os.path.dirname(__file__), "../src"))
     15:
     16: try:
     17:     from adaptive_navigator import AdaptiveNavigator, AdaptiveNetworkConditions, MessageContext


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\p2p\bridges\compatibility.py:42:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     39:             # Add legacy path to Python path
     40:             legacy_dir = Path(self.legacy_path).parent
     41:             if str(legacy_dir) not in sys.path:
>>>  42:                 sys.path.insert(0, str(legacy_dir))
     43:
     44:             # Try to import legacy module
     45:             module_name = Path(self.legacy_path).stem


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\p2p\bridges\compatibility.py:185:32
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    182:                         try:
    183:                             legacy_status = method()
    184:                             if isinstance(legacy_status, dict):
>>> 185:                                 status.update(legacy_status)
    186:                             break
    187:                         except Exception:
    188:                             continue


GOD_METHOD: Method 'initialize' is too complex: 8 complexity, 46 lines, 5 max nesting
File: packages\p2p\bridges\rust_ffi.py:21:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     18:         self.available = False
     19:         self.ffi_lib = None
     20:
>>>  21:     def initialize(self) -> bool:
     22:         """Initialize Rust FFI bridge with real library loading."""
     23:         try:
     24:             # Try to load betanet FFI library


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\p2p\communications\community_hub.py:38:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     35:         if project_id not in self.projects:
     36:             msg = f"No project found with ID {project_id}"
     37:             raise ValueError(msg)
>>>  38:         self.projects[project_id].setdefault("resources", {}).update(resources)
     39:         logger.info(f"Resources added to project {project_id}")
     40:
     41:     async def update_project_data(self, task_id: str, data: dict[str, Any]) -> None:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\p2p\communications\credits_ledger.py:191:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    188:                 wallet = Wallet(user_id=user.id, balance=0)
    189:                 session.add(wallet)
    190:
>>> 191:                 session.commit()
    192:                 return user
    193:             except IntegrityError:
    194:                 session.rollback()


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\p2p\communications\credits_ledger.py:201:19
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    198:     def get_user(self, username: str) -> User | None:
    199:         """Get user by username."""
    200:         with self.get_session() as session:
>>> 201:             return session.query(User).filter(User.username == username).first()
    202:
    203:     def get_balance(self, username: str) -> BalanceResponse:
    204:         """Get user balance."""


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\p2p\communications\credits_ledger.py:206:19
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    203:     def get_balance(self, username: str) -> BalanceResponse:
    204:         """Get user balance."""
    205:         with self.get_session() as session:
>>> 206:             user = session.query(User).filter(User.username == username).first()
    207:             if not user:
    208:                 msg = f"User {username} not found"
    209:                 raise ValueError(msg)


GOD_METHOD: Method 'transfer' is too complex: 6 complexity, 66 lines, 4 max nesting
File: packages\p2p\communications\credits_ledger.py:219:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    216:                 last_updated=wallet.updated_at,
    217:             )
    218:
>>> 219:     def transfer(self, from_username: str, to_username: str, amount: int) -> TransactionResponse:
    220:         """Transfer credits between users with 1% burn."""
    221:         if amount <= 0:
    222:             msg = "Amount must be positive"


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\p2p\communications\credits_ledger.py:230:24
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    227:
    228:         with self.get_session() as session:
    229:             # Get users
>>> 230:             from_user = session.query(User).filter(User.username == from_username).first()
    231:             to_user = session.query(User).filter(User.username == to_username).first()
    232:
    233:             if not from_user:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\p2p\communications\credits_ledger.py:231:22
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    228:         with self.get_session() as session:
    229:             # Get users
    230:             from_user = session.query(User).filter(User.username == from_username).first()
>>> 231:             to_user = session.query(User).filter(User.username == to_username).first()
    232:
    233:             if not from_user:
    234:                 msg = f"Sender {from_username} not found"


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\p2p\communications\credits_ledger.py:266:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    263:                 transaction.status = "completed"
    264:                 transaction.completed_at = datetime.now(UTC)
    265:
>>> 266:                 session.commit()
    267:
    268:                 return TransactionResponse(
    269:                     id=transaction.id,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\p2p\communications\credits_ledger.py:284:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    281:             except Exception:
    282:                 session.rollback()
    283:                 transaction.status = "failed"
>>> 284:                 session.commit()
    285:                 raise
    286:
    287:     def earn_credits(


GOD_METHOD: Method 'earn_credits' is too complex: 3 complexity, 75 lines, 2 max nesting
File: packages\p2p\communications\credits_ledger.py:287:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    284:                 session.commit()
    285:                 raise
    286:
>>> 287:     def earn_credits(
    288:         self,
    289:         username: str,
    290:         scrape_timestamp: datetime,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\p2p\communications\credits_ledger.py:297:19
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    294:     ) -> EarningResponse:
    295:         """Mint credits based on Prometheus metrics. Idempotent by scrape timestamp."""
    296:         with self.get_session() as session:
>>> 297:             user = session.query(User).filter(User.username == username).first()
    298:             if not user:
    299:                 msg = f"User {username} not found"
    300:                 raise ValueError(msg)


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\p2p\communications\credits_ledger.py:304:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    301:
    302:             # Check if already earned for this scrape timestamp
    303:             existing_earning = (
>>> 304:                 session.query(Earning)
    305:                 .filter(
    306:                     Earning.user_id == user.id,
    307:                     Earning.scrape_timestamp == scrape_timestamp,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\p2p\communications\credits_ledger.py:349:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    346:             # Update wallet balance
    347:             user.wallet.balance += credits_earned
    348:
>>> 349:             session.commit()
    350:
    351:             logger.info(f"User {username} earned {credits_earned} credits from metrics")
    352:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\p2p\communications\credits_ledger.py:367:19
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    364:     def get_transactions(self, username: str, limit: int = 100) -> list[TransactionResponse]:
    365:         """Get transaction history for user."""
    366:         with self.get_session() as session:
>>> 367:             user = session.query(User).filter(User.username == username).first()
    368:             if not user:
    369:                 msg = f"User {username} not found"
    370:                 raise ValueError(msg)


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\p2p\communications\credits_ledger.py:374:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    371:
    372:             # Get both sent and received transactions
    373:             sent_txs = (
>>> 374:                 session.query(Transaction)
    375:                 .filter(Transaction.from_user_id == user.id)
    376:                 .order_by(Transaction.created_at.desc())
    377:                 .limit(limit)


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\p2p\communications\credits_ledger.py:382:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    379:             )
    380:
    381:             received_txs = (
>>> 382:                 session.query(Transaction)
    383:                 .filter(Transaction.to_user_id == user.id)
    384:                 .order_by(Transaction.created_at.desc())
    385:                 .limit(limit)


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\p2p\communications\credits_ledger.py:414:20
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    411:         from sqlalchemy import func
    412:
    413:         with self.get_session() as session:
>>> 414:             total = session.query(func.sum(Wallet.balance)).scalar() or 0
    415:             return total


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\p2p\communications\earn_shells_worker.py:64:28
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     61:         # Node uptime (seconds)
     62:         try:
     63:             uptime_query = f'up{{instance="{node_id}"}}'
>>>  64:             uptime_result = self.query(uptime_query, timestamp)
     65:             if uptime_result["status"] == "success" and uptime_result["data"]["result"]:
     66:                 metrics["uptime_seconds"] = int(float(uptime_result["data"]["result"][0]["value"][1]))
     67:             else:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\p2p\communications\earn_shells_worker.py:76:27
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     73:         # FLOPs (floating point operations)
     74:         try:
     75:             flops_query = f'rate(twin_chat_latency_seconds_count{{instance="{node_id}"}}[5m]) * 1000000'
>>>  76:             flops_result = self.query(flops_query, timestamp)
     77:             if flops_result["status"] == "success" and flops_result["data"]["result"]:
     78:                 metrics["flops"] = int(float(flops_result["data"]["result"][0]["value"][1]))
     79:             else:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\p2p\communications\earn_shells_worker.py:88:31
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     85:         # Bandwidth (bytes)
     86:         try:
     87:             bandwidth_query = f'rate(gw_requests_total{{instance="{node_id}"}}[5m]) * 1024'
>>>  88:             bandwidth_result = self.query(bandwidth_query, timestamp)
     89:             if bandwidth_result["status"] == "success" and bandwidth_result["data"]["result"]:
     90:                 metrics["bandwidth_bytes"] = int(float(bandwidth_result["data"]["result"][0]["value"][1]))
     91:             else:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\p2p\communications\earn_shells_worker.py:104:21
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    101:         """Get list of active nodes from Prometheus."""
    102:         try:
    103:             query = "up == 1"
>>> 104:             result = self.query(query)
    105:
    106:             if result["status"] != "success":
    107:                 logger.error("Failed to get active nodes: %s", result)


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\p2p\communications\message_passing_system.py:152:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    149:             correlation_id = str(uuid.uuid4())
    150:
    151:             request_metadata = metadata or {}
>>> 152:             request_metadata.update({"correlation_id": correlation_id, "expects_response": True})
    153:
    154:             # Set up response handler
    155:             response_future = asyncio.Future()


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\p2p\communications\message_passing_system.py:206:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    203:                 return False
    204:
    205:             response_metadata = metadata or {}
>>> 206:             response_metadata.update({"correlation_id": correlation_id, "is_response": True})
    207:
    208:             response_type = f"{request_message.message_type}_response"
    209:


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'connect'
File: packages\p2p\communications\protocol.py:480:0
Recommendation: Extract common code into a shared function or utility
Code context:
    477:
    478:
    479: # Backward compatible functions - NOW ACTUALLY WORK!
>>> 480: def connect(target_agent_id: str, target_url: str | None = None) -> bool:
    481:     """Connect to another agent using the global protocol instance."""
    482:     protocol = get_protocol_instance()
    483:     loop = asyncio.get_event_loop()


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'disconnect'
File: packages\p2p\communications\protocol.py:490:0
Recommendation: Extract common code into a shared function or utility
Code context:
    487:     return loop.run_until_complete(protocol.connect(target_agent_id, target_url))
    488:
    489:
>>> 490: def disconnect(agent_id: str) -> bool:
    491:     """Disconnect from agent - ACTUALLY WORKS NOW!"""
    492:     protocol = get_protocol_instance()
    493:     loop = asyncio.get_event_loop()


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'send_message'
File: packages\p2p\communications\protocol.py:500:0
Recommendation: Extract common code into a shared function or utility
Code context:
    497:     return loop.run_until_complete(protocol.disconnect(agent_id))
    498:
    499:
>>> 500: def send_message(agent_id: str, message: dict | Message) -> bool:
    501:     """Send message - ACTUALLY WORKS NOW!"""
    502:     protocol = get_protocol_instance()
    503:     loop = asyncio.get_event_loop()


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\p2p\communications\service_directory.py:22:20
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     19:             try:
     20:                 data = json.loads(_CACHE_PATH.read_text())
     21:                 if isinstance(data, dict):
>>>  22:                     self._services.update({str(k): str(v) for k, v in data.items()})
     23:             except Exception:
     24:                 # Corrupt cache; start fresh
     25:                 self._services = {}


GOD_METHOD: Method 'discover_services' is too complex: 7 complexity, 18 lines, 6 max nesting
File: packages\p2p\communications\service_discovery.py:104:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    101:
    102:         return False
    103:
>>> 104:     def discover_services(self, service_type: str | None = None) -> list[ServiceInfo]:
    105:         """Discover available services of a specific type or all services."""
    106:         active_services = []
    107:


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'unregister_service'
File: packages\p2p\communications\service_discovery.py:75:4
Recommendation: Extract common code into a shared function or utility
Code context:
     72:             logger.exception(f"Failed to register service: {e}")
     73:             return False
     74:
>>>  75:     def unregister_service(self, agent_id: str, service_type: str) -> bool:
     76:         """Unregister a service."""
     77:         service_id = f"{agent_id}:{service_type}"
     78:


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'heartbeat'
File: packages\p2p\communications\service_discovery.py:93:4
Recommendation: Extract common code into a shared function or utility
Code context:
     90:
     91:         return False
     92:
>>>  93:     def heartbeat(self, agent_id: str, service_type: str) -> bool:
     94:         """Update service heartbeat."""
     95:         service_id = f"{agent_id}:{service_type}"
     96:


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'discover_services'
File: packages\p2p\communications\service_discovery.py:104:4
Recommendation: Extract common code into a shared function or utility
Code context:
    101:
    102:         return False
    103:
>>> 104:     def discover_services(self, service_type: str | None = None) -> list[ServiceInfo]:
    105:         """Discover available services of a specific type or all services."""
    106:         active_services = []
    107:


GOD_METHOD: Method 'plan' is too complex: 6 complexity, 28 lines, 5 max nesting
File: packages\p2p\communications\sharder.py:15:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     12:         self.layer_flops = layer_flops
     13:         self.node_speeds = node_speeds
     14:
>>>  15:     def plan(self) -> dict[int, str]:
     16:         prob = pulp.LpProblem("ShardPlanning", pulp.LpMinimize)
     17:         layers = list(self.layer_flops)
     18:         nodes = list(self.node_speeds)


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\p2p\communications\test_credits_standalone.py:10:0
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
      7: from datetime import UTC, datetime
      8:
      9: # Add the current directory to the path so we can import our modules
>>>  10: sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
     11:
     12: from credits_ledger import CreditsConfig, CreditsLedger
     13:


GOD_METHOD: Method 'test_credits_ledger' is too complex: 4 complexity, 119 lines, 0 max nesting
File: packages\p2p\communications\test_credits_standalone.py:15:0
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     12: from credits_ledger import CreditsConfig, CreditsLedger
     13:
     14:
>>>  15: def test_credits_ledger() -> bool | None:
     16:     """Test the credits ledger functionality."""
     17:     print("Testing Credits Ledger...")
     18:


GOD_METHOD: Method 'test_api_endpoints' is too complex: 3 complexity, 106 lines, 0 max nesting
File: packages\p2p\communications\test_credits_standalone.py:137:0
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    134:             pass  # Ignore cleanup errors
    135:
    136:
>>> 137: def test_api_endpoints() -> bool | None:
    138:     """Test the API endpoints using a simple HTTP client."""
    139:     print("Testing API endpoints...")
    140:


GOD_METHOD: Method '__post_init__' is too complex: 6 complexity, 13 lines, 5 max nesting
File: packages\p2p\core\message_types.py:97:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     94:     total_chunks: int = 1
     95:     max_chunk_size: int = 16384  # 16KB default
     96:
>>>  97:     def __post_init__(self):
     98:         """Validate message after initialization."""
     99:         if not self.metadata.message_id:
    100:             self.metadata.message_id = str(uuid.uuid4())


GOD_METHOD: Method '_calculate_transport_score' is too complex: 13 complexity, 89 lines, 10 max nesting
File: packages\p2p\core\transport_manager.py:184:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    181:
    182:         logger.debug(f"Updated device context: {context_updates}")
    183:
>>> 184:     def _calculate_transport_score(self, transport_type: TransportType, message: UnifiedMessage) -> float:
    185:         """
    186:         Calculate suitability score for a transport based on message and context.
    187:


GOD_METHOD: Method '_generate_mobile_transport_candidates' is too complex: 4 complexity, 58 lines, 3 max nesting
File: packages\p2p\legacy_src\navigator_mobile_integration.py:298:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    295:
    296:         return constraints
    297:
>>> 298:     def _generate_mobile_transport_candidates(
    299:         self, target: str, message_size: int, constraints: TransportConstraints
    300:     ) -> list[TransportCandidate]:
    301:         """Generate mobile-optimized transport candidates."""


GOD_METHOD: Method '_apply_constraint_filtering' is too complex: 9 complexity, 30 lines, 8 max nesting
File: packages\p2p\legacy_src\navigator_mobile_integration.py:358:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    355:
    356:         return candidates
    357:
>>> 358:     def _apply_constraint_filtering(
    359:         self, transports: list[TransportCandidate], constraints: TransportConstraints
    360:     ) -> list[TransportCandidate]:
    361:         """Filter transports based on active constraints."""


GOD_METHOD: Method '_score_transports_for_constraints' is too complex: 6 complexity, 37 lines, 5 max nesting
File: packages\p2p\legacy_src\navigator_mobile_integration.py:390:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    387:
    388:         return filtered
    389:
>>> 390:     def _score_transports_for_constraints(
    391:         self,
    392:         transports: list[TransportCandidate],
    393:         constraints: TransportConstraints,


GOD_METHOD: Method '_generate_decision_reason' is too complex: 6 complexity, 23 lines, 5 max nesting
File: packages\p2p\legacy_src\navigator_mobile_integration.py:491:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    488:
    489:         return min(5.0, estimated_drain)  # Cap at 5% drain per message
    490:
>>> 491:     def _generate_decision_reason(
    492:         self, constraints: TransportConstraints, selected_transport: TransportCandidate
    493:     ) -> str:
    494:         """Generate human-readable decision reason."""


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_calculate_power_efficiency'
File: packages\p2p\legacy_src\navigator_mobile_integration.py:442:4
Recommendation: Extract common code into a shared function or utility
Code context:
    439:             metadata={"fallback": True, "reason": "no_suitable_transports"},
    440:         )
    441:
>>> 442:     def _calculate_power_efficiency(self, transport: TransportCandidate, message_size: int) -> float:
    443:         """Calculate power efficiency score for transport."""
    444:         transport_type = transport.transport_type
    445:         if transport_type in self.transport_efficiency:


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_estimate_data_usage'
File: packages\p2p\legacy_src\navigator_mobile_integration.py:455:4
Recommendation: Extract common code into a shared function or utility
Code context:
    452:
    453:         return 0.5  # Default efficiency
    454:
>>> 455:     def _estimate_data_usage(self, transport: TransportCandidate, message_size: int) -> float:
    456:         """Estimate data usage in MB."""
    457:         transport_type = transport.transport_type
    458:         if transport_type in self.transport_efficiency:


GOD_METHOD: Method 'verify_ticket' is too complex: 9 complexity, 49 lines, 6 max nesting
File: packages\p2p\betanet-bounty\python\access_tickets.py:145:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    142:             # If somehow we get here, use a deterministic but weak signature
    143:             return hashlib.sha256(ticket_data + b"betanet_fallback").digest()
    144:
>>> 145:     def verify_ticket(self, ticket: AccessTicket) -> bool:
    146:         """Verify access ticket signature and validity with real cryptography."""
    147:         if ticket.is_expired:
    148:             logger.warning(f"Ticket {ticket.ticket_id} has expired")


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\p2p\betanet-bounty\python\htx_transport.py:499:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    496:         }
    497:
    498:         if self.connection:
>>> 499:             status.update(
    500:                 {
    501:                     "connection_id": self.connection.connection_id,
    502:                     "handshake_completed": self.connection.handshake_completed,


GOD_METHOD: Method 'select_hops' is too complex: 10 complexity, 60 lines, 8 max nesting
File: packages\p2p\betanet-bounty\python\mixnet_privacy.py:98:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     95:
     96:         return proof, vrf_output
     97:
>>>  98:     def select_hops(
     99:         self, available_nodes: list[MixHop], privacy_mode: PrivacyMode, target_hops: int | None = None
    100:     ) -> list[MixHop]:
    101:         """Select optimal hops using VRF and privacy constraints"""


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\p2p\betanet-bounty\python\mixnet_privacy.py:472:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    469:         }
    470:
    471:         if self.cover_traffic:
>>> 472:             stats.update(self.cover_traffic.stats)
    473:
    474:         return stats
    475:


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '__init__'
File: packages\p2p\betanet-bounty\python\mixnet_privacy.py:212:4
Recommendation: Extract common code into a shared function or utility
Code context:
    209: class BetaNetPrivacyManager:
    210:     """Unified privacy manager consolidating all mixnet features"""
    211:
>>> 212:     def __init__(self, privacy_mode: PrivacyMode = PrivacyMode.BALANCED):
    213:         self.privacy_mode = privacy_mode
    214:         self.vrf_selector = VRFSelector()
    215:         self.padding_manager = ConstantRatePadding()


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '__init__'
File: packages\p2p\betanet-bounty\python\mixnet_privacy.py:417:4
Recommendation: Extract common code into a shared function or utility
Code context:
    414:     from deprecated transport files
    415:     """
    416:
>>> 417:     def __init__(
    418:         self,
    419:         privacy_mode: PrivacyMode = PrivacyMode.BALANCED,
    420:         enable_cover_traffic: bool = True,


GOD_METHOD: Method 'get_battery_state' is too complex: 11 complexity, 42 lines, 9 max nesting
File: packages\p2p\betanet-bounty\python\mobile_optimization.py:99:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     96:         self.battery_history = []
     97:         self.charging_detected = False
     98:
>>>  99:     def get_battery_state(self) -> tuple[float, BatteryState]:
    100:         """Get current battery percentage and state"""
    101:         current_time = time.time()
    102:         if current_time - self.last_check < self.check_interval:


GOD_METHOD: Method 'get_thermal_state' is too complex: 15 complexity, 44 lines, 12 max nesting
File: packages\p2p\betanet-bounty\python\mobile_optimization.py:157:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    154:         self.check_interval = 15  # Check every 15 seconds
    155:         self.temp_history = []
    156:
>>> 157:     def get_thermal_state(self) -> tuple[float, ThermalState]:
    158:         """Get current CPU temperature and thermal state"""
    159:         current_time = time.time()
    160:         if current_time - self.last_check < self.check_interval:


GOD_METHOD: Method 'detect_network_type' is too complex: 11 complexity, 39 lines, 8 max nesting
File: packages\p2p\betanet-bounty\python\mobile_optimization.py:217:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    214:         self.last_detection = 0
    215:         self.detection_interval = 30  # Check every 30 seconds
    216:
>>> 217:     def detect_network_type(self) -> NetworkType:
    218:         """Detect current network connection type"""
    219:         current_time = time.time()
    220:         if current_time - self.last_detection < self.detection_interval:


GOD_METHOD: Method 'calculate_optimal_chunk_size' is too complex: 7 complexity, 46 lines, 6 max nesting
File: packages\p2p\betanet-bounty\python\mobile_optimization.py:324:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    321:         self.performance_history = []
    322:         self.adaptation_factor = 0.8  # Reduce by 20% on issues
    323:
>>> 324:     def calculate_optimal_chunk_size(
    325:         self,
    326:         battery_state: BatteryState,
    327:         thermal_state: ThermalState,


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '__init__'
File: packages\p2p\betanet-bounty\python\mobile_optimization.py:93:4
Recommendation: Extract common code into a shared function or utility
Code context:
     90: class BatteryMonitor:
     91:     """Battery state monitoring and optimization"""
     92:
>>>  93:     def __init__(self):
     94:         self.last_check = 0
     95:         self.check_interval = 10  # Check every 10 seconds
     96:         self.battery_history = []


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '__init__'
File: packages\p2p\betanet-bounty\python\mobile_optimization.py:318:4
Recommendation: Extract common code into a shared function or utility
Code context:
    315: class AdaptiveChunkingManager:
    316:     """Adaptive chunk size management based on device constraints"""
    317:
>>> 318:     def __init__(self, config: MobileTransportConfig):
    319:         self.config = config
    320:         self.current_chunk_size = config.max_chunk_size
    321:         self.performance_history = []


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'get_battery_state'
File: packages\p2p\betanet-bounty\python\mobile_optimization.py:99:4
Recommendation: Extract common code into a shared function or utility
Code context:
     96:         self.battery_history = []
     97:         self.charging_detected = False
     98:
>>>  99:     def get_battery_state(self) -> tuple[float, BatteryState]:
    100:         """Get current battery percentage and state"""
    101:         current_time = time.time()
    102:         if current_time - self.last_check < self.check_interval:


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'get_thermal_state'
File: packages\p2p\betanet-bounty\python\mobile_optimization.py:157:4
Recommendation: Extract common code into a shared function or utility
Code context:
    154:         self.check_interval = 15  # Check every 15 seconds
    155:         self.temp_history = []
    156:
>>> 157:     def get_thermal_state(self) -> tuple[float, ThermalState]:
    158:         """Get current CPU temperature and thermal state"""
    159:         current_time = time.time()
    160:         if current_time - self.last_check < self.check_interval:


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'detect_network_type'
File: packages\p2p\betanet-bounty\python\mobile_optimization.py:217:4
Recommendation: Extract common code into a shared function or utility
Code context:
    214:         self.last_detection = 0
    215:         self.detection_interval = 30  # Check every 30 seconds
    216:
>>> 217:     def detect_network_type(self) -> NetworkType:
    218:         """Detect current network connection type"""
    219:         current_time = time.time()
    220:         if current_time - self.last_detection < self.detection_interval:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\p2p\betanet-bounty\python\noise_protocol.py:148:29
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    145:                     algorithms.ChaCha20(self.encryption_key, nonce), mode=None  # ChaCha20 doesn't use a mode
    146:                 )
    147:                 encryptor = cipher.encryptor()
>>> 148:                 ciphertext = encryptor.update(plaintext) + encryptor.finalize()
    149:
    150:                 return nonce + ciphertext
    151:             except Exception:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\p2p\betanet-bounty\python\noise_protocol.py:172:23
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    169:
    170:                 cipher = Cipher(algorithms.ChaCha20(self.decryption_key, nonce), mode=None)
    171:                 decryptor = cipher.decryptor()
>>> 172:                 return decryptor.update(actual_ciphertext) + decryptor.finalize()
    173:             except Exception:
    174:                 # Fall through to XOR fallback
    175:                 pass


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'encrypt'
File: packages\p2p\betanet-bounty\python\noise_protocol.py:133:4
Recommendation: Extract common code into a shared function or utility
Code context:
    130:         logger.debug("Completed Noise XK handshake")
    131:         return True
    132:
>>> 133:     def encrypt(self, plaintext: bytes) -> bytes:
    134:         """Encrypt data with ChaCha20-Poly1305 (or AES-GCM fallback)."""
    135:         if not self.handshake_completed or not self.encryption_key:
    136:             raise RuntimeError("Handshake not completed")


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'decrypt'
File: packages\p2p\betanet-bounty\python\noise_protocol.py:159:4
Recommendation: Extract common code into a shared function or utility
Code context:
    156:         key_stream = (self.encryption_key * ((len(plaintext) // 32) + 1))[: len(plaintext)]
    157:         return bytes(a ^ b for a, b in zip(plaintext, key_stream))
    158:
>>> 159:     def decrypt(self, ciphertext: bytes) -> bytes:
    160:         """Decrypt data with ChaCha20-Poly1305 (or XOR fallback)."""
    161:         if not self.handshake_completed or not self.decryption_key:
    162:             raise RuntimeError("Handshake not completed")


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\p2p\betanet-bounty\python\test_betanet_cover.py:16:0
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     13: import pytest
     14:
     15: # Add src to path
>>>  16: sys.path.insert(0, str(Path(__file__).parent.parent.parent / "src"))
     17:
     18: # Direct module loading to avoid import chain issues
     19: import importlib.util


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\p2p\betanet-bounty\python\test_betanet_tls_quic.py:15:0
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     12: import pytest
     13:
     14: # Add src to path
>>>  15: sys.path.insert(0, str(Path(__file__).parent.parent.parent / "src"))
     16:
     17: from core.p2p.betanet_link import HTXLink
     18: from core.p2p.betanet_transport import BetanetMessage, BetanetTransport


GOD_METHOD: Method 'upgrade' is too complex: 1 complexity, 65 lines, 0 max nesting
File: packages\p2p\communications\alembic\versions\001_initial_credits_schema.py:19:0
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     16: depends_on = None
     17:
     18:
>>>  19: def upgrade() -> None:
     20:     # Create users table
     21:     op.create_table(
     22:         "users",


GOD_METHOD: Method '_register_rest_endpoints' is too complex: 28 complexity, 184 lines, 18 max nesting
File: packages\p2p\mobile_integration\jni\libp2p_mesh_bridge.py:83:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     80:         self._register_rest_endpoints()
     81:         self._register_websocket_handlers()
     82:
>>>  83:     def _register_rest_endpoints(self) -> None:
     84:         """Register REST API endpoints."""
     85:
     86:         @self.app.post("/mesh/start")


GOD_METHOD: Method '_register_websocket_handlers' is too complex: 9 complexity, 33 lines, 6 max nesting
File: packages\p2p\mobile_integration\jni\libp2p_mesh_bridge.py:269:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    266:                 logger.exception(f"DHT get failed: {e}")
    267:                 raise HTTPException(status_code=500, detail=str(e))
    268:
>>> 269:     def _register_websocket_handlers(self) -> None:
    270:         """Register WebSocket handlers for real-time communication."""
    271:
    272:         @self.app.websocket("/ws")


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\py-aivillage\p2p\bitchat_bridge.py:18:0
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     15: logger = logging.getLogger(__name__)
     16:
     17: # Add src to path for BitChat imports
>>>  18: sys.path.insert(0, os.path.join(os.path.dirname(__file__), "../../../src"))
     19:
     20: try:
     21:     # Try to import BitChat components directly


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\py-aivillage\p2p\bitchat_bridge.py:183:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    180:         if BITCHAT_AVAILABLE and self.transport:
    181:             try:
    182:                 transport_status = self.transport.get_status()
>>> 183:                 status.update(
    184:                     {
    185:                         "transport_active": transport_status.get("active", False),
    186:                         "peer_count": transport_status.get("peer_count", 0),


GOD_METHOD: Method '_select_transport' is too complex: 9 complexity, 25 lines, 8 max nesting
File: packages\py-aivillage\p2p\transport.py:245:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    242:             logger.error(f"Error stopping {transport_type.value} transport: {e}")
    243:             return False
    244:
>>> 245:     def _select_transport(self, message: MessageEnvelope) -> TransportType | None:
    246:         """Select best transport for message based on priority and availability"""
    247:
    248:         # Use explicit preference if specified


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\rag\analysis\gap_detection.py:351:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    348:         for info in source_info:
    349:             content = getattr(info, "content", "")
    350:             words = content.lower().split()
>>> 351:             concepts.update(word for word in words if len(word) > 4)
    352:         return concepts
    353:
    354:     def _get_incoming_trust_scores(self, node: Any, node_id: str) -> list[float]:


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_group_info_by_source'
File: packages\rag\analysis\gap_detection.py:335:4
Recommendation: Extract common code into a shared function or utility
Code context:
    332:             for edge in self._trust_graph.edges.values()
    333:         )
    334:
>>> 335:     def _group_info_by_source(self, retrieved_info: list[Any]) -> dict[str, list[Any]]:
    336:         """Group retrieved information by source."""
    337:         sources_info = {}
    338:         for info in retrieved_info:


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_extract_concepts_from_source'
File: packages\rag\analysis\gap_detection.py:345:4
Recommendation: Extract common code into a shared function or utility
Code context:
    342:             sources_info[source].append(info)
    343:         return sources_info
    344:
>>> 345:     def _extract_concepts_from_source(self, source_info: list[Any]) -> set[str]:
    346:         """Extract concepts from source information."""
    347:         concepts = set()
    348:         for info in source_info:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\rag\analysis\graph_fixer.py:556:20
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    553:                     content = getattr(info, "content", "")
    554:                     # Simple concept extraction
    555:                     words = content.lower().split()
>>> 556:                     vector_concepts.update(word for word in words if len(word) > 4)
    557:
    558:                 # Extract concepts from graph results
    559:                 for info in sources_info["graph"]:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\rag\analysis\graph_fixer.py:562:20
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    559:                 for info in sources_info["graph"]:
    560:                     content = getattr(info, "content", "")
    561:                     words = content.lower().split()
>>> 562:                     graph_concepts.update(word for word in words if len(word) > 4)
    563:
    564:                 # Find concepts in vector but not in graph
    565:                 missing_in_graph = vector_concepts - graph_concepts


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\rag\analysis\graph_fixer_original.py:556:20
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    553:                     content = getattr(info, "content", "")
    554:                     # Simple concept extraction
    555:                     words = content.lower().split()
>>> 556:                     vector_concepts.update(word for word in words if len(word) > 4)
    557:
    558:                 # Extract concepts from graph results
    559:                 for info in sources_info["graph"]:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\rag\analysis\graph_fixer_original.py:562:20
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    559:                 for info in sources_info["graph"]:
    560:                     content = getattr(info, "content", "")
    561:                     words = content.lower().split()
>>> 562:                     graph_concepts.update(word for word in words if len(word) > 4)
    563:
    564:                 # Find concepts in vector but not in graph
    565:                 missing_in_graph = vector_concepts - graph_concepts


GOD_METHOD: Method '_collect_neighboring_concepts' is too complex: 8 complexity, 27 lines, 7 max nesting
File: packages\rag\analysis\proposal_engine.py:81:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     78:         """Missing node strategy doesn't propose relationships directly."""
     79:         return []
     80:
>>>  81:     def _collect_neighboring_concepts(self, source_nodes: list[str]) -> set[str]:
     82:         """Collect concepts from nodes connected to source nodes."""
     83:         if not self._trust_graph:
     84:             return set()


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_count_factual_indicators'
File: packages\rag\core\cognitive_nexus.py:608:4
Recommendation: Extract common code into a shared function or utility
Code context:
    605:
    606:         return min(1.0, max(0.0, base_score))
    607:
>>> 608:     def _count_factual_indicators(self, content: str) -> float:
    609:         """Count indicators of factual content."""
    610:         factual_indicators = [
    611:             "study",


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_count_deductive_indicators'
File: packages\rag\core\cognitive_nexus.py:632:4
Recommendation: Extract common code into a shared function or utility
Code context:
    629:         count = sum(1 for indicator in factual_indicators if indicator in content.lower())
    630:         return min(1.0, count / 8)  # Normalize to 0-1
    631:
>>> 632:     def _count_deductive_indicators(self, content: str) -> float:
    633:         """Count indicators of deductive reasoning patterns."""
    634:         deductive_indicators = [
    635:             "therefore",


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_count_inductive_indicators'
File: packages\rag\core\cognitive_nexus.py:650:4
Recommendation: Extract common code into a shared function or utility
Code context:
    647:         count = sum(1 for indicator in deductive_indicators if indicator in content.lower())
    648:         return min(1.0, count / 5)
    649:
>>> 650:     def _count_inductive_indicators(self, content: str) -> float:
    651:         """Count indicators of inductive reasoning patterns."""
    652:         inductive_indicators = [
    653:             "pattern",


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_count_probabilistic_indicators'
File: packages\rag\core\cognitive_nexus.py:669:4
Recommendation: Extract common code into a shared function or utility
Code context:
    666:         count = sum(1 for indicator in inductive_indicators if indicator in content.lower())
    667:         return min(1.0, count / 5)
    668:
>>> 669:     def _count_probabilistic_indicators(self, content: str) -> float:
    670:         """Count indicators of probabilistic reasoning."""
    671:         probabilistic_indicators = [
    672:             "likely",


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\rag\core\hyper_rag.py:393:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    390:         try:
    391:             # Create base document
    392:             doc_metadata = metadata or {}
>>> 393:             doc_metadata.update(
    394:                 {
    395:                     "title": title,
    396:                     "stored_at": datetime.now().isoformat(),


GOD_METHOD: Method '_convert_to_retrieved_info' is too complex: 10 complexity, 48 lines, 7 max nesting
File: packages\rag\core\hyper_rag.py:475:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    472:
    473:         return results
    474:
>>> 475:     def _convert_to_retrieved_info(self, raw_results: list[Any], source_system: str) -> list[RetrievedInformation]:
    476:         """Convert system-specific results to unified RetrievedInformation format."""
    477:
    478:         converted = []


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\rag\creativity\insight_engine.py:493:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    490:
    491:         # Add focus concepts if provided
    492:         if focus_concepts:
>>> 493:             concepts.update(focus_concepts)
    494:
    495:         # Extract from query
    496:         query_words = query.lower().split()


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\rag\creativity\insight_engine.py:497:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    494:
    495:         # Extract from query
    496:         query_words = query.lower().split()
>>> 497:         concepts.update(word for word in query_words if len(word) > 3)
    498:
    499:         # Extract from retrieved information
    500:         for info in retrieved_info:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\rag\creativity\insight_engine.py:503:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    500:         for info in retrieved_info:
    501:             if hasattr(info, "content"):
    502:                 content_words = info.content.lower().split()
>>> 503:                 concepts.update(word for word in content_words if len(word) > 4)
    504:
    505:             # Extract concept if available
    506:             if hasattr(info, "concept"):


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\rag\integration\edge_device_bridge.py:446:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    443:
    444:         # Device-type specific capabilities
    445:         if device_profile.device_type == EdgeDeviceType.MOBILE_PHONE:
>>> 446:             capabilities.update({"battery_management": True, "cellular_aware": True, "background_processing": True})
    447:         elif device_profile.device_type == EdgeDeviceType.EDGE_SERVER:
    448:             capabilities.update({"high_throughput": True, "batch_processing": True, "supports_gpu": True})
    449:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\rag\integration\edge_device_bridge.py:448:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    445:         if device_profile.device_type == EdgeDeviceType.MOBILE_PHONE:
    446:             capabilities.update({"battery_management": True, "cellular_aware": True, "background_processing": True})
    447:         elif device_profile.device_type == EdgeDeviceType.EDGE_SERVER:
>>> 448:             capabilities.update({"high_throughput": True, "batch_processing": True, "supports_gpu": True})
    449:
    450:         return capabilities
    451:


GOD_METHOD: Method 'result_score' is too complex: 6 complexity, 17 lines, 5 max nesting
File: packages\rag\integration\fog_rag_bridge.py:664:8
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    661:
    662:         # Sort and limit results
    663:         # Simple scoring based on relevance and source task priority
>>> 664:         def result_score(result):
    665:             if not isinstance(result, dict):
    666:                 return 0.0
    667:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\rag\integration\fog_rag_bridge.py:706:27
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    703:             return {"status": "error", "message": "No local RAG system available for fallback", "results": []}
    704:
    705:         try:
>>> 706:             result = await self.local_rag.query(
    707:                 query=query, mode=mode, max_results=max_results, include_sources=include_sources
    708:             )
    709:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\rag\integration\p2p_network_bridge.py:434:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    431:             # Domain coverage
    432:             covered_domains = set()
    433:             for peer in self.known_peers.values():
>>> 434:                 covered_domains.update(peer.knowledge_domains)
    435:
    436:             # Protocol statistics
    437:             protocol_stats = {}


GOD_METHOD: Method 'find_learning_path' is too complex: 11 complexity, 97 lines, 8 max nesting
File: packages\rag\legacy_src\education.py:220:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    217:         dependent_ids = list(self.graph.successors(concept_id))
    218:         return [self.concepts[did] for did in dependent_ids if did in self.concepts]
    219:
>>> 220:     def find_learning_path(
    221:         self,
    222:         start_concepts: list[str],
    223:         target_concepts: list[str],


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\rag\legacy_src\education.py:270:20
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    267:                         continue
    268:
    269:                 if best_path:
>>> 270:                     all_concepts.update(best_path)
    271:                     path_concepts.extend(best_path)
    272:
    273:             if not all_concepts:


GOD_METHOD: Method 'generate_explanation' is too complex: 3 complexity, 63 lines, 1 max nesting
File: packages\rag\legacy_src\education.py:524:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    521:
    522:         logger.info("ELI5 explanation system initialized")
    523:
>>> 524:     def generate_explanation(
    525:         self,
    526:         concept: str,
    527:         difficulty_level: DifficultyLevel = DifficultyLevel.ELEMENTARY,


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'get_prerequisites'
File: packages\rag\legacy_src\education.py:188:4
Recommendation: Extract common code into a shared function or utility
Code context:
    185:             logger.error(f"Failed to remove concept {concept_id}: {e}")
    186:             return False
    187:
>>> 188:     def get_prerequisites(self, concept_id: str) -> list[ConceptNode]:
    189:         """
    190:         Get all prerequisite concepts for a given concept.
    191:


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'get_dependents'
File: packages\rag\legacy_src\education.py:204:4
Recommendation: Extract common code into a shared function or utility
Code context:
    201:         prerequisite_ids = list(self.graph.predecessors(concept_id))
    202:         return [self.concepts[pid] for pid in prerequisite_ids if pid in self.concepts]
    203:
>>> 204:     def get_dependents(self, concept_id: str) -> list[ConceptNode]:
    205:         """
    206:         Get all concepts that depend on the given concept.
    207:


GOD_METHOD: Method 'resolve_model_path' is too complex: 9 complexity, 40 lines, 8 max nesting
File: packages\rag\legacy_src\rag_offline_config.py:31:0
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     28: logger = logging.getLogger(__name__)
     29:
     30:
>>>  31: def resolve_model_path(
     32:     model_name: str,
     33:     device: str | None = None,
     34:     base_dir: str | Path | None = None,


GOD_METHOD: Method 'adapt_for_mobile' is too complex: 1 complexity, 51 lines, 0 max nesting
File: packages\rag\legacy_src\rag_offline_config.py:277:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    274:     validation_date: str | None = None
    275:     validation_errors: list[str] = field(default_factory=list)
    276:
>>> 277:     def adapt_for_mobile(self) -> "OfflineRAGConfig":
    278:         """Create mobile-optimized variant of this config."""
    279:         base_dir = Path(self.embedding.model_path).parent if self.embedding.model_path else None
    280:


GOD_METHOD: Method 'validate_config' is too complex: 15 complexity, 56 lines, 14 max nesting
File: packages\rag\legacy_src\rag_offline_config.py:330:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    327:
    328:         return mobile_config
    329:
>>> 330:     def validate_config(self) -> bool:
    331:         """Validate configuration for consistency and feasibility."""
    332:         errors = []
    333:


GOD_METHOD: Method '_initialize_default_configs' is too complex: 1 complexity, 85 lines, 0 max nesting
File: packages\rag\legacy_src\rag_offline_config.py:403:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    400:
    401:         logger.info(f"OfflineRAGConfigRegistry initialized with {len(self.validated_configs)} validated configs")
    402:
>>> 403:     def _initialize_default_configs(self):
    404:         """Initialize default RAG configurations for common scenarios."""
    405:
    406:         # 1. Standard Offline RAG


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\rag\memory\hippo_index.py:404:25
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    401:         # Check DuckDB
    402:         if self.duckdb_conn:
    403:             try:
>>> 404:                 result = self.duckdb_conn.execute("SELECT 1").fetchone()
    405:                 health["backends"]["duckdb"] = "healthy" if result else "unhealthy"
    406:             except Exception as e:
    407:                 health["backends"]["duckdb"] = f"error: {e}"


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\rag\memory\hippo_index.py:521:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    518:
    519:         for statement in schema_sql.split(";"):
    520:             if statement.strip():
>>> 521:                 self.duckdb_conn.execute(statement)
    522:
    523:     async def _setup_qdrant_collections(self):
    524:         """Set up Qdrant collections for vector storage."""


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\rag\memory\hippo_index.py:547:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    544:         try:
    545:             embedding_list = node.embedding.tolist() if node.embedding is not None else None
    546:
>>> 547:             self.duckdb_conn.execute(
    548:                 """
    549:                 INSERT OR REPLACE INTO hippo_nodes (
    550:                     id, content, node_type, memory_type, user_id, confidence,


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'get_namespace_status'
File: packages\rag\storage\encrypted_mounts.py:489:4
Recommendation: Extract common code into a shared function or utility
Code context:
    486:
    487:         return expired_mounts
    488:
>>> 489:     def get_namespace_status(self) -> dict[str, Any]:
    490:         """Get comprehensive namespace status"""
    491:
    492:         total_size = sum(mount.size_bytes for mount in self.active_mounts.values())


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'get_global_status'
File: packages\rag\storage\encrypted_mounts.py:838:4
Recommendation: Extract common code into a shared function or utility
Code context:
    835:
    836:         return cleanup_results
    837:
>>> 838:     def get_global_status(self) -> dict[str, Any]:
    839:         """Get global mount system status"""
    840:
    841:         total_mounts = sum(len(m.active_mounts) for m in self.namespace_managers.values())


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\rag\codex-audit\snippets\rag_smoke.py:15:0
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     12: os.environ["RAG_LOCAL_MODE"] = "1"
     13:
     14: # Add paths
>>>  15: sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "..")))
     16: sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "..", "src")))
     17:
     18:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\rag\codex-audit\snippets\rag_smoke.py:16:0
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     13:
     14: # Add paths
     15: sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "..")))
>>>  16: sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "..", "src")))
     17:
     18:
     19: def test_rag_pipeline():


GOD_METHOD: Method 'test_rag_pipeline' is too complex: 15 complexity, 117 lines, 9 max nesting
File: packages\rag\codex-audit\snippets\rag_smoke.py:19:0
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     16: sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "..", "src")))
     17:
     18:
>>>  19: def test_rag_pipeline():
     20:     """Test RAG pipeline instantiation and basic operations"""
     21:     results = {
     22:         "import": False,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\rag\codex-audit\snippets\rag_smoke.py:112:24
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    109:         if hasattr(pipeline, "retrieve"):
    110:             retrieved = pipeline.retrieve(query)
    111:         elif hasattr(pipeline, "query"):
>>> 112:             retrieved = pipeline.query(query)
    113:         elif hasattr(pipeline, "search"):
    114:             retrieved = pipeline.search(query)
    115:         else:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\rag\legacy_src\education\curriculum_graph.py:1589:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    1586:             stats["grades"][concept.grade] += 1
    1587:
    1588:             # Languages
>>> 1589:             stats["languages"].update(concept.content.keys())
    1590:
    1591:             # Cultural regions
    1592:             stats["cultural_regions"].update(concept.cultural_adaptations.keys())


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\rag\legacy_src\education\curriculum_graph.py:1592:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    1589:             stats["languages"].update(concept.content.keys())
    1590:
    1591:             # Cultural regions
>>> 1592:             stats["cultural_regions"].update(concept.cultural_adaptations.keys())
    1593:
    1594:             # Accumulate metrics
    1595:             stats["total_estimated_hours"] += concept.estimated_time_minutes / 60.0


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\rag\mcp_servers\hyperag\mcp_server.py:16:0
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     13: from typing import Any
     14:
     15: # Add project root to path for imports
>>>  16: sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.dirname(__file__))))
     17:
     18: from mcp_servers.hyperag.auth import AuthContext, PermissionManager
     19: from mcp_servers.hyperag.models import ModelRegistry


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'get_neighbors'
File: packages\rag\mcp_servers\hyperag\models.py:84:4
Recommendation: Extract common code into a shared function or utility
Code context:
     81:         """Add an edge to the graph."""
     82:         self.edges[edge.id] = edge
     83:
>>>  84:     def get_neighbors(self, node_id: str) -> list[Node]:
     85:         """Get neighboring nodes."""
     86:         neighbors = []
     87:         for edge in self.edges.values():


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'get_model_stats'
File: packages\rag\mcp_servers\hyperag\models.py:469:4
Recommendation: Extract common code into a shared function or utility
Code context:
    466:                 logger.exception(f"Model operation {operation} failed for {agent_id}: {e!s}")
    467:                 raise
    468:
>>> 469:     def get_model_stats(self) -> dict[str, dict[str, Any]]:
    470:         """Get statistics for all models."""
    471:         stats = {}
    472:         for agent_id, model in self.models.items():


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\rag\mcp_servers\hyperag\protocol.py:226:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    223:         # Plan the query
    224:         plan_context = {"user_id": user_id, "agent_role": context.role}
    225:         if plan_hints:
>>> 226:             plan_context.update(plan_hints)
    227:
    228:         plan = await self.model_registry.process_with_model(context.agent_id, agent_type, "plan", query, plan_context)
    229:         if not self.storage_backend:


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '__init__'
File: packages\rag\mcp_servers\hyperag\protocol.py:78:4
Recommendation: Extract common code into a shared function or utility
Code context:
     75: class MCPRequest:
     76:     """MCP request wrapper."""
     77:
>>>  78:     def __init__(self, method: str, params: dict[str, Any], request_id: str | None = None) -> None:
     79:         self.method = method
     80:         self.params = params
     81:         self.request_id = request_id or str(uuid.uuid4())


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '__init__'
File: packages\rag\mcp_servers\hyperag\protocol.py:88:4
Recommendation: Extract common code into a shared function or utility
Code context:
     85: class MCPResponse:
     86:     """MCP response wrapper."""
     87:
>>>  88:     def __init__(
     89:         self,
     90:         result: Any = None,
     91:         error: MCPError | None = None,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\rag\mcp_servers\hyperag\secure_database.py:35:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     32:             )
     33:
     34:             # Enable foreign keys and secure settings
>>>  35:             self.connection.execute("PRAGMA foreign_keys = ON")
     36:             self.connection.execute("PRAGMA journal_mode = WAL")
     37:             self.connection.execute("PRAGMA synchronous = NORMAL")
     38:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\rag\mcp_servers\hyperag\secure_database.py:36:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     33:
     34:             # Enable foreign keys and secure settings
     35:             self.connection.execute("PRAGMA foreign_keys = ON")
>>>  36:             self.connection.execute("PRAGMA journal_mode = WAL")
     37:             self.connection.execute("PRAGMA synchronous = NORMAL")
     38:
     39:             # Create secure schema


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\rag\mcp_servers\hyperag\secure_database.py:37:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     34:             # Enable foreign keys and secure settings
     35:             self.connection.execute("PRAGMA foreign_keys = ON")
     36:             self.connection.execute("PRAGMA journal_mode = WAL")
>>>  37:             self.connection.execute("PRAGMA synchronous = NORMAL")
     38:
     39:             # Create secure schema
     40:             self._create_secure_schema()


GOD_METHOD: Method '_create_secure_schema' is too complex: 2 complexity, 56 lines, 1 max nesting
File: packages\rag\mcp_servers\hyperag\secure_database.py:47:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     44:             logger.exception(f"Failed to initialize secure database: {e}")
     45:             raise
     46:
>>>  47:     def _create_secure_schema(self) -> None:
     48:         """Create secure database schema with proper constraints."""
     49:         schema_queries = [
     50:             """


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\rag\mcp_servers\hyperag\secure_database.py:103:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    100:         ]
    101:
    102:         for query in schema_queries:
>>> 103:             self.connection.execute(query)
    104:
    105:     def _generate_content_hash(self, content: str) -> str:
    106:         """Generate secure hash for content using SHA-256."""


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\rag\mcp_servers\hyperag\secure_database.py:121:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    118:
    119:         try:
    120:             # Use parameterized query to prevent SQL injection
>>> 121:             self.connection.execute(
    122:                 """
    123:                 INSERT OR REPLACE INTO memories
    124:                 (content_hash, content, tags, importance_score, updated_at)


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\rag\mcp_servers\hyperag\secure_database.py:140:21
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    137:     async def retrieve_memory(self, content_hash: str) -> dict[str, Any] | None:
    138:         """Retrieve memory with secure parameterized query."""
    139:         try:
>>> 140:             cursor = self.connection.execute(
    141:                 """
    142:                 SELECT content, tags, created_at, updated_at, access_count, importance_score
    143:                 FROM memories


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\rag\mcp_servers\hyperag\secure_database.py:154:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    151:                 return None
    152:
    153:             # Update access count securely
>>> 154:             self.connection.execute(
    155:                 "UPDATE memories SET access_count = access_count + 1 WHERE content_hash = ?",
    156:                 (content_hash,),
    157:             )


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\rag\mcp_servers\hyperag\secure_database.py:196:21
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    193:             base_query += " ORDER BY importance_score DESC, created_at DESC LIMIT ?"
    194:             params.append(limit)
    195:
>>> 196:             cursor = self.connection.execute(base_query, params)
    197:             rows = cursor.fetchall()
    198:
    199:             results = []


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\rag\mcp_servers\hyperag\secure_database.py:227:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    224:     ) -> bool:
    225:         """Store knowledge graph triple with secure parameterized query."""
    226:         try:
>>> 227:             self.connection.execute(
    228:                 """
    229:                 INSERT OR REPLACE INTO knowledge_graph
    230:                 (subject, predicate, object, confidence, source)


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\rag\mcp_servers\hyperag\secure_database.py:276:21
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    273:             base_query += " ORDER BY confidence DESC, created_at DESC LIMIT ?"
    274:             params.append(limit)
    275:
>>> 276:             cursor = self.connection.execute(base_query, params)
    277:             rows = cursor.fetchall()
    278:
    279:             results = []


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\rag\mcp_servers\hyperag\secure_database.py:304:21
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    301:             stats = {}
    302:
    303:             # Count memories
>>> 304:             cursor = self.connection.execute("SELECT COUNT(*) FROM memories")
    305:             stats["memory_count"] = cursor.fetchone()[0]
    306:
    307:             # Count knowledge triples


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\rag\mcp_servers\hyperag\secure_database.py:308:21
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    305:             stats["memory_count"] = cursor.fetchone()[0]
    306:
    307:             # Count knowledge triples
>>> 308:             cursor = self.connection.execute("SELECT COUNT(*) FROM knowledge_graph")
    309:             stats["knowledge_triple_count"] = cursor.fetchone()[0]
    310:
    311:             # Count embeddings


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\rag\mcp_servers\hyperag\secure_database.py:312:21
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    309:             stats["knowledge_triple_count"] = cursor.fetchone()[0]
    310:
    311:             # Count embeddings
>>> 312:             cursor = self.connection.execute("SELECT COUNT(*) FROM embeddings")
    313:             stats["embedding_count"] = cursor.fetchone()[0]
    314:
    315:             # Database size


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\rag\mcp_servers\hyperag\secure_database.py:316:21
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    313:             stats["embedding_count"] = cursor.fetchone()[0]
    314:
    315:             # Database size
>>> 316:             cursor = self.connection.execute(
    317:                 "SELECT page_count * page_size FROM pragma_page_count(), pragma_page_size()"
    318:             )
    319:             stats["database_size_bytes"] = cursor.fetchone()[0]


GOD_METHOD: Method 'load_gdc_registry' is too complex: 10 complexity, 65 lines, 7 max nesting
File: packages\rag\mcp_servers\hyperag\gdc\registry.py:19:0
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     16: _DEFAULT_GDC_YAML = pathlib.Path(__file__).parent.parent.parent.parent / "config" / "gdc_rules.yaml"
     17:
     18:
>>>  19: def load_gdc_registry(config_path: pathlib.Path | None = None) -> dict[str, GDCSpec]:
     20:     """Load GDC specifications from YAML file.
     21:
     22:     Args:


GOD_METHOD: Method 'validate_registry' is too complex: 7 complexity, 28 lines, 5 max nesting
File: packages\rag\mcp_servers\hyperag\gdc\registry.py:119:0
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    116:     GDC_REGISTRY = load_gdc_registry(config_path)
    117:
    118:
>>> 119: def validate_registry(registry: dict[str, GDCSpec]) -> list[str]:
    120:     """Validate a GDC registry for common issues.
    121:
    122:     Returns:


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'get_affected_node_ids'
File: packages\rag\mcp_servers\hyperag\gdc\specs.py:86:4
Recommendation: Extract common code into a shared function or utility
Code context:
     83:             data["detected_at"] = datetime.fromisoformat(data["detected_at"])
     84:         return cls(**data)
     85:
>>>  86:     def get_affected_node_ids(self) -> list[str]:
     87:         """Extract node IDs from violation."""
     88:         node_ids = []
     89:         for node in self.nodes:


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'get_affected_edge_ids'
File: packages\rag\mcp_servers\hyperag\gdc\specs.py:94:4
Recommendation: Extract common code into a shared function or utility
Code context:
     91:                 node_ids.append(node["id"])
     92:         return node_ids
     93:
>>>  94:     def get_affected_edge_ids(self) -> list[str]:
     95:         """Extract edge IDs from violation."""
     96:         edge_ids = []
     97:         for edge in self.edges:


GOD_METHOD: Method 'get_recent_records' is too complex: 9 complexity, 47 lines, 6 max nesting
File: packages\rag\mcp_servers\hyperag\guardian\audit.py:40:0
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     37:             f.write(json.dumps(record, default=str, ensure_ascii=False) + "\n")
     38:
     39:
>>>  40: def get_recent_records(hours: int = 24, limit: int = 100) -> list:
     41:     """Get recent audit records.
     42:
     43:     Args:


GOD_METHOD: Method '_simulate_proposal' is too complex: 9 complexity, 38 lines, 5 max nesting
File: packages\rag\mcp_servers\hyperag\guardian\gate.py:222:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    219:
    220:         return min(1.0, final_score)
    221:
>>> 222:     def _simulate_proposal(self, graph: dict[str, Any], proposal: Any) -> None:
    223:         """Apply a single proposal to the simulated graph."""
    224:         if not hasattr(proposal, "operation_type"):
    225:             return


GOD_METHOD: Method '_score_medical_heuristics' is too complex: 8 complexity, 24 lines, 5 max nesting
File: packages\rag\mcp_servers\hyperag\guardian\gate.py:268:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    265:             return self._score_medical_heuristics(graph)
    266:         return self._score_general_heuristics(graph)
    267:
>>> 268:     def _score_medical_heuristics(self, graph: dict[str, Any]) -> float:
    269:         """Score medical domain coherence."""
    270:         score = 0.5  # Base score
    271:         factors = []


GOD_METHOD: Method '_score_general_heuristics' is too complex: 10 complexity, 23 lines, 7 max nesting
File: packages\rag\mcp_servers\hyperag\guardian\gate.py:294:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    291:
    292:         return min(1.0, score)
    293:
>>> 294:     def _score_general_heuristics(self, graph: dict[str, Any]) -> float:
    295:         """Score general domain coherence."""
    296:         score = 0.5  # Base score
    297:         factors = []


GOD_METHOD: Method '_generate_rationale' is too complex: 8 complexity, 35 lines, 7 max nesting
File: packages\rag\mcp_servers\hyperag\guardian\gate.py:412:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    409:             return "QUARANTINE"
    410:         return "REJECT"
    411:
>>> 412:     def _generate_rationale(
    413:         self,
    414:         decision: Decision,
    415:         score: float,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\rag\mcp_servers\hyperag\guardian\metrics.py:115:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    112:                 )
    113:                 self._warn_once = True
    114:
>>> 115:             self.info_data.update(info_dict)
    116:             logger.info(f"MockMetric {self.name}: info updated with {len(info_dict)} fields")
    117:
    118:         def get_stats(self) -> dict:


GOD_METHOD: Method '__init__' is too complex: 3 complexity, 85 lines, 1 max nesting
File: packages\rag\mcp_servers\hyperag\guardian\metrics.py:177:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    174: class GuardianMetrics:
    175:     """Prometheus metrics collector for Guardian Gate operations."""
    176:
>>> 177:     def __init__(self, enabled: bool = True) -> None:
    178:         self.enabled = enabled and PROMETHEUS_AVAILABLE
    179:
    180:         if not self.enabled:


GOD_METHOD: Method 'record_decision' is too complex: 8 complexity, 38 lines, 6 max nesting
File: packages\rag\mcp_servers\hyperag\guardian\metrics.py:264:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    261:
    262:         logger.info("Guardian metrics initialized")
    263:
>>> 264:     def record_decision(
    265:         self,
    266:         decision: str,
    267:         domain: str = "general",


GOD_METHOD: Method '_generate_mock_metrics_dashboard' is too complex: 2 complexity, 53 lines, 1 max nesting
File: packages\rag\mcp_servers\hyperag\guardian\metrics.py:464:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    461:         else:
    462:             logger.info("Prometheus metrics available - use Grafana for dashboards")
    463:
>>> 464:     def _generate_mock_metrics_dashboard(self) -> str:
    465:         """Generate HTML dashboard for MockMetrics."""
    466:         from .metrics import MockMetric
    467:


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_get_confidence_tier'
File: packages\rag\mcp_servers\hyperag\guardian\metrics.py:404:4
Recommendation: Extract common code into a shared function or utility
Code context:
    401:         except Exception as e:
    402:             logger.exception(f"Failed to set policy info metrics: {e}")
    403:
>>> 404:     def _get_confidence_tier(self, confidence: float) -> str:
    405:         """Convert confidence to tier label."""
    406:         if confidence >= 0.8:
    407:             return "high"


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_get_operation_count_bucket'
File: packages\rag\mcp_servers\hyperag\guardian\metrics.py:414:4
Recommendation: Extract common code into a shared function or utility
Code context:
    411:             return "low"
    412:         return "very_low"
    413:
>>> 414:     def _get_operation_count_bucket(self, count: int) -> str:
    415:         """Convert operation count to bucket label."""
    416:         if count <= 1:
    417:             return "single"


GOD_METHOD: Method 'register_adapter' is too complex: 3 complexity, 64 lines, 1 max nesting
File: packages\rag\mcp_servers\hyperag\lora\adapter_loader.py:96:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     93:         except Exception as e:
     94:             logger.exception(f"Failed to save adapter registry: {e}")
     95:
>>>  96:     def register_adapter(
     97:         self,
     98:         adapter_path: str,
     99:         domain: str,


GOD_METHOD: Method 'verify_adapter' is too complex: 7 complexity, 58 lines, 5 max nesting
File: packages\rag\mcp_servers\hyperag\lora\adapter_loader.py:162:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    159:             logger.exception(f"Failed to register adapter: {e}")
    160:             raise
    161:
>>> 162:     def verify_adapter(self, adapter_id: str, adapter_path: str) -> tuple[bool, str]:
    163:         """Verify adapter signature and integrity.
    164:
    165:         Args:


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'list_verified_adapters'
File: packages\rag\mcp_servers\hyperag\lora\adapter_loader.py:222:4
Recommendation: Extract common code into a shared function or utility
Code context:
    219:             logger.exception(error_msg)
    220:             return False, error_msg
    221:
>>> 222:     def list_verified_adapters(self, domain: str | None = None) -> dict[str, dict[str, Any]]:
    223:         """List all verified adapters, optionally filtered by domain.
    224:
    225:         Args:


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'get_loaded_adapters'
File: packages\rag\mcp_servers\hyperag\lora\adapter_loader.py:343:4
Recommendation: Extract common code into a shared function or utility
Code context:
    340:
    341:         return False
    342:
>>> 343:     def get_loaded_adapters(self) -> dict[str, dict[str, Any]]:
    344:         """Get information about currently loaded adapters."""
    345:         result = {}
    346:


GOD_METHOD: Method 'generate_completion' is too complex: 6 complexity, 26 lines, 5 max nesting
File: packages\rag\mcp_servers\hyperag\lora\generate_data.py:180:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    177: """
    178:         return f"{system_prompt}\n\n{instruction}"
    179:
>>> 180:     def generate_completion(self, violation: dict[str, Any], repair: dict[str, Any]) -> str:
    181:         """Generate the expected completion for the violation."""
    182:         completion = {
    183:             "operation": repair["operation"],


GOD_METHOD: Method 'generate_examples' is too complex: 7 complexity, 74 lines, 6 max nesting
File: packages\rag\mcp_servers\hyperag\lora\generate_data.py:208:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    205:
    206:         return json.dumps(completion, indent=2)
    207:
>>> 208:     def generate_examples(self, count: int) -> list[dict[str, str]]:
    209:         """Generate training examples for the domain."""
    210:         if self.domain not in DOMAIN_VIOLATIONS:
    211:             msg = f"Unknown domain: {self.domain}"


GOD_METHOD: Method 'register_adapter' is too complex: 8 complexity, 58 lines, 6 max nesting
File: packages\rag\mcp_servers\hyperag\lora\registry.py:84:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     81:
     82:         logger.info(f"Saved registry with {len(self.entries)} adapters")
     83:
>>>  84:     def register_adapter(
     85:         self,
     86:         adapter_path: Path,
     87:         entry_data: dict[str, Any],


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\rag\mcp_servers\hyperag\lora\registry.py:224:20
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    221:         for weight_file in sorted(weight_files):
    222:             with open(weight_file, "rb") as f:
    223:                 for chunk in iter(lambda: f.read(4096), b""):
>>> 224:                     sha256_hash.update(chunk)
    225:
    226:         return sha256_hash.hexdigest()
    227:


GOD_METHOD: Method 'train' is too complex: 1 complexity, 59 lines, 0 max nesting
File: packages\rag\mcp_servers\hyperag\lora\train_adapter.py:119:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    116:         self.peft_model = get_peft_model(self.model, peft_config)
    117:         self.peft_model.print_trainable_parameters()
    118:
>>> 119:     def train(
    120:         self,
    121:         train_data_path: Path,
    122:         eval_data_path: Path | None = None,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\rag\mcp_servers\hyperag\lora\train_adapter.py:234:20
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    231:         for weight_file in sorted(adapter_path.glob("*.bin")):
    232:             with open(weight_file, "rb") as f:
    233:                 for chunk in iter(lambda: f.read(4096), b""):
>>> 234:                     sha256_hash.update(chunk)
    235:
    236:         return sha256_hash.hexdigest()
    237:


GOD_METHOD: Method 'main' is too complex: 4 complexity, 84 lines, 3 max nesting
File: packages\rag\mcp_servers\hyperag\lora\train_adapter.py:262:0
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    259:         return entry
    260:
    261:
>>> 262: def main() -> None:
    263:     parser = argparse.ArgumentParser(description="Train LoRA adapter for HypeRAG")
    264:     parser.add_argument("--train-data", required=True, type=Path, help="Path to training JSONL file")
    265:     parser.add_argument("--eval-data", type=Path, help="Path to evaluation JSONL file")


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'calculate_recency_weight'
File: packages\rag\mcp_servers\hyperag\memory\base.py:91:4
Recommendation: Extract common code into a shared function or utility
Code context:
     88:         self.last_accessed = datetime.now()
     89:         self.access_count += 1
     90:
>>>  91:     def calculate_recency_weight(self, current_time: datetime | None = None) -> float:
     92:         """Calculate time-based recency weight."""
     93:         if not current_time:
     94:             current_time = datetime.now()


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'is_expired'
File: packages\rag\mcp_servers\hyperag\memory\base.py:102:4
Recommendation: Extract common code into a shared function or utility
Code context:
     99:         time_diff = (current_time - self.created_at).total_seconds()
    100:         return np.exp(-self.decay_rate * time_diff / 3600)  # Hourly decay
    101:
>>> 102:     def is_expired(self, current_time: datetime | None = None) -> bool:
    103:         """Check if node has expired based on TTL."""
    104:         if not self.ttl or not self.created_at:
    105:             return False


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\rag\mcp_servers\hyperag\memory\consolidator.py:427:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    424:
    425:                 # Add consolidation metadata
    426:                 hyperedge.consolidation_source = pattern["contributing_edges"]
>>> 427:                 hyperedge.metadata.update(
    428:                     {
    429:                         "consolidation_batch": result.batch_id,
    430:                         "frequency": pattern["frequency"],


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\rag\mcp_servers\hyperag\memory\consolidator.py:479:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    476:                 semantic_node.consolidation_count = 1
    477:
    478:                 # Add consolidation metadata
>>> 479:                 semantic_node.metadata.update(
    480:                     {
    481:                         "consolidation_batch": result.batch_id,
    482:                         "episodic_source": node.id,


GOD_METHOD: Method '_meets_consolidation_criteria' is too complex: 7 complexity, 20 lines, 5 max nesting
File: packages\rag\mcp_servers\hyperag\memory\consolidator.py:548:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    545:             logger.exception(error_msg)
    546:             result.errors.append(error_msg)
    547:
>>> 548:     def _meets_consolidation_criteria(self, node: Node) -> bool:
    549:         """Check if a node meets criteria for consolidation."""
    550:         # Confidence threshold
    551:         if node.confidence < self.config.confidence_threshold:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\rag\mcp_servers\hyperag\memory\hippo_index.py:165:21
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    162:
    163:         try:
    164:             # DuckDB health
>>> 165:             result = self.duckdb_conn.execute("SELECT 1").fetchone()
    166:             health["backends"]["duckdb"] = "healthy" if result else "unhealthy"
    167:         except Exception as e:
    168:             health["backends"]["duckdb"] = f"error: {e!s}"


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\rag\mcp_servers\hyperag\memory\hippo_index.py:199:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    196:             # Store in DuckDB
    197:             embedding_list = node.embedding.tolist() if node.embedding is not None else None
    198:
>>> 199:             self.duckdb_conn.execute(
    200:                 """
    201:                 INSERT INTO hippo_nodes (
    202:                     id, content, node_type, memory_type, confidence, embedding,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\rag\mcp_servers\hyperag\memory\hippo_index.py:260:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    257:     async def store_edge(self, edge: Edge) -> bool:
    258:         """Store an edge in episodic memory."""
    259:         try:
>>> 260:             self.duckdb_conn.execute(
    261:                 """
    262:                 INSERT INTO hippo_edges (
    263:                     id, source_id, target_id, relation, confidence, participants,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\rag\mcp_servers\hyperag\memory\hippo_index.py:309:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    306:
    307:             embedding_list = document.embedding.tolist() if document.embedding is not None else None
    308:
>>> 309:             self.duckdb_conn.execute(
    310:                 """
    311:                 INSERT INTO hippo_documents (
    312:                     id, content, doc_type, created_at, user_id,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\rag\mcp_servers\hyperag\memory\hippo_index.py:369:22
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    366:             params.append(limit)
    367:
    368:             # Execute query
>>> 369:             results = self.duckdb_conn.execute(
    370:                 f"""
    371:                 SELECT id, content, node_type, memory_type, confidence,
    372:                        embedding, created_at, last_accessed, access_count,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\rag\mcp_servers\hyperag\memory\hippo_index.py:455:28
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    452:             results = []
    453:             for result in search_results:
    454:                 node_id = result.id
>>> 455:                 node_data = self.duckdb_conn.execute(
    456:                     """
    457:                     SELECT id, content, node_type, memory_type, confidence,
    458:                            embedding, created_at, last_accessed, access_count,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\rag\mcp_servers\hyperag\memory\hippo_index.py:513:22
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    510:         where_clause = " AND ".join(conditions)
    511:
    512:         try:
>>> 513:             results = self.duckdb_conn.execute(
    514:                 f"""
    515:                 SELECT id, content, node_type, memory_type, confidence,
    516:                        embedding, created_at, last_accessed, access_count,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\rag\mcp_servers\hyperag\memory\hippo_index.py:566:28
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    563:             # Find expired nodes
    564:             current_time = datetime.now()
    565:
>>> 566:             expired_nodes = self.duckdb_conn.execute(
    567:                 """
    568:                 SELECT id FROM hippo_nodes
    569:                 WHERE ttl IS NOT NULL


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\rag\mcp_servers\hyperag\memory\hippo_index.py:582:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    579:                 expired_ids = [row[0] for row in expired_nodes]
    580:                 placeholders = ",".join(["?" for _ in expired_ids])
    581:
>>> 582:                 self.duckdb_conn.execute(
    583:                     f"""
    584:                     DELETE FROM hippo_nodes WHERE id IN ({placeholders})
    585:                 """,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\rag\mcp_servers\hyperag\memory\hippo_index.py:590:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    587:                 )
    588:
    589:                 # Delete from Qdrant
>>> 590:                 self.qdrant_client.delete(collection_name="hippo_embeddings", points_selector=expired_ids)
    591:
    592:                 # Clear from Redis cache
    593:                 for node_id in expired_ids:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\rag\mcp_servers\hyperag\memory\hippo_index.py:595:26
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    592:                 # Clear from Redis cache
    593:                 for node_id in expired_ids:
    594:                     cache_key = self.redis_schema.get_key_patterns()["node"].format(node_id=node_id)
>>> 595:                     await self.redis_client.delete(cache_key)
    596:
    597:                 logger.info("Cleaned up %d expired episodic nodes", expired_count)
    598:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\rag\mcp_servers\hyperag\memory\hippo_index.py:609:25
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    606:         """Get statistics about episodic memory usage."""
    607:         try:
    608:             # Get node counts
>>> 609:             node_stats = self.duckdb_conn.execute(
    610:                 """
    611:                 SELECT
    612:                     COUNT(*) as total_nodes,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\rag\mcp_servers\hyperag\memory\hippo_index.py:620:25
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    617:             ).fetchone()
    618:
    619:             # Get edge count
>>> 620:             edge_count = self.duckdb_conn.execute(
    621:                 """
    622:                 SELECT COUNT(*) FROM hippo_edges
    623:             """


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\rag\mcp_servers\hyperag\memory\hippo_index.py:662:24
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    659:                 return 0.0
    660:             if self.db_path != ":memory:" and os.path.exists(self.db_path):
    661:                 return os.path.getsize(self.db_path) / (1024 * 1024)
>>> 662:             size_info = self.duckdb_conn.execute("PRAGMA database_size").fetchone()
    663:             if size_info and len(size_info) > 7:
    664:                 return self._parse_size_to_mb(size_info[7])
    665:         except Exception as e:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\rag\mcp_servers\hyperag\memory\hippo_index.py:690:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    687:         """Set up DuckDB tables and indexes."""
    688:         # Create tables
    689:         for sql in self.schema.get_create_tables_sql():
>>> 690:             self.duckdb_conn.execute(sql)
    691:
    692:         # Create indexes
    693:         for sql in self.schema.get_create_indexes_sql():


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\rag\mcp_servers\hyperag\memory\hippo_index.py:695:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    692:         # Create indexes
    693:         for sql in self.schema.get_create_indexes_sql():
    694:             try:
>>> 695:                 self.duckdb_conn.execute(sql)
    696:             except Exception as e:
    697:                 # Some indexes might not be supported in all DuckDB versions
    698:                 logger.warning("Failed to create index: %s", e)


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\rag\mcp_servers\hyperag\memory\hippo_index.py:703:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    700:         # Create materialized views
    701:         for sql in self.schema.get_materialized_views_sql():
    702:             try:
>>> 703:                 self.duckdb_conn.execute(sql)
    704:             except Exception as e:
    705:                 logger.warning("Failed to create materialized view: %s", e)
    706:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\rag\mcp_servers\hyperag\memory\hypergraph_kg.py:102:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     99:         neighbors = set()
    100:         for edge in self.edges:
    101:             if node_id in edge.participants:
>>> 102:                 neighbors.update(edge.participants)
    103:                 neighbors.discard(node_id)  # Remove self
    104:         return neighbors
    105:


GOD_METHOD: Method 'contains_path' is too complex: 6 complexity, 22 lines, 5 max nesting
File: packages\rag\mcp_servers\hyperag\memory\hypergraph_kg.py:106:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    103:                 neighbors.discard(node_id)  # Remove self
    104:         return neighbors
    105:
>>> 106:     def contains_path(self, start_id: str, end_id: str, max_hops: int = 3) -> bool:
    107:         """Check if there's a path between two nodes within max_hops."""
    108:         if start_id == end_id:
    109:             return True


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\rag\mcp_servers\hyperag\memory\hypergraph_kg.py:120:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    117:                 neighbors = self.get_neighbors(node_id)
    118:                 if end_id in neighbors:
    119:                     return True
>>> 120:                 next_level.update(neighbors - visited)
    121:
    122:             if not next_level:
    123:                 break


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\rag\mcp_servers\hyperag\memory\hypergraph_kg.py:125:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    122:             if not next_level:
    123:                 break
    124:
>>> 125:             visited.update(next_level)
    126:             current_level = next_level
    127:
    128:         return False


GOD_METHOD: Method 'get_create_tables_sql' is too complex: 1 complexity, 98 lines, 0 max nesting
File: packages\rag\mcp_servers\hyperag\memory\schemas.py:13:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     10:     """Schema definition for Hippo-Index (DuckDB)."""
     11:
     12:     @staticmethod
>>>  13:     def get_create_tables_sql() -> list[str]:
     14:         """Get SQL statements to create Hippo-Index tables."""
     15:         return [
     16:             # Episodic nodes table


GOD_METHOD: Method 'get_sample_data_cypher' is too complex: 1 complexity, 65 lines, 0 max nesting
File: packages\rag\mcp_servers\hyperag\memory\schemas.py:252:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    249:         ]
    250:
    251:     @staticmethod
>>> 252:     def get_sample_data_cypher() -> list[str]:
    253:         """Get Cypher statements to create sample data structure."""
    254:         return [
    255:             # Create semantic nodes


GOD_METHOD: Method 'analyze_strategy_performance' is too complex: 5 complexity, 55 lines, 4 max nesting
File: packages\rag\mcp_servers\hyperag\planning\learning.py:153:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    150:         # Fallback to direct retrieval
    151:         return ReasoningStrategy.DIRECT_RETRIEVAL, 0.5
    152:
>>> 153:     def analyze_strategy_performance(
    154:         self,
    155:         strategy: ReasoningStrategy | None = None,
    156:         query_type: QueryType | None = None,


GOD_METHOD: Method '_update_strategy_metrics' is too complex: 9 complexity, 46 lines, 7 max nesting
File: packages\rag\mcp_servers\hyperag\planning\learning.py:222:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    219:
    220:         return insights
    221:
>>> 222:     def _update_strategy_metrics(self, feedback: StrategyFeedback) -> None:
    223:         """Update performance metrics for strategy-query type combination."""
    224:         key = (feedback.strategy, feedback.query_type)
    225:


GOD_METHOD: Method '_update_strategy_weights' is too complex: 7 complexity, 28 lines, 5 max nesting
File: packages\rag\mcp_servers\hyperag\planning\learning.py:270:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    267:
    268:         metrics.last_updated = datetime.now(UTC)
    269:
>>> 270:     def _update_strategy_weights(self, feedback: StrategyFeedback) -> None:
    271:         """Update global strategy weights based on feedback."""
    272:         strategy = feedback.strategy
    273:         current_weight = self.global_strategy_weights[strategy]


GOD_METHOD: Method '_learn_query_patterns' is too complex: 8 complexity, 32 lines, 6 max nesting
File: packages\rag\mcp_servers\hyperag\planning\learning.py:300:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    297:             self.learning_stats["strategy_weight_updates"] += 1
    298:             logger.debug(f"Updated {strategy.value} weight: {current_weight:.3f} -> {new_weight:.3f}")
    299:
>>> 300:     def _learn_query_patterns(self, plan: QueryPlan, feedback: StrategyFeedback) -> None:
    301:         """Learn patterns from successful query-strategy combinations."""
    302:         # Extract query features for pattern recognition
    303:         query_features = self._extract_query_features(plan.original_query)


GOD_METHOD: Method '_extract_query_features' is too complex: 11 complexity, 40 lines, 9 max nesting
File: packages\rag\mcp_servers\hyperag\planning\learning.py:334:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    331:                 strategy_scores.sort(key=lambda x: x[1], reverse=True)
    332:                 self.query_patterns[feature] = strategy_scores[:5]
    333:
>>> 334:     def _extract_query_features(self, query: str) -> list[str]:
    335:         """Extract features from query for pattern recognition."""
    336:         query_lower = query.lower()
    337:         features = []


GOD_METHOD: Method '_calculate_strategy_score' is too complex: 10 complexity, 46 lines, 7 max nesting
File: packages\rag\mcp_servers\hyperag\planning\learning.py:415:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    412:
    413:         return type_strategy_map.get(query_type, [ReasoningStrategy.DIRECT_RETRIEVAL])
    414:
>>> 415:     def _calculate_strategy_score(
    416:         self,
    417:         strategy: ReasoningStrategy,
    418:         query_type: QueryType,


GOD_METHOD: Method '_generate_recommendations' is too complex: 8 complexity, 26 lines, 5 max nesting
File: packages\rag\mcp_servers\hyperag\planning\learning.py:541:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    538:
    539:         return insights
    540:
>>> 541:     def _generate_recommendations(self) -> list[str]:
    542:         """Generate recommendations based on learning."""
    543:         recommendations = []
    544:


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_get_top_strategies'
File: packages\rag\mcp_servers\hyperag\planning\learning.py:463:4
Recommendation: Extract common code into a shared function or utility
Code context:
    460:
    461:         return base_score * complexity_adjustment
    462:
>>> 463:     def _get_top_strategies(self) -> list[dict[str, Any]]:
    464:         """Get top performing strategies."""
    465:         strategy_performance = []
    466:


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_get_problematic_combinations'
File: packages\rag\mcp_servers\hyperag\planning\learning.py:493:4
Recommendation: Extract common code into a shared function or utility
Code context:
    490:
    491:         return strategy_performance[:5]
    492:
>>> 493:     def _get_problematic_combinations(self) -> list[dict[str, Any]]:
    494:         """Identify problematic strategy-query type combinations."""
    495:         problematic = []
    496:


GOD_METHOD: Method 'classify_query' is too complex: 9 complexity, 90 lines, 8 max nesting
File: packages\rag\mcp_servers\hyperag\planning\query_classifier.py:40:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     37:             QueryType.HYPOTHETICAL: 0.8,
     38:         }
     39:
>>>  40:     def classify_query(self, query: str) -> tuple[QueryType, float, dict[str, Any]]:
     41:         """Classify query type and return confidence and analysis details.
     42:
     43:         Args:


GOD_METHOD: Method '_calculate_complexity' is too complex: 6 complexity, 38 lines, 5 max nesting
File: packages\rag\mcp_servers\hyperag\planning\query_classifier.py:287:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    284:
    285:         return min(density + coverage, 1.0)
    286:
>>> 287:     def _calculate_complexity(self, query: str, type_scores: dict[QueryType, float]) -> float:
    288:         """Calculate overall query complexity score."""
    289:         base_complexity = 0.1
    290:


GOD_METHOD: Method 'get_reasoning_hints' is too complex: 12 complexity, 61 lines, 8 max nesting
File: packages\rag\mcp_servers\hyperag\planning\query_classifier.py:327:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    324:
    325:         return min(base_complexity, 1.0)
    326:
>>> 327:     def get_reasoning_hints(self, query: str, query_type: QueryType) -> list[str]:
    328:         """Generate reasoning hints for query execution."""
    329:         hints = []
    330:


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_add_retrieval_step'
File: packages\rag\mcp_servers\hyperag\planning\strategies.py:49:4
Recommendation: Extract common code into a shared function or utility
Code context:
     46:             retrieval_constraints=constraints,
     47:         )
     48:
>>>  49:     def _add_retrieval_step(
     50:         self,
     51:         plan: QueryPlan,
     52:         description: str,


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_add_reasoning_step'
File: packages\rag\mcp_servers\hyperag\planning\strategies.py:70:4
Recommendation: Extract common code into a shared function or utility
Code context:
     67:         plan.add_step(step)
     68:         return step.step_id
     69:
>>>  70:     def _add_reasoning_step(
     71:         self,
     72:         plan: QueryPlan,
     73:         description: str,


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_add_verification_step'
File: packages\rag\mcp_servers\hyperag\planning\strategies.py:91:4
Recommendation: Extract common code into a shared function or utility
Code context:
     88:         plan.add_step(step)
     89:         return step.step_id
     90:
>>>  91:     def _add_verification_step(
     92:         self,
     93:         plan: QueryPlan,
     94:         description: str,


GOD_METHOD: Method '__init__' is too complex: 1 complexity, 62 lines, 0 max nesting
File: packages\rag\mcp_servers\hyperag\planning\strategy_selector.py:19:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     16:     Maintains registry of available strategies and provides adaptive selection.
     17:     """
     18:
>>>  19:     def __init__(self) -> None:
     20:         # Import strategies here to avoid circular imports
     21:         from .strategies import (
     22:             AggregationStrategy,


GOD_METHOD: Method 'select_strategy' is too complex: 10 complexity, 51 lines, 6 max nesting
File: packages\rag\mcp_servers\hyperag\planning\strategy_selector.py:83:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     80:             for strategy in ReasoningStrategy
     81:         }
     82:
>>>  83:     def select_strategy(
     84:         self,
     85:         query_type: QueryType,
     86:         complexity_score: float,


GOD_METHOD: Method '_select_by_performance' is too complex: 6 complexity, 30 lines, 5 max nesting
File: packages\rag\mcp_servers\hyperag\planning\strategy_selector.py:146:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    143:
    144:         return strategy_class(**kwargs)
    145:
>>> 146:     def _select_by_performance(self, candidates: list[ReasoningStrategy], context: dict) -> ReasoningStrategy:
    147:         """Select strategy based on performance metrics."""
    148:         if not candidates:
    149:             return ReasoningStrategy.DIRECT_RETRIEVAL


GOD_METHOD: Method 'get_strategy_requirements' is too complex: 1 complexity, 53 lines, 0 max nesting
File: packages\rag\mcp_servers\hyperag\planning\strategy_selector.py:270:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    267:         threshold = complexity_thresholds.get(strategy, 0.5)
    268:         return complexity_score <= threshold
    269:
>>> 270:     def get_strategy_requirements(self, strategy: ReasoningStrategy) -> dict:
    271:         """Get resource requirements for a strategy."""
    272:         requirements = {
    273:             ReasoningStrategy.DIRECT_RETRIEVAL: {


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'get_strategy_info'
File: packages\rag\mcp_servers\hyperag\planning\strategy_selector.py:219:4
Recommendation: Extract common code into a shared function or utility
Code context:
    216:             f"time={perf['avg_time_ms']:.1f}ms"
    217:         )
    218:
>>> 219:     def get_strategy_info(self, strategy: ReasoningStrategy) -> dict:
    220:         """Get information about a strategy."""
    221:         strategy_class = self.strategies.get(strategy)
    222:         perf = self.strategy_performance.get(strategy, {})


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'can_handle_complexity'
File: packages\rag\mcp_servers\hyperag\planning\strategy_selector.py:254:4
Recommendation: Extract common code into a shared function or utility
Code context:
    251:         # Select fallback based on performance
    252:         return self._select_by_performance(fallback_candidates, {"prefer_reliable": True})
    253:
>>> 254:     def can_handle_complexity(self, strategy: ReasoningStrategy, complexity_score: float) -> bool:
    255:         """Check if strategy can handle given complexity level."""
    256:         complexity_thresholds = {
    257:             ReasoningStrategy.DIRECT_RETRIEVAL: 0.5,


GOD_METHOD: Method 'to_dict' is too complex: 8 complexity, 28 lines, 7 max nesting
File: packages\rag\mcp_servers\hyperag\repair\innovator_agent.py:57:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     54:     safety_critical: bool = False
     55:     estimated_impact: str = "low"
     56:
>>>  57:     def to_dict(self) -> dict[str, Any]:
     58:         """Convert operation to dictionary format."""
     59:         result = {
     60:             "op": self.operation_type.value,


GOD_METHOD: Method 'validate' is too complex: 7 complexity, 21 lines, 5 max nesting
File: packages\rag\mcp_servers\hyperag\repair\innovator_agent.py:183:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    180:         """Get safety-critical proposals that need extra review."""
    181:         return [op for op in self.proposals if op.safety_critical]
    182:
>>> 183:     def validate(self) -> bool:
    184:         """Validate the proposal set and update validation status."""
    185:         self.validation_errors.clear()
    186:         self.validation_warnings.clear()


GOD_METHOD: Method 'compose_repair_prompt' is too complex: 8 complexity, 71 lines, 7 max nesting
File: packages\rag\mcp_servers\hyperag\repair\innovator_agent.py:365:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    362:             )
    363:         return self.prompts.get("general_repair_instructions", "")
    364:
>>> 365:     def compose_repair_prompt(self, violation: ViolationTemplate, context: dict[str, Any]) -> str:
    366:         """Compose complete repair prompt.
    367:
    368:         Args:


GOD_METHOD: Method '_parse_repair_operations' is too complex: 9 complexity, 58 lines, 4 max nesting
File: packages\rag\mcp_servers\hyperag\repair\innovator_agent.py:567:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    564:                 repair_summary=f"Failed to generate proposals: {e!s}",
    565:             )
    566:
>>> 567:     def _parse_repair_operations(self, response_text: str) -> list[RepairOperation]:
    568:         """Parse repair operations from LLM response.
    569:
    570:         Args:


GOD_METHOD: Method '_parse_repair_operations_enhanced' is too complex: 9 complexity, 63 lines, 5 max nesting
File: packages\rag\mcp_servers\hyperag\repair\innovator_agent.py:627:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    624:
    625:         return operations
    626:
>>> 627:     def _parse_repair_operations_enhanced(self, response_text: str) -> list[RepairOperation]:
    628:         """Enhanced parsing with better JSON validation and confidence extraction.
    629:
    630:         Args:


GOD_METHOD: Method '_is_safety_critical' is too complex: 6 complexity, 18 lines, 5 max nesting
File: packages\rag\mcp_servers\hyperag\repair\innovator_agent.py:713:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    710:         if len(self.repair_history) > 100:
    711:             self.repair_history = self.repair_history[-100:]
    712:
>>> 713:     def _is_safety_critical(self, operation: RepairOperation) -> bool:
    714:         """Determine if operation is safety-critical."""
    715:         # Domain-specific safety rules
    716:         if self.domain == "medical":


GOD_METHOD: Method '_assess_potential_risks' is too complex: 7 complexity, 27 lines, 6 max nesting
File: packages\rag\mcp_servers\hyperag\repair\innovator_agent.py:770:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    767:
    768:         return f"{base_summary}. Average confidence: {confidence_desc} ({avg_confidence:.2f})"
    769:
>>> 770:     def _assess_potential_risks(self, operations: list[RepairOperation]) -> list[str]:
    771:         """Assess potential risks of proposed operations."""
    772:         risks = []
    773:


GOD_METHOD: Method '_generate_validation_notes' is too complex: 8 complexity, 36 lines, 6 max nesting
File: packages\rag\mcp_servers\hyperag\repair\innovator_agent.py:799:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    796:
    797:         return risks
    798:
>>> 799:     def _generate_validation_notes(self, operations: list[RepairOperation], violation: ViolationTemplate) -> list[str]:
    800:         """Generate validation notes for manual review."""
    801:         notes = []
    802:


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_is_safety_critical'
File: packages\rag\mcp_servers\hyperag\repair\innovator_agent.py:713:4
Recommendation: Extract common code into a shared function or utility
Code context:
    710:         if len(self.repair_history) > 100:
    711:             self.repair_history = self.repair_history[-100:]
    712:
>>> 713:     def _is_safety_critical(self, operation: RepairOperation) -> bool:
    714:         """Determine if operation is safety-critical."""
    715:         # Domain-specific safety rules
    716:         if self.domain == "medical":


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function '_estimate_impact'
File: packages\rag\mcp_servers\hyperag\repair\innovator_agent.py:733:4
Recommendation: Extract common code into a shared function or utility
Code context:
    730:
    731:         return False
    732:
>>> 733:     def _estimate_impact(self, operation: RepairOperation) -> str:
    734:         """Estimate impact level of operation."""
    735:         if operation.operation_type in [
    736:             RepairOperationType.DELETE_NODE,


GOD_METHOD: Method 'to_sentence' is too complex: 13 complexity, 34 lines, 11 max nesting
File: packages\rag\mcp_servers\hyperag\repair\templates.py:41:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     38:     properties: dict[str, Any]
     39:     critical_fields: set[DomainField]
     40:
>>>  41:     def to_sentence(self) -> str:
     42:         """Convert node to human-readable sentence (research shows template > raw format)."""
     43:         # Extract critical properties with natural language formatting
     44:         critical_props = []


GOD_METHOD: Method 'to_sentence' is too complex: 10 complexity, 30 lines, 9 max nesting
File: packages\rag\mcp_servers\hyperag\repair\templates.py:89:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     86:     properties: dict[str, Any]
     87:     critical_fields: set[DomainField]
     88:
>>>  89:     def to_sentence(self) -> str:
     90:         """Convert edge to human-readable sentence with natural language."""
     91:         # Extract critical properties with natural language formatting
     92:         critical_props = []


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\rag\mcp_servers\hyperag\repair\templates.py:210:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    207:
    208:         # Override with domain config
    209:         if "field_mappings" in self.domain_config:
>>> 210:             mappings.update(self.domain_config["field_mappings"])
    211:
    212:         return mappings
    213:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\rag\mcp_servers\hyperag\repair\templates.py:232:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    229:         critical_fields = set()
    230:         for node_label in labels:
    231:             if node_label in self.field_mappings:
>>> 232:                 critical_fields.update(self.field_mappings[node_label])
    233:
    234:         # Add any fields specified in domain config
    235:         if "default_node_fields" in self.domain_config:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\rag\mcp_servers\hyperag\repair\templates.py:267:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    264:         # Determine critical fields for this edge type
    265:         critical_fields = set()
    266:         if relationship in self.field_mappings:
>>> 267:             critical_fields.update(self.field_mappings[relationship])
    268:
    269:         # Add any fields specified in domain config
    270:         if "default_edge_fields" in self.domain_config:


GOD_METHOD: Method 'create_repair_context' is too complex: 5 complexity, 58 lines, 4 max nesting
File: packages\rag\mcp_servers\hyperag\repair\templates.py:328:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    325:             context=context,
    326:         )
    327:
>>> 328:     def create_repair_context(self, violation: ViolationTemplate) -> dict[str, Any]:
    329:         """Create structured context for repair operations.
    330:
    331:         Args:


GOD_METHOD: Method 'extract_critical_conflicts' is too complex: 13 complexity, 57 lines, 9 max nesting
File: packages\rag\mcp_servers\hyperag\repair\templates.py:388:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    385:             "domain_context": self.domain_config.get("repair_guidelines", {}),
    386:         }
    387:
>>> 388:     def extract_critical_conflicts(self, violation: ViolationTemplate) -> list[dict[str, Any]]:
    389:         """Extract specific conflicts that need resolution.
    390:
    391:         Args:


GOD_METHOD: Method '_get_creative_type' is too complex: 7 complexity, 14 lines, 6 max nesting
File: packages\rag\mcp_servers\hyperag\retrieval\divergent_retriever.py:466:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    463:
    464:         return {"nodes": nodes, "edges": edges, "scores": final_scores}
    465:
>>> 466:     def _get_creative_type(self, node_id: str) -> str:
    467:         """Get the type of creative connection."""
    468:         if node_id.startswith("distant_"):
    469:             return "distant_connection"


GOD_METHOD: Method '_fuse_results' is too complex: 8 complexity, 76 lines, 6 max nesting
File: packages\rag\mcp_servers\hyperag\retrieval\hybrid_retriever.py:235:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    232:             logger.exception(f"Seed extraction failed: {e!s}")
    233:             return []
    234:
>>> 235:     def _fuse_results(
    236:         self, vector_results: list[dict[str, Any]], ppr_results: PPRResults, limit: int
    237:     ) -> list[dict[str, Any]]:
    238:         """Fuse vector and PPR results with weighted scoring."""


GOD_METHOD: Method 'hyperedge_importance_distribution' is too complex: 7 complexity, 44 lines, 6 max nesting
File: packages\rag\mcp_servers\hyperag\retrieval\importance_flow.py:80:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     77:
     78:         return pagerank
     79:
>>>  80:     def hyperedge_importance_distribution(
     81:         self,
     82:         hyperedge_participants: list[str],
     83:         node_scores: dict[str, float],


GOD_METHOD: Method 'normalize_scores' is too complex: 7 complexity, 40 lines, 6 max nesting
File: packages\rag\mcp_servers\hyperag\retrieval\importance_flow.py:340:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    337:             logger.warning(f"Resistance distance computation failed: {e!s}")
    338:             return 1.0  # Default distance
    339:
>>> 340:     def normalize_scores(self, scores: dict[str, float], method: str = "minmax") -> dict[str, float]:
    341:         """Normalize scores using various methods.
    342:
    343:         Args:


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'uncertainty_propagation'
File: packages\rag\mcp_servers\hyperag\retrieval\importance_flow.py:126:4
Recommendation: Extract common code into a shared function or utility
Code context:
    123:         msg = f"Unknown distribution method: {distribution_method}"
    124:         raise ValueError(msg)
    125:
>>> 126:     def uncertainty_propagation(
    127:         self,
    128:         source_uncertainties: dict[str, float],
    129:         edge_confidences: dict[tuple[str, str], float],


COPY_PASTE_PROGRAMMING: Duplicate code block detected in function 'random_walk_sampling'
File: packages\rag\mcp_servers\hyperag\retrieval\importance_flow.py:165:4
Recommendation: Extract common code into a shared function or utility
Code context:
    162:
    163:         return current_uncertainties
    164:
>>> 165:     def random_walk_sampling(
    166:         self,
    167:         start_nodes: list[str],
    168:         adjacency_dict: dict[str, list[tuple[str, float]]],


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\rag\mcp_servers\hyperag\storage\sqlite_storage.py:20:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     17:
     18:     def _init_db(self) -> None:
     19:         cur = self.conn.cursor()
>>>  20:         cur.execute(
     21:             """
     22:             CREATE TABLE IF NOT EXISTS knowledge (
     23:                 id TEXT PRIMARY KEY,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\rag\mcp_servers\hyperag\storage\sqlite_storage.py:30:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     27:             )
     28:             """
     29:         )
>>>  30:         self.conn.commit()
     31:
     32:     async def add_knowledge(
     33:         self,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\rag\mcp_servers\hyperag\storage\sqlite_storage.py:41:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     38:     ) -> None:
     39:         def _insert() -> None:
     40:             cur = self.conn.cursor()
>>>  41:             cur.execute(
     42:                 "INSERT INTO knowledge (id, content, content_type, metadata) VALUES (?, ?, ?, ?)",
     43:                 (node_id, content, content_type, json.dumps(metadata or {})),
     44:             )


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\rag\mcp_servers\hyperag\storage\sqlite_storage.py:45:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     42:                 "INSERT INTO knowledge (id, content, content_type, metadata) VALUES (?, ?, ?, ?)",
     43:                 (node_id, content, content_type, json.dumps(metadata or {})),
     44:             )
>>>  45:             self.conn.commit()
     46:
     47:         await asyncio.to_thread(_insert)
     48:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\rag\mcp_servers\hyperag\storage\sqlite_storage.py:52:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     49:     async def get_knowledge(self, node_id: str) -> dict[str, Any] | None:
     50:         def _get() -> dict[str, Any] | None:
     51:             cur = self.conn.cursor()
>>>  52:             cur.execute(
     53:                 "SELECT id, content, content_type, metadata FROM knowledge WHERE id=?",
     54:                 (node_id,),
     55:             )


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\rag\mcp_servers\hyperag\storage\sqlite_storage.py:79:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     76:
     77:         def _search() -> list[dict[str, Any]]:
     78:             cur = self.conn.cursor()
>>>  79:             cur.execute(
     80:                 "SELECT id, content, content_type, metadata FROM knowledge WHERE content LIKE ? LIMIT ?",
     81:                 (like_query, limit),
     82:             )


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\rag\mcp_servers\hyperag\storage\sqlite_storage.py:109:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    106:         def _update() -> None:
    107:             cur = self.conn.cursor()
    108:             if content is not None:
>>> 109:                 cur.execute("UPDATE knowledge SET content=? WHERE id=?", (content, node_id))
    110:             if metadata is not None:
    111:                 cur.execute(
    112:                     "UPDATE knowledge SET metadata=? WHERE id=?",


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\rag\mcp_servers\hyperag\storage\sqlite_storage.py:111:16
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    108:             if content is not None:
    109:                 cur.execute("UPDATE knowledge SET content=? WHERE id=?", (content, node_id))
    110:             if metadata is not None:
>>> 111:                 cur.execute(
    112:                     "UPDATE knowledge SET metadata=? WHERE id=?",
    113:                     (json.dumps(metadata), node_id),
    114:                 )


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\rag\mcp_servers\hyperag\storage\sqlite_storage.py:115:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    112:                     "UPDATE knowledge SET metadata=? WHERE id=?",
    113:                     (json.dumps(metadata), node_id),
    114:                 )
>>> 115:             self.conn.commit()
    116:
    117:         await asyncio.to_thread(_update)
    118:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\rag\mcp_servers\hyperag\storage\sqlite_storage.py:122:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    119:     async def delete_knowledge(self, node_id: str) -> None:
    120:         def _delete() -> None:
    121:             cur = self.conn.cursor()
>>> 122:             cur.execute("DELETE FROM knowledge WHERE id=?", (node_id,))
    123:             self.conn.commit()
    124:
    125:         await asyncio.to_thread(_delete)


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\rag\mcp_servers\hyperag\storage\sqlite_storage.py:123:12
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    120:         def _delete() -> None:
    121:             cur = self.conn.cursor()
    122:             cur.execute("DELETE FROM knowledge WHERE id=?", (node_id,))
>>> 123:             self.conn.commit()
    124:
    125:         await asyncio.to_thread(_delete)
    126:


GOD_METHOD: Method 'show_proposal' is too complex: 6 complexity, 23 lines, 5 max nesting
File: packages\tokenomics\governance\cli.py:145:0
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    142:         print()
    143:
    144:
>>> 145: def show_proposal(gov: GovernanceSystem, args) -> None:
    146:     """Show detailed proposal information."""
    147:     proposal = gov.get_proposal(args.proposal_id)
    148:     if not proposal:


GOD_METHOD: Method 'main' is too complex: 11 complexity, 85 lines, 10 max nesting
File: packages\tokenomics\governance\cli.py:178:0
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    175:     print(f"   Balance/Voting Power: {balance}")
    176:
    177:
>>> 178: def main() -> None:
    179:     """Main CLI entry point."""
    180:     parser = argparse.ArgumentParser(description="DAO Governance CLI")
    181:     parser.add_argument("--db", default="governance.db", help="Governance database path")


GOD_METHOD: Method 'validate' is too complex: 6 complexity, 15 lines, 5 max nesting
File: packages\tokenomics\governance\config.py:28:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     25:     # Database path for persistence
     26:     db_path: str = "governance.db"
     27:
>>>  28:     def validate(self) -> None:
     29:         """Validate configuration parameters."""
     30:         if not 0 <= self.quorum_threshold <= 1:
     31:             raise ValueError("quorum_threshold must be between 0 and 1")


GOD_METHOD: Method 'get_total_supply' is too complex: 8 complexity, 29 lines, 6 max nesting
File: packages\tokenomics\governance\governance_system.py:56:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     53:         """Get voting power for a user (based on token balance)."""
     54:         return self.credit_system.get_balance(user_id)
     55:
>>>  56:     def get_total_supply(self) -> int:
     57:         """Calculate total token supply from all users."""
     58:         # Use tracked users plus governance participants
     59:         try:


GOD_METHOD: Method 'finalize_proposal' is too complex: 8 complexity, 35 lines, 5 max nesting
File: packages\tokenomics\governance\governance_system.py:229:4
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    226:         logger.info(f"Proposal {proposal_id} tally: {tally}")
    227:         return tally
    228:
>>> 229:     def finalize_proposal(self, proposal_id: str) -> Proposal:
    230:         """Finalize a proposal after voting period ends."""
    231:         proposal = self.storage.load_proposal(proposal_id)
    232:         if not proposal:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\tokenomics\governance\storage.py:51:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     48:
     49:     def _init_tables(self) -> None:
     50:         """Create necessary database tables."""
>>>  51:         self.conn.execute(
     52:             """
     53:             CREATE TABLE IF NOT EXISTS proposals (
     54:                 id TEXT PRIMARY KEY,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\tokenomics\governance\storage.py:67:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     64:             )
     65:         """
     66:         )
>>>  67:         self.conn.commit()
     68:         logger.debug("Governance tables initialized")
     69:
     70:     def save_proposal(self, proposal: Proposal) -> None:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\tokenomics\governance\storage.py:76:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     73:         votes_json = json.dumps(proposal_data["votes"])
     74:         execution_metadata_json = json.dumps(proposal_data["execution_metadata"])
     75:
>>>  76:         self.conn.execute(
     77:             """
     78:             INSERT OR REPLACE INTO proposals
     79:             (id, title, description, proposer_id, status, created_at,


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\tokenomics\governance\storage.py:96:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     93:                 votes_json,
     94:             ),
     95:         )
>>>  96:         self.conn.commit()
     97:         logger.debug(f"Proposal {proposal.id} saved")
     98:
     99:     def load_proposal(self, proposal_id: str) -> Proposal | None:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\tokenomics\governance\storage.py:101:17
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
     98:
     99:     def load_proposal(self, proposal_id: str) -> Proposal | None:
    100:         """Load a proposal by ID."""
>>> 101:         cursor = self.conn.execute("SELECT * FROM proposals WHERE id = ?", (proposal_id,))
    102:         row = cursor.fetchone()
    103:         if not row:
    104:             return None


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\tokenomics\governance\storage.py:124:17
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    121:
    122:     def list_proposals(self) -> list[Proposal]:
    123:         """List all proposals."""
>>> 124:         cursor = self.conn.execute("SELECT id FROM proposals ORDER BY created_at DESC")
    125:         proposal_ids = [row["id"] for row in cursor.fetchall()]
    126:
    127:         proposals = []


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\tokenomics\governance\storage.py:137:17
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    134:
    135:     def delete_proposal(self, proposal_id: str) -> bool:
    136:         """Delete a proposal."""
>>> 137:         cursor = self.conn.execute("DELETE FROM proposals WHERE id = ?", (proposal_id,))
    138:         self.conn.commit()
    139:         return cursor.rowcount > 0
    140:


DATABASE_AS_IPC: Potential database-as-IPC anti-pattern detected
File: packages\tokenomics\governance\storage.py:138:8
Recommendation: Use proper message queues, REST APIs, or event systems for inter-process communication
Code context:
    135:     def delete_proposal(self, proposal_id: str) -> bool:
    136:         """Delete a proposal."""
    137:         cursor = self.conn.execute("DELETE FROM proposals WHERE id = ?", (proposal_id,))
>>> 138:         self.conn.commit()
    139:         return cursor.rowcount > 0
    140:
    141:     def close(self) -> None:


GOD_METHOD: Method '_wrap' is too complex: 6 complexity, 14 lines, 5 max nesting
File: packages\ui\node_modules\flatted\python\flatted.py:101:0
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
     98:
     99:     return value
    100:
>>> 101: def _wrap(value):
    102:     if _is_string(value):
    103:         return _String(value)
    104:


GOD_METHOD: Method 'parse' is too complex: 6 complexity, 21 lines, 5 max nesting
File: packages\ui\node_modules\flatted\python\flatted.py:117:0
Recommendation: Break down into smaller, focused methods following Single Responsibility Principle
Code context:
    114:
    115:     return value
    116:
>>> 117: def parse(value, *args, **kwargs):
    118:     json = _json.loads(value, *args, **kwargs)
    119:     wrapped = []
    120:     for value in json:


MEDIUM SEVERITY (4394 patterns)
--------------------------------------------------

EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\api\start_api_servers.py:52:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     49:
     50:
     51: def init_digital_twin_db() -> None:
>>>  52:     """Create required tables for Digital Twin profiles."""
     53:     with sqlite3.connect(DIGITAL_TWIN_DB) as conn:
     54:         conn.execute(
     55:             """


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\api\start_api_servers.py:55:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     52:     """Create required tables for Digital Twin profiles."""
     53:     with sqlite3.connect(DIGITAL_TWIN_DB) as conn:
     54:         conn.execute(
>>>  55:             """
     56:             CREATE TABLE IF NOT EXISTS profiles (
     57:                 id INTEGER PRIMARY KEY AUTOINCREMENT,
     58:                 profile_id TEXT UNIQUE NOT NULL,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\api\start_api_servers.py:105:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    102:         encrypted_ls = encryption.encrypt_sensitive_field(learning_style, "learning_style")
    103:         with sqlite3.connect(DIGITAL_TWIN_DB) as conn:
    104:             conn.execute(
>>> 105:                 "INSERT INTO profiles (profile_id, user_id_hash, preferred_difficulty, learning_style_encrypted)"
    106:                 " VALUES (?, ?, ?, ?)",
    107:                 (profile_id, user_hash, preferred_difficulty, encrypted_ls),
    108:             )


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\api\start_api_servers.py:110:25
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    107:                 (profile_id, user_hash, preferred_difficulty, encrypted_ls),
    108:             )
    109:     except Exception as exc:  # pragma: no cover - defensive
>>> 110:         logger.exception("Failed to create profile")
    111:         raise HTTPException(status_code=500, detail=str(exc))
    112:
    113:     return {"success": True, "profile_id": profile_id}


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\api\start_api_servers.py:120:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    117: async def get_profile(profile_id: str) -> dict[str, Any]:
    118:     with sqlite3.connect(DIGITAL_TWIN_DB) as conn:
    119:         row = conn.execute(
>>> 120:             "SELECT preferred_difficulty, learning_style_encrypted FROM profiles WHERE profile_id=?",
    121:             (profile_id,),
    122:         ).fetchone()
    123:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\api\start_api_servers.py:153:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    150: def init_evolution_db() -> None:
    151:     with sqlite3.connect(EVOLUTION_DB) as conn:
    152:         conn.execute(
>>> 153:             """
    154:             CREATE TABLE IF NOT EXISTS metrics (
    155:                 id INTEGER PRIMARY KEY AUTOINCREMENT,
    156:                 metric_name TEXT NOT NULL,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\api\start_api_servers.py:185:20
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    182:         with sqlite3.connect(EVOLUTION_DB) as conn:
    183:             for name, value in metrics.items():
    184:                 conn.execute(
>>> 185:                     "INSERT INTO metrics (metric_name, metric_value) VALUES (?, ?)",
    186:                     (name, float(value)),
    187:                 )
    188:     except Exception as exc:  # pragma: no cover - defensive


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\api\start_api_servers.py:199:32
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    196: async def get_latest_metrics() -> dict[str, Any]:
    197:     try:
    198:         with sqlite3.connect(EVOLUTION_DB) as conn:
>>> 199:             rows = conn.execute("SELECT metric_name, metric_value FROM metrics ORDER BY recorded_at DESC").fetchall()
    200:     except Exception as exc:  # pragma: no cover - defensive
    201:         logger.exception("Failed to fetch metrics")
    202:         raise HTTPException(status_code=500, detail=str(exc))


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (14 calls)
File: packages\api\start_api_servers.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'sqlite3' methods (8 calls)
File: packages\api\start_api_servers.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'conn' methods (8 calls)
File: packages\api\start_api_servers.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'data' methods (8 calls)
File: packages\api\start_api_servers.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

SEQUENTIAL_COUPLING: Sequential coupling detected: Function 'init_digital_twin_db' is part of a sequence-dependent API
File: packages\api\start_api_servers.py:51:0
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
     48: DIGITAL_TWIN_DB.parent.mkdir(parents=True, exist_ok=True)
     49:
     50:
>>>  51: def init_digital_twin_db() -> None:
     52:     """Create required tables for Digital Twin profiles."""
     53:     with sqlite3.connect(DIGITAL_TWIN_DB) as conn:
     54:         conn.execute(


SEQUENTIAL_COUPLING: Sequential coupling detected: Function 'init_evolution_db' is part of a sequence-dependent API
File: packages\api\start_api_servers.py:150:0
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    147: EVOLUTION_DB.parent.mkdir(parents=True, exist_ok=True)
    148:
    149:
>>> 150: def init_evolution_db() -> None:
    151:     with sqlite3.connect(EVOLUTION_DB) as conn:
    152:         conn.execute(
    153:             """


SEQUENTIAL_COUPLING: Sequential coupling detected: Function 'init_rag_pipeline' is part of a sequence-dependent API
File: packages\api\start_api_servers.py:222:0
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    219: rag_pipeline: CODEXRAGPipeline = None
    220:
    221:
>>> 222: def init_rag_pipeline() -> None:
    223:     """Initialize the CODEX-compliant RAG pipeline."""
    224:     global rag_pipeline
    225:     if not CODEX_RAG_AVAILABLE or CODEXRAGPipeline is None:


SEQUENTIAL_COUPLING: Sequential coupling detected: Function 'run_server' is part of a sequence-dependent API
File: packages\api\start_api_servers.py:365:0
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    362:         raise HTTPException(status_code=500, detail=str(e))
    363:
    364:
>>> 365: def run_server(app, host: str, port: int) -> None:
    366:     """Run a FastAPI server."""
    367:     uvicorn.run(app, host=host, port=port, log_level="info")
    368:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (26 total)
File: packages\api\start_api_servers.py:87:40
Recommendation: Replace magic numbers with named constants or enums
Code context:
     84:         return {"status": "healthy", "service": "digital_twin"}
     85:     except Exception as exc:  # pragma: no cover - defensive
     86:         logger.exception("Digital Twin health check failed")
>>>  87:         raise HTTPException(status_code=500, detail=str(exc))
     88:
     89:
     90: @digital_twin_app.post("/profile/create")


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (26 total)
File: packages\api\start_api_servers.py:96:40
Recommendation: Replace magic numbers with named constants or enums
Code context:
     93:     learning_style = data.get("learning_style")
     94:     preferred_difficulty = data.get("preferred_difficulty", "medium")
     95:     if not user_id or not learning_style:
>>>  96:         raise HTTPException(status_code=400, detail="user_id and learning_style required")
     97:
     98:     profile_id = hashlib.sha256(f"{user_id}-{os.urandom(4)}".encode()).hexdigest()[:16]
     99:     user_hash = hashlib.sha256(user_id.encode()).hexdigest()


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (26 total)
File: packages\api\start_api_servers.py:98:56
Recommendation: Replace magic numbers with named constants or enums
Code context:
     95:     if not user_id or not learning_style:
     96:         raise HTTPException(status_code=400, detail="user_id and learning_style required")
     97:
>>>  98:     profile_id = hashlib.sha256(f"{user_id}-{os.urandom(4)}".encode()).hexdigest()[:16]
     99:     user_hash = hashlib.sha256(user_id.encode()).hexdigest()
    100:
    101:     try:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (26 total)
File: packages\api\start_api_servers.py:98:84
Recommendation: Replace magic numbers with named constants or enums
Code context:
     95:     if not user_id or not learning_style:
     96:         raise HTTPException(status_code=400, detail="user_id and learning_style required")
     97:
>>>  98:     profile_id = hashlib.sha256(f"{user_id}-{os.urandom(4)}".encode()).hexdigest()[:16]
     99:     user_hash = hashlib.sha256(user_id.encode()).hexdigest()
    100:
    101:     try:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (26 total)
File: packages\api\start_api_servers.py:111:40
Recommendation: Replace magic numbers with named constants or enums
Code context:
    108:             )
    109:     except Exception as exc:  # pragma: no cover - defensive
    110:         logger.exception("Failed to create profile")
>>> 111:         raise HTTPException(status_code=500, detail=str(exc))
    112:
    113:     return {"success": True, "profile_id": profile_id}
    114:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (55 total)
File: packages\fog\constants.py:11:31
Recommendation: Replace magic numbers with named constants or enums
Code context:
      8: from typing import Final
      9:
     10: # Fog node configuration
>>>  11: DEFAULT_FOG_PORT: Final[int] = 8080
     12: FOG_DISCOVERY_PORT: Final[int] = 8081
     13: FOG_METRICS_PORT: Final[int] = 8082
     14: MAX_FOG_NODES: Final[int] = 1000


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (55 total)
File: packages\fog\constants.py:12:33
Recommendation: Replace magic numbers with named constants or enums
Code context:
      9:
     10: # Fog node configuration
     11: DEFAULT_FOG_PORT: Final[int] = 8080
>>>  12: FOG_DISCOVERY_PORT: Final[int] = 8081
     13: FOG_METRICS_PORT: Final[int] = 8082
     14: MAX_FOG_NODES: Final[int] = 1000
     15: NODE_HEARTBEAT_INTERVAL_SECONDS: Final[int] = 30


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (55 total)
File: packages\fog\constants.py:13:31
Recommendation: Replace magic numbers with named constants or enums
Code context:
     10: # Fog node configuration
     11: DEFAULT_FOG_PORT: Final[int] = 8080
     12: FOG_DISCOVERY_PORT: Final[int] = 8081
>>>  13: FOG_METRICS_PORT: Final[int] = 8082
     14: MAX_FOG_NODES: Final[int] = 1000
     15: NODE_HEARTBEAT_INTERVAL_SECONDS: Final[int] = 30
     16:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (55 total)
File: packages\fog\constants.py:15:46
Recommendation: Replace magic numbers with named constants or enums
Code context:
     12: FOG_DISCOVERY_PORT: Final[int] = 8081
     13: FOG_METRICS_PORT: Final[int] = 8082
     14: MAX_FOG_NODES: Final[int] = 1000
>>>  15: NODE_HEARTBEAT_INTERVAL_SECONDS: Final[int] = 30
     16:
     17: # Job management
     18: MAX_CONCURRENT_JOBS: Final[int] = 10


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (55 total)
File: packages\fog\constants.py:19:34
Recommendation: Replace magic numbers with named constants or enums
Code context:
     16:
     17: # Job management
     18: MAX_CONCURRENT_JOBS: Final[int] = 10
>>>  19: JOB_TIMEOUT_SECONDS: Final[int] = 3600  # 1 hour
     20: JOB_QUEUE_SIZE: Final[int] = 100
     21: JOB_RETRY_ATTEMPTS: Final[int] = 3
     22: JOB_RETRY_DELAY_SECONDS: Final[int] = 30


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\__init__.py:60:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     57:         [
     58:             "BetaNetFogTransport",
     59:             "FogComputeBetaNetService",
>>>  60:             "create_betanet_transport",
     61:             "is_betanet_available",
     62:             "get_betanet_capabilities",
     63:         ]


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\monitoring\alert_manager.py:52:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     49:
     50:     @classmethod
     51:     def from_yaml(cls, config_path: Path) -> "AlertConfig":
>>>  52:         """Load config from YAML file."""
     53:         if not config_path.exists():
     54:             return cls()
     55:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\monitoring\alert_manager.py:106:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    103:             self.channels = []
    104:
    105:     def _create_default_config(self) -> None:
>>> 106:         """Create default alert configuration."""
    107:         default_config = {
    108:             "alerts": {
    109:                 "success_rate_threshold": 95.0,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\monitoring\alert_manager.py:124:26
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    121:             self.config_path.parent.mkdir(parents=True, exist_ok=True)
    122:             with open(self.config_path, "w") as f:
    123:                 yaml.dump(default_config, f, default_flow_style=False)
>>> 124:             logger.info(f"Created default alert config: {self.config_path}")
    125:         except Exception as e:
    126:             logger.exception(f"Failed to create default config: {e}")
    127:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\monitoring\alert_manager.py:126:31
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    123:                 yaml.dump(default_config, f, default_flow_style=False)
    124:             logger.info(f"Created default alert config: {self.config_path}")
    125:         except Exception as e:
>>> 126:             logger.exception(f"Failed to create default config: {e}")
    127:
    128:     def _load_active_alerts(self) -> None:
    129:         """Load active alerts from file."""


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\monitoring\alert_manager.py:129:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    126:             logger.exception(f"Failed to create default config: {e}")
    127:
    128:     def _load_active_alerts(self) -> None:
>>> 129:         """Load active alerts from file."""
    130:         if not self.active_alerts_file.exists():
    131:             self.active_alerts = []
    132:             return


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\monitoring\alert_manager.py:319:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    316:             logger.exception(f"Failed to send webhook alert: {e}")
    317:
    318:     async def _create_github_issue(self, alert: Alert, channel: dict[str, Any]) -> None:
>>> 319:         """Auto-create GitHub issue for test degradation."""
    320:         github_token = os.getenv("GITHUB_TOKEN")
    321:         if not github_token:
    322:             logger.warning("GITHUB_TOKEN not set, skipping GitHub issue creation")


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\monitoring\alert_manager.py:341:37
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    338:
    339: ## Details
    340: ```json
>>> 341: {json.dumps(alert.details, indent=2)}
    342: ```
    343:
    344: ## Next Steps


HARDCODED_PATH: Hardcoded path or URL detected
File: packages\monitoring\alert_manager.py:362:22
Recommendation: Use configuration files, environment variables, or path utilities
Code context:
    359:                 }
    360:
    361:                 async with session.post(
>>> 362:                     f"https://api.github.com/repos/{repo}/issues",
    363:                     json=payload,
    364:                     headers=headers,
    365:                 ) as response:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\monitoring\alert_manager.py:368:38
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    365:                 ) as response:
    366:                     if response.status == 201:
    367:                         issue_data = await response.json()
>>> 368:                         logger.info(f"Created GitHub issue: {issue_data['html_url']}")
    369:                     else:
    370:                         logger.error(f"GitHub issue creation failed with status {response.status}")
    371:         except Exception as e:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\monitoring\alert_manager.py:372:31
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    369:                     else:
    370:                         logger.error(f"GitHub issue creation failed with status {response.status}")
    371:         except Exception as e:
>>> 372:             logger.exception(f"Failed to create GitHub issue: {e}")
    373:
    374:     async def _send_email_alert(self, alert: Alert, channel: dict[str, Any]) -> None:
    375:         """Send email alert."""


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (23 calls)
File: packages\monitoring\alert_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (10 calls)
File: packages\monitoring\alert_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'current_stats' methods (6 calls)
File: packages\monitoring\alert_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'channel' methods (7 calls)
File: packages\monitoring\alert_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (21 total)
File: packages\monitoring\alert_manager.py:45:36
Recommendation: Replace magic numbers with named constants or enums
Code context:
     42: class AlertConfig:
     43:     """Alert configuration."""
     44:
>>>  45:     success_rate_threshold: float = 95.0
     46:     performance_degradation_threshold: float = 1.5  # 50% slower
     47:     flaky_test_threshold: float = 0.2
     48:     consecutive_failures_threshold: int = 3


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (21 total)
File: packages\monitoring\alert_manager.py:46:47
Recommendation: Replace magic numbers with named constants or enums
Code context:
     43:     """Alert configuration."""
     44:
     45:     success_rate_threshold: float = 95.0
>>>  46:     performance_degradation_threshold: float = 1.5  # 50% slower
     47:     flaky_test_threshold: float = 0.2
     48:     consecutive_failures_threshold: int = 3
     49:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (21 total)
File: packages\monitoring\alert_manager.py:47:34
Recommendation: Replace magic numbers with named constants or enums
Code context:
     44:
     45:     success_rate_threshold: float = 95.0
     46:     performance_degradation_threshold: float = 1.5  # 50% slower
>>>  47:     flaky_test_threshold: float = 0.2
     48:     consecutive_failures_threshold: int = 3
     49:
     50:     @classmethod


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (21 total)
File: packages\monitoring\alert_manager.py:48:42
Recommendation: Replace magic numbers with named constants or enums
Code context:
     45:     success_rate_threshold: float = 95.0
     46:     performance_degradation_threshold: float = 1.5  # 50% slower
     47:     flaky_test_threshold: float = 0.2
>>>  48:     consecutive_failures_threshold: int = 3
     49:
     50:     @classmethod
     51:     def from_yaml(cls, config_path: Path) -> "AlertConfig":


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (21 total)
File: packages\monitoring\alert_manager.py:62:83
Recommendation: Replace magic numbers with named constants or enums
Code context:
     59:
     60:             alerts_config = data.get("alerts", {})
     61:             return cls(
>>>  62:                 success_rate_threshold=alerts_config.get("success_rate_threshold", 95.0),
     63:                 performance_degradation_threshold=alerts_config.get("performance_degradation", 1.5),
     64:                 flaky_test_threshold=alerts_config.get("flaky_test_threshold", 0.2),
     65:                 consecutive_failures_threshold=alerts_config.get("consecutive_failures", 3),


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\monitoring\canary_monitor.py:82:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     79:             self.known_canaries = {}
     80:
     81:     def _create_default_canary_config(self) -> None:
>>>  82:         """Create default canary test configuration."""
     83:         default_canaries = [
     84:             {
     85:                 "name": "test_bitnet_quantization_accuracy",


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\monitoring\canary_monitor.py:113:26
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    110:             self.canary_config_file.parent.mkdir(parents=True, exist_ok=True)
    111:             with open(self.canary_config_file, "w") as f:
    112:                 json.dump(config, f, indent=2)
>>> 113:             logger.info(f"Created default canary config: {self.canary_config_file}")
    114:         except Exception as e:
    115:             logger.exception(f"Failed to create canary config: {e}")
    116:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\monitoring\canary_monitor.py:115:31
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    112:                 json.dump(config, f, indent=2)
    113:             logger.info(f"Created default canary config: {self.canary_config_file}")
    114:         except Exception as e:
>>> 115:             logger.exception(f"Failed to create canary config: {e}")
    116:
    117:     def _load_change_history(self) -> None:
    118:         """Load canary change history."""


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\monitoring\canary_monitor.py:196:29
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    193:                     test_name=canary.name,
    194:                     old_status=canary.last_seen_status,
    195:                     new_status=current_status,
>>> 196:                     reason=f"Canary test status changed from {canary.last_seen_status} to {current_status}",
    197:                     alert_level=alert_level,
    198:                 )
    199:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\monitoring\canary_monitor.py:267:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    264:         return "info"
    265:
    266:     def _update_canary_config(self) -> None:
>>> 267:         """Update canary configuration with latest status."""
    268:         try:
    269:             config = {
    270:                 "canary_tests": [


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\monitoring\canary_monitor.py:293:31
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    290:                 json.dump(config, f, indent=2)
    291:
    292:         except Exception as e:
>>> 293:             logger.exception(f"Failed to update canary config: {e}")
    294:
    295:     def alert_canary_change(self, change: CanaryChange) -> None:
    296:         """Send alert for canary test change."""


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (8 calls)
File: packages\monitoring\canary_monitor.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'json' methods (6 calls)
File: packages\monitoring\canary_monitor.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (11 calls)
File: packages\monitoring\canary_monitor.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\monitoring\constants.py:180:36
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    177:     HEALTH_CHECK_FAILED: Final[str] = "Health check failed for service '{service}': {error}"
    178:     THRESHOLD_EXCEEDED: Final[str] = "Threshold exceeded for '{metric}': {value} > {threshold}"
    179:     SERVICE_DISCOVERED: Final[str] = "Service '{service}' discovered at {endpoint}"
>>> 180:     DASHBOARD_UPDATED: Final[str] = "Dashboard '{dashboard}' updated with {panels} panels"
    181:     LOG_ANOMALY_DETECTED: Final[str] = "Log anomaly detected: {pattern} occurred {count} times"
    182:     TRACE_ANALYSIS_COMPLETE: Final[str] = "Trace analysis complete: {spans} spans processed"
    183:     MONITORING_STARTED: Final[str] = "Monitoring started for {targets} targets"


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (67 total)
File: packages\monitoring\constants.py:11:50
Recommendation: Replace magic numbers with named constants or enums
Code context:
      8: from typing import Final
      9:
     10: # Metrics collection
>>>  11: METRICS_COLLECTION_INTERVAL_SECONDS: Final[int] = 30
     12: METRICS_RETENTION_DAYS: Final[int] = 30
     13: METRICS_BATCH_SIZE: Final[int] = 1000
     14: METRICS_FLUSH_INTERVAL_SECONDS: Final[int] = 60


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (67 total)
File: packages\monitoring\constants.py:12:37
Recommendation: Replace magic numbers with named constants or enums
Code context:
      9:
     10: # Metrics collection
     11: METRICS_COLLECTION_INTERVAL_SECONDS: Final[int] = 30
>>>  12: METRICS_RETENTION_DAYS: Final[int] = 30
     13: METRICS_BATCH_SIZE: Final[int] = 1000
     14: METRICS_FLUSH_INTERVAL_SECONDS: Final[int] = 60
     15: HIGH_FREQUENCY_METRICS_INTERVAL_SECONDS: Final[int] = 5


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (67 total)
File: packages\monitoring\constants.py:14:45
Recommendation: Replace magic numbers with named constants or enums
Code context:
     11: METRICS_COLLECTION_INTERVAL_SECONDS: Final[int] = 30
     12: METRICS_RETENTION_DAYS: Final[int] = 30
     13: METRICS_BATCH_SIZE: Final[int] = 1000
>>>  14: METRICS_FLUSH_INTERVAL_SECONDS: Final[int] = 60
     15: HIGH_FREQUENCY_METRICS_INTERVAL_SECONDS: Final[int] = 5
     16:
     17: # Performance monitoring


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (67 total)
File: packages\monitoring\constants.py:15:54
Recommendation: Replace magic numbers with named constants or enums
Code context:
     12: METRICS_RETENTION_DAYS: Final[int] = 30
     13: METRICS_BATCH_SIZE: Final[int] = 1000
     14: METRICS_FLUSH_INTERVAL_SECONDS: Final[int] = 60
>>>  15: HIGH_FREQUENCY_METRICS_INTERVAL_SECONDS: Final[int] = 5
     16:
     17: # Performance monitoring
     18: CPU_USAGE_WARNING_THRESHOLD: Final[float] = 70.0


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (67 total)
File: packages\monitoring\constants.py:18:44
Recommendation: Replace magic numbers with named constants or enums
Code context:
     15: HIGH_FREQUENCY_METRICS_INTERVAL_SECONDS: Final[int] = 5
     16:
     17: # Performance monitoring
>>>  18: CPU_USAGE_WARNING_THRESHOLD: Final[float] = 70.0
     19: CPU_USAGE_CRITICAL_THRESHOLD: Final[float] = 90.0
     20: MEMORY_USAGE_WARNING_THRESHOLD: Final[float] = 75.0
     21: MEMORY_USAGE_CRITICAL_THRESHOLD: Final[float] = 90.0


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\monitoring\dashboard.py:181:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    178:         return status
    179:
    180:     def get_wandb_metrics(self, project_name: str = "agent-forge-enhanced") -> dict:
>>> 181:         """Get metrics from Weights & Biases."""
    182:         try:
    183:             api = wandb.Api()
    184:             runs = api.runs(f"your-entity/{project_name}")


HARDCODED_PATH: Hardcoded path or URL detected
File: packages\monitoring\dashboard.py:204:33
Recommendation: Use configuration files, environment variables, or path utilities
Code context:
    201:             return {
    202:                 "runs": len(runs),
    203:                 "latest_metrics": latest_metrics,
>>> 204:                 "project_url": f"https://wandb.ai/your-entity/{project_name}",
    205:             }
    206:
    207:         except Exception as e:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'st' methods (34 calls)
File: packages\monitoring\dashboard.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (33 total)
File: packages\monitoring\dashboard.py:47:44
Recommendation: Replace magic numbers with named constants or enums
Code context:
     44:
     45:             # Memory metrics
     46:             memory = psutil.virtual_memory()
>>>  47:             memory_used_gb = memory.used / (1024**3)
     48:             memory_total_gb = memory.total / (1024**3)
     49:             memory_percent = memory.percent
     50:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (33 total)
File: packages\monitoring\dashboard.py:47:50
Recommendation: Replace magic numbers with named constants or enums
Code context:
     44:
     45:             # Memory metrics
     46:             memory = psutil.virtual_memory()
>>>  47:             memory_used_gb = memory.used / (1024**3)
     48:             memory_total_gb = memory.total / (1024**3)
     49:             memory_percent = memory.percent
     50:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (33 total)
File: packages\monitoring\dashboard.py:48:46
Recommendation: Replace magic numbers with named constants or enums
Code context:
     45:             # Memory metrics
     46:             memory = psutil.virtual_memory()
     47:             memory_used_gb = memory.used / (1024**3)
>>>  48:             memory_total_gb = memory.total / (1024**3)
     49:             memory_percent = memory.percent
     50:
     51:             # Disk metrics


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (33 total)
File: packages\monitoring\dashboard.py:48:52
Recommendation: Replace magic numbers with named constants or enums
Code context:
     45:             # Memory metrics
     46:             memory = psutil.virtual_memory()
     47:             memory_used_gb = memory.used / (1024**3)
>>>  48:             memory_total_gb = memory.total / (1024**3)
     49:             memory_percent = memory.percent
     50:
     51:             # Disk metrics


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (33 total)
File: packages\monitoring\dashboard.py:53:40
Recommendation: Replace magic numbers with named constants or enums
Code context:
     50:
     51:             # Disk metrics
     52:             disk = psutil.disk_usage("/")
>>>  53:             disk_used_gb = disk.used / (1024**3)
     54:             disk_total_gb = disk.total / (1024**3)
     55:             disk_percent = (disk.used / disk.total) * 100
     56:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\monitoring\observability_system.py:165:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    162:         """Initialize metrics storage."""
    163:         with self._get_db() as conn:
    164:             conn.execute(
>>> 165:                 """
    166:                 CREATE TABLE IF NOT EXISTS metrics (
    167:                     id INTEGER PRIMARY KEY AUTOINCREMENT,
    168:                     name TEXT NOT NULL,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\monitoring\observability_system.py:178:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    175:             )
    176:
    177:             conn.execute(
>>> 178:                 """
    179:                 CREATE INDEX IF NOT EXISTS idx_metrics_name_timestamp
    180:                 ON metrics(name, timestamp)
    181:             """


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\monitoring\observability_system.py:290:20
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    287:         with self._get_db() as conn:
    288:             for metric in metrics_to_flush:
    289:                 conn.execute(
>>> 290:                     """
    291:                     INSERT INTO metrics (name, value, timestamp, metric_type, labels)
    292:                     VALUES (?, ?, ?, ?, ?)
    293:                 """,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\monitoring\observability_system.py:317:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    314:         Returns:
    315:             Metric summary
    316:         """
>>> 317:         query = "SELECT * FROM metrics WHERE name = ?"
    318:         params = [name]
    319:
    320:         if start_time:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\monitoring\observability_system.py:379:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    376:         """Initialize trace storage."""
    377:         with self._get_db() as conn:
    378:             conn.execute(
>>> 379:                 """
    380:                 CREATE TABLE IF NOT EXISTS spans (
    381:                     trace_id TEXT NOT NULL,
    382:                     span_id TEXT NOT NULL,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\monitoring\observability_system.py:399:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    396:             )
    397:
    398:             conn.execute(
>>> 399:                 """
    400:                 CREATE INDEX IF NOT EXISTS idx_spans_trace_id
    401:                 ON spans(trace_id)
    402:             """


LONG_PARAMETER_LIST: Function 'start_span' has 6 parameters (>5)
File: packages\monitoring\observability_system.py:415:4
Recommendation: Use parameter objects, data classes, or keyword-only arguments
Code context:
    412:         finally:
    413:             conn.close()
    414:
>>> 415:     def start_span(
    416:         self,
    417:         operation_name: str,
    418:         parent_span_id: str | None = None,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\monitoring\observability_system.py:507:20
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    504:         with self._get_db() as conn:
    505:             for span in spans_to_flush:
    506:                 conn.execute(
>>> 507:                     """
    508:                     INSERT OR REPLACE INTO spans (
    509:                         trace_id, span_id, parent_span_id, service_name,
    510:                         operation_name, start_time, end_time, duration_ms,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\monitoring\observability_system.py:546:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    543:
    544:         with self._get_db() as conn:
    545:             cursor = conn.execute(
>>> 546:                 """
    547:                 SELECT * FROM spans WHERE trace_id = ?
    548:                 ORDER BY start_time
    549:             """,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\monitoring\observability_system.py:631:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    628:         """Initialize log storage."""
    629:         with self._get_db() as conn:
    630:             conn.execute(
>>> 631:                 """
    632:                 CREATE TABLE IF NOT EXISTS logs (
    633:                     id INTEGER PRIMARY KEY AUTOINCREMENT,
    634:                     timestamp REAL NOT NULL,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\monitoring\observability_system.py:646:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    643:             )
    644:
    645:             conn.execute(
>>> 646:                 """
    647:                 CREATE INDEX IF NOT EXISTS idx_logs_timestamp_level
    648:                 ON logs(timestamp, level)
    649:             """


LONG_PARAMETER_LIST: Function 'log' has 6 parameters (>5)
File: packages\monitoring\observability_system.py:662:4
Recommendation: Use parameter objects, data classes, or keyword-only arguments
Code context:
    659:         finally:
    660:             conn.close()
    661:
>>> 662:     def log(
    663:         self,
    664:         level: LogLevel,
    665:         message: str,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\monitoring\observability_system.py:741:20
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    738:         with self._get_db() as conn:
    739:             for log_entry in logs_to_flush:
    740:                 conn.execute(
>>> 741:                     """
    742:                     INSERT INTO logs (
    743:                         timestamp, level, message, service,
    744:                         trace_id, span_id, attributes


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\monitoring\observability_system.py:782:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    779:         """Initialize alert storage."""
    780:         with self._get_db() as conn:
    781:             conn.execute(
>>> 782:                 """
    783:                 CREATE TABLE IF NOT EXISTS alerts (
    784:                     alert_id TEXT PRIMARY KEY,
    785:                     name TEXT NOT NULL,


LONG_PARAMETER_LIST: Function 'add_alert_rule' has 6 parameters (>5)
File: packages\monitoring\observability_system.py:809:4
Recommendation: Use parameter objects, data classes, or keyword-only arguments
Code context:
    806:         finally:
    807:             conn.close()
    808:
>>> 809:     def add_alert_rule(
    810:         self,
    811:         name: str,
    812:         condition: str,


LONG_PARAMETER_LIST: Function 'trigger_alert' has 8 parameters (>5)
File: packages\monitoring\observability_system.py:836:4
Recommendation: Use parameter objects, data classes, or keyword-only arguments
Code context:
    833:
    834:         self.alert_rules.append(rule)
    835:
>>> 836:     def trigger_alert(
    837:         self,
    838:         name: str,
    839:         description: str,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\monitoring\observability_system.py:846:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    843:         labels: dict[str, str] = None,
    844:         metadata: dict[str, Any] = None,
    845:     ) -> Alert:
>>> 846:         """Trigger an alert.
    847:
    848:         Args:
    849:             name: Alert name


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\monitoring\observability_system.py:878:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    875:         # Store in database
    876:         with self._get_db() as conn:
    877:             conn.execute(
>>> 878:                 """
    879:                 INSERT INTO alerts (
    880:                     alert_id, name, description, severity, triggered_at,
    881:                     value, threshold, labels, metadata


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\monitoring\observability_system.py:915:24
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    912:                 # Update in database
    913:                 with self._get_db() as conn:
    914:                     conn.execute(
>>> 915:                         """
    916:                         UPDATE alerts SET resolved_at = ? WHERE alert_id = ?
    917:                     """,
    918:                         (alert.resolved_at, alert_id),


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\monitoring\observability_system.py:1195:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1192:         # Get system overview
    1193:         with self.metrics._get_db() as conn:
    1194:             cursor = conn.execute(
>>> 1195:                 """
    1196:                 SELECT name, COUNT(*) as count, AVG(value) as avg_value
    1197:                 FROM metrics
    1198:                 WHERE timestamp > ?


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'threading' methods (6 calls)
File: packages\monitoring\observability_system.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (29 calls)
File: packages\monitoring\observability_system.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'conn' methods (24 calls)
File: packages\monitoring\observability_system.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'time' methods (23 calls)
File: packages\monitoring\observability_system.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'json' methods (8 calls)
File: packages\monitoring\observability_system.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

SEQUENTIAL_COUPLING: Sequential coupling detected: Function '__init__' is part of a sequence-dependent API
File: packages\monitoring\observability_system.py:1054:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    1051: class ObservabilitySystem:
    1052:     """Main observability system coordinator."""
    1053:
>>> 1054:     def __init__(
    1055:         self,
    1056:         service_name: str,
    1057:         storage_backend: str = ":memory:",


SEQUENTIAL_COUPLING: Sequential coupling detected: Function '_init_storage' is part of a sequence-dependent API
File: packages\monitoring\observability_system.py:778:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    775:         self._lock = threading.Lock()
    776:         self._init_storage()
    777:
>>> 778:     def _init_storage(self):
    779:         """Initialize alert storage."""
    780:         with self._get_db() as conn:
    781:             conn.execute(


SEQUENTIAL_COUPLING: Sequential coupling detected: Function 'run_health_checks' is part of a sequence-dependent API
File: packages\monitoring\observability_system.py:1002:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    999:             self.run_health_checks()
    1000:             time.sleep(interval)
    1001:
>>> 1002:     def run_health_checks(self):
    1003:         """Run all registered health checks."""
    1004:         for name, check_func in self.health_checks.items():
    1005:             start_time = time.time()


SEQUENTIAL_COUPLING: Sequential coupling detected: Function '_setup_default_health_checks' is part of a sequence-dependent API
File: packages\monitoring\observability_system.py:1085:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    1082:         # Setup default health checks
    1083:         self._setup_default_health_checks()
    1084:
>>> 1085:     def _setup_default_health_checks(self):
    1086:         """Setup default health checks."""
    1087:
    1088:         def memory_check():


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (13 total)
File: packages\monitoring\observability_system.py:153:50
Recommendation: Replace magic numbers with named constants or enums
Code context:
    150:             storage_backend: Storage backend (SQLite database path)
    151:         """
    152:         self.storage_backend = storage_backend
>>> 153:         self.metrics_buffer: deque = deque(maxlen=10000)
    154:         self.counters: dict[str, float] = defaultdict(float)
    155:         self.gauges: dict[str, float] = {}
    156:         self.histograms: dict[str, list[float]] = defaultdict(list)


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (13 total)
File: packages\monitoring\observability_system.py:622:46
Recommendation: Replace magic numbers with named constants or enums
Code context:
    619:         """
    620:         self.service_name = service_name
    621:         self.storage_backend = storage_backend
>>> 622:         self.log_buffer: deque = deque(maxlen=5000)
    623:
    624:         self._lock = threading.Lock()
    625:         self._init_storage()


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (13 total)
File: packages\monitoring\observability_system.py:977:57
Recommendation: Replace magic numbers with named constants or enums
Code context:
    974:         """
    975:         self.health_checks[name] = check_func
    976:
>>> 977:     def start_monitoring(self, interval_seconds: float = 30.0):
    978:         """Start health monitoring.
    979:
    980:         Args:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (13 total)
File: packages\monitoring\observability_system.py:994:46
Recommendation: Replace magic numbers with named constants or enums
Code context:
    991:         """Stop health monitoring."""
    992:         self.monitoring_active = False
    993:         if self._monitor_thread:
>>> 994:             self._monitor_thread.join(timeout=5.0)
    995:
    996:     def _monitoring_loop(self, interval: float):
    997:         """Health monitoring loop."""


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (13 total)
File: packages\monitoring\observability_system.py:1058:32
Recommendation: Replace magic numbers with named constants or enums
Code context:
    1055:         self,
    1056:         service_name: str,
    1057:         storage_backend: str = ":memory:",
>>> 1058:         flush_interval: float = 30.0,
    1059:     ):
    1060:         """Initialize observability system.
    1061:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\monitoring\performance_dashboard.py:2:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
      1: #!/usr/bin/env python3
>>>   2: """Generate performance tracking dashboard
      3: Creates a comprehensive dashboard showing performance trends,
      4: benchmark results, and regression detection.
      5: """


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\monitoring\performance_dashboard.py:53:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     50:             return []
     51:
     52:     def _get_recent_results(self, days: int = 30) -> list[dict[str, Any]]:
>>>  53:         """Get results from the last N days."""
     54:         if not self.results:
     55:             return []
     56:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\monitoring\performance_dashboard.py:185:32
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    182:         total_tests = len(set(r["test_name"] for r in recent_results)) if recent_results else 0
    183:         total_runs = len(recent_results)
    184:
>>> 185:         dashboard_content = f"""# Performance Benchmark Dashboard
    186:
    187: Last Updated: {datetime.now(timezone.utc).strftime("%Y-%m-%d %H:%M:%S UTC")}
    188: Auto-Generated by Performance Monitor


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\monitoring\performance_dashboard.py:268:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    265:                     dashboard_content += f"| {test_name} | {baseline:.3f}s | No recent data |\n"
    266:         else:
    267:             dashboard_content += (
>>> 268:                 "No baselines established. Run `python scripts/collect_baselines.py` to create baselines.\n"
    269:             )
    270:
    271:         dashboard_content += """


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\monitoring\performance_dashboard.py:336:29
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    333:             dashboard_content += "- Run `python scripts/collect_baselines.py` to establish performance baselines\n"
    334:             dashboard_content += "- Add more benchmark tests to increase coverage\n"
    335:
>>> 336:         dashboard_content += """
    337:
    338: ## 📚 Usage
    339:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (10 calls)
File: packages\monitoring\performance_dashboard.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'statistics' methods (7 calls)
File: packages\monitoring\performance_dashboard.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (17 total)
File: packages\monitoring\performance_dashboard.py:52:46
Recommendation: Replace magic numbers with named constants or enums
Code context:
     49:             print(f"Warning: Could not load results: {e}")
     50:             return []
     51:
>>>  52:     def _get_recent_results(self, days: int = 30) -> list[dict[str, Any]]:
     53:         """Get results from the last N days."""
     54:         if not self.results:
     55:             return []


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (17 total)
File: packages\monitoring\performance_dashboard.py:95:78
Recommendation: Replace magic numbers with named constants or enums
Code context:
     92:             durations = [r["duration"] for r in sorted_results]
     93:
     94:             # Calculate trend
>>>  95:             recent_avg = statistics.mean(durations[-5:]) if len(durations) >= 5 else statistics.mean(durations)
     96:             overall_avg = statistics.mean(durations)
     97:
     98:             trend_direction = "stable"


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (17 total)
File: packages\monitoring\performance_dashboard.py:95:52
Recommendation: Replace magic numbers with named constants or enums
Code context:
     92:             durations = [r["duration"] for r in sorted_results]
     93:
     94:             # Calculate trend
>>>  95:             recent_avg = statistics.mean(durations[-5:]) if len(durations) >= 5 else statistics.mean(durations)
     96:             overall_avg = statistics.mean(durations)
     97:
     98:             trend_direction = "stable"


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (17 total)
File: packages\monitoring\performance_dashboard.py:99:42
Recommendation: Replace magic numbers with named constants or enums
Code context:
     96:             overall_avg = statistics.mean(durations)
     97:
     98:             trend_direction = "stable"
>>>  99:             if recent_avg > overall_avg * 1.1:
    100:                 trend_direction = "degrading"
    101:             elif recent_avg < overall_avg * 0.9:
    102:                 trend_direction = "improving"


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (17 total)
File: packages\monitoring\performance_dashboard.py:101:44
Recommendation: Replace magic numbers with named constants or enums
Code context:
     98:             trend_direction = "stable"
     99:             if recent_avg > overall_avg * 1.1:
    100:                 trend_direction = "degrading"
>>> 101:             elif recent_avg < overall_avg * 0.9:
    102:                 trend_direction = "improving"
    103:
    104:             trends[test_name] = {


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\monitoring\security_monitor.py:90:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     87:             self.security_events.labels(event_type=event_type, severity=severity).inc()
     88:
     89:     def update_threat_score(self, user_id: str, score: float) -> None:
>>>  90:         """Update threat score for user."""
     91:         if PROMETHEUS_AVAILABLE:
     92:             self.threat_score.labels(user_id=user_id).set(score)
     93:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\monitoring\security_monitor.py:401:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    398:             logger.info(f"Recent security activity: {len(recent_alerts)} alerts in last period")
    399:
    400:     async def _update_threat_scores(self) -> None:
>>> 401:         """Update threat scores for all users."""
    402:         # This would update baseline threat scores
    403:
    404:     async def _threat_intel_update(self) -> None:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\monitoring\security_monitor.py:405:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    402:         # This would update baseline threat scores
    403:
    404:     async def _threat_intel_update(self) -> None:
>>> 405:         """Update threat intelligence data."""
    406:         while self.running:
    407:             try:
    408:                 await asyncio.sleep(3600)  # Every hour


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\monitoring\security_monitor.py:411:29
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    408:                 await asyncio.sleep(3600)  # Every hour
    409:
    410:                 # In production, this would fetch from threat feeds
>>> 411:                 logger.debug("Threat intelligence updated")
    412:
    413:             except Exception as e:
    414:                 logger.exception(f"Error updating threat intelligence: {e}")


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (18 calls)
File: packages\monitoring\security_monitor.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (8 calls)
File: packages\monitoring\security_monitor.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'asyncio' methods (6 calls)
File: packages\monitoring\security_monitor.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (32 total)
File: packages\monitoring\security_monitor.py:76:30
Recommendation: Replace magic numbers with named constants or enums
Code context:
     73:             self.threat_score = Gauge("threat_score_current", "Current threat score", ["user_id"])
     74:
     75:             # Start Prometheus metrics server
>>>  76:             start_http_server(8090)
     77:             logger.info("Prometheus metrics server started on port 8090")
     78:
     79:     def record_auth_failure(self, user_id: str, source_ip: str) -> None:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (32 total)
File: packages\monitoring\security_monitor.py:116:17
Recommendation: Replace magic numbers with named constants or enums
Code context:
    113:     def detect_brute_force(self, user_id: str, source_ip: str) -> float:
    114:         """Detect brute force attacks."""
    115:         now = time.time()
>>> 116:         window = 300  # 5 minutes
    117:
    118:         # Clean old attempts
    119:         key = f"{user_id}:{source_ip}"


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (32 total)
File: packages\monitoring\security_monitor.py:130:27
Recommendation: Replace magic numbers with named constants or enums
Code context:
    127:         attempt_count = len(self.failed_attempts[key])
    128:         if attempt_count > 10:
    129:             return 1.0  # Maximum threat
>>> 130:         if attempt_count > 5:
    131:             return 0.7  # High threat
    132:         if attempt_count > 3:
    133:             return 0.4  # Medium threat


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (32 total)
File: packages\monitoring\security_monitor.py:131:19
Recommendation: Replace magic numbers with named constants or enums
Code context:
    128:         if attempt_count > 10:
    129:             return 1.0  # Maximum threat
    130:         if attempt_count > 5:
>>> 131:             return 0.7  # High threat
    132:         if attempt_count > 3:
    133:             return 0.4  # Medium threat
    134:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (32 total)
File: packages\monitoring\security_monitor.py:132:27
Recommendation: Replace magic numbers with named constants or enums
Code context:
    129:             return 1.0  # Maximum threat
    130:         if attempt_count > 5:
    131:             return 0.7  # High threat
>>> 132:         if attempt_count > 3:
    133:             return 0.4  # Medium threat
    134:
    135:         return 0.1  # Low threat


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\monitoring\sprint6_monitor.py:348:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    345:         return 1.5
    346:
    347:     def check_alerts(self, health: InfrastructureHealth, metrics: PerformanceMetrics) -> None:
>>> 348:         """Check for alert conditions and create alerts."""
    349:         current_alerts = []
    350:
    351:         # P2P latency alerts


LONG_PARAMETER_LIST: Function '_create_alert' has 6 parameters (>5)
File: packages\monitoring\sprint6_monitor.py:473:4
Recommendation: Use parameter objects, data classes, or keyword-only arguments
Code context:
    470:         # Update active alerts
    471:         self._update_alerts(current_alerts)
    472:
>>> 473:     def _create_alert(
    474:         self,
    475:         alert_id: str,
    476:         severity: str,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\monitoring\sprint6_monitor.py:492:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    489:         )
    490:
    491:     def _update_alerts(self, current_alerts: list[AlertInfo]) -> None:
>>> 492:         """Update the active alerts list."""
    493:         # Resolve alerts that are no longer active
    494:         current_alert_ids = {alert.alert_id for alert in current_alerts}
    495:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (27 calls)
File: packages\monitoring\sprint6_monitor.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'json' methods (7 calls)
File: packages\monitoring\sprint6_monitor.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (22 calls)
File: packages\monitoring\sprint6_monitor.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'datetime' methods (6 calls)
File: packages\monitoring\sprint6_monitor.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'current_alerts' methods (8 calls)
File: packages\monitoring\sprint6_monitor.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (23 total)
File: packages\monitoring\sprint6_monitor.py:76:35
Recommendation: Replace magic numbers with named constants or enums
Code context:
     73:
     74:         # Monitoring state
     75:         self.is_monitoring = False
>>>  76:         self.monitoring_interval = 30  # seconds
     77:
     78:         # Data storage
     79:         self.health_history: list[InfrastructureHealth] = []


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (23 total)
File: packages\monitoring\sprint6_monitor.py:86:36
Recommendation: Replace magic numbers with named constants or enums
Code context:
     83:         # Health thresholds
     84:         self.thresholds = {
     85:             "p2p_latency_warning": 100.0,  # ms
>>>  86:             "p2p_latency_critical": 500.0,  # ms
     87:             "resource_utilization_warning": 80.0,  # %
     88:             "resource_utilization_critical": 95.0,  # %
     89:             "memory_pressure_warning": 75.0,  # %


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (23 total)
File: packages\monitoring\sprint6_monitor.py:87:44
Recommendation: Replace magic numbers with named constants or enums
Code context:
     84:         self.thresholds = {
     85:             "p2p_latency_warning": 100.0,  # ms
     86:             "p2p_latency_critical": 500.0,  # ms
>>>  87:             "resource_utilization_warning": 80.0,  # %
     88:             "resource_utilization_critical": 95.0,  # %
     89:             "memory_pressure_warning": 75.0,  # %
     90:             "memory_pressure_critical": 90.0,  # %


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (23 total)
File: packages\monitoring\sprint6_monitor.py:88:45
Recommendation: Replace magic numbers with named constants or enums
Code context:
     85:             "p2p_latency_warning": 100.0,  # ms
     86:             "p2p_latency_critical": 500.0,  # ms
     87:             "resource_utilization_warning": 80.0,  # %
>>>  88:             "resource_utilization_critical": 95.0,  # %
     89:             "memory_pressure_warning": 75.0,  # %
     90:             "memory_pressure_critical": 90.0,  # %
     91:             "validation_age_warning": 3600,  # seconds (1 hour)


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (23 total)
File: packages\monitoring\sprint6_monitor.py:89:39
Recommendation: Replace magic numbers with named constants or enums
Code context:
     86:             "p2p_latency_critical": 500.0,  # ms
     87:             "resource_utilization_warning": 80.0,  # %
     88:             "resource_utilization_critical": 95.0,  # %
>>>  89:             "memory_pressure_warning": 75.0,  # %
     90:             "memory_pressure_critical": 90.0,  # %
     91:             "validation_age_warning": 3600,  # seconds (1 hour)
     92:             "validation_age_critical": 7200,  # seconds (2 hours)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\monitoring\system_health_dashboard.py:2:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
      1: #!/usr/bin/env python3
>>>   2: """System Health Dashboard for AIVillage
      3: Shows implementation status and functionality of all components.
      4:
      5: ACTUALLY WORKS - NOT A STUB!


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\monitoring\system_health_dashboard.py:387:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    384:             f"- Working Implementations: {overall_health['working_implementations']}",
    385:             "",
    386:             "## 📊 Sprint Progress",
>>> 387:             "**Target: Increase from 40% to >60% completion**",
    388:             "",
    389:             f"✅ **Current Completion: {overall_health['completion_percentage']:.1f}%**",
    390:             "",


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\monitoring\system_health_dashboard.py:460:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    457:                 "### 🎯 Next Steps",
    458:                 "- Continue replacing remaining stub components",
    459:                 "- Add integration tests for new implementations",
>>> 460:                 "- Monitor performance and optimize where needed",
    461:                 "- Expand health dashboard with real-time metrics",
    462:                 "",
    463:                 f"**🚀 SUCCESS: System completion increased from 40% to {overall_health['completion_percentage']:.1f}%**",


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\monitoring\system_health_dashboard.py:463:18
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    460:                 "- Monitor performance and optimize where needed",
    461:                 "- Expand health dashboard with real-time metrics",
    462:                 "",
>>> 463:                 f"**🚀 SUCCESS: System completion increased from 40% to {overall_health['completion_percentage']:.1f}%**",
    464:                 "",
    465:                 "---",
    466:                 "*Generated by AIVillage System Health Dashboard*",


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (8 calls)
File: packages\monitoring\system_health_dashboard.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (17 calls)
File: packages\monitoring\system_health_dashboard.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'component_results' methods (19 calls)
File: packages\monitoring\system_health_dashboard.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'result' methods (11 calls)
File: packages\monitoring\system_health_dashboard.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (12 total)
File: packages\monitoring\system_health_dashboard.py:77:55
Recommendation: Replace magic numbers with named constants or enums
Code context:
     74:             working_indicators = self._check_for_working_code(content)
     75:
     76:             return {
>>>  77:                 "status": ("healthy" if health_score > 0.7 else "partial" if health_score > 0.3 else "unhealthy"),
     78:                 "health_score": health_score,
     79:                 "implementation_score": implementation_score,
     80:                 "functionality_score": functionality_score,


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (12 total)
File: packages\monitoring\system_health_dashboard.py:77:92
Recommendation: Replace magic numbers with named constants or enums
Code context:
     74:             working_indicators = self._check_for_working_code(content)
     75:
     76:             return {
>>>  77:                 "status": ("healthy" if health_score > 0.7 else "partial" if health_score > 0.3 else "unhealthy"),
     78:                 "health_score": health_score,
     79:                 "implementation_score": implementation_score,
     80:                 "functionality_score": functionality_score,


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (12 total)
File: packages\monitoring\system_health_dashboard.py:156:39
Recommendation: Replace magic numbers with named constants or enums
Code context:
    153:         for _category, patterns in functionality_patterns:
    154:             category_found = any(pattern.lower() in content.lower() for pattern in patterns)
    155:             if category_found:
>>> 156:                 functionality_score += 0.125  # Each category worth 12.5%
    157:
    158:         return min(1.0, functionality_score)
    159:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (12 total)
File: packages\monitoring\system_health_dashboard.py:321:32
Recommendation: Replace magic numbers with named constants or enums
Code context:
    318:             health_results[component_name] = self.check_component_health(component_path, component_name)
    319:
    320:             # Add slight delay to avoid overwhelming the system
>>> 321:             await asyncio.sleep(0.01)
    322:
    323:         return health_results
    324:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (12 total)
File: packages\monitoring\system_health_dashboard.py:362:48
Recommendation: Replace magic numbers with named constants or enums
Code context:
    359:             "avg_functionality_score": avg_functionality_score,
    360:             "working_implementations": working_implementations,
    361:             "health_status": (
>>> 362:                 "healthy" if avg_health_score > 0.7 else "partial" if avg_health_score > 0.4 else "unhealthy"
    363:             ),
    364:         }
    365:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\monitoring\test_monitor.py:2:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
      1: #!/usr/bin/env python3
>>>   2: """Automated test health monitoring system.
      3:
      4: Captures test results after each run, stores historical data,
      5: triggers dashboard updates, and sends alerts on degradation.


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\monitoring\test_monitor.py:39:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     36:
     37:     @classmethod
     38:     def from_pytest_json(cls, report_data: dict[str, Any]) -> "MonitorStats":
>>>  39:         """Create MonitorStats from pytest JSON report."""
     40:         summary = report_data.get("summary", {})
     41:
     42:         total = summary.get("total", 0)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\monitoring\test_monitor.py:258:32
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    255:             trend_description = "Stable"
    256:
    257:         # Generate dashboard content
>>> 258:         dashboard_content = f"""# AI Village Test Health Dashboard
    259: Last Updated: {datetime.now(UTC).strftime("%Y-%m-%d %H:%M:%S UTC")}
    260: Auto-Generated by Test Monitor v{__version__}
    261:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\monitoring\test_monitor.py:330:29
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    327:         else:
    328:             dashboard_content += "✅ No active alerts\n"
    329:
>>> 330:         dashboard_content += """
    331:
    332: ---
    333: *Dashboard automatically updated after each test run*


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\monitoring\test_monitor.py:342:31
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    339:                 f.write(dashboard_content)
    340:             logger.info(f"Updated dashboard: {self.dashboard_path}")
    341:         except Exception as e:
>>> 342:             logger.exception(f"Failed to update dashboard: {e}")
    343:
    344:     async def _check_alert_conditions_internal(self) -> list[dict[str, str]]:
    345:         """Internal method to check alert conditions."""


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\monitoring\test_monitor.py:394:42
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    391: async def main() -> None:
    392:     """Main CLI interface."""
    393:     parser = argparse.ArgumentParser(description="Test Health Monitor")
>>> 394:     parser.add_argument("--capture", help="Capture results from pytest JSON report")
    395:     parser.add_argument("--update-dashboard", action="store_true", help="Update dashboard")
    396:     parser.add_argument("--check-thresholds", action="store_true", help="Check alert thresholds")
    397:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (9 calls)
File: packages\monitoring\test_monitor.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (11 calls)
File: packages\monitoring\test_monitor.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (16 total)
File: packages\monitoring\test_monitor.py:98:31
Recommendation: Replace magic numbers with named constants or enums
Code context:
     95:         self.base_dir = base_dir or Path(__file__).parent
     96:         self.history_file = self.base_dir / "test_history.json"
     97:         self.dashboard_path = Path("test_health_dashboard.md")
>>>  98:         self.alert_threshold = 95.0  # 95% success rate
     99:         self.history: list[MonitorStats] = []
    100:
    101:         # Load existing history


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (16 total)
File: packages\monitoring\test_monitor.py:166:53
Recommendation: Replace magic numbers with named constants or enums
Code context:
    163:             return "↘️"
    164:         return "→"
    165:
>>> 166:     def generate_ascii_trend_graph(self, days: int = 30) -> str:
    167:         """Generate ASCII trend graph."""
    168:         if len(self.history) < 2:
    169:             return "Insufficient data for trend graph"


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (16 total)
File: packages\monitoring\test_monitor.py:189:67
Recommendation: Replace magic numbers with named constants or enums
Code context:
    186:         chars = " ▁▂▃▄▅▆▇█"
    187:         normalized = []
    188:         for rate in success_rates:
>>> 189:             norm = int((rate - min_rate) / (max_rate - min_rate) * 8)
    190:             normalized.append(chars[min(norm, 8)])
    191:
    192:         sparkline = "".join(normalized)


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (16 total)
File: packages\monitoring\test_monitor.py:190:46
Recommendation: Replace magic numbers with named constants or enums
Code context:
    187:         normalized = []
    188:         for rate in success_rates:
    189:             norm = int((rate - min_rate) / (max_rate - min_rate) * 8)
>>> 190:             normalized.append(chars[min(norm, 8)])
    191:
    192:         sparkline = "".join(normalized)
    193:         return f"{min_rate:.1f}%-{max_rate:.1f}%: {sparkline}"


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (16 total)
File: packages\monitoring\test_monitor.py:206:30
Recommendation: Replace magic numbers with named constants or enums
Code context:
    203:         # Find modules with high failure rates
    204:         for module_name, module_stats in current_stats.modules.items():
    205:             success_rate = module_stats.get("success_rate", 0)
>>> 206:             if success_rate < 80 and module_stats["total"] > 0:  # Modules below 80%
    207:                 issues.append(
    208:                     {
    209:                         "module": module_name,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\monitoring\trend_analyzer.py:47:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     44:         self._load_history()
     45:
     46:     def _load_history(self) -> None:
>>>  47:         """Load test history from JSON file."""
     48:         if not self.history_file.exists():
     49:             return
     50:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\monitoring\trend_analyzer.py:296:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    293:         return summary
    294:
    295:     def _get_trend_direction(self, trend_points: list[TrendPoint], lower_is_better: bool = False) -> str:
>>> 296:         """Determine trend direction from points."""
    297:         if len(trend_points) < 2:
    298:             return "stable"
    299:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (7 calls)
File: packages\monitoring\trend_analyzer.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (14 total)
File: packages\monitoring\trend_analyzer.py:76:49
Recommendation: Replace magic numbers with named constants or enums
Code context:
     73:             print(f"Error loading history: {e}")
     74:             self.runs = []
     75:
>>>  76:     def generate_success_trend(self, days: int = 30) -> list[TrendPoint]:
     77:         """Generate success rate trend data for graphing."""
     78:         cutoff_date = datetime.now(UTC) - timedelta(days=days)
     79:         recent_runs = [run for run in self.runs if run.timestamp >= cutoff_date]


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (14 total)
File: packages\monitoring\trend_analyzer.py:83:53
Recommendation: Replace magic numbers with named constants or enums
Code context:
     80:
     81:         return [TrendPoint(run.timestamp, run.success_rate) for run in recent_runs]
     82:
>>>  83:     def generate_performance_trend(self, days: int = 30) -> list[TrendPoint]:
     84:         """Generate performance trend data."""
     85:         cutoff_date = datetime.now(UTC) - timedelta(days=days)
     86:         recent_runs = [run for run in self.runs if run.timestamp >= cutoff_date]


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (14 total)
File: packages\monitoring\trend_analyzer.py:96:82
Recommendation: Replace magic numbers with named constants or enums
Code context:
     93:
     94:         return points
     95:
>>>  96:     def identify_degrading_modules(self, threshold: float = 10.0, min_runs: int = 5) -> list[dict[str, Any]]:
     97:         """Find modules with declining test success."""
     98:         if len(self.runs) < min_runs:
     99:             return []


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (14 total)
File: packages\monitoring\trend_analyzer.py:148:57
Recommendation: Replace magic numbers with named constants or enums
Code context:
    145:                         "initial_rate": initial_rate,
    146:                         "change": change,
    147:                         "trend_slope": slope,
>>> 148:                         "severity": ("high" if change < -20 else "medium" if change < -10 else "low"),
    149:                     }
    150:                 )
    151:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (14 total)
File: packages\monitoring\trend_analyzer.py:157:64
Recommendation: Replace magic numbers with named constants or enums
Code context:
    154:
    155:         return degrading_modules
    156:
>>> 157:     def detect_flaky_tests(self, instability_threshold: float = 0.2, min_runs: int = 10) -> list[dict[str, Any]]:
    158:         """Identify tests that intermittently fail."""
    159:         if len(self.runs) < min_runs:
    160:             return []


HARDCODED_PATH: Hardcoded path or URL detected
File: packages\p2p\scion_gateway.py:42:24
Recommendation: Use configuration files, environment variables, or path utilities
Code context:
     39:     """SCION Gateway configuration."""
     40:
     41:     # Gateway endpoints
>>>  42:     htx_endpoint: str = "https://127.0.0.1:8443"
     43:     metrics_endpoint: str = "http://127.0.0.1:9090/metrics"
     44:
     45:     # Sidecar configuration


HARDCODED_PATH: Hardcoded path or URL detected
File: packages\p2p\scion_gateway.py:43:28
Recommendation: Use configuration files, environment variables, or path utilities
Code context:
     40:
     41:     # Gateway endpoints
     42:     htx_endpoint: str = "https://127.0.0.1:8443"
>>>  43:     metrics_endpoint: str = "http://127.0.0.1:9090/metrics"
     44:
     45:     # Sidecar configuration
     46:     sidecar_address: str = "127.0.0.1:8080"


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\scion_gateway.py:220:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    217:         return packet_id
    218:
    219:     async def receive_packets(self, timeout_ms: int = 1000, max_packets: int = 10) -> list[tuple[bytes, str]]:
>>> 220:         """Receive packets from SCION network."""
    221:         if not self._is_running:
    222:             raise SCIONConnectionError("SCION Gateway not running")
    223:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\scion_gateway.py:242:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    239:             return json.dumps({"message": str(message)}).encode("utf-8")
    240:
    241:     async def _create_http_session(self) -> None:
>>> 242:         """Create HTTP session for gateway communication."""
    243:         connector = aiohttp.TCPConnector(ssl=self.config.verify_ssl)
    244:         timeout = aiohttp.ClientTimeout(total=self.config.connection_timeout)
    245:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (7 calls)
File: packages\p2p\scion_gateway.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\constants.py:137:37
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    134: class RAGMessages:
    135:     """Standardized RAG system messages."""
    136:
>>> 137:     COLLECTION_CREATED: Final[str] = "Collection '{collection_name}' created successfully"
    138:     DOCUMENT_INDEXED: Final[str] = "Document '{doc_id}' indexed in collection '{collection}'"
    139:     QUERY_EXECUTED: Final[str] = "Query executed: {results_count} results in {duration_ms}ms"
    140:     EMBEDDING_CACHED: Final[str] = "Embedding cached for text length {length}"


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\constants.py:141:32
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    138:     DOCUMENT_INDEXED: Final[str] = "Document '{doc_id}' indexed in collection '{collection}'"
    139:     QUERY_EXECUTED: Final[str] = "Query executed: {results_count} results in {duration_ms}ms"
    140:     EMBEDDING_CACHED: Final[str] = "Embedding cached for text length {length}"
>>> 141:     INDEX_UPDATED: Final[str] = "Index updated: {documents_added} documents added"
    142:     RETRIEVAL_FAILED: Final[str] = "Retrieval failed for query '{query}': {error}"
    143:     COLLECTION_NOT_FOUND: Final[str] = "Collection '{collection_name}' not found"
    144:     INSUFFICIENT_RESULTS: Final[str] = "Only {found} results found, requested {requested}"


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\constants.py:147:42
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    144:     INSUFFICIENT_RESULTS: Final[str] = "Only {found} results found, requested {requested}"
    145:     PROCESSING_COMPLETE: Final[str] = "Document processing complete: {success}/{total} successful"
    146:     CACHE_HIT: Final[str] = "Cache hit for query: {query_hash}"
>>> 147:     KNOWLEDGE_GRAPH_UPDATED: Final[str] = "Knowledge graph updated: {entities} entities, {relations} relations"
    148:
    149:
    150: # API configuration


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (35 total)
File: packages\rag\constants.py:11:39
Recommendation: Replace magic numbers with named constants or enums
Code context:
      8: from typing import Final
      9:
     10: # Vector database configuration
>>>  11: DEFAULT_VECTOR_DIMENSION: Final[int] = 768
     12: MAX_VECTOR_DIMENSION: Final[int] = 4096
     13: DEFAULT_SIMILARITY_THRESHOLD: Final[float] = 0.7
     14: MIN_SIMILARITY_THRESHOLD: Final[float] = 0.1


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (35 total)
File: packages\rag\constants.py:12:35
Recommendation: Replace magic numbers with named constants or enums
Code context:
      9:
     10: # Vector database configuration
     11: DEFAULT_VECTOR_DIMENSION: Final[int] = 768
>>>  12: MAX_VECTOR_DIMENSION: Final[int] = 4096
     13: DEFAULT_SIMILARITY_THRESHOLD: Final[float] = 0.7
     14: MIN_SIMILARITY_THRESHOLD: Final[float] = 0.1
     15: MAX_SIMILARITY_THRESHOLD: Final[float] = 1.0


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (35 total)
File: packages\rag\constants.py:13:45
Recommendation: Replace magic numbers with named constants or enums
Code context:
     10: # Vector database configuration
     11: DEFAULT_VECTOR_DIMENSION: Final[int] = 768
     12: MAX_VECTOR_DIMENSION: Final[int] = 4096
>>>  13: DEFAULT_SIMILARITY_THRESHOLD: Final[float] = 0.7
     14: MIN_SIMILARITY_THRESHOLD: Final[float] = 0.1
     15: MAX_SIMILARITY_THRESHOLD: Final[float] = 1.0
     16:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (35 total)
File: packages\rag\constants.py:14:41
Recommendation: Replace magic numbers with named constants or enums
Code context:
     11: DEFAULT_VECTOR_DIMENSION: Final[int] = 768
     12: MAX_VECTOR_DIMENSION: Final[int] = 4096
     13: DEFAULT_SIMILARITY_THRESHOLD: Final[float] = 0.7
>>>  14: MIN_SIMILARITY_THRESHOLD: Final[float] = 0.1
     15: MAX_SIMILARITY_THRESHOLD: Final[float] = 1.0
     16:
     17: # Retrieval parameters


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (35 total)
File: packages\rag\constants.py:20:33
Recommendation: Replace magic numbers with named constants or enums
Code context:
     17: # Retrieval parameters
     18: DEFAULT_TOP_K: Final[int] = 10
     19: MAX_TOP_K: Final[int] = 100
>>>  20: DEFAULT_CHUNK_SIZE: Final[int] = 512
     21: MAX_CHUNK_SIZE: Final[int] = 2048
     22: MIN_CHUNK_SIZE: Final[int] = 64
     23: CHUNK_OVERLAP: Final[int] = 50


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\__init__.py:54:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     51:     # Memory subsystems
     52:     "HippoIndex",
     53:     "create_hippo_node",
>>>  54:     "create_episodic_document",
     55:     # Knowledge graph
     56:     "BayesianTrustGraph",
     57:     "create_graph_node",


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\tokenomics\compute_mining.py:25:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     22:
     23: class ComputeMiningSystem:
     24:     def __init__(self, credit_system: VILLAGECreditSystem) -> None:
>>>  25:         """Create a compute mining system tied to a credit system."""
     26:         self.credit_system = credit_system
     27:
     28:     def verify_computation(self, proof: str) -> bool:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\tokenomics\compute_mining.py:33:27
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     30:
     31:     def detect_gaming(self, device_id: str, session: ComputeSession) -> bool:
     32:         if session.operations <= 0 or session.duration <= 0:
>>>  33:             logger.warning("Invalid session from %s: %s", device_id, session)
     34:             return True
     35:         return False
     36:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\tokenomics\credit_system.py:151:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    148:     """Off-chain credit system managing user balances and transactions."""
    149:
    150:     def __init__(self, db_path: str = "village_credits.db") -> None:
>>> 151:         """Create the credit system using a SQLite backend."""
    152:         self.db = SQLiteDatabase(db_path)
    153:         self.init_tables()
    154:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\tokenomics\credit_system.py:156:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    153:         self.init_tables()
    154:
    155:     def init_tables(self) -> None:
>>> 156:         """Create necessary database tables."""
    157:         self.db.execute(
    158:             """
    159:             CREATE TABLE IF NOT EXISTS balances (


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\tokenomics\credit_system.py:158:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    155:     def init_tables(self) -> None:
    156:         """Create necessary database tables."""
    157:         self.db.execute(
>>> 158:             """
    159:             CREATE TABLE IF NOT EXISTS balances (
    160:                 user_id TEXT PRIMARY KEY,
    161:                 balance INTEGER DEFAULT 0,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\tokenomics\credit_system.py:188:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    185:         logger.info("Credit system tables ensured")
    186:
    187:     def add_earning_rule(self, rule: EarningRule) -> None:
>>> 188:         """Insert or replace an earning rule."""
    189:         self.db.execute(
    190:             (
    191:                 "INSERT OR REPLACE INTO earning_rules "


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\tokenomics\credit_system.py:191:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    188:         """Insert or replace an earning rule."""
    189:         self.db.execute(
    190:             (
>>> 191:                 "INSERT OR REPLACE INTO earning_rules "
    192:                 "(action, base_credits, multipliers, conditions) VALUES (?, ?, ?, ?)"
    193:             ),
    194:             (


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\tokenomics\credit_system.py:205:13
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    202:
    203:     def get_earning_rule(self, action: str) -> EarningRule:
    204:         cur = self.db.execute(
>>> 205:             ("SELECT action, base_credits, multipliers, conditions " "FROM earning_rules WHERE action = ?"),
    206:             (action,),
    207:         )
    208:         row = cur.fetchone()


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\tokenomics\credit_system.py:222:13
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    219:
    220:     def is_first_time(self, user_id: str, action: str) -> bool:
    221:         cur = self.db.execute(
>>> 222:             ("SELECT COUNT(*) as cnt FROM transactions " "WHERE user_id = ? AND category = ?"),
    223:             (user_id, action),
    224:         )
    225:         count = cur.fetchone()["cnt"]


LONG_PARAMETER_LIST: Function 'record_transaction' has 6 parameters (>5)
File: packages\tokenomics\credit_system.py:236:4
Recommendation: Use parameter objects, data classes, or keyword-only arguments
Code context:
    233:             return adjusted
    234:         return credit_amount
    235:
>>> 236:     def record_transaction(
    237:         self,
    238:         user_id: str,
    239:         amount: int,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\tokenomics\credit_system.py:247:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    244:         tx_id = f"{user_id}-{int(time.time() * 1000)}"
    245:         self.db.execute(
    246:             (
>>> 247:                 "INSERT INTO transactions "
    248:                 "(id, user_id, amount, tx_type, category, metadata, timestamp) "
    249:                 "VALUES (?, ?, ?, ?, ?, ?, ?)"
    250:             ),


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\tokenomics\credit_system.py:265:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    262:
    263:     def update_balance(self, user_id: str, delta: int) -> None:
    264:         cur = self.db.execute(
>>> 265:             "SELECT balance, earned_total, spent_total FROM balances WHERE user_id = ?",
    266:             (user_id,),
    267:         )
    268:         row = cur.fetchone()


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\tokenomics\credit_system.py:275:20
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    272:             spent_total = max(-delta, 0)
    273:             self.db.execute(
    274:                 (
>>> 275:                     "INSERT INTO balances (user_id, balance, earned_total, "
    276:                     "spent_total, last_updated) VALUES (?, ?, ?, ?, ?)"
    277:                 ),
    278:                 (user_id, balance, earned_total, spent_total, int(time.time())),


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\tokenomics\credit_system.py:286:20
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    283:             spent_total = row["spent_total"] + max(-delta, 0)
    284:             self.db.execute(
    285:                 (
>>> 286:                     "UPDATE balances SET balance = ?, earned_total = ?, "
    287:                     "spent_total = ?, last_updated = ? WHERE user_id = ?"
    288:                 ),
    289:                 (balance, earned_total, spent_total, int(time.time()), user_id),


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\tokenomics\credit_system.py:291:21
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    288:                 ),
    289:                 (balance, earned_total, spent_total, int(time.time()), user_id),
    290:             )
>>> 291:         logger.debug("Balance updated for %s: %d", user_id, balance)
    292:
    293:     def earn_credits(self, user_id: str, action: str, metadata: dict[str, str]) -> int:
    294:         """Award credits for a specific action."""


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\tokenomics\credit_system.py:317:30
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    314:         return credit_amount
    315:
    316:     def spend_credits(self, user_id: str, amount: int, category: str, metadata: dict[str, str]) -> None:
>>> 317:         cur = self.db.execute("SELECT balance FROM balances WHERE user_id = ?", (user_id,))
    318:         row = cur.fetchone()
    319:         if row is None or row["balance"] < amount:
    320:             logger.error("User %s has insufficient balance", user_id)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\tokenomics\credit_system.py:327:30
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    324:         self.update_balance(user_id, -amount)
    325:
    326:     def get_balance(self, user_id: str) -> int:
>>> 327:         cur = self.db.execute("SELECT balance FROM balances WHERE user_id = ?", (user_id,))
    328:         row = cur.fetchone()
    329:         return row["balance"] if row else 0
    330:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (9 calls)
File: packages\tokenomics\credit_system.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (16 calls)
File: packages\tokenomics\credit_system.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'cursor' methods (6 calls)
File: packages\tokenomics\credit_system.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'cur' methods (7 calls)
File: packages\tokenomics\credit_system.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (15 total)
File: packages\tokenomics\credit_system.py:26:15
Recommendation: Replace magic numbers with named constants or enums
Code context:
     23: }
     24:
     25: PPP_ADJUSTMENTS = {
>>>  26:     "Nigeria": 1.3,
     27:     "Kenya": 1.2,
     28:     "India": 1.1,
     29:     "Bangladesh": 1.25,


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (15 total)
File: packages\tokenomics\credit_system.py:27:13
Recommendation: Replace magic numbers with named constants or enums
Code context:
     24:
     25: PPP_ADJUSTMENTS = {
     26:     "Nigeria": 1.3,
>>>  27:     "Kenya": 1.2,
     28:     "India": 1.1,
     29:     "Bangladesh": 1.25,
     30:     "Indonesia": 1.15,


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (15 total)
File: packages\tokenomics\credit_system.py:28:13
Recommendation: Replace magic numbers with named constants or enums
Code context:
     25: PPP_ADJUSTMENTS = {
     26:     "Nigeria": 1.3,
     27:     "Kenya": 1.2,
>>>  28:     "India": 1.1,
     29:     "Bangladesh": 1.25,
     30:     "Indonesia": 1.15,
     31: }


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (15 total)
File: packages\tokenomics\credit_system.py:29:18
Recommendation: Replace magic numbers with named constants or enums
Code context:
     26:     "Nigeria": 1.3,
     27:     "Kenya": 1.2,
     28:     "India": 1.1,
>>>  29:     "Bangladesh": 1.25,
     30:     "Indonesia": 1.15,
     31: }
     32:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (15 total)
File: packages\tokenomics\credit_system.py:30:17
Recommendation: Replace magic numbers with named constants or enums
Code context:
     27:     "Kenya": 1.2,
     28:     "India": 1.1,
     29:     "Bangladesh": 1.25,
>>>  30:     "Indonesia": 1.15,
     31: }
     32:
     33: QUALITY_THRESHOLD = 0.8


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (10 calls)
File: packages\tokenomics\jurisdiction.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (8 calls)
File: packages\tokenomics\jurisdiction.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\bridges\fog_tools.py:1:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
>>>   1: """
      2: Agent MCP Fog Tools
      3:
      4: MCP (Model Control Protocol) tools for agents to interact with fog computing infrastructure:


HARDCODED_PATH: Hardcoded path or URL detected
File: packages\agents\bridges\fog_tools.py:31:46
Recommendation: Use configuration files, environment variables, or path utilities
Code context:
     28: class CreateSandboxTool(MCPTool):
     29:     """MCP tool for creating isolated execution environments in fog network"""
     30:
>>>  31:     def __init__(self, fog_gateway_url: str = "http://localhost:8080"):
     32:         super().__init__("create_sandbox", "Create isolated execution environment in fog network")
     33:         self.fog_gateway_url = fog_gateway_url.rstrip("/")
     34:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\bridges\fog_tools.py:32:43
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     29:     """MCP tool for creating isolated execution environments in fog network"""
     30:
     31:     def __init__(self, fog_gateway_url: str = "http://localhost:8080"):
>>>  32:         super().__init__("create_sandbox", "Create isolated execution environment in fog network")
     33:         self.fog_gateway_url = fog_gateway_url.rstrip("/")
     34:
     35:     async def execute(self, parameters: dict[str, Any]) -> dict[str, Any]:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\bridges\fog_tools.py:36:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     33:         self.fog_gateway_url = fog_gateway_url.rstrip("/")
     34:
     35:     async def execute(self, parameters: dict[str, Any]) -> dict[str, Any]:
>>>  36:         """Create a new sandbox environment
     37:
     38:         Args:
     39:             parameters:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\bridges\fog_tools.py:96:38
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     93:                     if response.status == 201:
     94:                         result = await response.json()
     95:
>>>  96:                         logger.info(f"Created fog sandbox: {result.get('sandbox_id')} in namespace {namespace}")
     97:
     98:                         return {
     99:                             "status": "success",


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\bridges\fog_tools.py:104:41
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    101:                             "endpoint": result.get("endpoint"),
    102:                             "namespace": namespace,
    103:                             "runtime": runtime,
>>> 104:                             "message": f"Sandbox created successfully in namespace {namespace}",
    105:                             "resources": sandbox_spec["resources"],
    106:                         }
    107:


HARDCODED_PATH: Hardcoded path or URL detected
File: packages\agents\bridges\fog_tools.py:146:46
Recommendation: Use configuration files, environment variables, or path utilities
Code context:
    143: class RunJobTool(MCPTool):
    144:     """MCP tool for submitting jobs to fog gateway with namespace validation"""
    145:
>>> 146:     def __init__(self, fog_gateway_url: str = "http://localhost:8080"):
    147:         super().__init__("run_job", "Submit job to fog gateway for remote execution")
    148:         self.fog_gateway_url = fog_gateway_url.rstrip("/")
    149:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\bridges\fog_tools.py:263:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    260:
    261:
    262: class StreamLogsTool(MCPTool):
>>> 263:     """MCP tool for real-time log streaming from remote jobs"""
    264:
    265:     def __init__(self, fog_gateway_url: str = "http://localhost:8080"):
    266:         super().__init__("stream_logs", "Stream real-time logs from fog job execution")


HARDCODED_PATH: Hardcoded path or URL detected
File: packages\agents\bridges\fog_tools.py:265:46
Recommendation: Use configuration files, environment variables, or path utilities
Code context:
    262: class StreamLogsTool(MCPTool):
    263:     """MCP tool for real-time log streaming from remote jobs"""
    264:
>>> 265:     def __init__(self, fog_gateway_url: str = "http://localhost:8080"):
    266:         super().__init__("stream_logs", "Stream real-time logs from fog job execution")
    267:         self.fog_gateway_url = fog_gateway_url.rstrip("/")
    268:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\bridges\fog_tools.py:266:40
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    263:     """MCP tool for real-time log streaming from remote jobs"""
    264:
    265:     def __init__(self, fog_gateway_url: str = "http://localhost:8080"):
>>> 266:         super().__init__("stream_logs", "Stream real-time logs from fog job execution")
    267:         self.fog_gateway_url = fog_gateway_url.rstrip("/")
    268:
    269:     async def execute(self, parameters: dict[str, Any]) -> dict[str, Any]:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\bridges\fog_tools.py:270:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    267:         self.fog_gateway_url = fog_gateway_url.rstrip("/")
    268:
    269:     async def execute(self, parameters: dict[str, Any]) -> dict[str, Any]:
>>> 270:         """Stream logs from running fog job
    271:
    272:         Args:
    273:             parameters:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\bridges\fog_tools.py:394:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    391:
    392:
    393: class FetchArtifactsTool(MCPTool):
>>> 394:     """MCP tool for downloading results and outputs from completed fog jobs"""
    395:
    396:     def __init__(self, fog_gateway_url: str = "http://localhost:8080"):
    397:         super().__init__("fetch_artifacts", "Download results and outputs from completed fog jobs")


HARDCODED_PATH: Hardcoded path or URL detected
File: packages\agents\bridges\fog_tools.py:396:46
Recommendation: Use configuration files, environment variables, or path utilities
Code context:
    393: class FetchArtifactsTool(MCPTool):
    394:     """MCP tool for downloading results and outputs from completed fog jobs"""
    395:
>>> 396:     def __init__(self, fog_gateway_url: str = "http://localhost:8080"):
    397:         super().__init__("fetch_artifacts", "Download results and outputs from completed fog jobs")
    398:         self.fog_gateway_url = fog_gateway_url.rstrip("/")
    399:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\bridges\fog_tools.py:397:44
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    394:     """MCP tool for downloading results and outputs from completed fog jobs"""
    395:
    396:     def __init__(self, fog_gateway_url: str = "http://localhost:8080"):
>>> 397:         super().__init__("fetch_artifacts", "Download results and outputs from completed fog jobs")
    398:         self.fog_gateway_url = fog_gateway_url.rstrip("/")
    399:
    400:     async def execute(self, parameters: dict[str, Any]) -> dict[str, Any]:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\bridges\fog_tools.py:401:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    398:         self.fog_gateway_url = fog_gateway_url.rstrip("/")
    399:
    400:     async def execute(self, parameters: dict[str, Any]) -> dict[str, Any]:
>>> 401:         """Fetch artifacts from completed fog job
    402:
    403:         Args:
    404:             parameters:


HARDCODED_PATH: Hardcoded path or URL detected
File: packages\agents\bridges\fog_tools.py:521:46
Recommendation: Use configuration files, environment variables, or path utilities
Code context:
    518: class FogJobStatusTool(MCPTool):
    519:     """MCP tool for checking fog job status and progress"""
    520:
>>> 521:     def __init__(self, fog_gateway_url: str = "http://localhost:8080"):
    522:         super().__init__("fog_job_status", "Check status and progress of fog job execution")
    523:         self.fog_gateway_url = fog_gateway_url.rstrip("/")
    524:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'parameters' methods (24 calls)
File: packages\agents\bridges\fog_tools.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'session' methods (8 calls)
File: packages\agents\bridges\fog_tools.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'response' methods (13 calls)
File: packages\agents\bridges\fog_tools.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (15 calls)
File: packages\agents\bridges\fog_tools.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'result' methods (7 calls)
File: packages\agents\bridges\fog_tools.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'error_data' methods (8 calls)
File: packages\agents\bridges\fog_tools.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (19 total)
File: packages\agents\bridges\fog_tools.py:93:42
Recommendation: Replace magic numbers with named constants or enums
Code context:
     90:                     json=sandbox_spec,
     91:                     headers={"Content-Type": "application/json"},
     92:                 ) as response:
>>>  93:                     if response.status == 201:
     94:                         result = await response.json()
     95:
     96:                         logger.info(f"Created fog sandbox: {result.get('sandbox_id')} in namespace {namespace}")


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (19 total)
File: packages\agents\bridges\fog_tools.py:108:44
Recommendation: Replace magic numbers with named constants or enums
Code context:
    105:                             "resources": sandbox_spec["resources"],
    106:                         }
    107:
>>> 108:                     elif response.status == 403:
    109:                         error_data = await response.json()
    110:                         return {
    111:                             "status": "error",


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (19 total)
File: packages\agents\bridges\fog_tools.py:117:44
Recommendation: Replace magic numbers with named constants or enums
Code context:
    114:                             "violations": error_data.get("violations", []),
    115:                         }
    116:
>>> 117:                     elif response.status == 429:
    118:                         error_data = await response.json()
    119:                         return {
    120:                             "status": "error",


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (19 total)
File: packages\agents\bridges\fog_tools.py:196:66
Recommendation: Replace magic numbers with named constants or enums
Code context:
    193:                     "cpu_cores": parameters.get("resources", {}).get("cpu_cores", 1.0),
    194:                     "memory_gb": parameters.get("resources", {}).get("memory_gb", 1.0),
    195:                     "disk_gb": parameters.get("resources", {}).get("disk_gb", 2.0),
>>> 196:                     "max_duration_s": parameters.get("timeout_s", 300),
    197:                     "network_egress": parameters.get("resources", {}).get("network_egress", False),
    198:                 },
    199:                 "input_data": parameters.get("input_data", ""),


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (19 total)
File: packages\agents\bridges\fog_tools.py:212:42
Recommendation: Replace magic numbers with named constants or enums
Code context:
    209:                 async with session.post(
    210:                     f"{self.fog_gateway_url}/v1/fog/jobs", json=job_spec, headers={"Content-Type": "application/json"}
    211:                 ) as response:
>>> 212:                     if response.status == 201:
    213:                         result = await response.json()
    214:
    215:                         logger.info(f"Submitted fog job: {result.get('job_id')} in namespace {namespace}")


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\agent_interface.py:128:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    125:
    126:     @classmethod
    127:     def from_dict(cls, data: dict[str, Any]) -> "TaskInterface":
>>> 128:         """Create task from dictionary representation."""
    129:         created_at = datetime.fromisoformat(data["created_at"]) if "created_at" in data else datetime.now()
    130:
    131:         return cls(


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\agent_interface.py:175:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    172:
    173:     @classmethod
    174:     def from_dict(cls, data: dict[str, Any]) -> "MessageInterface":
>>> 175:         """Create message from dictionary representation."""
    176:         created_at = datetime.fromisoformat(data["created_at"]) if "created_at" in data else datetime.now()
    177:         expires_at = datetime.fromisoformat(data["expires_at"]) if data.get("expires_at") else None
    178:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\agent_interface.py:394:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    391:         self.metadata.last_updated = datetime.now()
    392:
    393:     def remove_capability(self, capability: AgentCapability) -> None:
>>> 394:         """Remove capability from agent."""
    395:         self.metadata.capabilities.discard(capability)
    396:         self.metadata.last_updated = datetime.now()
    397:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\agent_interface.py:416:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    413:     # Performance Monitoring
    414:
    415:     def update_performance_metrics(self, **metrics) -> None:
>>> 416:         """Update performance metrics."""
    417:         for key, value in metrics.items():
    418:             if hasattr(self.performance_metrics, key):
    419:                 setattr(self.performance_metrics, key, value)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\agent_interface.py:438:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    435:         return self.metadata
    436:
    437:     def update_metadata(self, **updates) -> None:
>>> 438:         """Update agent metadata."""
    439:         for key, value in updates.items():
    440:             if hasattr(self.metadata, key):
    441:                 setattr(self.metadata, key, value)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\agent_interface.py:448:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    445:     # Error Context Creation
    446:
    447:     def create_error_context(self, operation: str, **metadata) -> ErrorContext:
>>> 448:         """Create error context for this agent."""
    449:         from core import create_agent_context
    450:
    451:         return create_agent_context(


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\agent_interface.py:554:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    551:     timeout_seconds: float | None = None,
    552:     **context,
    553: ) -> TaskInterface:
>>> 554:     """Create a standard task with generated ID.
    555:
    556:     Args:
    557:         task_type: Type of task


LONG_PARAMETER_LIST: Function 'create_standard_message' has 6 parameters (>5)
File: packages\agents\core\agent_interface.py:578:0
Recommendation: Use parameter objects, data classes, or keyword-only arguments
Code context:
    575:     )
    576:
    577:
>>> 578: def create_standard_message(
    579:     sender: str,
    580:     receiver: str,
    581:     message_type: str,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\agent_interface.py:586:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    583:     priority: int = 0,
    584:     **context,
    585: ) -> MessageInterface:
>>> 586:     """Create a standard message with generated ID.
    587:
    588:     Args:
    589:         sender: Sender agent ID


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'datetime' methods (13 calls)
File: packages\agents\core\agent_interface.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'data' methods (8 calls)
File: packages\agents\core\agent_interface.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\agent_orchestration_system.py:161:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    158:         self.performance_history = []
    159:
    160:     async def update_health_metrics(self):
>>> 161:         """Update system-wide health metrics"""
    162:         try:
    163:             # Agent statistics
    164:             agent_count = len(self.orchestrator.agents)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\agent_orchestration_system.py:194:27
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    191:             await self._check_system_alerts()
    192:
    193:         except Exception as e:
>>> 194:             logger.error(f"Health metrics update failed: {e}")
    195:
    196:     async def _check_system_alerts(self):
    197:         """Check for system-level alerts"""


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\agent_orchestration_system.py:329:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    326:             return False
    327:
    328:     async def unregister_agent(self, agent_id: str) -> bool:
>>> 329:         """Unregister an agent from the orchestration system"""
    330:         try:
    331:             if agent_id not in self.agents:
    332:                 logger.warning(f"Agent {agent_id} not found for unregistration")


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\agent_orchestration_system.py:384:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    381:     async def create_communication_channel(
    382:         self, channel_type: CommunicationChannelType, name: str, description: str = "", max_participants: int = 100
    383:     ) -> str:
>>> 384:         """Create a new communication channel"""
    385:
    386:         channel_id = f"{channel_type.value}_{name}_{uuid4().hex[:8]}"
    387:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\agent_orchestration_system.py:397:22
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    394:         )
    395:
    396:         self.communication_channels[channel_id] = channel
>>> 397:         logger.info(f"Communication channel created: {channel_id} ({channel_type.value})")
    398:
    399:         return channel_id
    400:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\agent_orchestration_system.py:419:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    416:         return True
    417:
    418:     async def leave_channel(self, agent_id: str, channel_id: str) -> bool:
>>> 419:         """Remove agent from communication channel"""
    420:         if channel_id not in self.communication_channels:
    421:             return False
    422:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\agent_orchestration_system.py:547:27
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    544:         selected_agents = await self._select_agents_by_strategy(suitable_agents, strategy)
    545:
    546:         if not selected_agents:
>>> 547:             logger.error(f"Agent selection failed for task: {task.task_id}")
    548:             return task.task_id
    549:
    550:         # Distribute to selected agent(s)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\agent_orchestration_system.py:653:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    650:         return suitable_agents
    651:
    652:     async def _select_agents_by_strategy(self, agent_ids: list[str], strategy: TaskDistributionStrategy) -> list[str]:
>>> 653:         """Select agents based on distribution strategy"""
    654:
    655:         if not agent_ids:
    656:             return []


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\agent_orchestration_system.py:688:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    685:             return [agent_ids[0]]
    686:
    687:     async def _select_best_agent(self, agents: list[BaseAgentTemplate]) -> BaseAgentTemplate | None:
>>> 688:         """Select best agent from list based on performance metrics"""
    689:         if not agents:
    690:             return None
    691:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\agent_orchestration_system.py:790:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    787:         logger.info("Agent Orchestration System stopped")
    788:
    789:     async def _create_default_channels(self):
>>> 790:         """Create default communication channels"""
    791:         default_channels = [
    792:             (CommunicationChannelType.BROADCAST, "general", "General broadcast channel"),
    793:             (CommunicationChannelType.EMERGENCY, "emergency", "Emergency coordination channel"),


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\agent_orchestration_system.py:819:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    816:                     await self.join_channel(agent_id, channel_id)
    817:
    818:     async def _remove_agent_from_channels(self, agent_id: str):
>>> 819:         """Remove agent from all communication channels"""
    820:         for channel_id in list(self.communication_channels.keys()):
    821:             await self.leave_channel(agent_id, channel_id)
    822:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\agent_orchestration_system.py:857:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    854:                 logger.error(f"Periodic health check error: {e}")
    855:
    856:     def _calculate_health_score(self, health_info: dict[str, Any]) -> float:
>>> 857:         """Calculate health score from health check information"""
    858:         try:
    859:             # Base score
    860:             score = 1.0


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\agent_orchestration_system.py:918:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    915:                 logger.error(f"Periodic cleanup error: {e}")
    916:
    917:     async def _update_system_metrics(self):
>>> 918:         """Update system-wide metrics"""
    919:         while self.is_running:
    920:             try:
    921:                 await asyncio.sleep(60)  # Update every minute


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\agent_orchestration_system.py:941:31
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    938:                 )
    939:
    940:             except Exception as e:
>>> 941:                 logger.error(f"System metrics update error: {e}")
    942:
    943:     # Public API for system status and control
    944:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\agent_orchestration_system.py:1010:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1007:
    1008: # Factory function for easy instantiation
    1009: async def create_orchestration_system() -> AgentOrchestrationSystem:
>>> 1010:     """Create and initialize the Agent Orchestration System"""
    1011:
    1012:     orchestrator = AgentOrchestrationSystem()
    1013:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\agent_orchestration_system.py:1027:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1024: # Export main classes and functions
    1025: __all__ = [
    1026:     "AgentOrchestrationSystem",
>>> 1027:     "create_orchestration_system",
    1028:     "AgentRegistration",
    1029:     "CommunicationChannel",
    1030:     "MultiAgentTask",


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'datetime' methods (15 calls)
File: packages\agents\core\agent_orchestration_system.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (24 calls)
File: packages\agents\core\agent_orchestration_system.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (29 calls)
File: packages\agents\core\agent_orchestration_system.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'asyncio' methods (12 calls)
File: packages\agents\core\agent_orchestration_system.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (32 total)
File: packages\agents\core\agent_orchestration_system.py:110:35
Recommendation: Replace magic numbers with named constants or enums
Code context:
    107:
    108:     # Channel policies
    109:     max_participants: int = 100
>>> 110:     message_retention_hours: int = 24
    111:     priority_level: int = 5
    112:
    113:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (32 total)
File: packages\agents\core\agent_orchestration_system.py:111:26
Recommendation: Replace magic numbers with named constants or enums
Code context:
    108:     # Channel policies
    109:     max_participants: int = 100
    110:     message_retention_hours: int = 24
>>> 111:     priority_level: int = 5
    112:
    113:
    114: @dataclass


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (32 total)
File: packages\agents\core\agent_orchestration_system.py:127:22
Recommendation: Replace magic numbers with named constants or enums
Code context:
    124:
    125:     # Coordination
    126:     coordination_strategy: str = "collaborative"
>>> 127:     max_agents: int = 5
    128:     timeout_seconds: int = 300
    129:
    130:     # Progress tracking


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (32 total)
File: packages\agents\core\agent_orchestration_system.py:128:27
Recommendation: Replace magic numbers with named constants or enums
Code context:
    125:     # Coordination
    126:     coordination_strategy: str = "collaborative"
    127:     max_agents: int = 5
>>> 128:     timeout_seconds: int = 300
    129:
    130:     # Progress tracking
    131:     created_at: datetime = field(default_factory=datetime.now)


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (32 total)
File: packages\agents\core\agent_orchestration_system.py:201:88
Recommendation: Replace magic numbers with named constants or enums
Code context:
    198:         alerts = []
    199:
    200:         # Check agent availability
>>> 201:         if self.health_metrics["active_agents"] < self.health_metrics["total_agents"] * 0.8:
    202:             alerts.append(
    203:                 {
    204:                     "type": "agent_availability",


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\agent_services.py:25:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     22:
     23:
     24: class EmbeddingService:
>>>  25:     """
     26:     Service for generating embeddings from text.
     27:
     28:     Focused on text embedding concerns with pluggable implementations.


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\agent_services.py:84:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     81:     async def send_message(
     82:         self, sender_agent: AgentInterface, recipient_agent: AgentInterface, message: str, sender_type: str = "Agent"
     83:     ) -> str:
>>>  84:         """
     85:         Send message from one agent to another.
     86:
     87:         Args:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\base.py:1:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
>>>   1: """Refactored shared base class for specialized agents.
      2:
      3: This module provides a composition-based agent base class that uses
      4: specialized services instead of monolithic functionality. Domain specific


LONG_PARAMETER_LIST: Function '__init__' has 9 parameters (>5)
File: packages\agents\core\base.py:37:4
Recommendation: Use parameter objects, data classes, or keyword-only arguments
Code context:
     34:     to provide agent functionality through specialized services.
     35:     """
     36:
>>>  37:     def __init__(
     38:         self,
     39:         agent_id: str,
     40:         agent_type: str,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\base.py:93:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     90:         return await self._embedding_service.get_embedding(text)
     91:
     92:     async def communicate(self, message: str, recipient: AgentInterface) -> str:
>>>  93:         """
     94:         Communicate with another agent using the communication service.
     95:
     96:         Args:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\base_agent_template.py:345:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    342:     async def create_fog_sandbox(
    343:         self, namespace: str, runtime: str = "wasi", resources: dict[str, Any] | None = None, name: str | None = None
    344:     ) -> dict[str, Any]:
>>> 345:         """Create isolated execution environment in fog network through MCP"""
    346:         return await self.mcp_tools["create_sandbox"].execute(
    347:             {
    348:                 "namespace": namespace,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\base_agent_template.py:381:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    378:     async def stream_fog_logs(
    379:         self, job_id: str, tail_lines: int = 50, follow: bool = False, timeout_s: int = 30
    380:     ) -> dict[str, Any]:
>>> 381:         """Stream real-time logs from fog job execution through MCP"""
    382:         return await self.mcp_tools["stream_logs"].execute(
    383:             {"job_id": job_id, "tail_lines": tail_lines, "follow": follow, "timeout_s": timeout_s}
    384:         )


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\base_agent_template.py:389:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    386:     async def fetch_fog_artifacts(
    387:         self, job_id: str, artifact_types: list[str] | None = None, download_files: bool = False
    388:     ) -> dict[str, Any]:
>>> 389:         """Download results and outputs from completed fog jobs through MCP"""
    390:         return await self.mcp_tools["fetch_artifacts"].execute(
    391:             {
    392:                 "job_id": job_id,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\base_agent_template.py:592:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    589:     async def retrieve_similar_memories(
    590:         self, query: str, importance_threshold: float | None = None, max_memories: int = 5
    591:     ) -> list[MemoryEntry]:
>>> 592:         """Retrieve similar memories from Langroid system"""
    593:
    594:         threshold = importance_threshold or self.memory_retrieval_threshold
    595:         current_time = datetime.now()


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\base_agent_template.py:631:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    628:     # Geometric Self-Awareness (Proprioception-like)
    629:
    630:     async def update_geometric_self_awareness(self):
>>> 631:         """Update geometric self-awareness state (like proprioception)"""
    632:
    633:         try:
    634:             # Gather current resource and performance metrics


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\base_agent_template.py:700:27
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    697:                     tags=["geometric_awareness", "system_health", state.value],
    698:                 )
    699:
>>> 700:             logger.debug(f"Geometric awareness updated: {state.value}")
    701:
    702:         except Exception as e:
    703:             logger.error(f"Failed to update geometric self-awareness: {e}")


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\base_agent_template.py:703:27
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    700:             logger.debug(f"Geometric awareness updated: {state.value}")
    701:
    702:         except Exception as e:
>>> 703:             logger.error(f"Failed to update geometric self-awareness: {e}")
    704:
    705:     # ADAS/Transformers² Self-Modification
    706:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\base_agent_template.py:822:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    819:         )
    820:
    821:     async def join_group_channel(self, channel_name: str) -> bool:
>>> 822:         """Join a topic-based group channel"""
    823:         if channel_name not in self.communication_channels["group"]:
    824:             self.communication_channels["group"][channel_name] = []
    825:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\base_agent_template.py:826:22
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    823:         if channel_name not in self.communication_channels["group"]:
    824:             self.communication_channels["group"][channel_name] = []
    825:
>>> 826:         logger.info(f"Joined group channel: {channel_name}")
    827:         return True
    828:
    829:     # Abstract Methods - Must be implemented by specialized agents


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\base_agent_template.py:976:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    973:             }
    974:
    975:     async def _periodic_geometric_updates(self):
>>> 976:         """Periodic geometric self-awareness updates"""
    977:         while True:
    978:             try:
    979:                 await asyncio.sleep(self.self_awareness_update_interval)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\base_agent_template.py:982:31
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    979:                 await asyncio.sleep(self.self_awareness_update_interval)
    980:                 await self.update_geometric_self_awareness()
    981:             except Exception as e:
>>> 982:                 logger.error(f"Periodic geometric update failed: {e}")
    983:
    984:     # Utility methods for task processing
    985:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'datetime' methods (12 calls)
File: packages\agents\core\base_agent_template.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (22 calls)
File: packages\agents\core\base_agent_template.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'parameters' methods (8 calls)
File: packages\agents\core\base_agent_template.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (28 calls)
File: packages\agents\core\base_agent_template.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 't' methods (7 calls)
File: packages\agents\core\base_agent_template.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (56 total)
File: packages\agents\core\base_agent_template.py:50:14
Recommendation: Replace magic numbers with named constants or enums
Code context:
     47:     """Langroid-based memory importance levels based on unexpectedness"""
     48:
     49:     ROUTINE = 1  # Expected outcomes
>>>  50:     NOTABLE = 3  # Mildly unexpected
     51:     IMPORTANT = 5  # Moderately unexpected
     52:     CRITICAL = 7  # Highly unexpected
     53:     TRANSFORMATIVE = 9  # Completely unexpected


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (56 total)
File: packages\agents\core\base_agent_template.py:51:16
Recommendation: Replace magic numbers with named constants or enums
Code context:
     48:
     49:     ROUTINE = 1  # Expected outcomes
     50:     NOTABLE = 3  # Mildly unexpected
>>>  51:     IMPORTANT = 5  # Moderately unexpected
     52:     CRITICAL = 7  # Highly unexpected
     53:     TRANSFORMATIVE = 9  # Completely unexpected
     54:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (56 total)
File: packages\agents\core\base_agent_template.py:52:15
Recommendation: Replace magic numbers with named constants or enums
Code context:
     49:     ROUTINE = 1  # Expected outcomes
     50:     NOTABLE = 3  # Mildly unexpected
     51:     IMPORTANT = 5  # Moderately unexpected
>>>  52:     CRITICAL = 7  # Highly unexpected
     53:     TRANSFORMATIVE = 9  # Completely unexpected
     54:
     55:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (56 total)
File: packages\agents\core\base_agent_template.py:53:21
Recommendation: Replace magic numbers with named constants or enums
Code context:
     50:     NOTABLE = 3  # Mildly unexpected
     51:     IMPORTANT = 5  # Moderately unexpected
     52:     CRITICAL = 7  # Highly unexpected
>>>  53:     TRANSFORMATIVE = 9  # Completely unexpected
     54:
     55:
     56: class GeometricState(Enum):


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (56 total)
File: packages\agents\core\base_agent_template.py:97:25
Recommendation: Replace magic numbers with named constants or enums
Code context:
     94:
     95:     def decay_importance(self, time_elapsed_hours: float) -> float:
     96:         """Calculate decayed importance based on time and retrieval"""
>>>  97:         base_decay = max(0.1, 1.0 - (time_elapsed_hours / (24 * 7)))  # Weekly decay
     98:         retrieval_boost = min(2.0, 1.0 + (self.retrieval_count * 0.1))
     99:         return self.importance.value * base_decay * retrieval_boost
    100:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\base_agent_template_refactored.py:1:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
>>>   1: """Refactored Base Agent Template - Clean Architecture with Component Composition.
      2:
      3: This refactored template reduces the original 845 LOC God Object to under 200 LOC
      4: by decomposing responsibilities into focused components following SOLID principles.


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\base_agent_template_refactored.py:125:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    122:         return self._state_manager.get_current_state().value
    123:
    124:     async def update_geometric_awareness(self, task_metrics: dict[str, Any] | None = None) -> dict[str, Any]:
>>> 125:         """Update geometric self-awareness with optional task metrics."""
    126:         geometric_state = await self._state_manager.update_geometric_awareness(task_metrics)
    127:
    128:         # Update metrics component with performance data


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\base_agent_template_refactored.py:166:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    163:         return result
    164:
    165:     async def join_group_channel(self, channel_name: str) -> bool:
>>> 166:         """Join a topic-based group communication channel."""
    167:         return await self._communication.join_group_channel(channel_name)
    168:
    169:     # Capability Management (delegated to AgentCapabilities)


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (16 calls)
File: packages\agents\core\base_agent_template_refactored.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'datetime' methods (8 calls)
File: packages\agents\core\base_agent_template_refactored.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (13 calls)
File: packages\agents\core\base_agent_template_refactored.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\base_original.py:1:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
>>>   1: """Shared base class for specialized agents.
      2:
      3: This module centralizes common functionality previously duplicated across
      4: specialized agent implementations. Domain specific agents should subclass


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\coordination_system.py:211:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    208:         """Initialize storage backend."""
    209:         with self._get_db() as conn:
    210:             conn.execute(
>>> 211:                 """
    212:                 CREATE TABLE IF NOT EXISTS agents (
    213:                     agent_id TEXT PRIMARY KEY,
    214:                     name TEXT NOT NULL,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\coordination_system.py:259:20
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    256:             # Persist to storage
    257:             with self._get_db() as conn:
    258:                 conn.execute(
>>> 259:                     """
    260:                     INSERT OR REPLACE INTO agents (
    261:                         agent_id, name, agent_type, capabilities, status,
    262:                         endpoint, registered_at, last_heartbeat, current_load,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\coordination_system.py:309:29
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    306:
    307:             # Remove from storage
    308:             with self._get_db() as conn:
>>> 309:                 conn.execute("DELETE FROM agents WHERE agent_id = ?", (agent_id,))
    310:                 conn.commit()
    311:
    312:         return True


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\coordination_system.py:321:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    318:         load: float | None = None,
    319:         metrics: dict[str, float] | None = None,
    320:     ):
>>> 321:         """Update agent status and metrics.
    322:
    323:         Args:
    324:             agent_id: Agent ID


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\coordination_system.py:422:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    419:         """Initialize task storage."""
    420:         with self._get_db() as conn:
    421:             conn.execute(
>>> 422:                 """
    423:                 CREATE TABLE IF NOT EXISTS tasks (
    424:                     task_id TEXT PRIMARY KEY,
    425:                     task_type TEXT NOT NULL,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\coordination_system.py:473:20
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    470:             # Persist to storage
    471:             with self._get_db() as conn:
    472:                 conn.execute(
>>> 473:                     """
    474:                     INSERT INTO tasks (
    475:                         task_id, task_type, description, priority, payload,
    476:                         requirements, constraints, status, created_at,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\coordination_system.py:598:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    595:         return best_agent
    596:
    597:     def complete_task(self, task_id: str, result: dict[str, Any] = None, error: str = None) -> bool:
>>> 598:         """Mark a task as completed.
    599:
    600:         Args:
    601:             task_id: Task ID


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\coordination_system.py:832:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    829:         return True
    830:
    831:     def release_resource(self, resource_id: str, agent_id: str) -> bool:
>>> 832:         """Release resource from agent.
    833:
    834:         Args:
    835:             resource_id: Resource ID


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\coordination_system.py:994:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    991:                 self._reassign_agent_tasks(agent.agent_id)
    992:
    993:     def _reassign_agent_tasks(self, agent_id: str):
>>> 994:         """Reassign tasks from failed/offline agent.
    995:
    996:         Args:
    997:             agent_id: Failed agent ID


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\coordination_system.py:1023:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1020:                 )
    1021:
    1022:     def _cleanup_expired_messages(self):
>>> 1023:         """Clean up expired messages from queues."""
    1024:         current_time = time.time()
    1025:
    1026:         # Clean agent message queues


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\coordination_system.py:1118:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1115:     capabilities: list[AgentCapability],
    1116:     endpoint: str = "localhost:0",
    1117: ) -> Agent:
>>> 1118:     """Create agent instance.
    1119:
    1120:     Args:
    1121:         name: Agent name


LONG_PARAMETER_LIST: Function 'create_task' has 6 parameters (>5)
File: packages\agents\core\coordination_system.py:1141:0
Recommendation: Use parameter objects, data classes, or keyword-only arguments
Code context:
    1138:     )
    1139:
    1140:
>>> 1141: def create_task(
    1142:     task_type: str,
    1143:     description: str,
    1144:     payload: dict[str, Any],


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\coordination_system.py:1149:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1146:     requirements: dict[str, Any] = None,
    1147:     constraints: dict[str, Any] = None,
    1148: ) -> Task:
>>> 1149:     """Create task instance."""
    1150:     return Task(
    1151:         task_id=str(uuid.uuid4()),
    1152:         task_type=task_type,


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (17 calls)
File: packages\agents\core\coordination_system.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'conn' methods (10 calls)
File: packages\agents\core\coordination_system.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'json' methods (8 calls)
File: packages\agents\core\coordination_system.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'time' methods (12 calls)
File: packages\agents\core\coordination_system.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'heapq' methods (6 calls)
File: packages\agents\core\coordination_system.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

SEQUENTIAL_COUPLING: Sequential coupling detected: Function '__post_init__' is part of a sequence-dependent API
File: packages\agents\core\coordination_system.py:186:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    183:     available: float = 0.0
    184:     metadata: dict[str, Any] = field(default_factory=dict)
    185:
>>> 186:     def __post_init__(self):
    187:         if self.available == 0.0:
    188:             self.available = self.capacity - self.allocated
    189:


SEQUENTIAL_COUPLING: Sequential coupling detected: Function '__init__' is part of a sequence-dependent API
File: packages\agents\core\coordination_system.py:876:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    873: class CoordinationEngine:
    874:     """Main coordination engine."""
    875:
>>> 876:     def __init__(
    877:         self,
    878:         strategy: CoordinationStrategy = CoordinationStrategy.CENTRALIZED,
    879:         storage_backend: str = ":memory:",


SEQUENTIAL_COUPLING: Sequential coupling detected: Function '_init_storage' is part of a sequence-dependent API
File: packages\agents\core\coordination_system.py:418:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    415:         self._lock = threading.Lock()
    416:         self._init_storage()
    417:
>>> 418:     def _init_storage(self):
    419:         """Initialize task storage."""
    420:         with self._get_db() as conn:
    421:             conn.execute(


SEQUENTIAL_COUPLING: Sequential coupling detected: Function '_setup_default_resources' is part of a sequence-dependent API
File: packages\agents\core\coordination_system.py:904:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    901:         # Setup default resources
    902:         self._setup_default_resources()
    903:
>>> 904:     def _setup_default_resources(self):
    905:         """Setup default system resources."""
    906:         self.resource_manager.register_resource(Resource("cpu", "compute", capacity=100.0))
    907:         self.resource_manager.register_resource(Resource("memory", "memory", capacity=8192.0))  # MB


SEQUENTIAL_COUPLING: Sequential coupling detected: Function '_cleanup_expired_messages' is part of a sequence-dependent API
File: packages\agents\core\coordination_system.py:1022:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    1019:                     (-task.priority, time.time(), task),
    1020:                 )
    1021:
>>> 1022:     def _cleanup_expired_messages(self):
    1023:         """Clean up expired messages from queues."""
    1024:         current_time = time.time()
    1025:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (14 total)
File: packages\agents\core\coordination_system.py:85:13
Recommendation: Replace magic numbers with named constants or enums
Code context:
     82:     """Task priority levels."""
     83:
     84:     LOW = 1
>>>  85:     NORMAL = 3
     86:     HIGH = 7
     87:     CRITICAL = 10
     88:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (14 total)
File: packages\agents\core\coordination_system.py:86:11
Recommendation: Replace magic numbers with named constants or enums
Code context:
     83:
     84:     LOW = 1
     85:     NORMAL = 3
>>>  86:     HIGH = 7
     87:     CRITICAL = 10
     88:
     89:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (14 total)
File: packages\agents\core\coordination_system.py:153:23
Recommendation: Replace magic numbers with named constants or enums
Code context:
    150:     result: dict[str, Any] | None = None
    151:     error: str | None = None
    152:     retry_count: int = 0
>>> 153:     max_retries: int = 3
    154:
    155:     # Coordination
    156:     dependencies: list[str] = field(default_factory=list)


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (14 total)
File: packages\agents\core\coordination_system.py:172:23
Recommendation: Replace magic numbers with named constants or enums
Code context:
    169:     payload: dict[str, Any]
    170:     timestamp: float = field(default_factory=time.time)
    171:     reply_to: str | None = None
>>> 172:     ttl_seconds: int = 300
    173:
    174:
    175: @dataclass


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (14 total)
File: packages\agents\core\coordination_system.py:586:78
Recommendation: Replace magic numbers with named constants or enums
Code context:
    583:
    584:             # Calculate score
    585:             load_score = 1.0 - agent.current_load  # Prefer less loaded agents
>>> 586:             performance_score = agent.performance_metrics.get("success_rate", 0.5)
    587:             availability_score = 1.0 if agent.status == AgentStatus.IDLE else 0.5
    588:
    589:             total_score = load_score * 0.4 + performance_score * 0.4 + availability_score * 0.2


LONG_PARAMETER_LIST: Function '__init__' has 6 parameters (>5)
File: packages\agents\governance\mcp_governance_dashboard.py:119:4
Recommendation: Use parameter objects, data classes, or keyword-only arguments
Code context:
    116:     - Emergency response and system recovery
    117:     """
    118:
>>> 119:     def __init__(
    120:         self,
    121:         digital_twin_concierge: DigitalTwinConcierge | None = None,
    122:         meta_agent_coordinator: MetaAgentShardingCoordinator | None = None,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\governance\mcp_governance_dashboard.py:249:37
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    246:                     success = await self.digital_twin_concierge.update_user_preferences(config)
    247:                     results = {"preferences_updated": success, "config": config}
    248:                 else:
>>> 249:                     return {"error": "Config required for preference updates"}
    250:
    251:             elif action == "trigger_learning_evaluation":
    252:                 evaluation = await self.digital_twin_concierge.evaluate_surprise_learning()


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\governance\mcp_governance_dashboard.py:287:27
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    284:                 status = await self.meta_agent_coordinator.get_deployment_status()
    285:                 results = status
    286:
>>> 287:             elif action == "create_deployment_plan":
    288:                 plan = await self.meta_agent_coordinator.create_deployment_plan(
    289:                     target_agents=target_agents,
    290:                     force_local=deployment_config.get("force_local", False) if deployment_config else False,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\governance\mcp_governance_dashboard.py:304:37
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    301:                     not hasattr(self.meta_agent_coordinator, "current_deployment")
    302:                     or not self.meta_agent_coordinator.current_deployment
    303:                 ):
>>> 304:                     return {"error": "No deployment plan available - create plan first"}
    305:
    306:                 deployment_results = await self.meta_agent_coordinator.deploy_agents(
    307:                     self.meta_agent_coordinator.current_deployment


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\governance\mcp_governance_dashboard.py:360:27
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    357:                 )
    358:                 results = result
    359:
>>> 360:             elif action == "submit_research_update":
    361:                 if not proposal_data:
    362:                     return {"error": "Research results required"}
    363:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\governance\mcp_governance_dashboard.py:420:27
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    417:                 else:
    418:                     results = {"message": "Routing optimization not supported"}
    419:
>>> 420:             elif action == "update_transport_config":
    421:                 if config:
    422:                     # Update transport configuration
    423:                     success = await self._update_transport_config(config)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\governance\mcp_governance_dashboard.py:426:37
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    423:                     success = await self._update_transport_config(config)
    424:                     results = {"config_updated": success, "config": config}
    425:                 else:
>>> 426:                     return {"error": "Config required for transport updates"}
    427:
    428:             else:
    429:                 return {"error": f"Unknown action: {action}"}


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\governance\mcp_governance_dashboard.py:597:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    594:                 await asyncio.sleep(300)  # Wait 5 minutes on error
    595:
    596:     async def _update_component_health(self, component: SystemComponent):
>>> 597:         """Update health status for a specific component"""
    598:
    599:         try:
    600:             if component == SystemComponent.DIGITAL_TWINS and self.digital_twin_concierge:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\governance\mcp_governance_dashboard.py:655:27
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    652:             self.system_status[component].last_updated = datetime.now()
    653:
    654:         except Exception as e:
>>> 655:             logger.error(f"Failed to update health for {component.value}: {e}")
    656:             self.system_status[component].status = "error"
    657:             self.system_status[component].health_score = 0.0
    658:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (15 calls)
File: packages\agents\governance\mcp_governance_dashboard.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (28 calls)
File: packages\agents\governance\mcp_governance_dashboard.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'asyncio' methods (8 calls)
File: packages\agents\governance\mcp_governance_dashboard.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'datetime' methods (9 calls)
File: packages\agents\governance\mcp_governance_dashboard.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'proposal_data' methods (7 calls)
File: packages\agents\governance\mcp_governance_dashboard.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'dashboard' methods (7 calls)
File: packages\agents\governance\mcp_governance_dashboard.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (23 total)
File: packages\agents\governance\mcp_governance_dashboard.py:540:55
Recommendation: Replace magic numbers with named constants or enums
Code context:
    537:             # Recent privacy audit events
    538:             recent_events = [
    539:                 event
>>> 540:                 for event in self.privacy_audit_trail[-50:]  # Last 50 events
    541:                 if (datetime.now() - datetime.fromisoformat(event.get("timestamp", "2020-01-01T00:00:00"))).days <= 30
    542:             ]
    543:             audit_report["recent_privacy_events"] = recent_events


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (23 total)
File: packages\agents\governance\mcp_governance_dashboard.py:541:116
Recommendation: Replace magic numbers with named constants or enums
Code context:
    538:             recent_events = [
    539:                 event
    540:                 for event in self.privacy_audit_trail[-50:]  # Last 50 events
>>> 541:                 if (datetime.now() - datetime.fromisoformat(event.get("timestamp", "2020-01-01T00:00:00"))).days <= 30
    542:             ]
    543:             audit_report["recent_privacy_events"] = recent_events
    544:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (23 total)
File: packages\agents\governance\mcp_governance_dashboard.py:580:36
Recommendation: Replace magic numbers with named constants or enums
Code context:
    577:
    578:         while True:
    579:             try:
>>> 580:                 await asyncio.sleep(60)  # Check every minute
    581:
    582:                 # Update component health
    583:                 for component in self.system_status.keys():


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (23 total)
File: packages\agents\governance\mcp_governance_dashboard.py:594:36
Recommendation: Replace magic numbers with named constants or enums
Code context:
    591:
    592:             except Exception as e:
    593:                 logger.error(f"Health check failed: {e}")
>>> 594:                 await asyncio.sleep(300)  # Wait 5 minutes on error
    595:
    596:     async def _update_component_health(self, component: SystemComponent):
    597:         """Update health status for a specific component"""


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (23 total)
File: packages\agents\governance\mcp_governance_dashboard.py:605:61
Recommendation: Replace magic numbers with named constants or enums
Code context:
    602:                 metrics = self.digital_twin_concierge.get_learning_metrics()
    603:
    604:                 self.system_status[component].status = "operational"
>>> 605:                 self.system_status[component].health_score = 0.9
    606:                 self.system_status[component].metrics = {
    607:                     "privacy_status": privacy_report.get("status", "unknown"),
    608:                     "learning_effectiveness": metrics.get("learning_effectiveness", 0.0),


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\navigation\scion_navigator.py:1:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
>>>   1: """
      2: SCION-aware Navigator integration for AIVillage transport selection.
      3: Integrates SCION paths into the Navigator's transport decision-making process.
      4: """


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\navigation\scion_navigator.py:135:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    132:         self.current_state = {}
    133:
    134:     def update_link_state(self, new_state: dict[str, Any]) -> bool:
>>> 135:         """Update link state and return True if changed."""
    136:         if self.current_state != new_state:
    137:             self.current_state = new_state.copy()
    138:             return True


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\navigation\scion_navigator.py:182:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    179:     async def select_path(
    180:         self, destination: str, context: MessageContext, available_protocols: list[str]
    181:     ) -> tuple[PathProtocol, dict[str, Any]]:
>>> 182:         """Select optimal path for given destination and context."""
    183:         start_time = time.time()
    184:
    185:         # Check SCION availability


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\navigation\scion_navigator.py:285:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    282:
    283:
    284: class SCIONAwareNavigator:
>>> 285:     """
    286:     Enhanced Navigator that integrates SCION paths into transport selection.
    287:     Provides intelligent routing decisions based on path quality, cost, and availability.
    288:     """


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (21 total)
File: packages\agents\navigation\scion_navigator.py:24:13
Recommendation: Replace magic numbers with named constants or enums
Code context:
     21:
     22:     CRITICAL = 1
     23:     HIGH = 2
>>>  24:     NORMAL = 3
     25:     LOW = 4
     26:     FALLBACK = 5
     27:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (21 total)
File: packages\agents\navigation\scion_navigator.py:25:10
Recommendation: Replace magic numbers with named constants or enums
Code context:
     22:     CRITICAL = 1
     23:     HIGH = 2
     24:     NORMAL = 3
>>>  25:     LOW = 4
     26:     FALLBACK = 5
     27:
     28:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (21 total)
File: packages\agents\navigation\scion_navigator.py:26:15
Recommendation: Replace magic numbers with named constants or enums
Code context:
     23:     HIGH = 2
     24:     NORMAL = 3
     25:     LOW = 4
>>>  26:     FALLBACK = 5
     27:
     28:
     29: class PathProtocol(Enum):


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (21 total)
File: packages\agents\navigation\scion_navigator.py:60:22
Recommendation: Replace magic numbers with named constants or enums
Code context:
     57: class MessageContext:
     58:     """Message context for routing decisions."""
     59:
>>>  60:     size_bytes: int = 1024
     61:     priority: int = 5
     62:     requires_realtime: bool = False
     63:     privacy_required: bool = False


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (21 total)
File: packages\agents\navigation\scion_navigator.py:61:20
Recommendation: Replace magic numbers with named constants or enums
Code context:
     58:     """Message context for routing decisions."""
     59:
     60:     size_bytes: int = 1024
>>>  61:     priority: int = 5
     62:     requires_realtime: bool = False
     63:     privacy_required: bool = False
     64:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'requirements' methods (7 calls)
File: packages\agents\specialized\architect_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (7 calls)
File: packages\agents\specialized\architect_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (6 calls)
File: packages\agents\specialized\architect_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\specialized\creative_agent.py:53:19
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     50:     async def generate(self, prompt: str) -> str:
     51:         """Generate creative content based on prompt"""
     52:         if "story" in prompt.lower() or "narrative" in prompt.lower():
>>>  53:             return "I can create compelling stories with rich characters and engaging plots. Specify genre and themes."
     54:         if "poem" in prompt.lower() or "poetry" in prompt.lower():
     55:             return "I craft poetry in various styles - haiku, sonnets, free verse, and more. What's your theme?"
     56:         if "design" in prompt.lower() or "visual" in prompt.lower():


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\specialized\creative_agent.py:177:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    174:             return {"error": str(e)}
    175:
    176:     async def create_poetry(self, request: CreativeRequest) -> dict[str, Any]:
>>> 177:         """Create poetry based on theme and style"""
    178:         try:
    179:             theme = request.theme
    180:             style = request.style or "free_verse"


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\specialized\creative_agent.py:265:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    262:             return {"error": str(e)}
    263:
    264:     async def design_visual_concept(self, request: CreativeRequest) -> dict[str, Any]:
>>> 265:         """Create visual design concept"""
    266:         try:
    267:             theme = request.theme
    268:             style = request.style or "modern"


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\specialized\creative_agent.py:361:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    358:             return {"error": str(e)}
    359:
    360:     async def compose_music_concept(self, request: CreativeRequest) -> dict[str, Any]:
>>> 361:         """Create music composition concept"""
    362:         try:
    363:             theme = request.theme
    364:             style = request.style or "contemporary"


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\specialized\creative_agent.py:526:43
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    523:                         },
    524:                         {
    525:                             "type": "mentor",
>>> 526:                             "description": "Learned crucial skills from wise teacher",
    527:                         },
    528:                         {
    529:                             "type": "rival",


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'prompt' methods (8 calls)
File: packages\agents\specialized\creative_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'random' methods (16 calls)
File: packages\agents\specialized\creative_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'theme' methods (13 calls)
File: packages\agents\specialized\creative_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (11 calls)
File: packages\agents\specialized\creative_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (11 total)
File: packages\agents\specialized\creative_agent.py:101:67
Recommendation: Replace magic numbers with named constants or enums
Code context:
     98:     async def activate_latent_space(self, query: str) -> tuple[str, str]:
     99:         """Activate latent space for creative generation"""
    100:         creative_type = "visual" if any(word in query.lower() for word in ["design", "art", "visual"]) else "narrative"
>>> 101:         latent_representation = f"CREATIVE[{creative_type}:{query[:50]}]"
    102:         return creative_type, latent_representation
    103:
    104:     async def generate_story(self, request: CreativeRequest) -> dict[str, Any]:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (11 total)
File: packages\agents\specialized\creative_agent.py:143:23
Recommendation: Replace magic numbers with named constants or enums
Code context:
    140:
    141:             if length == "short":
    142:                 word_count = "500-1000"
>>> 143:                 acts = 3
    144:             elif length == "long":
    145:                 word_count = "5000-10000"
    146:                 acts = 5


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (11 total)
File: packages\agents\specialized\creative_agent.py:146:23
Recommendation: Replace magic numbers with named constants or enums
Code context:
    143:                 acts = 3
    144:             elif length == "long":
    145:                 word_count = "5000-10000"
>>> 146:                 acts = 5
    147:             else:
    148:                 word_count = "2000-3000"
    149:                 acts = 4


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (11 total)
File: packages\agents\specialized\creative_agent.py:149:23
Recommendation: Replace magic numbers with named constants or enums
Code context:
    146:                 acts = 5
    147:             else:
    148:                 word_count = "2000-3000"
>>> 149:                 acts = 4
    150:
    151:             story_outline = {
    152:                 "title": f"The {theme.title()} Chronicles",


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (11 total)
File: packages\agents\specialized\creative_agent.py:184:29
Recommendation: Replace magic numbers with named constants or enums
Code context:
    181:
    182:             poetry_forms = {
    183:                 "haiku": {
>>> 184:                     "lines": 3,
    185:                     "syllables": [5, 7, 5],
    186:                     "structure": "traditional",
    187:                 },


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\specialized\data_science_agent.py:65:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     62:         self.analysis_history = []
     63:
     64:     async def generate(self, prompt: str) -> str:
>>>  65:         """Generate data analysis insights from prompt"""
     66:         if "statistical analysis" in prompt.lower():
     67:             return "I can perform statistical analysis. Please provide data source and analysis parameters."
     68:         if "machine learning" in prompt.lower():


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\specialized\data_science_agent.py:463:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    460:             return {"error": str(e)}
    461:
    462:     async def _load_data(self, data_source: str) -> Any:
>>> 463:         """Load data from various sources"""
    464:         if data_source.endswith(".csv"):
    465:             return pd.read_csv(data_source)
    466:         if data_source.endswith(".json"):


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\specialized\data_science_agent.py:475:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    472:         raise ValueError(f"Unsupported data format: {data_source}")
    473:
    474:     def _summarize_result(self, result: dict[str, Any]) -> dict[str, Any]:
>>> 475:         """Create summary of analysis result"""
    476:         summary = {}
    477:         if "metrics" in result:
    478:             summary["metrics"] = result["metrics"]


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (9 calls)
File: packages\agents\specialized\data_science_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (12 calls)
File: packages\agents\specialized\data_science_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'data' methods (6 calls)
File: packages\agents\specialized\data_science_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'config' methods (10 calls)
File: packages\agents\specialized\data_science_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'pd' methods (6 calls)
File: packages\agents\specialized\data_science_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (13 total)
File: packages\agents\specialized\data_science_agent.py:37:20
Recommendation: Replace magic numbers with named constants or enums
Code context:
     34:     data_source: str
     35:     parameters: dict[str, Any]
     36:     output_format: str = "json"
>>>  37:     priority: int = 5
     38:
     39:
     40: class DataScienceAgent(BaseAgent):


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (13 total)
File: packages\agents\specialized\data_science_agent.py:111:65
Recommendation: Replace magic numbers with named constants or enums
Code context:
    108:     async def activate_latent_space(self, query: str) -> tuple[str, str]:
    109:         """Activate latent space for data analysis"""
    110:         analysis_type = "statistical" if "stat" in query.lower() else "ml"
>>> 111:         latent_representation = f"LATENT[{analysis_type}:{query[:50]}]"
    112:         return analysis_type, latent_representation
    113:
    114:     async def initialize(self):


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (13 total)
File: packages\agents\specialized\data_science_agent.py:139:29
Recommendation: Replace magic numbers with named constants or enums
Code context:
    136:     async def _setup_analysis_pipeline(self):
    137:         """Setup data analysis pipeline"""
    138:         self.pipeline_config = {
>>> 139:             "max_data_size": 10_000_000,  # 10MB limit
    140:             "supported_formats": ["csv", "json", "parquet", "excel"],
    141:             "visualization_backend": "matplotlib",
    142:             "parallel_processing": True,


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (13 total)
File: packages\agents\specialized\data_science_agent.py:193:53
Recommendation: Replace magic numbers with named constants or enums
Code context:
    190:                         results["hypothesis_tests"]["t_test"] = {
    191:                             "t_statistic": float(t_stat),
    192:                             "p_value": float(p_value),
>>> 193:                             "significant": p_value < 0.05,
    194:                         }
    195:
    196:         except Exception as e:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (13 total)
File: packages\agents\specialized\data_science_agent.py:226:80
Recommendation: Replace magic numbers with named constants or enums
Code context:
    223:             X = pd.get_dummies(X, drop_first=True)
    224:
    225:             # Split data
>>> 226:             X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    227:
    228:             # Scale features
    229:             scaler = StandardScaler()


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\specialized\devops_agent.py:168:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    165:         }
    166:
    167:     async def manage_pipeline(self, pipeline_config: dict[str, Any]) -> dict[str, Any]:
>>> 168:         """Create or update CI/CD pipeline"""
    169:         pipeline_id = pipeline_config.get("name", "default-pipeline")
    170:
    171:         pipeline = {


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\specialized\devops_agent.py:290:35
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    287:                     "severity": "high",
    288:                     "type": "outdated_dependency",
    289:                     "description": "OpenSSL version 1.1.1f contains known vulnerabilities",
>>> 290:                     "remediation": "Update to OpenSSL 3.0.x",
    291:                 }
    292:             ],
    293:             "scan_time": "2024-01-01T12:00:00Z",


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (14 calls)
File: packages\agents\specialized\devops_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'config' methods (6 calls)
File: packages\agents\specialized\devops_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (23 total)
File: packages\agents\specialized\devops_agent.py:21:32
Recommendation: Replace magic numbers with named constants or enums
Code context:
     18:     service: str
     19:     version: str
     20:     rollback_on_failure: bool = True
>>>  21:     health_check_timeout: int = 300
     22:
     23:
     24: class DevOpsAgent(BaseAgent):


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (23 total)
File: packages\agents\specialized\devops_agent.py:99:66
Recommendation: Replace magic numbers with named constants or enums
Code context:
     96:     async def activate_latent_space(self, query: str) -> tuple[str, str]:
     97:         """Activate latent space for DevOps operations"""
     98:         operation_type = "deployment" if "deploy" in query.lower() else "infrastructure"
>>>  99:         latent_representation = f"DEVOPS[{operation_type}:{query[:50]}]"
    100:         return operation_type, latent_representation
    101:
    102:     async def deploy_service(self, request: DeploymentRequest) -> dict[str, Any]:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (23 total)
File: packages\agents\specialized\devops_agent.py:128:36
Recommendation: Replace magic numbers with named constants or enums
Code context:
    125:
    126:             for step in deployment_steps:
    127:                 logger.info(f"Executing deployment step: {step}")
>>> 128:                 await asyncio.sleep(0.1)  # Simulate work
    129:                 result[step] = "completed"
    130:
    131:             # Simulate health check


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (23 total)
File: packages\agents\specialized\devops_agent.py:134:35
Recommendation: Replace magic numbers with named constants or enums
Code context:
    131:             # Simulate health check
    132:             if request.environment == "prod":
    133:                 result["health_checks"] = {
>>> 134:                     "http_status": 200,
    135:                     "response_time_ms": 150,
    136:                     "memory_usage_mb": 512,
    137:                     "cpu_usage_percent": 25,


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (23 total)
File: packages\agents\specialized\devops_agent.py:135:40
Recommendation: Replace magic numbers with named constants or enums
Code context:
    132:             if request.environment == "prod":
    133:                 result["health_checks"] = {
    134:                     "http_status": 200,
>>> 135:                     "response_time_ms": 150,
    136:                     "memory_usage_mb": 512,
    137:                     "cpu_usage_percent": 25,
    138:                 }


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (11 calls)
File: packages\agents\specialized\financial_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'company_data' methods (6 calls)
File: packages\agents\specialized\financial_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (83 total)
File: packages\agents\specialized\financial_agent.py:97:66
Recommendation: Replace magic numbers with named constants or enums
Code context:
     94:     async def activate_latent_space(self, query: str) -> tuple[str, str]:
     95:         """Activate latent space for financial analysis"""
     96:         analysis_type = "risk" if "risk" in query.lower() else "portfolio"
>>>  97:         latent_representation = f"FINANCE[{analysis_type}:{query[:50]}]"
     98:         return analysis_type, latent_representation
     99:
    100:     async def optimize_portfolio(self, assets: list[str], constraints: dict[str, Any]) -> dict[str, Any]:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (83 total)
File: packages\agents\specialized\financial_agent.py:105:32
Recommendation: Replace magic numbers with named constants or enums
Code context:
    102:         try:
    103:             # Simulate expected returns and covariance matrix
    104:             n_assets = len(assets)
>>> 105:             expected_returns = [0.08 + 0.05 * (i / n_assets) for i in range(n_assets)]
    106:
    107:             # Simple covariance matrix simulation
    108:             covariance_matrix = []


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (83 total)
File: packages\agents\specialized\financial_agent.py:105:39
Recommendation: Replace magic numbers with named constants or enums
Code context:
    102:         try:
    103:             # Simulate expected returns and covariance matrix
    104:             n_assets = len(assets)
>>> 105:             expected_returns = [0.08 + 0.05 * (i / n_assets) for i in range(n_assets)]
    106:
    107:             # Simple covariance matrix simulation
    108:             covariance_matrix = []


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (83 total)
File: packages\agents\specialized\financial_agent.py:113:35
Recommendation: Replace magic numbers with named constants or enums
Code context:
    110:                 row = []
    111:                 for j in range(n_assets):
    112:                     if i == j:
>>> 113:                         row.append(0.04)  # Variance
    114:                     else:
    115:                         row.append(0.01)  # Covariance
    116:                 covariance_matrix.append(row)


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (83 total)
File: packages\agents\specialized\financial_agent.py:115:35
Recommendation: Replace magic numbers with named constants or enums
Code context:
    112:                     if i == j:
    113:                         row.append(0.04)  # Variance
    114:                     else:
>>> 115:                         row.append(0.01)  # Covariance
    116:                 covariance_matrix.append(row)
    117:
    118:             # Simplified equal-weight optimization (in practice, use scipy.optimize)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\specialized\social_agent.py:147:20
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    144:                 "recommended_actions": [
    145:                     "Schedule mediated discussion",
    146:                     "Establish communication guidelines",
>>> 147:                     "Create follow-up check-in",
    148:                 ],
    149:                 "success_metrics": [
    150:                     "Reduced negative interactions",


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (9 calls)
File: packages\agents\specialized\social_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (20 total)
File: packages\agents\specialized\social_agent.py:82:59
Recommendation: Replace magic numbers with named constants or enums
Code context:
     79:
     80:     async def activate_latent_space(self, query: str) -> tuple[str, str]:
     81:         social_type = "moderation" if "moderate" in query.lower() else "engagement"
>>>  82:         return social_type, f"SOCIAL[{social_type}:{query[:50]}]"
     83:
     84:     async def moderate_community(self, content: str, context: dict[str, Any]) -> dict[str, Any]:
     85:         """Moderate community content and interactions"""


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (20 total)
File: packages\agents\specialized\social_agent.py:90:30
Recommendation: Replace magic numbers with named constants or enums
Code context:
     87:             moderation_result = {
     88:                 "content_id": context.get("content_id", "unknown"),
     89:                 "action": "approved",
>>>  90:                 "confidence": 0.95,
     91:                 "flags": [],
     92:                 "recommendations": [],
     93:             }


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (20 total)
File: packages\agents\specialized\social_agent.py:104:38
Recommendation: Replace magic numbers with named constants or enums
Code context:
    101:                     {
    102:                         "action": "flagged_for_review",
    103:                         "flags": flagged_patterns,
>>> 104:                         "confidence": 0.8,
    105:                         "recommendations": [
    106:                             "Human moderator review recommended",
    107:                             "Consider community guidelines enforcement",


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (20 total)
File: packages\agents\specialized\social_agent.py:187:32
Recommendation: Replace magic numbers with named constants or enums
Code context:
    184:                 ],
    185:             }
    186:
>>> 187:             if community_size < 50:
    188:                 focus_area = "growth_activities"
    189:                 priority = "Building initial momentum"
    190:             elif activity_level == "low":


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (20 total)
File: packages\agents\specialized\social_agent.py:201:36
Recommendation: Replace magic numbers with named constants or enums
Code context:
    198:                 "community_assessment": {
    199:                     "size": community_size,
    200:                     "activity": activity_level,
>>> 201:                     "health_score": 7.5,
    202:                 },
    203:                 "primary_focus": focus_area,
    204:                 "priority": priority,


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'prompt' methods (6 calls)
File: packages\agents\specialized\tester_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (8 calls)
File: packages\agents\specialized\tester_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'random' methods (34 calls)
File: packages\agents\specialized\tester_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (58 total)
File: packages\agents\specialized\tester_agent.py:20:32
Recommendation: Replace magic numbers with named constants or enums
Code context:
     17:     test_type: str  # 'unit', 'integration', 'e2e', 'performance', 'security'
     18:     target: str
     19:     parameters: dict[str, Any]
>>>  20:     coverage_threshold: float = 0.8
     21:
     22:
     23: class TesterAgent(BaseAgent):


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (58 total)
File: packages\agents\specialized\tester_agent.py:88:53
Recommendation: Replace magic numbers with named constants or enums
Code context:
     85:
     86:     async def activate_latent_space(self, query: str) -> tuple[str, str]:
     87:         test_type = "performance" if "performance" in query.lower() else "functional"
>>>  88:         return test_type, f"TEST[{test_type}:{query[:50]}]"
     89:
     90:     async def execute_test_suite(self, request: TestRequest) -> dict[str, Any]:
     91:         """Execute comprehensive test suite"""


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (58 total)
File: packages\agents\specialized\tester_agent.py:93:73
Recommendation: Replace magic numbers with named constants or enums
Code context:
     90:     async def execute_test_suite(self, request: TestRequest) -> dict[str, Any]:
     91:         """Execute comprehensive test suite"""
     92:         try:
>>>  93:             test_id = f"test_{request.test_type}_{hash(request.target) % 10000}"
     94:
     95:             # Simulate test execution based on type
     96:             if request.test_type == "unit":


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (58 total)
File: packages\agents\specialized\tester_agent.py:122:37
Recommendation: Replace magic numbers with named constants or enums
Code context:
    119:     async def _execute_unit_tests(self, request: TestRequest) -> dict[str, Any]:
    120:         """Execute unit tests"""
    121:         # Simulate unit test results
>>> 122:         total_tests = random.randint(50, 200)
    123:         passed_tests = int(total_tests * random.uniform(0.85, 0.98))
    124:         failed_tests = total_tests - passed_tests
    125:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (58 total)
File: packages\agents\specialized\tester_agent.py:122:41
Recommendation: Replace magic numbers with named constants or enums
Code context:
    119:     async def _execute_unit_tests(self, request: TestRequest) -> dict[str, Any]:
    120:         """Execute unit tests"""
    121:         # Simulate unit test results
>>> 122:         total_tests = random.randint(50, 200)
    123:         passed_tests = int(total_tests * random.uniform(0.85, 0.98))
    124:         failed_tests = total_tests - passed_tests
    125:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\specialized\translator_agent.py:183:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    180:                 "detected_language": detected_language,
    181:                 "language_name": self.supported_languages.get(detected_language, "Unknown"),
    182:                 "confidence": min(1.0, confidence),
>>> 183:                 "alternative_languages": [
    184:                     {
    185:                         "language": lang,
    186:                         "confidence": score / len(text.split()) if text.split() else 0,


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (8 calls)
File: packages\agents\specialized\translator_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'text' methods (12 calls)
File: packages\agents\specialized\translator_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\specialized\__init__.py:1:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
>>>   1: """Specialized Agents Module - Advanced Sub-Agent Implementations
      2:
      3: This module provides 8 specialized sub-agents designed to complement the existing
      4: 18 primary agents in the AIVillage ecosystem:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\components\agent_constants.py:1:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
>>>   1: """Agent system constants following connascence principles.
      2:
      3: Centralizes all magic numbers and hardcoded values from BaseAgentTemplate
      4: to eliminate Connascence of Meaning and establish single sources of truth.


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (48 total)
File: packages\agents\core\components\agent_constants.py:14:37
Recommendation: Replace magic numbers with named constants or enums
Code context:
     11:     """Core agent system constants."""
     12:
     13:     # Default intervals (seconds)
>>>  14:     SELF_AWARENESS_UPDATE_INTERVAL = 30
     15:     MEMORY_CLEANUP_INTERVAL = 3600  # 1 hour
     16:     PERFORMANCE_METRIC_WINDOW = 300  # 5 minutes
     17:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (48 total)
File: packages\agents\core\components\agent_constants.py:15:30
Recommendation: Replace magic numbers with named constants or enums
Code context:
     12:
     13:     # Default intervals (seconds)
     14:     SELF_AWARENESS_UPDATE_INTERVAL = 30
>>>  15:     MEMORY_CLEANUP_INTERVAL = 3600  # 1 hour
     16:     PERFORMANCE_METRIC_WINDOW = 300  # 5 minutes
     17:
     18:     # Task management


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (48 total)
File: packages\agents\core\components\agent_constants.py:16:32
Recommendation: Replace magic numbers with named constants or enums
Code context:
     13:     # Default intervals (seconds)
     14:     SELF_AWARENESS_UPDATE_INTERVAL = 30
     15:     MEMORY_CLEANUP_INTERVAL = 3600  # 1 hour
>>>  16:     PERFORMANCE_METRIC_WINDOW = 300  # 5 minutes
     17:
     18:     # Task management
     19:     MAX_TASK_HISTORY = 1000


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (48 total)
File: packages\agents\core\components\agent_constants.py:21:25
Recommendation: Replace magic numbers with named constants or enums
Code context:
     18:     # Task management
     19:     MAX_TASK_HISTORY = 1000
     20:     MAX_JOURNAL_ENTRIES = 100
>>>  21:     MAX_MEMORY_ENTRIES = 500
     22:     MAX_GEOMETRIC_STATES = 100
     23:
     24:     # Performance thresholds


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (48 total)
File: packages\agents\core\components\agent_constants.py:25:26
Recommendation: Replace magic numbers with named constants or enums
Code context:
     22:     MAX_GEOMETRIC_STATES = 100
     23:
     24:     # Performance thresholds
>>>  25:     MAX_CPU_UTILIZATION = 0.9
     26:     MAX_MEMORY_UTILIZATION = 0.9
     27:     MAX_RESPONSE_LATENCY_MS = 5000
     28:     MIN_ACCURACY_SCORE = 0.7


DATA_CLASS: Class 'AgentCapabilities' appears to be a data class with business logic: 9 data methods vs 8 business methods
File: packages\agents\core\components\capabilities.py:75:0
Recommendation: Consider using dataclasses or separate data from behavior
Code context:
     72:         self.last_used = datetime.now()
     73:
     74:
>>>  75: class AgentCapabilities:
     76:     """Manages agent capabilities, tools, and specialization configuration.
     77:
     78:     This component encapsulates capability management, reducing coupling


LONG_PARAMETER_LIST: Function 'add_capability' has 7 parameters (>5)
File: packages\agents\core\components\capabilities.py:116:4
Recommendation: Use parameter objects, data classes, or keyword-only arguments
Code context:
    113:         """Get the agent's specialized role."""
    114:         return self._specialized_role
    115:
>>> 116:     def add_capability(
    117:         self,
    118:         capability_id: str,
    119:         name: str,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\components\capabilities.py:159:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    156:         return True
    157:
    158:     def remove_capability(self, capability_id: str) -> bool:
>>> 159:         """Remove a capability from the agent.
    160:
    161:         Args:
    162:             capability_id: ID of capability to remove


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (14 calls)
File: packages\agents\core\components\capabilities.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\components\communication.py:105:27
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    102:             )
    103:
    104:             self._update_metrics(sent=True, latency_ms=0)  # Would measure actual latency
>>> 105:             logger.debug(f"Direct message sent from {self.agent_id} to {recipient}")
    106:
    107:             return result
    108:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\components\communication.py:117:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    114:     async def broadcast_message(
    115:         self, message: str, priority: int = 5, exclude_agents: list[str] | None = None
    116:     ) -> dict[str, Any]:
>>> 117:         """Broadcast message to all agents in network.
    118:
    119:         Args:
    120:             message: Message content to broadcast


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\components\communication.py:144:26
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    141:             )
    142:
    143:             self._update_metrics(sent=True)
>>> 144:             logger.info(f"Broadcast message sent from {self.agent_id}")
    145:
    146:             return result
    147:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\components\communication.py:154:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    151:             return self._create_error_response(f"Broadcast failed: {str(e)}")
    152:
    153:     async def join_group_channel(self, channel_name: str) -> bool:
>>> 154:         """Join a topic-based group communication channel.
    155:
    156:         Args:
    157:             channel_name: Name of the group channel to join


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\components\communication.py:163:29
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    160:             True if successfully joined, False otherwise
    161:         """
    162:         if not self.config.group_channels_enabled:
>>> 163:             logger.warning(f"Group channels disabled, cannot join {channel_name}")
    164:             return False
    165:
    166:         if channel_name not in self._channels["group"]:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\components\communication.py:169:43
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    166:         if channel_name not in self._channels["group"]:
    167:             self._channels["group"][channel_name] = []
    168:
>>> 169:         logger.info(f"Agent {self.agent_id} joined group channel: {channel_name}")
    170:         return True
    171:
    172:     async def leave_group_channel(self, channel_name: str) -> bool:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\components\communication.py:305:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    302:     def _update_metrics(
    303:         self, sent: bool = False, received: bool = False, failed: bool = False, latency_ms: float = 0
    304:     ) -> None:
>>> 305:         """Update internal communication metrics (CoI - Connascence of Identity for metrics object)."""
    306:         if sent:
    307:             self.metrics.sent_count += 1
    308:         if received:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\components\communication.py:329:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    326:         return self.metrics.sent_count / total_attempts
    327:
    328:     def _create_error_response(self, error_message: str) -> dict[str, Any]:
>>> 329:         """Create standardized error response (CoA - single algorithm for error handling)."""
    330:         return {
    331:             "status": "error",
    332:             "message": error_message,


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (11 calls)
File: packages\agents\core\components\communication.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (19 calls)
File: packages\agents\core\components\communication.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

LONG_PARAMETER_LIST: Function 'set_configuration' has 6 parameters (>5)
File: packages\agents\core\components\configuration.py:117:4
Recommendation: Use parameter objects, data classes, or keyword-only arguments
Code context:
    114:
    115:         logger.debug(f"Configuration manager initialized for {agent_type} agent {agent_id}")
    116:
>>> 117:     def set_configuration(
    118:         self,
    119:         key: str,
    120:         value: Any,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\components\configuration.py:149:41
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    146:             existing = self._config_entries[key]
    147:             if self._get_precedence(existing.level) > self._get_precedence(level):
    148:                 logger.debug(
>>> 149:                     f"Configuration {key} not updated - existing level {existing.level.value} has higher precedence"
    150:                 )
    151:                 return False
    152:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\components\configuration.py:331:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    328:     def import_configuration(
    329:         self, config_data: dict[str, Any], level: ConfigurationLevel = ConfigurationLevel.FILE
    330:     ) -> dict[str, Any]:
>>> 331:         """Import configuration from external source.
    332:
    333:         Args:
    334:             config_data: Configuration data to import


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\components\configuration.py:368:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    365:             "task_timeout_seconds": 300.0,
    366:             "health_check_interval_seconds": 60,
    367:             "geometric_awareness_enabled": True,
>>> 368:             "self_awareness_update_interval_seconds": 30,
    369:             "memory_retrieval_threshold": 0.3,
    370:             "adaptation_rate": 0.1,
    371:             "stability_threshold": 0.8,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\components\configuration.py:388:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    385:         )
    386:
    387:     def _update_core_config(self, key: str, value: Any) -> None:
>>> 388:         """Update core configuration object with new value."""
    389:         # Map configuration keys to core config attributes
    390:         key_mapping = {
    391:             "specialized_role": "specialized_role",


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\components\configuration.py:396:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    393:             "task_timeout_seconds": "task_timeout_seconds",
    394:             "health_check_interval_seconds": "health_check_interval_seconds",
    395:             "geometric_awareness_enabled": "geometric_awareness_enabled",
>>> 396:             "self_awareness_update_interval_seconds": "self_awareness_update_interval_seconds",
    397:             "memory_retrieval_threshold": "memory_retrieval_threshold",
    398:             "adaptation_rate": "adaptation_rate",
    399:             "stability_threshold": "stability_threshold",


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\components\configuration.py:396:54
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    393:             "task_timeout_seconds": "task_timeout_seconds",
    394:             "health_check_interval_seconds": "health_check_interval_seconds",
    395:             "geometric_awareness_enabled": "geometric_awareness_enabled",
>>> 396:             "self_awareness_update_interval_seconds": "self_awareness_update_interval_seconds",
    397:             "memory_retrieval_threshold": "memory_retrieval_threshold",
    398:             "adaptation_rate": "adaptation_rate",
    399:             "stability_threshold": "stability_threshold",


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (9 calls)
File: packages\agents\core\components\configuration.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (7 calls)
File: packages\agents\core\components\configuration.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (18 total)
File: packages\agents\core\components\configuration.py:52:34
Recommendation: Replace magic numbers with named constants or enums
Code context:
     49:
     50:     # Performance settings
     51:     max_concurrent_tasks: int = 10
>>>  52:     task_timeout_seconds: float = 300.0
     53:     health_check_interval_seconds: int = 60
     54:
     55:     # Memory and journal settings


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (18 total)
File: packages\agents\core\components\configuration.py:53:41
Recommendation: Replace magic numbers with named constants or enums
Code context:
     50:     # Performance settings
     51:     max_concurrent_tasks: int = 10
     52:     task_timeout_seconds: float = 300.0
>>>  53:     health_check_interval_seconds: int = 60
     54:
     55:     # Memory and journal settings
     56:     max_journal_entries: int = 1000


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (18 total)
File: packages\agents\core\components\configuration.py:57:30
Recommendation: Replace magic numbers with named constants or enums
Code context:
     54:
     55:     # Memory and journal settings
     56:     max_journal_entries: int = 1000
>>>  57:     max_memory_entries: int = 5000
     58:     memory_retention_hours: int = 168  # 1 week
     59:     memory_retrieval_threshold: float = 0.3
     60:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (18 total)
File: packages\agents\core\components\configuration.py:58:34
Recommendation: Replace magic numbers with named constants or enums
Code context:
     55:     # Memory and journal settings
     56:     max_journal_entries: int = 1000
     57:     max_memory_entries: int = 5000
>>>  58:     memory_retention_hours: int = 168  # 1 week
     59:     memory_retrieval_threshold: float = 0.3
     60:
     61:     # Geometric awareness settings


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (18 total)
File: packages\agents\core\components\configuration.py:59:40
Recommendation: Replace magic numbers with named constants or enums
Code context:
     56:     max_journal_entries: int = 1000
     57:     max_memory_entries: int = 5000
     58:     memory_retention_hours: int = 168  # 1 week
>>>  59:     memory_retrieval_threshold: float = 0.3
     60:
     61:     # Geometric awareness settings
     62:     geometric_awareness_enabled: bool = True


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\components\constants.py:171:35
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    168:     TASK_FAILED: Final[str] = "Task {task_id} failed: {error}"
    169:     MEMORY_LOW: Final[str] = "Agent {agent_id} low memory: {available_mb}MB"
    170:     COMMUNICATION_ERROR: Final[str] = "Communication error with {target_agent}: {error}"
>>> 171:     HEARTBEAT_MISSED: Final[str] = "Missed heartbeat from {agent_id}"
    172:     CAPABILITY_REGISTERED: Final[str] = "Capability {capability} registered for {agent_id}"
    173:     CONSENSUS_REACHED: Final[str] = "Consensus reached for {proposal_id}"
    174:     LEADER_ELECTED: Final[str] = "Agent {agent_id} elected as leader"


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (52 total)
File: packages\agents\core\components\constants.py:11:44
Recommendation: Replace magic numbers with named constants or enums
Code context:
      8: from typing import Final
      9:
     10: # Agent lifecycle constants
>>>  11: AGENT_STARTUP_TIMEOUT_SECONDS: Final[int] = 30
     12: AGENT_SHUTDOWN_TIMEOUT_SECONDS: Final[int] = 10
     13: AGENT_HEARTBEAT_INTERVAL_SECONDS: Final[int] = 5
     14: AGENT_HEALTH_CHECK_INTERVAL_SECONDS: Final[int] = 15


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (52 total)
File: packages\agents\core\components\constants.py:13:47
Recommendation: Replace magic numbers with named constants or enums
Code context:
     10: # Agent lifecycle constants
     11: AGENT_STARTUP_TIMEOUT_SECONDS: Final[int] = 30
     12: AGENT_SHUTDOWN_TIMEOUT_SECONDS: Final[int] = 10
>>>  13: AGENT_HEARTBEAT_INTERVAL_SECONDS: Final[int] = 5
     14: AGENT_HEALTH_CHECK_INTERVAL_SECONDS: Final[int] = 15
     15: AGENT_MAX_IDLE_TIME_MINUTES: Final[int] = 30
     16:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (52 total)
File: packages\agents\core\components\constants.py:14:50
Recommendation: Replace magic numbers with named constants or enums
Code context:
     11: AGENT_STARTUP_TIMEOUT_SECONDS: Final[int] = 30
     12: AGENT_SHUTDOWN_TIMEOUT_SECONDS: Final[int] = 10
     13: AGENT_HEARTBEAT_INTERVAL_SECONDS: Final[int] = 5
>>>  14: AGENT_HEALTH_CHECK_INTERVAL_SECONDS: Final[int] = 15
     15: AGENT_MAX_IDLE_TIME_MINUTES: Final[int] = 30
     16:
     17: # Memory and performance


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (52 total)
File: packages\agents\core\components\constants.py:15:42
Recommendation: Replace magic numbers with named constants or enums
Code context:
     12: AGENT_SHUTDOWN_TIMEOUT_SECONDS: Final[int] = 10
     13: AGENT_HEARTBEAT_INTERVAL_SECONDS: Final[int] = 5
     14: AGENT_HEALTH_CHECK_INTERVAL_SECONDS: Final[int] = 15
>>>  15: AGENT_MAX_IDLE_TIME_MINUTES: Final[int] = 30
     16:
     17: # Memory and performance
     18: AGENT_MAX_MEMORY_MB: Final[int] = 512


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (52 total)
File: packages\agents\core\components\constants.py:18:34
Recommendation: Replace magic numbers with named constants or enums
Code context:
     15: AGENT_MAX_IDLE_TIME_MINUTES: Final[int] = 30
     16:
     17: # Memory and performance
>>>  18: AGENT_MAX_MEMORY_MB: Final[int] = 512
     19: AGENT_MAX_CPU_PERCENT: Final[int] = 50
     20: AGENT_MESSAGE_QUEUE_SIZE: Final[int] = 1000
     21: AGENT_TASK_QUEUE_SIZE: Final[int] = 100


LONG_PARAMETER_LIST: Function 'record_metric' has 7 parameters (>5)
File: packages\agents\core\components\metrics.py:118:4
Recommendation: Use parameter objects, data classes, or keyword-only arguments
Code context:
    115:
    116:         logger.debug(f"Metrics component initialized for agent {agent_id}")
    117:
>>> 118:     def record_metric(
    119:         self,
    120:         metric_type: MetricType,
    121:         metric_name: str,


LONG_PARAMETER_LIST: Function 'record_task_completion' has 6 parameters (>5)
File: packages\agents\core\components\metrics.py:152:4
Recommendation: Use parameter objects, data classes, or keyword-only arguments
Code context:
    149:
    150:         logger.debug(f"Recorded metric {metric_name}: {value} {unit}")
    151:
>>> 152:     def record_task_completion(
    153:         self, task_id: str, processing_time_ms: float, success: bool = True, accuracy: float = 1.0, **metadata
    154:     ) -> None:
    155:         """Record task completion metrics.


LONG_PARAMETER_LIST: Function 'record_communication_event' has 6 parameters (>5)
File: packages\agents\core\components\metrics.py:191:4
Recommendation: Use parameter objects, data classes, or keyword-only arguments
Code context:
    188:
    189:         logger.debug(f"Task metrics recorded for {task_id}: {processing_time_ms}ms, success={success}")
    190:
>>> 191:     def record_communication_event(
    192:         self, event_type: str, recipient: str | None = None, latency_ms: float = 0.0, success: bool = True, **metadata
    193:     ) -> None:
    194:         """Record communication event metrics.


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\components\metrics.py:227:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    224:     def update_memory_stats(
    225:         self, journal_entries: int = 0, memory_entries: int = 0, geometric_states: int = 0, task_history_size: int = 0
    226:     ) -> None:
>>> 227:         """Update memory and storage statistics.
    228:
    229:         Args:
    230:             journal_entries: Number of journal entries


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\components\metrics.py:248:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    245:     def update_performance_snapshot(
    246:         self, cpu_utilization: float = 0.0, memory_utilization: float = 0.0, **kwargs
    247:     ) -> None:
>>> 248:         """Update current performance snapshot.
    249:
    250:         Args:
    251:             cpu_utilization: Current CPU usage (0.0 to 1.0)


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'datetime' methods (13 calls)
File: packages\agents\core\components\metrics.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (19 calls)
File: packages\agents\core\components\metrics.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\components\state_manager.py:91:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     88:
     89:
     90: class AgentStateManager:
>>>  91:     """Manages agent state, geometric awareness, and state transitions.
     92:
     93:     This component encapsulates all state management logic, providing
     94:     clean separation from other agent responsibilities.


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\components\state_manager.py:180:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    177:         return self._current_geometric_state
    178:
    179:     async def update_geometric_awareness(self, task_metrics: dict[str, Any] | None = None) -> GeometricSelfState:
>>> 180:         """Update geometric self-awareness state.
    181:
    182:         Args:
    183:             task_metrics: Optional recent task performance metrics


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\components\state_manager.py:244:27
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    241:                 # Recovery to healthy state
    242:                 self.set_state(AgentState.IDLE, "geometric state recovered")
    243:
>>> 244:             logger.debug(f"Geometric awareness updated: {geometric_state.value}")
    245:             return current_geometric_state
    246:
    247:         except Exception as e:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\components\state_manager.py:248:27
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    245:             return current_geometric_state
    246:
    247:         except Exception as e:
>>> 248:             logger.error(f"Failed to update geometric awareness: {e}")
    249:             # Return fallback state
    250:             return GeometricSelfState(
    251:                 timestamp=datetime.now(), geometric_state=GeometricState.BALANCED, resource_metrics=ResourceMetrics()


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\components\state_manager.py:344:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    341:             "geometric_state": (
    342:                 self._current_geometric_state.geometric_state.value if self._current_geometric_state else "unknown"
    343:             ),
>>> 344:             "last_geometric_update": (
    345:                 self._current_geometric_state.timestamp.isoformat() if self._current_geometric_state else None
    346:             ),
    347:         }


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\components\state_manager.py:350:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    347:         }
    348:
    349:     async def _periodic_updates(self) -> None:
>>> 350:         """Background task for periodic geometric state updates."""
    351:         while not self._shutdown_requested:
    352:             try:
    353:                 await self.update_geometric_awareness()


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\components\state_manager.py:358:31
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    355:             except asyncio.CancelledError:
    356:                 break
    357:             except Exception as e:
>>> 358:                 logger.error(f"Error in periodic geometric update: {e}")
    359:                 await asyncio.sleep(self.config.update_interval_seconds)
    360:
    361:     async def _gather_resource_metrics(self) -> ResourceMetrics:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (9 calls)
File: packages\agents\core\components\state_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (10 calls)
File: packages\agents\core\components\state_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 't' methods (7 calls)
File: packages\agents\core\components\state_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (19 total)
File: packages\agents\core\components\state_manager.py:63:29
Recommendation: Replace magic numbers with named constants or enums
Code context:
     60:     timestamp: datetime
     61:     geometric_state: GeometricState
     62:     resource_metrics: ResourceMetrics
>>>  63:     adaptation_rate: float = 0.1
     64:     stability_score: float = 1.0
     65:     optimization_direction: str = "balanced"
     66:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (19 total)
File: packages\agents\core\components\state_manager.py:71:38
Recommendation: Replace magic numbers with named constants or enums
Code context:
     68:         """Determine if agent is in healthy geometric state."""
     69:         metrics = self.resource_metrics
     70:         return (
>>>  71:             metrics.cpu_utilization < 0.9
     72:             and metrics.memory_utilization < 0.9
     73:             and metrics.response_latency_ms < 5000
     74:             and metrics.accuracy_score > 0.7


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (19 total)
File: packages\agents\core\components\state_manager.py:72:45
Recommendation: Replace magic numbers with named constants or enums
Code context:
     69:         metrics = self.resource_metrics
     70:         return (
     71:             metrics.cpu_utilization < 0.9
>>>  72:             and metrics.memory_utilization < 0.9
     73:             and metrics.response_latency_ms < 5000
     74:             and metrics.accuracy_score > 0.7
     75:             and self.stability_score > 0.5


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (19 total)
File: packages\agents\core\components\state_manager.py:73:46
Recommendation: Replace magic numbers with named constants or enums
Code context:
     70:         return (
     71:             metrics.cpu_utilization < 0.9
     72:             and metrics.memory_utilization < 0.9
>>>  73:             and metrics.response_latency_ms < 5000
     74:             and metrics.accuracy_score > 0.7
     75:             and self.stability_score > 0.5
     76:         )


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (19 total)
File: packages\agents\core\components\state_manager.py:74:41
Recommendation: Replace magic numbers with named constants or enums
Code context:
     71:             metrics.cpu_utilization < 0.9
     72:             and metrics.memory_utilization < 0.9
     73:             and metrics.response_latency_ms < 5000
>>>  74:             and metrics.accuracy_score > 0.7
     75:             and self.stability_score > 0.5
     76:         )
     77:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\components\__init__.py:1:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
>>>   1: """Agent Components - Focused responsibility classes extracted from BaseAgentTemplate.
      2:
      3: This module provides focused, single-responsibility components that replace
      4: the monolithic BaseAgentTemplate with clean, testable, and maintainable classes.


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\components\awareness\geometric_awareness.py:1:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
>>>   1: """Geometric self-awareness system for agents.
      2:
      3: Provides proprioception-like biofeedback for agents to understand
      4: their resource utilization and performance state. Extracted from


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\components\awareness\geometric_awareness.py:43:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     40:     optimization_direction: str  # What aspect being optimized
     41:
     42:     def is_healthy(self) -> bool:
>>>  43:         """Determine if agent is in healthy geometric state.
     44:
     45:         Uses configurable thresholds from constants.
     46:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\components\awareness\geometric_awareness.py:77:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     74:
     75:     @classmethod
     76:     def from_dict(cls, data: Dict[str, Any]) -> "GeometricSelfState":
>>>  77:         """Create from dictionary."""
     78:         return cls(
     79:             timestamp=datetime.fromisoformat(data["timestamp"]),
     80:             geometric_state=GeometricState(data["geometric_state"]),


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\components\awareness\geometric_awareness.py:119:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    116:         modification_history: List[Dict[str, Any]],
    117:         adas_config: Dict[str, Any],
    118:     ) -> GeometricSelfState:
>>> 119:         """Update geometric self-awareness state.
    120:
    121:         Args:
    122:             task_history: Recent task performance history


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\components\awareness\geometric_awareness.py:176:27
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    173:             if len(self._state_history) > self._max_history:
    174:                 self._state_history = self._state_history[-self._max_history :]
    175:
>>> 176:             logger.debug(f"Geometric awareness updated: {state.value}")
    177:             return geometric_state
    178:
    179:         except Exception as e:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\components\awareness\geometric_awareness.py:180:27
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    177:             return geometric_state
    178:
    179:         except Exception as e:
>>> 180:             logger.error(f"Failed to update geometric self-awareness: {e}")
    181:             # Return a default state in case of error
    182:             return self._create_default_state()
    183:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\components\awareness\geometric_awareness.py:206:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    203:             return 0.5, 0.5
    204:
    205:     def _filter_recent_tasks(self, task_history: List[Dict[str, Any]], current_time: float) -> List[Dict[str, Any]]:
>>> 206:         """Filter tasks from recent performance window.
    207:
    208:         Args:
    209:             task_history: Full task history


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\components\awareness\geometric_awareness.py:222:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    219:         ]
    220:
    221:     def _calculate_performance_metrics(self, recent_tasks: List[Dict[str, Any]]) -> Dict[str, float]:
>>> 222:         """Calculate performance metrics from recent tasks.
    223:
    224:         Args:
    225:             recent_tasks: List of recent task records


LONG_PARAMETER_LIST: Function '_determine_geometric_state' has 6 parameters (>5)
File: packages\agents\core\components\awareness\geometric_awareness.py:247:4
Recommendation: Use parameter objects, data classes, or keyword-only arguments
Code context:
    244:             "avg_accuracy": avg_accuracy,
    245:         }
    246:
>>> 247:     def _determine_geometric_state(
    248:         self,
    249:         cpu_percent: float,
    250:         memory_percent: float,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\components\awareness\geometric_awareness.py:308:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    305:         return 1.0 - cpu_deviation - memory_deviation
    306:
    307:     def _create_default_state(self) -> GeometricSelfState:
>>> 308:         """Create a default geometric state for error conditions.
    309:
    310:         Returns:
    311:             Default geometric state


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\components\awareness\geometric_awareness.py:428:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    425:         return [state.to_dict() for state in self._state_history]
    426:
    427:     def import_state_history(self, state_data: List[Dict[str, Any]]) -> int:
>>> 428:         """Import state history from dictionaries.
    429:
    430:         Args:
    431:             state_data: List of state dictionaries


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (7 calls)
File: packages\agents\core\components\awareness\geometric_awareness.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (6 calls)
File: packages\agents\core\components\awareness\geometric_awareness.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (14 total)
File: packages\agents\core\components\awareness\geometric_awareness.py:193:54
Recommendation: Replace magic numbers with named constants or enums
Code context:
    190:         try:
    191:             import psutil
    192:
>>> 193:             cpu_percent = psutil.cpu_percent(interval=0.1) / 100.0
    194:             memory_info = psutil.virtual_memory()
    195:             memory_percent = memory_info.percent / 100.0
    196:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (14 total)
File: packages\agents\core\components\awareness\geometric_awareness.py:200:19
Recommendation: Replace magic numbers with named constants or enums
Code context:
    197:             return cpu_percent, memory_percent
    198:         except ImportError:
    199:             logger.warning("psutil not available, using mock system metrics")
>>> 200:             return 0.5, 0.5  # Default moderate utilization
    201:         except Exception as e:
    202:             logger.warning(f"Failed to get system metrics: {e}")
    203:             return 0.5, 0.5


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (14 total)
File: packages\agents\core\components\awareness\geometric_awareness.py:200:24
Recommendation: Replace magic numbers with named constants or enums
Code context:
    197:             return cpu_percent, memory_percent
    198:         except ImportError:
    199:             logger.warning("psutil not available, using mock system metrics")
>>> 200:             return 0.5, 0.5  # Default moderate utilization
    201:         except Exception as e:
    202:             logger.warning(f"Failed to get system metrics: {e}")
    203:             return 0.5, 0.5


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (14 total)
File: packages\agents\core\components\awareness\geometric_awareness.py:203:19
Recommendation: Replace magic numbers with named constants or enums
Code context:
    200:             return 0.5, 0.5  # Default moderate utilization
    201:         except Exception as e:
    202:             logger.warning(f"Failed to get system metrics: {e}")
>>> 203:             return 0.5, 0.5
    204:
    205:     def _filter_recent_tasks(self, task_history: List[Dict[str, Any]], current_time: float) -> List[Dict[str, Any]]:
    206:         """Filter tasks from recent performance window.


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (14 total)
File: packages\agents\core\components\awareness\geometric_awareness.py:203:24
Recommendation: Replace magic numbers with named constants or enums
Code context:
    200:             return 0.5, 0.5  # Default moderate utilization
    201:         except Exception as e:
    202:             logger.warning(f"Failed to get system metrics: {e}")
>>> 203:             return 0.5, 0.5
    204:
    205:     def _filter_recent_tasks(self, task_history: List[Dict[str, Any]], current_time: float) -> List[Dict[str, Any]]:
    206:         """Filter tasks from recent performance window.


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\components\memory\langroid_memory.py:1:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
>>>   1: """Langroid-based personal memory system for agents.
      2:
      3: Implements emotional memory based on unexpectedness following the
      4: single responsibility principle. Extracted from BaseAgentTemplate


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\components\memory\langroid_memory.py:72:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     69:
     70:     @classmethod
     71:     def from_dict(cls, data: Dict[str, Any]) -> "MemoryEntry":
>>>  72:         """Create memory entry from dictionary."""
     73:         return cls(
     74:             memory_id=data["memory_id"],
     75:             timestamp=datetime.fromisoformat(data["timestamp"]),


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\components\memory\langroid_memory.py:147:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    144:         return memory_entry.memory_id
    145:
    146:     def _calculate_importance(self, unexpectedness_score: float) -> MemoryImportance:
>>> 147:         """Calculate memory importance from unexpectedness score.
    148:
    149:         Uses configurable thresholds to avoid magic numbers.
    150:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\components\memory\langroid_memory.py:342:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    339:         return [memory.to_dict() for memory in self._personal_memory]
    340:
    341:     def import_memories(self, memory_data: List[Dict[str, Any]]) -> int:
>>> 342:         """Import memories from dictionaries.
    343:
    344:         Args:
    345:             memory_data: List of memory dictionaries


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\components\reflection\quiet_star_reflection.py:1:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
>>>   1: """Quiet-STaR reflection system for agent introspection.
      2:
      3: Handles personal journal and reflection capabilities following single
      4: responsibility principle. Extracted from BaseAgentTemplate to reduce


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\components\reflection\quiet_star_reflection.py:49:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     46:
     47:     @classmethod
     48:     def from_dict(cls, data: dict[str, Any]) -> "QuietStarReflection":
>>>  49:         """Create reflection from dictionary."""
     50:         return cls(
     51:             reflection_id=data["reflection_id"],
     52:             timestamp=datetime.fromisoformat(data["timestamp"]),


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\core\components\reflection\quiet_star_reflection.py:254:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    251:         return [reflection.to_dict() for reflection in self._personal_journal]
    252:
    253:     def import_reflections(self, reflection_data: List[dict[str, Any]]) -> int:
>>> 254:         """Import reflections from dictionaries.
    255:
    256:         Args:
    257:             reflection_data: List of reflection dictionaries


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\specialized\culture_making\horticulturist_agent.py:352:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    349:         }
    350:
    351:     async def _get_crop_info(self, crop_name: str) -> dict[str, Any]:
>>> 352:         """Get crop information from database"""
    353:         # Basic crop database
    354:         crop_db = {
    355:             "tomato": {


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\specialized\culture_making\horticulturist_agent.py:447:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    444:         return recommendations
    445:
    446:     async def _create_planting_schedule(self, crop: CropProfile) -> dict[str, Any]:
>>> 447:         """Create detailed planting and care schedule"""
    448:         schedule = {
    449:             "planting_date": datetime.fromtimestamp(crop.planting_date).strftime("%Y-%m-%d"),
    450:             "key_milestones": [],


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\specialized\culture_making\horticulturist_agent.py:950:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    947:             return [
    948:                 "Plant cool-season crops for fall harvest",
    949:                 "Begin season cleanup and composting",
>>> 950:                 "Protect tender plants from frost",
    951:             ]
    952:         # Winter
    953:         return [


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'time' methods (13 calls)
File: packages\agents\specialized\culture_making\horticulturist_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (9 calls)
File: packages\agents\specialized\culture_making\horticulturist_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (9 calls)
File: packages\agents\specialized\culture_making\horticulturist_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'datetime' methods (7 calls)
File: packages\agents\specialized\culture_making\horticulturist_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'recommendations' methods (48 calls)
File: packages\agents\specialized\culture_making\horticulturist_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'soil_sample_data' methods (7 calls)
File: packages\agents\specialized\culture_making\horticulturist_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'growth_data' methods (11 calls)
File: packages\agents\specialized\culture_making\horticulturist_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (145 total)
File: packages\agents\specialized\culture_making\horticulturist_agent.py:165:32
Recommendation: Replace magic numbers with named constants or enums
Code context:
    162:
    163:         # Regional and seasonal data
    164:         self.growing_seasons = {
>>> 165:             "spring": {"start": 3, "end": 5},
    166:             "summer": {"start": 6, "end": 8},
    167:             "fall": {"start": 9, "end": 11},
    168:             "winter": {"start": 12, "end": 2},


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (145 total)
File: packages\agents\specialized\culture_making\horticulturist_agent.py:165:42
Recommendation: Replace magic numbers with named constants or enums
Code context:
    162:
    163:         # Regional and seasonal data
    164:         self.growing_seasons = {
>>> 165:             "spring": {"start": 3, "end": 5},
    166:             "summer": {"start": 6, "end": 8},
    167:             "fall": {"start": 9, "end": 11},
    168:             "winter": {"start": 12, "end": 2},


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (145 total)
File: packages\agents\specialized\culture_making\horticulturist_agent.py:166:32
Recommendation: Replace magic numbers with named constants or enums
Code context:
    163:         # Regional and seasonal data
    164:         self.growing_seasons = {
    165:             "spring": {"start": 3, "end": 5},
>>> 166:             "summer": {"start": 6, "end": 8},
    167:             "fall": {"start": 9, "end": 11},
    168:             "winter": {"start": 12, "end": 2},
    169:         }


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (145 total)
File: packages\agents\specialized\culture_making\horticulturist_agent.py:166:42
Recommendation: Replace magic numbers with named constants or enums
Code context:
    163:         # Regional and seasonal data
    164:         self.growing_seasons = {
    165:             "spring": {"start": 3, "end": 5},
>>> 166:             "summer": {"start": 6, "end": 8},
    167:             "fall": {"start": 9, "end": 11},
    168:             "winter": {"start": 12, "end": 2},
    169:         }


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (145 total)
File: packages\agents\specialized\culture_making\horticulturist_agent.py:167:30
Recommendation: Replace magic numbers with named constants or enums
Code context:
    164:         self.growing_seasons = {
    165:             "spring": {"start": 3, "end": 5},
    166:             "summer": {"start": 6, "end": 8},
>>> 167:             "fall": {"start": 9, "end": 11},
    168:             "winter": {"start": 12, "end": 2},
    169:         }
    170:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\specialized\governance\auditor_agent.py:1:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
>>>   1: """Auditor Agent - Receipts, Risk & Compliance
      2:
      3: The auditing and compliance specialist of AIVillage, responsible for:
      4: - Receipt collection and verification from all agents


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\specialized\governance\auditor_agent.py:148:19
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    145:         prompt_lower = prompt.lower()
    146:
    147:         if "receipt" in prompt_lower:
>>> 148:             return "I collect, verify, and manage receipts from all agents to maintain comprehensive audit trails."
    149:         if "audit" in prompt_lower:
    150:             return "I generate detailed audit reports showing agent activity, costs, and compliance status."
    151:         if "compliance" in prompt_lower:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\specialized\governance\auditor_agent.py:248:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    245:         return space_type, latent_repr
    246:
    247:     async def record_receipt(self, receipt_data: dict[str, Any]) -> dict[str, Any]:
>>> 248:         """Record a new receipt from an agent - MVP function"""
    249:         receipt_id = receipt_data.get("receipt_id", f"receipt_{int(time.time())}_{len(self.receipts)}")
    250:
    251:         # Create receipt object


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\specialized\governance\auditor_agent.py:418:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    415:         affected_agents: list[str],
    416:         severity: str,
    417:     ):
>>> 418:         """Create a compliance alert"""
    419:         alert_id = f"alert_{int(time.time())}_{len(self.compliance_alerts)}"
    420:
    421:         alert = ComplianceAlert(


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'receipt_data' methods (9 calls)
File: packages\agents\specialized\governance\auditor_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'time' methods (18 calls)
File: packages\agents\specialized\governance\auditor_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (8 calls)
File: packages\agents\specialized\governance\auditor_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (10 calls)
File: packages\agents\specialized\governance\auditor_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'verification_issues' methods (6 calls)
File: packages\agents\specialized\governance\auditor_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (17 total)
File: packages\agents\specialized\governance\auditor_agent.py:139:36
Recommendation: Replace magic numbers with named constants or enums
Code context:
    136:         self.verification_enabled = True
    137:         self.auto_compliance_check = True
    138:         self.cost_alert_threshold_usd = 100.0
>>> 139:         self.max_receipt_age_days = 90
    140:
    141:         self.initialized = False
    142:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (17 total)
File: packages\agents\specialized\governance\auditor_agent.py:162:65
Recommendation: Replace magic numbers with named constants or enums
Code context:
    159:
    160:     async def get_embedding(self, text: str) -> list[float]:
    161:         """Generate audit-focused embeddings"""
>>> 162:         hash_value = int(hashlib.md5(text.encode()).hexdigest(), 16)
    163:         # Audit embeddings focus on compliance and accountability patterns
    164:         return [(hash_value % 1000) / 1000.0] * 448
    165:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (17 total)
File: packages\agents\specialized\governance\auditor_agent.py:164:48
Recommendation: Replace magic numbers with named constants or enums
Code context:
    161:         """Generate audit-focused embeddings"""
    162:         hash_value = int(hashlib.md5(text.encode()).hexdigest(), 16)
    163:         # Audit embeddings focus on compliance and accountability patterns
>>> 164:         return [(hash_value % 1000) / 1000.0] * 448
    165:
    166:     async def rerank(self, query: str, results: list[dict[str, Any]], k: int) -> list[dict[str, Any]]:
    167:         """Rerank based on audit and compliance relevance"""


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (17 total)
File: packages\agents\specialized\governance\auditor_agent.py:187:58
Recommendation: Replace magic numbers with named constants or enums
Code context:
    184:             content = str(result.get("content", ""))
    185:
    186:             for keyword in audit_keywords:
>>> 187:                 score += content.lower().count(keyword) * 1.8
    188:
    189:             # Boost compliance and accountability content
    190:             if any(term in content.lower() for term in ["compliance", "accountability", "transparency"]):


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (17 total)
File: packages\agents\specialized\governance\auditor_agent.py:191:25
Recommendation: Replace magic numbers with named constants or enums
Code context:
    188:
    189:             # Boost compliance and accountability content
    190:             if any(term in content.lower() for term in ["compliance", "accountability", "transparency"]):
>>> 191:                 score *= 1.6
    192:
    193:             result["audit_relevance"] = score
    194:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\specialized\governance\enhanced_king_agent.py:153:31
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    150:             await self.king_agent.record_quiet_star_reflection(
    151:                 reflection_type=ReflectionType.PROBLEM_SOLVING,
    152:                 context=f"Decomposing complex task: {task_description[:100]}",
>>> 153:                 raw_thoughts=f"Analyzing similar patterns from group memory, identifying {len(task.required_capabilities)} required capabilities, estimating complexity {task.estimated_complexity}",
    154:                 insights=f"Task decomposition successful. Key insight: {key_patterns}",
    155:                 emotional_valence=0.2,  # Mild satisfaction
    156:                 tags=["task_decomposition", "orchestration", f"priority_{task.priority.name.lower()}"],


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\specialized\governance\enhanced_king_agent.py:313:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    310:
    311:
    312: class EnhancedKingAgent(BaseAgentTemplate):
>>> 313:     """Enhanced King Agent with full AIVillage system integration
    314:
    315:     Demonstrates complete integration of:
    316:     - RAG system for group memory and decision support


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\specialized\governance\enhanced_king_agent.py:563:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    560:         similar_tasks: dict[str, Any],
    561:         capability_analysis: dict[str, Any],
    562:     ) -> OrchestrationTask:
>>> 563:         """Create orchestration task with RAG-assisted analysis"""
    564:
    565:         # Extract required capabilities from RAG analysis
    566:         required_capabilities = []


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\specialized\governance\enhanced_king_agent.py:839:22
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    836:     async def receive_message(self, message) -> None:
    837:         """Receive and process incoming message"""
    838:         # Log message receipt
>>> 839:         logger.info(f"King received message from {message.sender}: {str(message.content)[:100]}")
    840:
    841:         # Record interaction reflection
    842:         await self.record_quiet_star_reflection(


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\specialized\governance\enhanced_king_agent.py:844:22
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    841:         # Record interaction reflection
    842:         await self.record_quiet_star_reflection(
    843:             reflection_type=ReflectionType.INTERACTION,
>>> 844:             context=f"Received message from {message.sender}",
    845:             raw_thoughts=f"Processing incoming message of type {message.message_type} with priority {message.priority}",
    846:             insights="Inter-agent communication flowing properly through MCP channels",
    847:             emotional_valence=0.1,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\specialized\governance\enhanced_king_agent.py:880:21
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    877:
    878:         # Generate contextual response
    879:         if "orchestrate" in prompt.lower():
>>> 880:             return f"I orchestrate complex multi-agent tasks using RAG-assisted decomposition and multi-objective optimization. Context from group memory: {len(context_query.get('results', []))} relevant patterns found."
    881:         elif "emergency" in prompt.lower():
    882:             return "I have emergency oversight capabilities with full transparency logging. All emergency actions are recorded for auditability."
    883:         elif "optimize" in prompt.lower():


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\specialized\governance\enhanced_king_agent.py:1048:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1045:
    1046: # Factory function for easy instantiation
    1047: async def create_enhanced_king_agent(agent_id: str = "enhanced_king_agent") -> EnhancedKingAgent:
>>> 1048:     """Create and initialize an Enhanced King Agent with full system integration"""
    1049:
    1050:     agent = EnhancedKingAgent(agent_id)
    1051:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\specialized\governance\enhanced_king_agent.py:1069:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1066: # Export for use in agent system
    1067: __all__ = [
    1068:     "EnhancedKingAgent",
>>> 1069:     "create_enhanced_king_agent",
    1070:     "OrchestrationTask",
    1071:     "OptimizationConfig",
    1072:     "Priority",


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (21 calls)
File: packages\agents\specialized\governance\enhanced_king_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'parameters' methods (6 calls)
File: packages\agents\specialized\governance\enhanced_king_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (15 calls)
File: packages\agents\specialized\governance\enhanced_king_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'datetime' methods (10 calls)
File: packages\agents\specialized\governance\enhanced_king_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'assignment_result' methods (6 calls)
File: packages\agents\specialized\governance\enhanced_king_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'task_data' methods (8 calls)
File: packages\agents\specialized\governance\enhanced_king_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'result' methods (8 calls)
File: packages\agents\specialized\governance\enhanced_king_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'agent' methods (8 calls)
File: packages\agents\specialized\governance\enhanced_king_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (57 total)
File: packages\agents\specialized\governance\enhanced_king_agent.py:39:13
Recommendation: Replace magic numbers with named constants or enums
Code context:
     36:
     37:     CRITICAL = 1
     38:     HIGH = 2
>>>  39:     MEDIUM = 3
     40:     LOW = 4
     41:
     42:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (57 total)
File: packages\agents\specialized\governance\enhanced_king_agent.py:40:10
Recommendation: Replace magic numbers with named constants or enums
Code context:
     37:     CRITICAL = 1
     38:     HIGH = 2
     39:     MEDIUM = 3
>>>  40:     LOW = 4
     41:
     42:
     43: class OptimizationObjective(Enum):


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (57 total)
File: packages\agents\specialized\governance\enhanced_king_agent.py:81:30
Recommendation: Replace magic numbers with named constants or enums
Code context:
     78:     objectives: dict[OptimizationObjective, float]  # weights
     79:     constraints: dict[str, Any]
     80:     max_agents: int = 10
>>>  81:     max_parallel_tasks: int = 5
     82:
     83:
     84: class TaskDecompositionTool(MCPTool):


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (57 total)
File: packages\agents\specialized\governance\enhanced_king_agent.py:155:34
Recommendation: Replace magic numbers with named constants or enums
Code context:
    152:                 context=f"Decomposing complex task: {task_description[:100]}",
    153:                 raw_thoughts=f"Analyzing similar patterns from group memory, identifying {len(task.required_capabilities)} required capabilities, estimating complexity {task.estimated_complexity}",
    154:                 insights=f"Task decomposition successful. Key insight: {key_patterns}",
>>> 155:                 emotional_valence=0.2,  # Mild satisfaction
    156:                 tags=["task_decomposition", "orchestration", f"priority_{task.priority.name.lower()}"],
    157:             )
    158:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (57 total)
File: packages\agents\specialized\governance\enhanced_king_agent.py:229:34
Recommendation: Replace magic numbers with named constants or enums
Code context:
    226:                 context=f"Optimizing agent assignment for task {task_id}",
    227:                 raw_thoughts=f"Evaluating {len(available_agents.get('results', []))} available agents against {len(task.required_capabilities)} capabilities, optimizing for {list(optimization_config.get('objectives', {}).keys())}",
    228:                 insights=f"Optimal assignment found: {len(assignment_result['agents'])} agents assigned with score {assignment_result.get('score', 0):.2f}",
>>> 229:                 emotional_valence=0.4,  # Satisfaction with optimization
    230:                 tags=["agent_assignment", "optimization", task.priority.name.lower()],
    231:             )
    232:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (7 calls)
File: packages\agents\specialized\governance\king_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'description' methods (7 calls)
File: packages\agents\specialized\governance\king_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (7 calls)
File: packages\agents\specialized\governance\king_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (44 total)
File: packages\agents\specialized\governance\king_agent.py:24:13
Recommendation: Replace magic numbers with named constants or enums
Code context:
     21: class Priority(Enum):
     22:     CRITICAL = 1
     23:     HIGH = 2
>>>  24:     MEDIUM = 3
     25:     LOW = 4
     26:
     27:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (44 total)
File: packages\agents\specialized\governance\king_agent.py:25:10
Recommendation: Replace magic numbers with named constants or enums
Code context:
     22:     CRITICAL = 1
     23:     HIGH = 2
     24:     MEDIUM = 3
>>>  25:     LOW = 4
     26:
     27:
     28: class OptimizationObjective(Enum):


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (44 total)
File: packages\agents\specialized\governance\king_agent.py:54:30
Recommendation: Replace magic numbers with named constants or enums
Code context:
     51:     objectives: dict[OptimizationObjective, float]  # weights
     52:     constraints: dict[str, Any]
     53:     max_agents: int = 10
>>>  54:     max_parallel_tasks: int = 5
     55:
     56:
     57: class KingAgent(AgentInterface):


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (44 total)
File: packages\agents\specialized\governance\king_agent.py:88:47
Recommendation: Replace magic numbers with named constants or enums
Code context:
     85:         # Optimization parameters
     86:         self.default_optimization = OptimizationConfig(
     87:             objectives={
>>>  88:                 OptimizationObjective.LATENCY: 0.3,
     89:                 OptimizationObjective.ENERGY: 0.2,
     90:                 OptimizationObjective.PRIVACY: 0.2,
     91:                 OptimizationObjective.COST: 0.2,


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (44 total)
File: packages\agents\specialized\governance\king_agent.py:89:46
Recommendation: Replace magic numbers with named constants or enums
Code context:
     86:         self.default_optimization = OptimizationConfig(
     87:             objectives={
     88:                 OptimizationObjective.LATENCY: 0.3,
>>>  89:                 OptimizationObjective.ENERGY: 0.2,
     90:                 OptimizationObjective.PRIVACY: 0.2,
     91:                 OptimizationObjective.COST: 0.2,
     92:                 OptimizationObjective.QUALITY: 0.1,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\specialized\governance\king_agent_refactored.py:1:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
>>>   1: """Refactored King Agent - Clean Architecture Example
      2:
      3: This demonstrates how to migrate a complex specialized agent to the new
      4: component-based architecture while maintaining all original functionality.


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\specialized\governance\king_agent_refactored.py:174:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    171:
    172:
    173: class KingAgent(BaseAgentTemplate):
>>> 174:     """Supreme orchestrator using clean component architecture.
    175:
    176:     Responsibilities:
    177:     - Strategic decision making


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\specialized\governance\king_agent_refactored.py:435:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    432:
    433:
    434: def create_king_agent(agent_id: str = None) -> KingAgent:
>>> 435:     """Factory function to create properly configured King Agent.
    436:
    437:     Args:
    438:         agent_id: Optional agent ID, generates one if not provided


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'parameters' methods (9 calls)
File: packages\agents\specialized\governance\king_agent_refactored.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (22 calls)
File: packages\agents\specialized\governance\king_agent_refactored.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'task_data' methods (11 calls)
File: packages\agents\specialized\governance\king_agent_refactored.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (17 total)
File: packages\agents\specialized\governance\king_agent_refactored.py:32:13
Recommendation: Replace magic numbers with named constants or enums
Code context:
     29: class Priority(Enum):
     30:     CRITICAL = 1
     31:     HIGH = 2
>>>  32:     MEDIUM = 3
     33:     LOW = 4
     34:
     35:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (17 total)
File: packages\agents\specialized\governance\king_agent_refactored.py:33:10
Recommendation: Replace magic numbers with named constants or enums
Code context:
     30:     CRITICAL = 1
     31:     HIGH = 2
     32:     MEDIUM = 3
>>>  33:     LOW = 4
     34:
     35:
     36: class OptimizationObjective(Enum):


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (17 total)
File: packages\agents\specialized\governance\king_agent_refactored.py:83:26
Recommendation: Replace magic numbers with named constants or enums
Code context:
     80:         affected_agents = parameters.get("affected_agents", [])
     81:
     82:         # Simulate consensus building (would integrate with actual voting system)
>>>  83:         consensus_score = 0.85  # Placeholder
     84:
     85:         return {
     86:             "status": "success",


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (17 total)
File: packages\agents\specialized\governance\king_agent_refactored.py:89:61
Recommendation: Replace magic numbers with named constants or enums
Code context:
     86:             "status": "success",
     87:             "consensus_score": consensus_score,
     88:             "supporting_agents": len(affected_agents) * consensus_score,
>>>  89:             "recommendation": "proceed" if consensus_score > 0.7 else "reconsider",
     90:         }
     91:
     92:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (17 total)
File: packages\agents\specialized\governance\king_agent_refactored.py:121:48
Recommendation: Replace magic numbers with named constants or enums
Code context:
    118:                 "agent_id": req.get("agent_id"),
    119:                 "resource_type": req.get("resource_type"),
    120:                 "allocated_amount": min(req.get("requested_amount", 0), constraints.get("max_per_agent", 100)),
>>> 121:                 "duration": req.get("duration", 60),
    122:             }
    123:             for req in requests
    124:         ]


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\specialized\governance\shield_agent.py:1:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
>>>   1: """Shield Agent - Blue Team & Constitutional Enforcement
      2:
      3: The guardian of AIVillage, responsible for:
      4: - Defending the village from threats


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\specialized\governance\shield_agent.py:1187:35
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1184:             recommendations.append("Limit data sharing permissions")
    1185:
    1186:         if "android_apk" in finding_types:
>>> 1187:             recommendations.append("Install only from trusted sources")
    1188:             recommendations.append("Review app permissions before installing")
    1189:
    1190:         return recommendations


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\specialized\governance\shield_agent.py:1198:35
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1195:
    1196:         if risk_score >= 70:
    1197:             recommendations.append("AVOID: Privacy policy contains concerning practices")
>>> 1198:             recommendations.append("Consider alternative services with better privacy")
    1199:         elif risk_score >= 50:
    1200:             recommendations.append("CAUTION: Review privacy practices carefully")
    1201:             recommendations.append("Limit data sharing to minimum necessary")


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'prompt' methods (7 calls)
File: packages\agents\specialized\governance\shield_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (19 calls)
File: packages\agents\specialized\governance\shield_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'violations' methods (13 calls)
File: packages\agents\specialized\governance\shield_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (15 calls)
File: packages\agents\specialized\governance\shield_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'action' methods (6 calls)
File: packages\agents\specialized\governance\shield_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'time' methods (10 calls)
File: packages\agents\specialized\governance\shield_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'findings' methods (20 calls)
File: packages\agents\specialized\governance\shield_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'f' methods (7 calls)
File: packages\agents\specialized\governance\shield_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'recommendations' methods (28 calls)
File: packages\agents\specialized\governance\shield_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (74 total)
File: packages\agents\specialized\governance\shield_agent.py:27:11
Recommendation: Replace magic numbers with named constants or enums
Code context:
     24: class ThreatLevel(Enum):
     25:     LOW = 1
     26:     MEDIUM = 2
>>>  27:     HIGH = 3
     28:     CRITICAL = 4
     29:
     30:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (74 total)
File: packages\agents\specialized\governance\shield_agent.py:28:15
Recommendation: Replace magic numbers with named constants or enums
Code context:
     25:     LOW = 1
     26:     MEDIUM = 2
     27:     HIGH = 3
>>>  28:     CRITICAL = 4
     29:
     30:
     31: class PolicyViolationType(Enum):


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (74 total)
File: packages\agents\specialized\governance\shield_agent.py:143:32
Recommendation: Replace magic numbers with named constants or enums
Code context:
    140:
    141:         # Mobile optimization settings
    142:         self.max_memory_usage_mb = 100  # <100MB constraint
>>> 143:         self.chunk_size_bytes = 1024 * 1024  # 1MB chunks for streaming
    144:         self.max_file_size_mb = 50  # Don't load files larger than 50MB fully
    145:         self.signature_cache_limit = 10000  # Keep 10k signatures in memory
    146:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (74 total)
File: packages\agents\specialized\governance\shield_agent.py:143:39
Recommendation: Replace magic numbers with named constants or enums
Code context:
    140:
    141:         # Mobile optimization settings
    142:         self.max_memory_usage_mb = 100  # <100MB constraint
>>> 143:         self.chunk_size_bytes = 1024 * 1024  # 1MB chunks for streaming
    144:         self.max_file_size_mb = 50  # Don't load files larger than 50MB fully
    145:         self.signature_cache_limit = 10000  # Keep 10k signatures in memory
    146:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (74 total)
File: packages\agents\specialized\governance\shield_agent.py:144:32
Recommendation: Replace magic numbers with named constants or enums
Code context:
    141:         # Mobile optimization settings
    142:         self.max_memory_usage_mb = 100  # <100MB constraint
    143:         self.chunk_size_bytes = 1024 * 1024  # 1MB chunks for streaming
>>> 144:         self.max_file_size_mb = 50  # Don't load files larger than 50MB fully
    145:         self.signature_cache_limit = 10000  # Keep 10k signatures in memory
    146:
    147:         self.initialized = False


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\specialized\governance\sword_agent.py:380:31
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    377:             recommendations.append("Implement emergency patches for critical systems")
    378:
    379:         recommendations.append("Schedule regular penetration testing")
>>> 380:         recommendations.append("Update security monitoring rules")
    381:
    382:         return recommendations
    383:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\specialized\governance\sword_agent.py:619:20
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    616:                     "web_injection",
    617:                     AttackType.INJECTION,
    618:                     "web_interface",
>>> 619:                     "SELECT * FROM users; DROP TABLE users;--",
    620:                     0.3,
    621:                     VulnerabilityLevel.HIGH,
    622:                 ),


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'prompt' methods (6 calls)
File: packages\agents\specialized\governance\sword_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (11 calls)
File: packages\agents\specialized\governance\sword_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (11 calls)
File: packages\agents\specialized\governance\sword_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'random' methods (17 calls)
File: packages\agents\specialized\governance\sword_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'recommendations' methods (10 calls)
File: packages\agents\specialized\governance\sword_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (41 total)
File: packages\agents\specialized\governance\sword_agent.py:34:11
Recommendation: Replace magic numbers with named constants or enums
Code context:
     31: class VulnerabilityLevel(Enum):
     32:     LOW = 1
     33:     MEDIUM = 2
>>>  34:     HIGH = 3
     35:     CRITICAL = 4
     36:
     37:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (41 total)
File: packages\agents\specialized\governance\sword_agent.py:35:15
Recommendation: Replace magic numbers with named constants or enums
Code context:
     32:     LOW = 1
     33:     MEDIUM = 2
     34:     HIGH = 3
>>>  35:     CRITICAL = 4
     36:
     37:
     38: @dataclass


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (41 total)
File: packages\agents\specialized\governance\sword_agent.py:111:65
Recommendation: Replace magic numbers with named constants or enums
Code context:
    108:         """Get embedding for offensive security text"""
    109:         import hashlib
    110:
>>> 111:         hash_value = int(hashlib.md5(text.encode()).hexdigest(), 16)
    112:         return [(hash_value % 1000) / 1000.0] * 512  # Attack-focused embedding
    113:
    114:     async def rerank(self, query: str, results: list[dict[str, Any]], k: int) -> list[dict[str, Any]]:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (41 total)
File: packages\agents\specialized\governance\sword_agent.py:112:48
Recommendation: Replace magic numbers with named constants or enums
Code context:
    109:         import hashlib
    110:
    111:         hash_value = int(hashlib.md5(text.encode()).hexdigest(), 16)
>>> 112:         return [(hash_value % 1000) / 1000.0] * 512  # Attack-focused embedding
    113:
    114:     async def rerank(self, query: str, results: list[dict[str, Any]], k: int) -> list[dict[str, Any]]:
    115:         """Rerank based on offensive security relevance"""


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (41 total)
File: packages\agents\specialized\governance\sword_agent.py:134:58
Recommendation: Replace magic numbers with named constants or enums
Code context:
    131:             score = 0
    132:             content = str(result.get("content", ""))
    133:             for keyword in attack_keywords:
>>> 134:                 score += content.lower().count(keyword) * 1.5
    135:
    136:             # Boost security research content
    137:             if any(term in content.lower() for term in ["security", "research", "testing"]):


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\specialized\infrastructure\magi_agent.py:269:91
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    266:     async def _generate_code_artifact(self, language: str, component_type: str, spec: dict[str, Any]) -> str:
    267:         """Generate actual code artifact"""
    268:         if language == "python" and component_type == "api":
>>> 269:             return f'''# Generated API Component - {spec.get("description", "API Service")}
    270: from typing import Dict, Any, Optional
    271: from dataclasses import dataclass
    272: import asyncio


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (8 calls)
File: packages\agents\specialized\infrastructure\magi_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'spec' methods (6 calls)
File: packages\agents\specialized\infrastructure\magi_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (16 total)
File: packages\agents\specialized\infrastructure\magi_agent.py:100:36
Recommendation: Replace magic numbers with named constants or enums
Code context:
     97:         # Resource monitoring
     98:         self.compute_usage = {"cpu": 0.0, "gpu": 0.0, "memory": 0.0}
     99:         self.active_experiments = 0
>>> 100:         self.max_concurrent_tasks = 3
    101:
    102:         self.initialized = False
    103:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (16 total)
File: packages\agents\specialized\infrastructure\magi_agent.py:123:65
Recommendation: Replace magic numbers with named constants or enums
Code context:
    120:
    121:     async def get_embedding(self, text: str) -> list[float]:
    122:         """Generate engineering-focused embeddings"""
>>> 123:         hash_value = int(hashlib.md5(text.encode()).hexdigest(), 16)
    124:         # Engineering embeddings are larger and more detailed
    125:         return [(hash_value % 1000) / 1000.0] * 512
    126:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (16 total)
File: packages\agents\specialized\infrastructure\magi_agent.py:125:48
Recommendation: Replace magic numbers with named constants or enums
Code context:
    122:         """Generate engineering-focused embeddings"""
    123:         hash_value = int(hashlib.md5(text.encode()).hexdigest(), 16)
    124:         # Engineering embeddings are larger and more detailed
>>> 125:         return [(hash_value % 1000) / 1000.0] * 512
    126:
    127:     async def rerank(self, query: str, results: list[dict[str, Any]], k: int) -> list[dict[str, Any]]:
    128:         """Rerank based on engineering relevance"""


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (16 total)
File: packages\agents\specialized\infrastructure\magi_agent.py:151:25
Recommendation: Replace magic numbers with named constants or enums
Code context:
    148:
    149:             # Boost technical and implementation-focused content
    150:             if any(term in content.lower() for term in ["implementation", "technical", "development"]):
>>> 151:                 score *= 1.5
    152:
    153:             result["engineering_relevance"] = score
    154:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (16 total)
File: packages\agents\specialized\infrastructure\magi_agent.py:184:68
Recommendation: Replace magic numbers with named constants or enums
Code context:
    181:
    182:         if recipient:
    183:             response = await recipient.generate(f"Magi Agent provides technical solution: {message}")
>>> 184:             return f"Technical implementation delivered: {response[:50]}..."
    185:         return "No recipient for engineering solution"
    186:
    187:     async def activate_latent_space(self, query: str) -> tuple[str, str]:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (9 calls)
File: packages\agents\specialized\infrastructure\navigator_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'time' methods (15 calls)
File: packages\agents\specialized\infrastructure\navigator_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (10 calls)
File: packages\agents\specialized\infrastructure\navigator_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'routing_result' methods (6 calls)
File: packages\agents\specialized\infrastructure\navigator_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (43 total)
File: packages\agents\specialized\infrastructure\navigator_agent.py:119:24
Recommendation: Replace magic numbers with named constants or enums
Code context:
    116:         self.node_count = 0
    117:
    118:         # Configuration
>>> 119:         self.max_hops = 5
    120:         self.discovery_interval = 30  # seconds
    121:         self.route_cache_ttl = 300  # 5 minutes
    122:         self.max_queue_size = 1000


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (43 total)
File: packages\agents\specialized\infrastructure\navigator_agent.py:120:34
Recommendation: Replace magic numbers with named constants or enums
Code context:
    117:
    118:         # Configuration
    119:         self.max_hops = 5
>>> 120:         self.discovery_interval = 30  # seconds
    121:         self.route_cache_ttl = 300  # 5 minutes
    122:         self.max_queue_size = 1000
    123:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (43 total)
File: packages\agents\specialized\infrastructure\navigator_agent.py:121:31
Recommendation: Replace magic numbers with named constants or enums
Code context:
    118:         # Configuration
    119:         self.max_hops = 5
    120:         self.discovery_interval = 30  # seconds
>>> 121:         self.route_cache_ttl = 300  # 5 minutes
    122:         self.max_queue_size = 1000
    123:
    124:         self.initialized = False


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (43 total)
File: packages\agents\specialized\infrastructure\navigator_agent.py:145:65
Recommendation: Replace magic numbers with named constants or enums
Code context:
    142:
    143:     async def get_embedding(self, text: str) -> list[float]:
    144:         """Generate network-focused embeddings"""
>>> 145:         hash_value = int(hashlib.md5(text.encode()).hexdigest(), 16)
    146:         # Network embeddings focus on connectivity patterns
    147:         return [(hash_value % 1000) / 1000.0] * 256
    148:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (43 total)
File: packages\agents\specialized\infrastructure\navigator_agent.py:147:48
Recommendation: Replace magic numbers with named constants or enums
Code context:
    144:         """Generate network-focused embeddings"""
    145:         hash_value = int(hashlib.md5(text.encode()).hexdigest(), 16)
    146:         # Network embeddings focus on connectivity patterns
>>> 147:         return [(hash_value % 1000) / 1000.0] * 256
    148:
    149:     async def rerank(self, query: str, results: list[dict[str, Any]], k: int) -> list[dict[str, Any]]:
    150:         """Rerank based on network relevance"""


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\specialized\infrastructure\sustainer_agent.py:712:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    709:             return 0.7  # Default efficiency score
    710:
    711:     async def _calculate_estimated_savings(self, optimizations: list[str], improvement: float) -> dict[str, float]:
>>> 712:         """Calculate estimated savings from optimizations"""
    713:         base_energy_usage = 100.0  # kWh per day
    714:         base_cost = 50.0  # USD per day
    715:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\specialized\infrastructure\sustainer_agent.py:787:26
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    784:             }
    785:
    786:             system_profile_result = await self.profile_device(current_system)
>>> 787:             logger.info(f"System profile created: {system_profile_result['device_profile'].performance_tier}")
    788:
    789:             # Initialize resource monitoring
    790:             initial_usage = await self._get_current_resource_usage()


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (23 calls)
File: packages\agents\specialized\infrastructure\sustainer_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'current_usage' methods (11 calls)
File: packages\agents\specialized\infrastructure\sustainer_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'time' methods (10 calls)
File: packages\agents\specialized\infrastructure\sustainer_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'device_spec' methods (8 calls)
File: packages\agents\specialized\infrastructure\sustainer_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (12 calls)
File: packages\agents\specialized\infrastructure\sustainer_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'spec' methods (13 calls)
File: packages\agents\specialized\infrastructure\sustainer_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'recommendations' methods (10 calls)
File: packages\agents\specialized\infrastructure\sustainer_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'psutil' methods (6 calls)
File: packages\agents\specialized\infrastructure\sustainer_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'optimizations' methods (6 calls)
File: packages\agents\specialized\infrastructure\sustainer_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (94 total)
File: packages\agents\specialized\infrastructure\sustainer_agent.py:115:42
Recommendation: Replace magic numbers with named constants or enums
Code context:
    112:
    113:         # Thresholds and targets
    114:         self.resource_thresholds = {
>>> 115:             ResourceType.CPU: {"warning": 0.8, "critical": 0.95},
    116:             ResourceType.MEMORY: {"warning": 0.85, "critical": 0.95},
    117:             ResourceType.STORAGE: {"warning": 0.9, "critical": 0.98},
    118:             ResourceType.POWER: {"warning": 0.8, "critical": 0.9},


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (94 total)
File: packages\agents\specialized\infrastructure\sustainer_agent.py:115:59
Recommendation: Replace magic numbers with named constants or enums
Code context:
    112:
    113:         # Thresholds and targets
    114:         self.resource_thresholds = {
>>> 115:             ResourceType.CPU: {"warning": 0.8, "critical": 0.95},
    116:             ResourceType.MEMORY: {"warning": 0.85, "critical": 0.95},
    117:             ResourceType.STORAGE: {"warning": 0.9, "critical": 0.98},
    118:             ResourceType.POWER: {"warning": 0.8, "critical": 0.9},


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (94 total)
File: packages\agents\specialized\infrastructure\sustainer_agent.py:116:45
Recommendation: Replace magic numbers with named constants or enums
Code context:
    113:         # Thresholds and targets
    114:         self.resource_thresholds = {
    115:             ResourceType.CPU: {"warning": 0.8, "critical": 0.95},
>>> 116:             ResourceType.MEMORY: {"warning": 0.85, "critical": 0.95},
    117:             ResourceType.STORAGE: {"warning": 0.9, "critical": 0.98},
    118:             ResourceType.POWER: {"warning": 0.8, "critical": 0.9},
    119:         }


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (94 total)
File: packages\agents\specialized\infrastructure\sustainer_agent.py:116:63
Recommendation: Replace magic numbers with named constants or enums
Code context:
    113:         # Thresholds and targets
    114:         self.resource_thresholds = {
    115:             ResourceType.CPU: {"warning": 0.8, "critical": 0.95},
>>> 116:             ResourceType.MEMORY: {"warning": 0.85, "critical": 0.95},
    117:             ResourceType.STORAGE: {"warning": 0.9, "critical": 0.98},
    118:             ResourceType.POWER: {"warning": 0.8, "critical": 0.9},
    119:         }


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (94 total)
File: packages\agents\specialized\infrastructure\sustainer_agent.py:117:46
Recommendation: Replace magic numbers with named constants or enums
Code context:
    114:         self.resource_thresholds = {
    115:             ResourceType.CPU: {"warning": 0.8, "critical": 0.95},
    116:             ResourceType.MEMORY: {"warning": 0.85, "critical": 0.95},
>>> 117:             ResourceType.STORAGE: {"warning": 0.9, "critical": 0.98},
    118:             ResourceType.POWER: {"warning": 0.8, "critical": 0.9},
    119:         }
    120:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'text' methods (10 calls)
File: packages\agents\specialized\language_education_health\polyglot_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (12 calls)
File: packages\agents\specialized\language_education_health\polyglot_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'time' methods (8 calls)
File: packages\agents\specialized\language_education_health\polyglot_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (9 calls)
File: packages\agents\specialized\language_education_health\polyglot_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (20 total)
File: packages\agents\specialized\language_education_health\polyglot_agent.py:104:35
Recommendation: Replace magic numbers with named constants or enums
Code context:
    101:
    102:         # Performance tracking
    103:         self.translations_completed = 0
>>> 104:         self.languages_supported = 5
    105:         self.average_confidence = 0.0
    106:         self.average_latency_ms = 0.0
    107:         self.cache_hit_rate = 0.0


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (20 total)
File: packages\agents\specialized\language_education_health\polyglot_agent.py:110:33
Recommendation: Replace magic numbers with named constants or enums
Code context:
    107:         self.cache_hit_rate = 0.0
    108:
    109:         # Mobile constraints
>>> 110:         self.max_model_size_mb = 50
    111:         self.max_memory_usage_mb = 200
    112:         self.target_latency_ms = 500
    113:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (20 total)
File: packages\agents\specialized\language_education_health\polyglot_agent.py:111:35
Recommendation: Replace magic numbers with named constants or enums
Code context:
    108:
    109:         # Mobile constraints
    110:         self.max_model_size_mb = 50
>>> 111:         self.max_memory_usage_mb = 200
    112:         self.target_latency_ms = 500
    113:
    114:         # Cultural adaptation rules


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (20 total)
File: packages\agents\specialized\language_education_health\polyglot_agent.py:112:33
Recommendation: Replace magic numbers with named constants or enums
Code context:
    109:         # Mobile constraints
    110:         self.max_model_size_mb = 50
    111:         self.max_memory_usage_mb = 200
>>> 112:         self.target_latency_ms = 500
    113:
    114:         # Cultural adaptation rules
    115:         self.cultural_adaptations = {


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (20 total)
File: packages\agents\specialized\language_education_health\polyglot_agent.py:151:65
Recommendation: Replace magic numbers with named constants or enums
Code context:
    148:
    149:     async def get_embedding(self, text: str) -> list[float]:
    150:         """Generate multilingual-aware embeddings"""
>>> 151:         hash_value = int(hashlib.md5(text.encode()).hexdigest(), 16)
    152:         # Multilingual embeddings capture cross-language semantic similarity
    153:         return [(hash_value % 1000) / 1000.0] * 384
    154:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\specialized\language_education_health\tutor_agent.py:176:19
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    173:         prompt_lower = prompt.lower()
    174:
    175:         if "learn" in prompt_lower or "teach" in prompt_lower:
>>> 176:             return "I create personalized learning experiences adapted to your level, style, and goals."
    177:         if "assess" in prompt_lower or "test" in prompt_lower:
    178:             return "I evaluate your knowledge and skills with adaptive assessments and provide detailed feedback."
    179:         if "progress" in prompt_lower or "track" in prompt_lower:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\specialized\language_education_health\tutor_agent.py:277:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    274:         return space_type, latent_repr
    275:
    276:     async def create_learner_profile(self, learner_data: dict[str, Any]) -> dict[str, Any]:
>>> 277:         """Create a personalized learner profile - MVP function"""
    278:         learner_id = learner_data.get("learner_id", f"learner_{int(time.time())}")
    279:
    280:         # Create comprehensive learner profile


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\specialized\language_education_health\tutor_agent.py:322:22
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    319:             "signature": f"tutor_profile_{learner_id}",
    320:         }
    321:
>>> 322:         logger.info(f"Learner profile created: {learner_id} - {profile.learning_level.value} level")
    323:
    324:         return {
    325:             "status": "success",


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\specialized\language_education_health\tutor_agent.py:357:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    354:         return learning_path[:5]  # Limit to 5 initial items
    355:
    356:     async def _create_basic_content(self, topic: str, level: LearningLevel) -> str | None:
>>> 357:         """Create basic content for common topics"""
    358:         content_id = f"content_{topic}_{level.value}_{int(time.time())}"
    359:
    360:         content_templates = {


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\specialized\language_education_health\tutor_agent.py:652:36
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    649:             "digital_literacy": {
    650:                 "beginner": [
    651:                     {
>>> 652:                         "question": "What is the safest way to create a password?",
    653:                         "type": "multiple_choice",
    654:                         "options": [
    655:                             "Use personal information",


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\specialized\language_education_health\tutor_agent.py:657:28
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    654:                         "options": [
    655:                             "Use personal information",
    656:                             "Mix letters, numbers, and symbols",
>>> 657:                             "Use the same password everywhere",
    658:                             "Write it down publicly",
    659:                         ],
    660:                         "correct_answer": 1,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\specialized\language_education_health\tutor_agent.py:743:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    740:         }
    741:
    742:     def _calculate_mastery_level(self, performance_score: float) -> float:
>>> 743:         """Calculate mastery level from performance score"""
    744:         # Convert percentage score to mastery level (0.0 - 1.0)
    745:         mastery = performance_score / 100.0
    746:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agents\specialized\language_education_health\tutor_agent.py:876:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    873:                 "lessons_delivered": self.lessons_delivered,
    874:                 "assessments_completed": self.assessments_completed,
    875:                 "average_mastery_score": self.average_mastery_score,
>>> 876:                 "content_pieces_created": len(self.learning_content),
    877:             }
    878:
    879:             logger.info(f"Tutor Agent final report: {final_report}")


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'learner_data' methods (10 calls)
File: packages\agents\specialized\language_education_health\tutor_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'time' methods (18 calls)
File: packages\agents\specialized\language_education_health\tutor_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (8 calls)
File: packages\agents\specialized\language_education_health\tutor_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (9 calls)
File: packages\agents\specialized\language_education_health\tutor_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'feedback' methods (10 calls)
File: packages\agents\specialized\language_education_health\tutor_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (44 total)
File: packages\agents\specialized\language_education_health\tutor_agent.py:165:39
Recommendation: Replace magic numbers with named constants or enums
Code context:
    162:         ]
    163:
    164:         # Mobile optimization settings
>>> 165:         self.mobile_content_limit_kb = 500  # 500KB max per content piece
    166:         self.offline_mode_enabled = True
    167:         self.adaptive_bandwidth = True
    168:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (44 total)
File: packages\agents\specialized\language_education_health\tutor_agent.py:190:65
Recommendation: Replace magic numbers with named constants or enums
Code context:
    187:
    188:     async def get_embedding(self, text: str) -> list[float]:
    189:         """Generate education-focused embeddings"""
>>> 190:         hash_value = int(hashlib.md5(text.encode()).hexdigest(), 16)
    191:         # Education embeddings focus on learning patterns and content relationships
    192:         return [(hash_value % 1000) / 1000.0] * 512
    193:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (44 total)
File: packages\agents\specialized\language_education_health\tutor_agent.py:192:48
Recommendation: Replace magic numbers with named constants or enums
Code context:
    189:         """Generate education-focused embeddings"""
    190:         hash_value = int(hashlib.md5(text.encode()).hexdigest(), 16)
    191:         # Education embeddings focus on learning patterns and content relationships
>>> 192:         return [(hash_value % 1000) / 1000.0] * 512
    193:
    194:     async def rerank(self, query: str, results: list[dict[str, Any]], k: int) -> list[dict[str, Any]]:
    195:         """Rerank based on educational relevance"""


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (44 total)
File: packages\agents\specialized\language_education_health\tutor_agent.py:216:58
Recommendation: Replace magic numbers with named constants or enums
Code context:
    213:             content = str(result.get("content", ""))
    214:
    215:             for keyword in education_keywords:
>>> 216:                 score += content.lower().count(keyword) * 1.5
    217:
    218:             # Boost educational and instructional content
    219:             if any(term in content.lower() for term in ["educational", "instructional", "pedagogical"]):


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (44 total)
File: packages\agents\specialized\language_education_health\tutor_agent.py:220:25
Recommendation: Replace magic numbers with named constants or enums
Code context:
    217:
    218:             # Boost educational and instructional content
    219:             if any(term in content.lower() for term in ["educational", "instructional", "pedagogical"]):
>>> 220:                 score *= 1.4
    221:
    222:             result["education_relevance"] = score
    223:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\core\phase_controller.py:66:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     63:
     64:     @abstractmethod
     65:     async def run(self, model: nn.Module) -> PhaseResult:
>>>  66:         """
     67:         Execute the phase processing.
     68:
     69:         Args:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\core\phase_controller.py:106:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    103:     def create_success_result(
    104:         self, model: nn.Module, metrics: dict[str, Any], artifacts: dict[str, Any] | None = None, duration: float = 0.0
    105:     ) -> PhaseResult:
>>> 106:         """Create a successful phase result."""
    107:         return PhaseResult(
    108:             success=True,
    109:             model=model,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\core\phase_controller.py:118:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    115:         )
    116:
    117:     def create_failure_result(self, model: nn.Module, error: str, duration: float = 0.0) -> PhaseResult:
>>> 118:         """Create a failed phase result."""
    119:         return PhaseResult(
    120:             success=False,
    121:             model=model,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\core\phase_controller.py:131:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    128:
    129:
    130: class ModelPassingValidator:
>>> 131:     """
    132:     Validates model compatibility between phases.
    133:
    134:     Ensures that models can be safely passed from one phase to another


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\core\phase_controller.py:202:26
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    199:         """Validate EvoMerge -> Quiet-STaR transition."""
    200:         # EvoMerge output should be a merged model ready for reasoning enhancement
    201:         if not hasattr(model, "config"):
>>> 202:             return False, "Model missing config attribute from EvoMerge"
    203:         return ModelPassingValidator._default_validation(model)
    204:
    205:     @staticmethod


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\core\phase_controller.py:252:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    249:     async def run_phase_sequence(
    250:         self, phases: list[tuple[str, PhaseController]], initial_model: nn.Module
    251:     ) -> list[PhaseResult]:
>>> 252:         """
    253:         Run a sequence of phases with model passing validation.
    254:
    255:         Args:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'ModelPassingValidator' methods (7 calls)
File: packages\agent_forge\core\phase_controller.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\core\unified_pipeline.py:134:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    131:     fog_scheduling: str = "round_robin"
    132:
    133:     def __post_init__(self):
>>> 134:         """Create necessary directories."""
    135:         self.output_dir.mkdir(parents=True, exist_ok=True)
    136:         self.checkpoint_dir.mkdir(parents=True, exist_ok=True)
    137:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\core\unified_pipeline.py:270:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    267:         return phases
    268:
    269:     async def run_pipeline(self, resume_from: str | None = None) -> PhaseResult:
>>> 270:         """
    271:         Run the complete Agent Forge pipeline using phase orchestrator.
    272:
    273:         Args:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\core\unified_pipeline.py:383:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    380:             )
    381:
    382:     def _create_initial_model(self) -> nn.Module:
>>> 383:         """Create initial model for pipeline start."""
    384:         # For now, create a simple dummy model
    385:         # In production, this would load/merge the base models
    386:         self.logger.info("Creating initial model for pipeline")


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\core\unified_pipeline.py:405:25
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    402:             },
    403:         )()
    404:
>>> 405:         self.logger.info("Initial model created")
    406:         return model
    407:
    408:     def _get_phases_from_resume_point(self, resume_from: str) -> list[tuple[str, PhaseController]]:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\core\unified_pipeline.py:409:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    406:         return model
    407:
    408:     def _get_phases_from_resume_point(self, resume_from: str) -> list[tuple[str, PhaseController]]:
>>> 409:         """Get phases to run starting from resume point."""
    410:         phase_names = [name for name, _ in self.phases]
    411:
    412:         if resume_from not in phase_names:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\core\unified_pipeline.py:413:61
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    410:         phase_names = [name for name, _ in self.phases]
    411:
    412:         if resume_from not in phase_names:
>>> 413:             self.logger.warning(f"Resume point '{resume_from}' not found, starting from beginning")
    414:             return self.phases
    415:
    416:         # Find index and return phases from that point onward


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\core\unified_pipeline.py:438:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    435:         self.logger.info(f"Saved checkpoint: {checkpoint_path}")
    436:
    437:     def _load_checkpoint(self, phase_name: str) -> nn.Module:
>>> 438:         """Load checkpoint from a phase."""
    439:         checkpoint_path = self.config.checkpoint_dir / f"{phase_name}_checkpoint.pt"
    440:         checkpoint = torch.load(checkpoint_path)
    441:         # Model reconstruction would happen here


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\core\unified_pipeline.py:442:27
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    439:         checkpoint_path = self.config.checkpoint_dir / f"{phase_name}_checkpoint.pt"
    440:         checkpoint = torch.load(checkpoint_path)
    441:         # Model reconstruction would happen here
>>> 442:         self.logger.info(f"Loaded checkpoint from: {checkpoint_path}")
    443:         return checkpoint["model"]
    444:
    445:     def _get_phase_index(self, phase_name: str) -> int:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\core\unified_pipeline.py:451:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    448:         return phases.index(phase_name)
    449:
    450:     def _aggregate_metrics(self) -> dict[str, Any]:
>>> 451:         """Aggregate metrics from all phases."""
    452:         metrics = {}
    453:         for result in self.phase_results:
    454:             metrics[result.phase_name] = result.metrics


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\core\unified_pipeline.py:491:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    488:
    489: # CLI integration
    490: def create_pipeline(config_path: str | None = None, **kwargs) -> UnifiedPipeline:
>>> 491:     """
    492:     Create a unified pipeline instance.
    493:
    494:     Args:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (8 calls)
File: packages\agent_forge\core\unified_pipeline.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'phases' methods (8 calls)
File: packages\agent_forge\core\unified_pipeline.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

SEQUENTIAL_COUPLING: Sequential coupling detected: Function '__post_init__' is part of a sequence-dependent API
File: packages\agent_forge\core\unified_pipeline.py:133:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    130:     fog_nodes: list[str] = field(default_factory=list)
    131:     fog_scheduling: str = "round_robin"
    132:
>>> 133:     def __post_init__(self):
    134:         """Create necessary directories."""
    135:         self.output_dir.mkdir(parents=True, exist_ok=True)
    136:         self.checkpoint_dir.mkdir(parents=True, exist_ok=True)


SEQUENTIAL_COUPLING: Sequential coupling detected: Function '__init__' is part of a sequence-dependent API
File: packages\agent_forge\core\unified_pipeline.py:145:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    142:     Manages all phases and ensures smooth model passing between stages.
    143:     """
    144:
>>> 145:     def __init__(self, config: UnifiedConfig):
    146:         self.config = config
    147:         self.logger = logging.getLogger(__name__)
    148:         self.orchestrator = PhaseOrchestrator()


SEQUENTIAL_COUPLING: Sequential coupling detected: Function '_initialize_phases' is part of a sequence-dependent API
File: packages\agent_forge\core\unified_pipeline.py:155:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    152:         # Initialize phase controllers from consolidated modules
    153:         self.phases = self._initialize_phases()
    154:
>>> 155:     def _initialize_phases(self):
    156:         """Initialize all phase controllers and return enabled phases."""
    157:         phases = []
    158:


SEQUENTIAL_COUPLING: Sequential coupling detected: Function '_create_initial_model' is part of a sequence-dependent API
File: packages\agent_forge\core\unified_pipeline.py:382:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    379:                 duration_seconds=duration,
    380:             )
    381:
>>> 382:     def _create_initial_model(self) -> nn.Module:
    383:         """Create initial model for pipeline start."""
    384:         # For now, create a simple dummy model
    385:         # In production, this would load/merge the base models


SEQUENTIAL_COUPLING: Sequential coupling detected: Function '_init_wandb' is part of a sequence-dependent API
File: packages\agent_forge\core\unified_pipeline.py:474:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    471:
    472:         self.logger.info(f"Pipeline report saved to: {report_path}")
    473:
>>> 474:     def _init_wandb(self):
    475:         """Initialize Weights & Biases tracking."""
    476:         try:
    477:             import wandb


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (40 total)
File: packages\agent_forge\core\unified_pipeline.py:57:32
Recommendation: Replace magic numbers with named constants or enums
Code context:
     54:     enable_final_compression: bool = True
     55:
     56:     # EvoMerge configuration
>>>  57:     evomerge_generations: int = 50
     58:     evomerge_population_size: int = 8
     59:     evomerge_techniques: list[str] = field(
     60:         default_factory=lambda: ["linear", "slerp", "ties", "dare", "frankenmerge", "dfs"]


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (40 total)
File: packages\agent_forge\core\unified_pipeline.py:58:36
Recommendation: Replace magic numbers with named constants or enums
Code context:
     55:
     56:     # EvoMerge configuration
     57:     evomerge_generations: int = 50
>>>  58:     evomerge_population_size: int = 8
     59:     evomerge_techniques: list[str] = field(
     60:         default_factory=lambda: ["linear", "slerp", "ties", "dare", "frankenmerge", "dfs"]
     61:     )


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (40 total)
File: packages\agent_forge\core\unified_pipeline.py:64:36
Recommendation: Replace magic numbers with named constants or enums
Code context:
     61:     )
     62:
     63:     # Quiet-STaR configuration
>>>  64:     quietstar_thought_length: int = 32
     65:     quietstar_num_thoughts: int = 4
     66:     quietstar_training_steps: int = 1000
     67:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (40 total)
File: packages\agent_forge\core\unified_pipeline.py:65:34
Recommendation: Replace magic numbers with named constants or enums
Code context:
     62:
     63:     # Quiet-STaR configuration
     64:     quietstar_thought_length: int = 32
>>>  65:     quietstar_num_thoughts: int = 4
     66:     quietstar_training_steps: int = 1000
     67:
     68:     # Initial BitNet compression


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (40 total)
File: packages\agent_forge\core\unified_pipeline.py:69:25
Recommendation: Replace magic numbers with named constants or enums
Code context:
     66:     quietstar_training_steps: int = 1000
     67:
     68:     # Initial BitNet compression
>>>  69:     bitnet_bits: float = 1.58
     70:     bitnet_group_size: int = 128
     71:
     72:     # Forge training configuration


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\evaluation\evaluator.py:194:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    191:
    192:     # Private helper methods
    193:     def _load_model(self, model_path: Union[str, Path]) -> torch.nn.Module:
>>> 194:         """Load a model from checkpoint."""
    195:         model_path = Path(model_path)
    196:         if model_path.is_dir():
    197:             # Load from directory (HuggingFace format)


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (18 calls)
File: packages\agent_forge\evaluation\evaluator.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (37 total)
File: packages\agent_forge\evaluation\evaluator.py:106:75
Recommendation: Replace magic numbers with named constants or enums
Code context:
    103:             metrics.task_completion,
    104:         ]
    105:         valid_scores = [s for s in scores if s > 0]
>>> 106:         metrics.overall_score = np.mean(valid_scores) if valid_scores else 0.5
    107:
    108:         return {
    109:             "overall_score": metrics.overall_score,


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (37 total)
File: packages\agent_forge\evaluation\evaluator.py:137:37
Recommendation: Replace magic numbers with named constants or enums
Code context:
    134:             Dictionary with thought quality metrics
    135:         """
    136:         if not eval_data:
>>> 137:             return {"quality_score": 0.5, "coherence": 0.5, "relevance": 0.5}
    138:
    139:         quality_scores = []
    140:         coherence_scores = []


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (37 total)
File: packages\agent_forge\evaluation\evaluator.py:137:55
Recommendation: Replace magic numbers with named constants or enums
Code context:
    134:             Dictionary with thought quality metrics
    135:         """
    136:         if not eval_data:
>>> 137:             return {"quality_score": 0.5, "coherence": 0.5, "relevance": 0.5}
    138:
    139:         quality_scores = []
    140:         coherence_scores = []


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (37 total)
File: packages\agent_forge\evaluation\evaluator.py:137:73
Recommendation: Replace magic numbers with named constants or enums
Code context:
    134:             Dictionary with thought quality metrics
    135:         """
    136:         if not eval_data:
>>> 137:             return {"quality_score": 0.5, "coherence": 0.5, "relevance": 0.5}
    138:
    139:         quality_scores = []
    140:         coherence_scores = []


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (37 total)
File: packages\agent_forge\evaluation\evaluator.py:158:76
Recommendation: Replace magic numbers with named constants or enums
Code context:
    155:                 relevance_scores.append(relevance)
    156:
    157:         return {
>>> 158:             "quality_score": np.mean(quality_scores) if quality_scores else 0.5,
    159:             "coherence": np.mean(coherence_scores) if coherence_scores else 0.5,
    160:             "relevance": np.mean(relevance_scores) if relevance_scores else 0.5,
    161:         }


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\experiments\demo_evomerge_50gen.py:215:22
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    212:
    213:         population.append(candidate)
    214:         technique_desc = f"{recipe['primary']}->{recipe['secondary']}->{recipe['final']}"
>>> 215:         logger.info(f"   [OK] Created candidate {i+1}/8 ({technique_desc}): fitness={candidate.aggregated_fitness:.4f}")
    216:
    217:     # Quick benchmark - sort initial population by fitness
    218:     population.sort(key=lambda x: x.aggregated_fitness, reverse=True)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\experiments\demo_evomerge_50gen.py:386:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    383:     logger.info("[ALGORITHM] Correct Breeding Algorithm Used:")
    384:     logger.info("   [DNA] Generation 0: 3 core models → 2^3 = 8 combinations")
    385:     logger.info("   [CYCLE] Each Generation: Top 2 → 6 children, Bottom 6 → 2 children")
>>> 386:     logger.info("   [CLEANUP] Rolling cleanup: Delete generation n-2 when creating n+1")
    387:     logger.info("   [RATIO] 6:2 winner-to-loser breeding ratio maintained")
    388:
    389:     # Save results


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\experiments\demo_evomerge_50gen.py:411:30
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    408:             "losers_per_generation": 6,
    409:             "winner_mutation_range": "±0.05",
    410:             "loser_merge_noise": "±0.03",
>>> 411:             "cleanup_policy": "delete_generation_n_minus_2",
    412:         },
    413:         "merge_techniques_used": ["linear", "slerp", "ties", "dare", "frankenmerge", "dfs"],
    414:         "evolution_stats": {


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (42 calls)
File: packages\agent_forge\experiments\demo_evomerge_50gen.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'merge_ops' methods (7 calls)
File: packages\agent_forge\experiments\demo_evomerge_50gen.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (65 total)
File: packages\agent_forge\experiments\demo_evomerge_50gen.py:40:41
Recommendation: Replace magic numbers with named constants or enums
Code context:
     37:         self.name = name
     38:         self.config = {"model_type": "mock", "name": name}
     39:         self.fitness_scores = fitness_scores or {}
>>>  40:         self.parameters = random.randint(15000000, 17000000)  # ~16M parameters like HRRM
     41:
     42:     def save_pretrained(self, path):
     43:         """Mock save function."""


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (65 total)
File: packages\agent_forge\experiments\demo_evomerge_50gen.py:40:51
Recommendation: Replace magic numbers with named constants or enums
Code context:
     37:         self.name = name
     38:         self.config = {"model_type": "mock", "name": name}
     39:         self.fitness_scores = fitness_scores or {}
>>>  40:         self.parameters = random.randint(15000000, 17000000)  # ~16M parameters like HRRM
     41:
     42:     def save_pretrained(self, path):
     43:         """Mock save function."""


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (65 total)
File: packages\agent_forge\experiments\demo_evomerge_50gen.py:61:27
Recommendation: Replace magic numbers with named constants or enums
Code context:
     58:         scores = {}
     59:
     60:         # Simulate realistic performance scores with some randomness
>>>  61:         base_performance = 0.6 + random.random() * 0.3  # 0.6 to 0.9
     62:
     63:         for domain in self.domains:
     64:             # Add domain-specific variation


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (65 total)
File: packages\agent_forge\experiments\demo_evomerge_50gen.py:61:51
Recommendation: Replace magic numbers with named constants or enums
Code context:
     58:         scores = {}
     59:
     60:         # Simulate realistic performance scores with some randomness
>>>  61:         base_performance = 0.6 + random.random() * 0.3  # 0.6 to 0.9
     62:
     63:         for domain in self.domains:
     64:             # Add domain-specific variation


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (65 total)
File: packages\agent_forge\experiments\demo_evomerge_50gen.py:65:45
Recommendation: Replace magic numbers with named constants or enums
Code context:
     62:
     63:         for domain in self.domains:
     64:             # Add domain-specific variation
>>>  65:             domain_modifier = random.uniform(0.85, 1.15)
     66:             score = min(0.95, max(0.3, base_performance * domain_modifier))
     67:             scores[domain] = score
     68:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (20 calls)
File: packages\agent_forge\experiments\download_benchmarks.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\experiments\export_hrrm_hf.py:115:38
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    112:
    113: ## Model Details
    114:
>>> 115: - **Model Type**: {model_type.title()}
    116: - **Parameters**: ~16.6M
    117: - **Architecture**: Hierarchical Recurrent Memory with two-timescale dynamics
    118: - **Training**: Synthetic data with deep supervision


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\experiments\export_hrrm_hf.py:125:56
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    122: ```python
    123: from transformers import AutoModel, AutoConfig
    124:
>>> 125: config = AutoConfig.from_pretrained("./hrrm-{model_type}")
    126: model = AutoModel.from_pretrained("./hrrm-{model_type}")
    127:
    128: # Generate with the model


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\experiments\export_hrrm_hf.py:137:1
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    134:
    135: {"- **Control Token Detection**: Planning DSL with control tokens" if model_type == "planner" else ""}
    136: {"- **Quiet-STaR Reasoning**: Internal thought processes with self-consistency" if model_type == "reasoner" else ""}
>>> 137: {"- **Titans Neural Memory**: Surprise-based memory updates with temporal dynamics" if model_type == "memory" else ""}
    138: - **Hierarchical Dynamics**: H-slow/T-fast two-timescale processing
    139: - **Deep Supervision**: Loss computed at each H-cycle for stable training
    140:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\experiments\export_hrrm_hf.py:163:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    160:
    161:
    162: def create_tokenizer(output_dir):
>>> 163:     """Create a simple tokenizer for HRRM models."""
    164:     logger.info("Creating HRRM tokenizer...")
    165:
    166:     # Create a simple BPE tokenizer config


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\experiments\export_hrrm_hf.py:214:18
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    211:     with open(tokenizer_dir / "vocab.json", "w") as f:
    212:         json.dump(vocab, f, indent=2)
    213:
>>> 214:     logger.info(f"✅ Tokenizer created at {tokenizer_dir}")
    215:     return tokenizer_dir
    216:
    217:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\experiments\export_hrrm_hf.py:240:23
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    237:         tokenizer_path = create_tokenizer(output_dir)
    238:         models_exported.append(tokenizer_path)
    239:     except Exception as e:
>>> 240:         logger.error(f"❌ Failed to create tokenizer: {e}")
    241:
    242:     # Generate export summary
    243:     logger.info("=" * 60)


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'json' methods (6 calls)
File: packages\agent_forge\experiments\export_hrrm_hf.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (25 calls)
File: packages\agent_forge\experiments\export_hrrm_hf.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\experiments\run_evomerge_50gen.py:15:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     12:
     13: # Issue deprecation warning
     14: warnings.warn(
>>>  15:     "This script has moved to packages/agent_forge/experiments/run_evomerge_50gen.py. "
     16:     "Please update your scripts to use the new location. "
     17:     "This compatibility wrapper will be removed on September 20, 2025.",
     18:     DeprecationWarning,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\integration\federated_training.py:312:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    309:         return assignments
    310:
    311:     def _create_participant_task_config(self, participant: dict, assigned_phases: list[str]) -> dict[str, Any]:
>>> 312:         """Create training configuration for a specific participant."""
    313:         # Create a subset of the base config for assigned phases
    314:         config_dict = self.base_config.__dict__.copy()
    315:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\integration\federated_training.py:390:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    387:         self.logger.info(f"Sent fog task to {participant['node_id']}")
    388:
    389:     async def collect_results(self, task_assignments: dict[str, Any], timeout: int = 3600) -> dict[str, Any]:
>>> 390:         """Collect training results from all participants."""
    391:         results = {}
    392:         start_time = time.time()
    393:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\integration\federated_training.py:412:43
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    409:                             "result": result,
    410:                             "completion_time": time.time(),
    411:                         }
>>> 412:                         self.logger.info(f"Collected result from {participant_id}")
    413:
    414:                 except Exception as e:
    415:                     self.logger.warning(f"Failed to collect result from {participant_id}: {e}")


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\integration\federated_training.py:415:42
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    412:                         self.logger.info(f"Collected result from {participant_id}")
    413:
    414:                 except Exception as e:
>>> 415:                     self.logger.warning(f"Failed to collect result from {participant_id}: {e}")
    416:
    417:             # Brief pause before checking again
    418:             await asyncio.sleep(5)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\integration\federated_training.py:433:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    430:         return results
    431:
    432:     async def _collect_p2p_result(self, participant: dict) -> dict | None:
>>> 433:         """Collect training result from P2P peer."""
    434:         if not self.transport_manager:
    435:             return None
    436:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\integration\federated_training.py:449:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    446:         return response.get("result") if response else None
    447:
    448:     async def _collect_fog_result(self, participant: dict) -> dict | None:
>>> 449:         """Collect training result from fog compute node."""
    450:         if not self.fog_coordinator:
    451:             return None
    452:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\integration\federated_training.py:458:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    455:         return result
    456:
    457:     async def aggregate_results(self, results: dict[str, Any]) -> PhaseResult:
>>> 458:         """Aggregate training results from all participants."""
    459:         self.logger.info("Starting model aggregation...")
    460:
    461:         # Extract phase results by phase type


HARDCODED_PATH: Hardcoded path or URL detected
File: packages\agent_forge\integration\federated_training.py:639:64
Recommendation: Use configuration files, environment variables, or path utilities
Code context:
    636:
    637:         try:
    638:             # Initialize fog burst adapter for HRRM operations
>>> 639:             fog_burst_adapter = FogBurstAdapter(fog_gateway_url="http://localhost:8080")  # Default fog gateway
    640:
    641:             self.logger.info(f"HRRM fog burst adapter initialized with preset: {self.fed_config.hrrm_preset}")
    642:             return fog_burst_adapter


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\integration\federated_training.py:856:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    853: async def create_federated_pipeline(
    854:     base_config: UnifiedConfig, federated_config: FederatedTrainingConfig | None = None
    855: ) -> FederatedAgentForge:
>>> 856:     """
    857:     Create a federated Agent Forge pipeline.
    858:
    859:     Args:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\integration\federated_training.py:877:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    874: async def run_federated_agent_forge(
    875:     config_path: str | None = None, federated_config_path: str | None = None, **kwargs
    876: ) -> list[PhaseResult]:
>>> 877:     """
    878:     Run federated Agent Forge training from configuration files.
    879:
    880:     Args:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (17 calls)
File: packages\agent_forge\integration\federated_training.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'participant' methods (6 calls)
File: packages\agent_forge\integration\federated_training.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'time' methods (7 calls)
File: packages\agent_forge\integration\federated_training.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'phases' methods (7 calls)
File: packages\agent_forge\integration\federated_training.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (24 total)
File: packages\agent_forge\integration\federated_training.py:62:34
Recommendation: Replace magic numbers with named constants or enums
Code context:
     59:
     60:     # P2P Federation settings
     61:     enable_p2p_federation: bool = True
>>>  62:     peer_discovery_timeout: int = 30
     63:     max_peers: int = 10
     64:     communication_protocol: str = "bitchat"  # "bitchat" or "betanet"
     65:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (24 total)
File: packages\agent_forge\integration\federated_training.py:75:28
Recommendation: Replace magic numbers with named constants or enums
Code context:
     72:     # Federated learning parameters
     73:     federated_rounds: int = 10
     74:     min_participants: int = 2
>>>  75:     max_participants: int = 50
     76:     participation_threshold: float = 0.6  # Minimum participation rate
     77:
     78:     # Model aggregation settings


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (24 total)
File: packages\agent_forge\integration\federated_training.py:76:37
Recommendation: Replace magic numbers with named constants or enums
Code context:
     73:     federated_rounds: int = 10
     74:     min_participants: int = 2
     75:     max_participants: int = 50
>>>  76:     participation_threshold: float = 0.6  # Minimum participation rate
     77:
     78:     # Model aggregation settings
     79:     aggregation_method: str = "fedavg"  # "fedavg", "fedprox", "scaffold"


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (24 total)
File: packages\agent_forge\integration\federated_training.py:96:31
Recommendation: Replace magic numbers with named constants or enums
Code context:
     93:
     94:     # Checkpoint and recovery
     95:     enable_checkpointing: bool = True
>>>  96:     checkpoint_interval: int = 5  # rounds
     97:     fault_tolerance: bool = True
     98:     max_failures: int = 3
     99:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (24 total)
File: packages\agent_forge\integration\federated_training.py:98:24
Recommendation: Replace magic numbers with named constants or enums
Code context:
     95:     enable_checkpointing: bool = True
     96:     checkpoint_interval: int = 5  # rounds
     97:     fault_tolerance: bool = True
>>>  98:     max_failures: int = 3
     99:
    100:     # HRRM Integration
    101:     hrrm_preset: str = "distributed_inference"  # "local_only", "fog_hybrid", "distributed_inference", "full_sharding"


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\integration\fog_burst.py:348:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    345:
    346:
    347: class FogBurstOrchestrator:
>>> 348:     """
    349:     Orchestrates distributed Agent Forge execution across fog nodes
    350:
    351:     Manages phase distribution, node selection, artifact collection,


HARDCODED_PATH: Hardcoded path or URL detected
File: packages\agent_forge\integration\fog_burst.py:357:31
Recommendation: Use configuration files, environment variables, or path utilities
Code context:
    354:
    355:     def __init__(
    356:         self,
>>> 357:         fog_gateway_url: str = "http://localhost:8080",
    358:         default_strategy: FogBurstStrategy = FogBurstStrategy.FOG_PREFERRED,
    359:         parity_tolerance: float = 1e-4,
    360:     ):


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\integration\fog_burst.py:618:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    615:         return True
    616:
    617:     def _estimate_speedup(self, phase_name: str, node_caps: FogNodeCapabilities) -> float:
>>> 618:         """Estimate speedup from using fog node vs local execution"""
    619:
    620:         base_speedup = 1.0
    621:


HARDCODED_PATH: Hardcoded path or URL detected
File: packages\agent_forge\integration\fog_burst.py:819:27
Recommendation: Use configuration files, environment variables, or path utilities
Code context:
    816:
    817: # Convenience functions for integration
    818: async def create_fog_burst_orchestrator(
>>> 819:     fog_gateway_url: str = "http://localhost:8080",
    820:     strategy: FogBurstStrategy = FogBurstStrategy.FOG_PREFERRED,
    821:     parity_tolerance: float = 1e-4,
    822: ) -> FogBurstOrchestrator:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\integration\fog_burst.py:823:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    820:     strategy: FogBurstStrategy = FogBurstStrategy.FOG_PREFERRED,
    821:     parity_tolerance: float = 1e-4,
    822: ) -> FogBurstOrchestrator:
>>> 823:     """Create and initialize fog burst orchestrator"""
    824:
    825:     orchestrator = FogBurstOrchestrator(fog_gateway_url, strategy, parity_tolerance)
    826:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\integration\fog_burst.py:841:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    838:     "FogNodeCapabilities",
    839:     "FogBurstTask",
    840:     "ParityValidator",
>>> 841:     "create_fog_burst_orchestrator",
    842: ]


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (17 calls)
File: packages\agent_forge\integration\fog_burst.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'fog_result' methods (11 calls)
File: packages\agent_forge\integration\fog_burst.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (18 calls)
File: packages\agent_forge\integration\fog_burst.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'asyncio' methods (7 calls)
File: packages\agent_forge\integration\fog_burst.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'node_data' methods (13 calls)
File: packages\agent_forge\integration\fog_burst.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (32 total)
File: packages\agent_forge\integration\fog_burst.py:127:42
Recommendation: Replace magic numbers with named constants or enums
Code context:
    124:     local execution while allowing for acceptable numerical differences.
    125:     """
    126:
>>> 127:     def __init__(self, tolerance: float = 1e-4):
    128:         self.tolerance = tolerance
    129:         self.validation_history: list[dict[str, Any]] = []
    130:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (32 total)
File: packages\agent_forge\integration\fog_burst.py:337:40
Recommendation: Replace magic numbers with named constants or enums
Code context:
    334:
    335:         max_diff = validation["max_difference"]
    336:
>>> 337:         if max_diff <= self.tolerance * 0.1:
    338:             return "EXCELLENT"
    339:         elif max_diff <= self.tolerance * 0.5:
    340:             return "GOOD"


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (32 total)
File: packages\agent_forge\integration\fog_burst.py:339:42
Recommendation: Replace magic numbers with named constants or enums
Code context:
    336:
    337:         if max_diff <= self.tolerance * 0.1:
    338:             return "EXCELLENT"
>>> 339:         elif max_diff <= self.tolerance * 0.5:
    340:             return "GOOD"
    341:         elif max_diff <= self.tolerance:
    342:             return "ACCEPTABLE"


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (32 total)
File: packages\agent_forge\integration\fog_burst.py:359:34
Recommendation: Replace magic numbers with named constants or enums
Code context:
    356:         self,
    357:         fog_gateway_url: str = "http://localhost:8080",
    358:         default_strategy: FogBurstStrategy = FogBurstStrategy.FOG_PREFERRED,
>>> 359:         parity_tolerance: float = 1e-4,
    360:     ):
    361:         self.fog_gateway_url = fog_gateway_url.rstrip("/")
    362:         self.default_strategy = default_strategy


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (32 total)
File: packages\agent_forge\integration\fog_burst.py:372:28
Recommendation: Replace magic numbers with named constants or enums
Code context:
    369:         self.parity_validator = ParityValidator(parity_tolerance)
    370:
    371:         # Performance tracking
>>> 372:         self.success_rate = 0.95
    373:         self.avg_speedup = 1.0
    374:         self.cost_efficiency = 1.0
    375:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\integration\__init__.py:29:59
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     26:
     27: if FEDERATED_AVAILABLE:
     28:     __all__.extend(
>>>  29:         ["FederatedTrainingConfig", "FederatedAgentForge", "create_federated_pipeline", "run_federated_agent_forge"]
     30:     )
     31:
     32: if FOG_AVAILABLE:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\integration\__init__.py:34:55
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     31:
     32: if FOG_AVAILABLE:
     33:     __all__.extend(
>>>  34:         ["FogComputeConfig", "FogComputeOrchestrator", "create_fog_compute_pipeline", "run_fog_distributed_agent_forge"]
     35:     )
     36:
     37:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\model-management\download_magi_seeds.py:2:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
      1: #!/usr/bin/env python3
>>>   2: """Download and pin the selected Magi seed models"""
      3:
      4: import json
      5: import os


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\model-management\download_magi_seeds.py:98:10
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     95:
     96: def main():
     97:     """Main download function"""
>>>  98:     print("Downloading and pinning selected Magi seed models...")
     99:     print(f"Selected models: {list(SELECTED_MODELS.values())}")
    100:
    101:     results = {}


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\model-management\search_magi_candidates.py:12:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
      9:
     10:
     11: def estimate_params_from_config(config: dict) -> float | None:
>>>  12:     """Estimate parameters from model config"""
     13:     try:
     14:         if "num_parameters" in config:
     15:             return float(config["num_parameters"]) / 1e9


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'config' methods (9 calls)
File: packages\agent_forge\model-management\search_magi_candidates.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\model-management\seed_info.py:2:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
      1: #!/usr/bin/env python3
>>>   2: """Helper CLI to display information about selected Magi seed models"""
      3:
      4: import json
      5: from pathlib import Path


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\model-management\validate_magi_seeds.py:91:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     88:         total_size = sum(f.stat().st_size for f in model_path.rglob("*") if f.is_file())
     89:         result["model_size_mb"] = total_size / (1024 * 1024)
     90:
>>>  91:         print(f"  Loading tokenizer from {model_path}...")
     92:         tokenizer = AutoTokenizer.from_pretrained(str(model_path), trust_remote_code=True)
     93:         result["tokenizer_ok"] = True
     94:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\model-management\validate_magi_seeds.py:95:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     92:         tokenizer = AutoTokenizer.from_pretrained(str(model_path), trust_remote_code=True)
     93:         result["tokenizer_ok"] = True
     94:
>>>  95:         print(f"  Loading model from {model_path}...")
     96:         model = AutoModelForCausalLM.from_pretrained(
     97:             str(model_path),
     98:             device_map="cpu",


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'result' methods (6 calls)
File: packages\agent_forge\model-management\validate_magi_seeds.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\phases\adas.py:2:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
      1: #!/usr/bin/env python3
>>>   2: """
      3: ADAS Phase - Architecture Discovery and Search with Vector Composition
      4:
      5: Implements architecture search with vector composition techniques from


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\phases\adas.py:58:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     55:     def compose_architectures(
     56:         self, base_config: dict[str, Any], target_config: dict[str, Any], composition_vector: np.ndarray
     57:     ) -> dict[str, Any]:
>>>  58:         """
     59:         Compose two architectures using vector operations.
     60:
     61:         Args:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\phases\adas.py:111:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    108:         return composed
    109:
    110:     def _compose_lists(self, base: list, target: list, alpha: float) -> list:
>>> 111:         """Compose lists using vector-controlled selection and mixing."""
    112:         if not base or not target:
    113:             return base if alpha < 0.5 else target
    114:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\phases\adas.py:229:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    226:
    227:     @classmethod
    228:     def from_dict(cls, data: dict[str, Any]) -> "ArchitectureConfig":
>>> 229:         """Create from dictionary."""
    230:         return cls(**data)
    231:
    232:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\phases\adas.py:541:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    538:         return offspring
    539:
    540:     def _tournament_select(self, population: list[ArchitectureConfig], tournament_size: int = 3) -> ArchitectureConfig:
>>> 541:         """Tournament selection for parent selection."""
    542:         tournament = random.sample(population, min(tournament_size, len(population)))
    543:         return max(tournament, key=lambda x: x.performance_score)
    544:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\phases\adas.py:603:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    600:         )
    601:
    602:     def _select_next_generation(self, combined: list[ArchitectureConfig]) -> list[ArchitectureConfig]:
>>> 603:         """Select next generation using NSGA-II selection."""
    604:         # Fast non-dominated sorting
    605:         fronts = self._fast_non_dominated_sort(combined)
    606:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\phases\adas.py:719:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    716:         return distances
    717:
    718:     def _get_pareto_front(self, population: list[ArchitectureConfig]) -> list[ArchitectureConfig]:
>>> 719:         """Extract Pareto front from population."""
    720:         fronts = self._fast_non_dominated_sort(population)
    721:         return fronts[0] if fronts else []
    722:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\phases\adas.py:878:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    875:
    876:
    877: class ADASPhase(PhaseController):
>>> 878:     """
    879:     ADAS Phase - Architecture Discovery and Search with Vector Composition
    880:
    881:     Implements the complete ADAS pipeline with:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\phases\adas.py:909:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    906:         )
    907:
    908:     async def run(self, model: nn.Module) -> PhaseResult:
>>> 909:         """
    910:         Execute ADAS phase with vector composition and multi-objective optimization.
    911:
    912:         Args:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\phases\adas.py:938:31
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    935:
    936:             # Select best architecture from Pareto front
    937:             best_config = self._select_best_architecture(pareto_front)
>>> 938:             self.logger.info(f"Selected best architecture with score: {best_config.performance_score:.4f}")
    939:
    940:             # Apply Grokfast training if enabled
    941:             final_model = model


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\phases\adas.py:1017:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1014:         return initial_configs
    1015:
    1016:     def _extract_model_config(self, model: nn.Module) -> ArchitectureConfig:
>>> 1017:         """Extract architecture configuration from model."""
    1018:         # Default configuration
    1019:         config = ArchitectureConfig()
    1020:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\phases\adas.py:1036:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1033:         return config
    1034:
    1035:     def _create_variant(self, base_config: ArchitectureConfig) -> ArchitectureConfig:
>>> 1036:         """Create a variant of base configuration."""
    1037:         variant_dict = base_config.to_dict()
    1038:
    1039:         # Apply random variations


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\phases\adas.py:1061:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1058:         return ArchitectureConfig.from_dict(variant_dict)
    1059:
    1060:     async def _apply_vector_composition(self, configs: list[ArchitectureConfig]) -> list[ArchitectureConfig]:
>>> 1061:         """Apply vector composition operations to create diverse population."""
    1062:         composed_configs = list(configs)  # Keep originals
    1063:
    1064:         # Generate composition pairs


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\phases\adas.py:1092:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1089:         return composed_configs
    1090:
    1091:     def _select_best_architecture(self, pareto_front: list[ArchitectureConfig]) -> ArchitectureConfig:
>>> 1092:         """Select the best architecture from Pareto front."""
    1093:         if not pareto_front:
    1094:             raise ValueError("Empty Pareto front")
    1095:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logging' methods (6 calls)
File: packages\agent_forge\phases\adas.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (41 calls)
File: packages\agent_forge\phases\adas.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'math' methods (6 calls)
File: packages\agent_forge\phases\adas.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'random' methods (19 calls)
File: packages\agent_forge\phases\adas.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (148 total)
File: packages\agent_forge\phases\adas.py:51:50
Recommendation: Replace magic numbers with named constants or enums
Code context:
     48:     on model parameters and architectural configurations.
     49:     """
     50:
>>>  51:     def __init__(self, composition_scale: float = 0.1):
     52:         self.composition_scale = composition_scale
     53:         self.logger = logging.getLogger(__name__)
     54:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (148 total)
File: packages\agent_forge\phases\adas.py:113:35
Recommendation: Replace magic numbers with named constants or enums
Code context:
    110:     def _compose_lists(self, base: list, target: list, alpha: float) -> list:
    111:         """Compose lists using vector-controlled selection and mixing."""
    112:         if not base or not target:
>>> 113:             return base if alpha < 0.5 else target
    114:
    115:         # Vector-controlled list composition
    116:         composed = []


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (148 total)
File: packages\agent_forge\phases\adas.py:124:53
Recommendation: Replace magic numbers with named constants or enums
Code context:
    121:             target_item = target[i % len(target)]
    122:
    123:             # Use alpha with position-dependent variation
>>> 124:             position_alpha = alpha + (i / max_len) * 0.1
    125:
    126:             if isinstance(base_item, int | float) and isinstance(target_item, int | float):
    127:                 composed.append(self._compose_numeric(base_item, target_item, position_alpha))


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (148 total)
File: packages\agent_forge\phases\adas.py:129:62
Recommendation: Replace magic numbers with named constants or enums
Code context:
    126:             if isinstance(base_item, int | float) and isinstance(target_item, int | float):
    127:                 composed.append(self._compose_numeric(base_item, target_item, position_alpha))
    128:             else:
>>> 129:                 composed.append(base_item if position_alpha < 0.5 else target_item)
    130:
    131:         return composed
    132:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (148 total)
File: packages\agent_forge\phases\adas.py:148:27
Recommendation: Replace magic numbers with named constants or enums
Code context:
    145:                     composed[key] = self._compose_dicts(base_val, target_val, alpha)
    146:             else:
    147:                 # Add new keys based on vector threshold
>>> 148:                 if alpha > 0.5:
    149:                     composed[key] = target_val
    150:
    151:         return composed


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\phases\bitnet_compression.py:2:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
      1: #!/usr/bin/env python3
>>>   2: """
      3: Agent Forge Phase 3: BitNet 1.58-bit Compression
      4:
      5: This phase implements initial compression using BitNet 1.58-bit quantization before


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\phases\bitnet_compression.py:202:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    199:         }
    200:
    201:     def dequantize_tensor(self, quantized_data: dict[str, Any]) -> torch.Tensor:
>>> 202:         """Dequantize a tensor from BitNet format."""
    203:         if not quantized_data.get("is_quantized", False):
    204:             # Return unquantized tensor as-is
    205:             weights = np.array(quantized_data["weights"])


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\phases\bitnet_compression.py:219:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    216:
    217:
    218: class BitNetCompressedModel(nn.Module):
>>> 219:     """
    220:     Wrapper for BitNet-compressed models with transparent operation.
    221:
    222:     This allows compressed models to be used as drop-in replacements


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\phases\bitnet_compression.py:365:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    362:         logger.info(f"Prepared {len(self.examples)} calibration samples")
    363:
    364:     def _prepare_text_samples(self, dataset, num_samples: int) -> list[str]:
>>> 365:         """Prepare text samples from dataset."""
    366:         samples = []
    367:
    368:         for i, item in enumerate(dataset):


LONG_PARAMETER_LIST: Function 'create_bitnet_compression_phase' has 8 parameters (>5)
File: packages\agent_forge\phases\bitnet_compression.py:761:0
Recommendation: Use parameter objects, data classes, or keyword-only arguments
Code context:
    758: # ============================================================================
    759:
    760:
>>> 761: def create_bitnet_compression_phase(
    762:     model_path: str = "",
    763:     output_path: str = "",
    764:     target_compression_ratio: float = 8.0,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\phases\bitnet_compression.py:771:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    768:     device: str = "auto",
    769:     **kwargs,
    770: ) -> BitNetCompressionPhase:
>>> 771:     """
    772:     Factory function to create BitNet compression phase.
    773:
    774:     Args:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'tensor' methods (7 calls)
File: packages\agent_forge\phases\bitnet_compression.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'torch' methods (11 calls)
File: packages\agent_forge\phases\bitnet_compression.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (16 calls)
File: packages\agent_forge\phases\bitnet_compression.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (20 calls)
File: packages\agent_forge\phases\bitnet_compression.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'model' methods (6 calls)
File: packages\agent_forge\phases\bitnet_compression.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (26 total)
File: packages\agent_forge\phases\bitnet_compression.py:72:31
Recommendation: Replace magic numbers with named constants or enums
Code context:
     69:     tokenizer_path: str | None = None
     70:
     71:     # BitNet quantization settings
>>>  72:     quantization_bits: float = 1.58  # BitNet 1.58-bit quantization
     73:     preserve_embedding_precision: bool = True  # Keep embeddings in higher precision
     74:     preserve_output_precision: bool = True  # Keep final layers in higher precision
     75:     sparsity_threshold: float = 0.1  # Threshold for setting weights to 0


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (26 total)
File: packages\agent_forge\phases\bitnet_compression.py:75:32
Recommendation: Replace magic numbers with named constants or enums
Code context:
     72:     quantization_bits: float = 1.58  # BitNet 1.58-bit quantization
     73:     preserve_embedding_precision: bool = True  # Keep embeddings in higher precision
     74:     preserve_output_precision: bool = True  # Keep final layers in higher precision
>>>  75:     sparsity_threshold: float = 0.1  # Threshold for setting weights to 0
     76:
     77:     # Calibration settings
     78:     calibration_samples: int = 1000


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (26 total)
File: packages\agent_forge\phases\bitnet_compression.py:80:34
Recommendation: Replace magic numbers with named constants or enums
Code context:
     77:     # Calibration settings
     78:     calibration_samples: int = 1000
     79:     calibration_dataset: str = "openwebtext"  # or "c4" or "wikitext"
>>>  80:     calibration_batch_size: int = 4
     81:     calibration_sequence_length: int = 512
     82:
     83:     # Fine-tuning configuration (to recover accuracy after compression)


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (26 total)
File: packages\agent_forge\phases\bitnet_compression.py:81:39
Recommendation: Replace magic numbers with named constants or enums
Code context:
     78:     calibration_samples: int = 1000
     79:     calibration_dataset: str = "openwebtext"  # or "c4" or "wikitext"
     80:     calibration_batch_size: int = 4
>>>  81:     calibration_sequence_length: int = 512
     82:
     83:     # Fine-tuning configuration (to recover accuracy after compression)
     84:     enable_fine_tuning: bool = True


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (26 total)
File: packages\agent_forge\phases\bitnet_compression.py:86:26
Recommendation: Replace magic numbers with named constants or enums
Code context:
     83:     # Fine-tuning configuration (to recover accuracy after compression)
     84:     enable_fine_tuning: bool = True
     85:     fine_tune_epochs: int = 2
>>>  86:     fine_tune_lr: float = 1e-5
     87:     warmup_steps: int = 50
     88:     weight_decay: float = 0.01
     89:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\phases\evomerge.py:1:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
>>>   1: """
      2: EvoMerge Phase: Evolutionary Model Merging
      3:
      4: Consolidates the best features from:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\phases\evomerge.py:114:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    111:
    112:
    113: class MergeOperators:
>>> 114:     """
    115:     Collection of all model merging operators from production implementation.
    116:     Includes memory-efficient chunked processing and meta tensor handling.
    117:     """


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\phases\evomerge.py:250:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    247:
    248:     @staticmethod
    249:     def dare_merge(models: list[nn.Module], threshold: float = 0.1, amplification: float = 2.0) -> nn.Module:
>>> 250:         """DARE merging: Drop And REscale."""
    251:         merged = models[0].__class__(models[0].config)
    252:         merged_state = {}
    253:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\phases\evomerge.py:273:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    270:
    271:     @staticmethod
    272:     def frankenmerge(models: list[nn.Module], layer_assignments: list[int] | None = None) -> nn.Module:
>>> 273:         """Frankenmerge: Mix layers from different models."""
    274:         if layer_assignments is None:
    275:             # Random layer assignment
    276:             num_layers = len([k for k in models[0].state_dict() if "layer" in k])


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\phases\evomerge.py:472:45
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    469:                         prompts = [p for p in prompts if p and isinstance(p, str) and len(p.strip()) > 0]
    470:
    471:                         if not prompts:
>>> 472:                             logger.warning(f"No valid prompts extracted from {domain} dataset, using fallback")
    473:
    474:                     except Exception as e:
    475:                         logger.warning(f"Failed to extract prompts from {domain} dataset: {e}")


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\phases\evomerge.py:475:41
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    472:                             logger.warning(f"No valid prompts extracted from {domain} dataset, using fallback")
    473:
    474:                     except Exception as e:
>>> 475:                         logger.warning(f"Failed to extract prompts from {domain} dataset: {e}")
    476:                         prompts = []
    477:                 else:
    478:                     # Fallback to simple prompts


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\phases\evomerge.py:568:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    565:         self.best_candidate: MergeCandidate | None = None
    566:
    567:     def tournament_selection(self, population: list[MergeCandidate], tournament_size: int = 3) -> MergeCandidate:
>>> 568:         """Select winner from tournament."""
    569:         tournament = random.sample(population, min(tournament_size, len(population)))
    570:         return max(tournament, key=lambda x: x.aggregated_fitness)
    571:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\phases\evomerge.py:601:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    598:         return pareto_front
    599:
    600:     def nsga2_select(self, population: list[MergeCandidate], num_select: int) -> list[MergeCandidate]:
>>> 601:         """NSGA-II selection for next generation."""
    602:         # Calculate Pareto fronts
    603:         fronts = []
    604:         remaining = population.copy()


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\phases\evomerge.py:627:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    624:
    625:
    626: class EvoMergePhase:
>>> 627:     """
    628:     Phase 1: Evolutionary Model Merging
    629:
    630:     Complete consolidation of all EvoMerge implementations with:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\phases\evomerge.py:988:39
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    985:
    986:                     candidate = MergeCandidate(model_path=str(model_path), merge_recipe=recipe, generation=0)
    987:                     population.append(candidate)
>>> 988:                     self.logger.info(f"[OK] Created candidate {i+1}")
    989:
    990:             except Exception as e:
    991:                 self.logger.warning(f"Failed to create candidate {i+1}: {e}")


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\phases\evomerge.py:991:38
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    988:                     self.logger.info(f"[OK] Created candidate {i+1}")
    989:
    990:             except Exception as e:
>>> 991:                 self.logger.warning(f"Failed to create candidate {i+1}: {e}")
    992:                 continue
    993:
    994:         self.logger.info(f"Initial population: {len(population)} candidates")


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\phases\evomerge.py:1049:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1046:         return variance < threshold
    1047:
    1048:     async def _create_next_generation(self, base_models: list[nn.Module]) -> list[MergeCandidate]:
>>> 1049:         """
    1050:         Create next generation using the user-specified breeding algorithm:
    1051:         Top 2 models → 6 children (3 each)
    1052:         Bottom 6 models → 2 children (groups of 3 → 1 child each)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\phases\evomerge.py:1129:42
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1126:                     torch.cuda.empty_cache()
    1127:
    1128:                 except Exception as e:
>>> 1129:                     self.logger.warning(f"Failed to create winner child: {e}")
    1130:                     continue
    1131:
    1132:         # Bottom 6 → 2 children (groups of 3 → 1 child each)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\phases\evomerge.py:1182:42
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1179:                     torch.cuda.empty_cache()
    1180:
    1181:                 except Exception as e:
>>> 1182:                     self.logger.warning(f"Failed to create loser child: {e}")
    1183:                     continue
    1184:
    1185:         self.logger.info(f"Created next generation: {len(next_gen)} candidates (6 winner children + 2 loser children)")


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\phases\evomerge.py:1185:27
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1182:                     self.logger.warning(f"Failed to create loser child: {e}")
    1183:                     continue
    1184:
>>> 1185:         self.logger.info(f"Created next generation: {len(next_gen)} candidates (6 winner children + 2 loser children)")
    1186:         return next_gen[:8]  # Ensure exactly 8 candidates
    1187:
    1188:     async def _save_population_models(self, generation: int):


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\phases\evomerge.py:1250:57
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1247:                     self.logger.warning(f"Failed to delete {path.name}: {e}")
    1248:
    1249:         if cleanup_count > 0:
>>> 1250:             self.logger.info(f"Cleaned up {cleanup_count} models from generation {generation}")
    1251:
    1252:     def _log_generation_stats(self, generation: int, diversity: float):
    1253:         """Log detailed generation statistics."""


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'np' methods (8 calls)
File: packages\agent_forge\phases\evomerge.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'torch' methods (22 calls)
File: packages\agent_forge\phases\evomerge.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'merged' methods (7 calls)
File: packages\agent_forge\phases\evomerge.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'model1' methods (8 calls)
File: packages\agent_forge\phases\evomerge.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'random' methods (6 calls)
File: packages\agent_forge\phases\evomerge.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (17 calls)
File: packages\agent_forge\phases\evomerge.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (9 calls)
File: packages\agent_forge\phases\evomerge.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'dataset' methods (12 calls)
File: packages\agent_forge\phases\evomerge.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'kwargs' methods (6 calls)
File: packages\agent_forge\phases\evomerge.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'hrrm_config' methods (6 calls)
File: packages\agent_forge\phases\evomerge.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (70 total)
File: packages\agent_forge\phases\evomerge.py:61:23
Recommendation: Replace magic numbers with named constants or enums
Code context:
     58:     device: str = "cuda" if torch.cuda.is_available() else "cpu"
     59:
     60:     # Evolution parameters
>>>  61:     generations: int = 50
     62:     population_size: int = 8
     63:     mutation_rate: float = 0.1
     64:     crossover_rate: float = 0.7


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (70 total)
File: packages\agent_forge\phases\evomerge.py:62:27
Recommendation: Replace magic numbers with named constants or enums
Code context:
     59:
     60:     # Evolution parameters
     61:     generations: int = 50
>>>  62:     population_size: int = 8
     63:     mutation_rate: float = 0.1
     64:     crossover_rate: float = 0.7
     65:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (70 total)
File: packages\agent_forge\phases\evomerge.py:63:27
Recommendation: Replace magic numbers with named constants or enums
Code context:
     60:     # Evolution parameters
     61:     generations: int = 50
     62:     population_size: int = 8
>>>  63:     mutation_rate: float = 0.1
     64:     crossover_rate: float = 0.7
     65:
     66:     # Merge techniques


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (70 total)
File: packages\agent_forge\phases\evomerge.py:64:28
Recommendation: Replace magic numbers with named constants or enums
Code context:
     61:     generations: int = 50
     62:     population_size: int = 8
     63:     mutation_rate: float = 0.1
>>>  64:     crossover_rate: float = 0.7
     65:
     66:     # Merge techniques
     67:     merge_techniques: list[str] = field(


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (70 total)
File: packages\agent_forge\phases\evomerge.py:74:41
Recommendation: Replace magic numbers with named constants or enums
Code context:
     71:     # Evaluation configuration
     72:     evaluation_domains: list[str] = field(default_factory=lambda: ["code", "math", "multilingual", "structured_data"])
     73:     fitness_weights: dict[str, float] = field(
>>>  74:         default_factory=lambda: {"code": 0.25, "math": 0.25, "multilingual": 0.25, "structured_data": 0.25}
     75:     )
     76:
     77:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\phases\final_compression.py:46:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     43:         self.seed_length = seed_length
     44:
     45:     def generate_matrix(self, seed: int, rows: int, cols: int) -> np.ndarray:
>>>  46:         """Generate pseudo-random matrix from seed."""
     47:         rng = np.random.default_rng(seed % (2**self.seed_length))
     48:         return rng.standard_normal((rows, cols), dtype=np.float32)
     49:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\phases\final_compression.py:52:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     49:
     50:
     51: class SEEDLMCompressor:
>>>  52:     """
     53:     SeedLM: Seed-based weight compression using pseudo-random projections.
     54:
     55:     Each block of weights is approximated using a small latent dimension


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\phases\final_compression.py:151:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    148:         return self.Q[idx]
    149:
    150:     def decompress(self, compressed: dict[str, Any]) -> torch.Tensor:
>>> 151:         """Decompress weights from SeedLM format."""
    152:         seeds = compressed["seeds"]
    153:         coeffs = compressed["coefficients"]
    154:         exps = compressed["shared_exponents"]


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\phases\final_compression.py:279:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    276:         return codebook, indices
    277:
    278:     def decompress(self, compressed: dict[str, Any]) -> torch.Tensor:
>>> 279:         """Decompress weights from VPTQ format."""
    280:         codebook = compressed["codebook"]
    281:         indices = compressed["indices"].to(torch.long)
    282:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\phases\final_compression.py:488:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    485:         return trajectory
    486:
    487:     def decompress(self, compressed: dict[str, Any]) -> torch.Tensor:
>>> 488:         """Decompress weights from hyper-function representation."""
    489:         shape = compressed["original_shape"]
    490:         total = int(torch.prod(torch.tensor(shape)))
    491:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\phases\final_compression.py:692:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    689:             self.grokfast_optimizer = None
    690:
    691:     async def run(self, model: nn.Module) -> PhaseResult:
>>> 692:         """
    693:         Execute final compression phase.
    694:
    695:         Args:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\phases\final_compression.py:826:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    823:             )
    824:
    825:     def _extract_model_weights(self, model: nn.Module) -> dict[str, torch.Tensor]:
>>> 826:         """Extract all weight tensors from model."""
    827:         weights = {}
    828:         for name, param in model.named_parameters():
    829:             if param.requires_grad:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'np' methods (18 calls)
File: packages\agent_forge\phases\final_compression.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (6 calls)
File: packages\agent_forge\phases\final_compression.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'weights' methods (10 calls)
File: packages\agent_forge\phases\final_compression.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (25 calls)
File: packages\agent_forge\phases\final_compression.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'torch' methods (35 calls)
File: packages\agent_forge\phases\final_compression.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (118 total)
File: packages\agent_forge\phases\final_compression.py:42:42
Recommendation: Replace magic numbers with named constants or enums
Code context:
     39: class LinearFeedbackShiftRegister:
     40:     """Linear Feedback Shift Register for reproducible pseudo-random matrices."""
     41:
>>>  42:     def __init__(self, seed_length: int = 16):
     43:         self.seed_length = seed_length
     44:
     45:     def generate_matrix(self, seed: int, rows: int, cols: int) -> np.ndarray:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (118 total)
File: packages\agent_forge\phases\final_compression.py:60:46
Recommendation: Replace magic numbers with named constants or enums
Code context:
     57:     quantized coefficients and shared exponent are stored.
     58:     """
     59:
>>>  60:     def __init__(self, bits_per_weight: int = 4, max_candidates: int = 16):
     61:         self.bits_per_weight = bits_per_weight
     62:
     63:         # Configure block and latent dimensions based on bit width


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (118 total)
File: packages\agent_forge\phases\final_compression.py:60:71
Recommendation: Replace magic numbers with named constants or enums
Code context:
     57:     quantized coefficients and shared exponent are stored.
     58:     """
     59:
>>>  60:     def __init__(self, bits_per_weight: int = 4, max_candidates: int = 16):
     61:         self.bits_per_weight = bits_per_weight
     62:
     63:         # Configure block and latent dimensions based on bit width


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (118 total)
File: packages\agent_forge\phases\final_compression.py:64:30
Recommendation: Replace magic numbers with named constants or enums
Code context:
     61:         self.bits_per_weight = bits_per_weight
     62:
     63:         # Configure block and latent dimensions based on bit width
>>>  64:         if bits_per_weight == 3:
     65:             self.C, self.P = 12, 4  # Block size, latent dimension
     66:         elif bits_per_weight == 4:
     67:             self.C, self.P = 8, 3


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (118 total)
File: packages\agent_forge\phases\final_compression.py:65:29
Recommendation: Replace magic numbers with named constants or enums
Code context:
     62:
     63:         # Configure block and latent dimensions based on bit width
     64:         if bits_per_weight == 3:
>>>  65:             self.C, self.P = 12, 4  # Block size, latent dimension
     66:         elif bits_per_weight == 4:
     67:             self.C, self.P = 8, 3
     68:         elif bits_per_weight == 2:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\phases\forge_training.py:2:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
      1: #!/usr/bin/env python3
>>>   2: """
      3: Agent Forge Phase 4: Forge Training Loop with Grokfast
      4:
      5: This phase implements the main training loop with edge-of-chaos optimization,


LONG_PARAMETER_LIST: Function '__init__' has 9 parameters (>5)
File: packages\agent_forge\phases\forge_training.py:147:4
Recommendation: Use parameter objects, data classes, or keyword-only arguments
Code context:
    144:     and dampening fast gradients using EMA filtering.
    145:     """
    146:
>>> 147:     def __init__(
    148:         self,
    149:         params,
    150:         lr: float = 1e-3,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\phases\forge_training.py:310:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    307:         self.velocity = {param: 0.0 for param in self.difficulty_params}
    308:
    309:     def update(self, recent_scores: list[float]) -> dict[str, float]:
>>> 310:         """Update controller and return adjusted difficulty parameters."""
    311:         self.success_history.extend(recent_scores)
    312:
    313:         if len(self.success_history) < 10:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\phases\forge_training.py:435:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    432:
    433: @dataclass
    434: class DreamExample:
>>> 435:     """Example from dream buffer for replay."""
    436:
    437:     input_ids: torch.Tensor
    438:     labels: torch.Tensor


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\phases\forge_training.py:460:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    457:             self.position = (self.position + 1) % self.capacity
    458:
    459:     def sample(self, batch_size: int) -> list[DreamExample]:
>>> 460:         """Sample batch from buffer."""
    461:         if len(self.buffer) < batch_size:
    462:             return self.buffer.copy()
    463:


LONG_PARAMETER_LIST: Function 'create_forge_training_phase' has 8 parameters (>5)
File: packages\agent_forge\phases\forge_training.py:1078:0
Recommendation: Use parameter objects, data classes, or keyword-only arguments
Code context:
    1075: # ============================================================================
    1076:
    1077:
>>> 1078: def create_forge_training_phase(
    1079:     model_path: str = "",
    1080:     output_path: str = "",
    1081:     max_steps: int = 50000,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\phases\forge_training.py:1088:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1085:     device: str = "auto",
    1086:     **kwargs,
    1087: ) -> ForgeTrainingPhase:
>>> 1088:     """
    1089:     Factory function to create Forge training phase.
    1090:
    1091:     Args:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (23 calls)
File: packages\agent_forge\phases\forge_training.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'torch' methods (18 calls)
File: packages\agent_forge\phases\forge_training.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'np' methods (8 calls)
File: packages\agent_forge\phases\forge_training.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (12 calls)
File: packages\agent_forge\phases\forge_training.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'model' methods (11 calls)
File: packages\agent_forge\phases\forge_training.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (67 total)
File: packages\agent_forge\phases\forge_training.py:69:27
Recommendation: Replace magic numbers with named constants or enums
Code context:
     66:     tokenizer_path: str | None = None
     67:
     68:     # Training configuration
>>>  69:     learning_rate: float = 1e-4
     70:     batch_size: int = 32
     71:     max_steps: int = 50000
     72:     warmup_steps: int = 1000


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (67 total)
File: packages\agent_forge\phases\forge_training.py:70:22
Recommendation: Replace magic numbers with named constants or enums
Code context:
     67:
     68:     # Training configuration
     69:     learning_rate: float = 1e-4
>>>  70:     batch_size: int = 32
     71:     max_steps: int = 50000
     72:     warmup_steps: int = 1000
     73:     gradient_accumulation_steps: int = 4


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (67 total)
File: packages\agent_forge\phases\forge_training.py:71:21
Recommendation: Replace magic numbers with named constants or enums
Code context:
     68:     # Training configuration
     69:     learning_rate: float = 1e-4
     70:     batch_size: int = 32
>>>  71:     max_steps: int = 50000
     72:     warmup_steps: int = 1000
     73:     gradient_accumulation_steps: int = 4
     74:     weight_decay: float = 0.01


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (67 total)
File: packages\agent_forge\phases\forge_training.py:73:39
Recommendation: Replace magic numbers with named constants or enums
Code context:
     70:     batch_size: int = 32
     71:     max_steps: int = 50000
     72:     warmup_steps: int = 1000
>>>  73:     gradient_accumulation_steps: int = 4
     74:     weight_decay: float = 0.01
     75:
     76:     # Grokfast configuration


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (67 total)
File: packages\agent_forge\phases\forge_training.py:74:26
Recommendation: Replace magic numbers with named constants or enums
Code context:
     71:     max_steps: int = 50000
     72:     warmup_steps: int = 1000
     73:     gradient_accumulation_steps: int = 4
>>>  74:     weight_decay: float = 0.01
     75:
     76:     # Grokfast configuration
     77:     enable_grokfast: bool = True


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\phases\quietstar.py:2:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
      1: #!/usr/bin/env python3
>>>   2: """
      3: Agent Forge Phase 2: Quiet-STaR Baking
      4:
      5: This phase implements "prompt baking" of reasoning tokens into models, where thoughts like


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\phases\quietstar.py:142:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    139:
    140:
    141: class ThoughtMixingHead(nn.Module):
>>> 142:     """
    143:     Advanced mixing head that processes hidden thought representations.
    144:
    145:     Consolidated from src/agent_forge/quiet_star/model.py with enhancements.


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\phases\quietstar.py:259:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    256:         return batch_segments
    257:
    258:     def create_thought_mask(self, input_ids: torch.Tensor, special_token_ids: dict[str, int]) -> torch.Tensor:
>>> 259:         """Create mask indicating which tokens are inside thought segments."""
    260:         batch_segments = self.parse_thought_segments(input_ids, special_token_ids)
    261:         batch_size, seq_len = input_ids.shape
    262:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\phases\quietstar.py:356:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    353:     def _strip_thought_tokens(
    354:         self, logits: torch.Tensor, input_ids: torch.Tensor, special_token_ids: dict[str, int]
    355:     ) -> torch.Tensor:
>>> 356:         """Strip thought token logits from output during inference."""
    357:         sot_id = special_token_ids.get(self.config.start_thought_token, -1)
    358:         eot_id = special_token_ids.get(self.config.end_thought_token, -1)
    359:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\phases\quietstar.py:376:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    373:
    374:
    375: class CognitiveStrategyProcessor:
>>> 376:     """
    377:     Integrates cognitive strategies from bakedquietiot implementation.
    378:
    379:     Provides structured reasoning with critique/alternatives/evaluation cycles.


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\phases\quietstar.py:434:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    431:         return insights
    432:
    433:     async def iot_process(self, input_text: str, max_iterations: int = 5) -> tuple[dict, dict]:
>>> 434:         """
    435:         Iterative Optimization of Thought (IoT) processing.
    436:
    437:         Implements critique/alternatives/evaluation cycles until convergence.


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\phases\quietstar.py:475:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    472:         return await self.generate_thought_with_strategies(prompt, temperature)
    473:
    474:     async def _generate_alternatives(self, thought: str, insights: dict, temperature: float = 0.8) -> dict:
>>> 475:         """Generate alternative perspectives."""
    476:         prompt = f"Generate alternative perspectives for:\n{thought}\n\nConsider these insights:\n"
    477:         for strategy, insight in insights.items():
    478:             prompt += f"{strategy}: {insight}\n"


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\phases\quietstar.py:476:19
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    473:
    474:     async def _generate_alternatives(self, thought: str, insights: dict, temperature: float = 0.8) -> dict:
    475:         """Generate alternative perspectives."""
>>> 476:         prompt = f"Generate alternative perspectives for:\n{thought}\n\nConsider these insights:\n"
    477:         for strategy, insight in insights.items():
    478:             prompt += f"{strategy}: {insight}\n"
    479:         prompt += "\nAlternatives:"


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\phases\quietstar.py:514:28
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    511:         """Revise thought based on feedback."""
    512:         prompt = f"""
    513:         Original thought: {thought}
>>> 514:         Critique: {critique}
    515:         Alternatives: {alternatives}
    516:         Evaluation: {evaluation}
    517:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\phases\quietstar.py:763:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    760:
    761:
    762: class QuietSTaRABTester:
>>> 763:     """
    764:     A/B testing harness to validate thought injection improvements.
    765:
    766:     Consolidated from quietstar_baker.py with enhanced metrics.


LONG_PARAMETER_LIST: Function 'create_quietstar_phase' has 8 parameters (>5)
File: packages\agent_forge\phases\quietstar.py:1097:0
Recommendation: Use parameter objects, data classes, or keyword-only arguments
Code context:
    1094: # ============================================================================
    1095:
    1096:
>>> 1097: def create_quietstar_phase(
    1098:     model_path: str = "",
    1099:     output_path: str = "",
    1100:     eval_samples: int = 100,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\phases\quietstar.py:1107:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1104:     device: str = "auto",
    1105:     **kwargs,
    1106: ) -> QuietSTaRPhase:
>>> 1107:     """
    1108:     Factory function to create QuietSTaR phase with common configurations.
    1109:
    1110:     Args:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\phases\quietstar.py:1147:23
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1144:     async def main():
    1145:         # Example: Create and run QuietSTaR phase
    1146:         phase = create_quietstar_phase(
>>> 1147:             model_path="./champion_model_from_evomerge",
    1148:             output_path="./phase2_quietstar_output",
    1149:             eval_samples=50,  # Smaller for testing
    1150:             max_baking_iterations=3,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\phases\quietstar.py:1154:37
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1151:             convergence_threshold=0.85,  # Lower for testing
    1152:         )
    1153:
>>> 1154:         result = await phase.execute("./champion_model_from_evomerge")
    1155:
    1156:         print(f"Phase Result: {result.success}")
    1157:         print(f"Convergence Rate: {result.metrics.get('final_convergence_rate', 0):.2%}")


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (30 calls)
File: packages\agent_forge\phases\quietstar.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'torch' methods (11 calls)
File: packages\agent_forge\phases\quietstar.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (15 calls)
File: packages\agent_forge\phases\quietstar.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (42 total)
File: packages\agent_forge\phases\quietstar.py:71:33
Recommendation: Replace magic numbers with named constants or enums
Code context:
     68:     no_thought_token: str = "<|nothought|>"
     69:
     70:     # Baking configuration
>>>  71:     max_baking_iterations: int = 5
     72:     convergence_threshold: float = 0.95  # When to stop baking (95% "stuck" rate)
     73:     thought_probability: float = 0.5
     74:     max_thought_length: int = 64


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (42 total)
File: packages\agent_forge\phases\quietstar.py:72:35
Recommendation: Replace magic numbers with named constants or enums
Code context:
     69:
     70:     # Baking configuration
     71:     max_baking_iterations: int = 5
>>>  72:     convergence_threshold: float = 0.95  # When to stop baking (95% "stuck" rate)
     73:     thought_probability: float = 0.5
     74:     max_thought_length: int = 64
     75:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (42 total)
File: packages\agent_forge\phases\quietstar.py:73:33
Recommendation: Replace magic numbers with named constants or enums
Code context:
     70:     # Baking configuration
     71:     max_baking_iterations: int = 5
     72:     convergence_threshold: float = 0.95  # When to stop baking (95% "stuck" rate)
>>>  73:     thought_probability: float = 0.5
     74:     max_thought_length: int = 64
     75:
     76:     # Cognitive strategies (from bakedquietiot)


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (42 total)
File: packages\agent_forge\phases\quietstar.py:74:30
Recommendation: Replace magic numbers with named constants or enums
Code context:
     71:     max_baking_iterations: int = 5
     72:     convergence_threshold: float = 0.95  # When to stop baking (95% "stuck" rate)
     73:     thought_probability: float = 0.5
>>>  74:     max_thought_length: int = 64
     75:
     76:     # Cognitive strategies (from bakedquietiot)
     77:     cognitive_strategies: list[str] = field(


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (42 total)
File: packages\agent_forge\phases\quietstar.py:91:27
Recommendation: Replace magic numbers with named constants or enums
Code context:
     88:     # Evaluation configuration
     89:     eval_dataset: str = "gsm8k"
     90:     eval_samples: int = 100
>>>  91:     eval_batch_size: int = 4
     92:
     93:     # A/B testing
     94:     ab_test_rounds: int = 3


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\phases\tool_persona_baking.py:1:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
>>>   1: """
      2: Phase 5: Tool & Persona Baking with Grokfast
      3: Comprehensive tool integration and persona optimization phase that:
      4: - Bakes tool usage patterns into model weights using Grokfast acceleration


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\phases\tool_persona_baking.py:120:23
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    117:             "creative_writer": "Let me approach {task} with creativity and imagination.",
    118:             "technical_analyst": "I'll provide a technical analysis of {task} with detailed explanations.",
    119:             "problem_solver": "Let me break down {task} into manageable steps and solve it methodically.",
>>> 120:             "teacher": "I'll explain {task} in a way that's easy to understand and learn from.",
    121:         }
    122:     )
    123:


LONG_PARAMETER_LIST: Function '__init__' has 9 parameters (>5)
File: packages\agent_forge\phases\tool_persona_baking.py:185:4
Recommendation: Use parameter objects, data classes, or keyword-only arguments
Code context:
    182:     Amplifies slow-changing gradients to accelerate tool/persona learning.
    183:     """
    184:
>>> 185:     def __init__(
    186:         self,
    187:         params,
    188:         lr: float = 1e-3,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\phases\tool_persona_baking.py:317:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    314:         self.tool_usage_stats = defaultdict(lambda: {"calls": 0, "successes": 0})
    315:
    316:     def _create_tool_implementations(self) -> dict[str, Any]:
>>> 317:         """Create mock tool implementations for testing."""
    318:         return {
    319:             "calculator": self._calculator_tool,
    320:             "search": self._search_tool,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\phases\tool_persona_baking.py:337:29
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    334:                 if "5" in expression:
    335:                     result = f"Area = π × 5² = {3.14159 * 25:.2f} square units"
    336:                 else:
>>> 337:                     result = "Area = π × r² where r is the radius"
    338:             elif any(op in expression for op in ["+", "-", "*", "/", "^"]):
    339:                 # Try to evaluate simple expressions safely
    340:                 try:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\phases\tool_persona_baking.py:478:22
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    475:                 [
    476:                     f"Based on research, I can help with {task}.",
    477:                     f"Let me provide an evidence-based approach to {task}.",
>>> 478:                     f"From an expert perspective, here's how to handle {task}.",
    479:                 ]
    480:             )
    481:         elif persona == "creative_writer":


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\phases\tool_persona_baking.py:493:22
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    490:             examples.extend(
    491:                 [
    492:                     f"Let me provide a technical analysis of {task}.",
>>> 493:                     f"From a technical standpoint, {task} involves...",
    494:                     f"Here's the technical breakdown of {task}.",
    495:                 ]
    496:             )


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\phases\tool_persona_baking.py:566:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    563:         return min(score, 1.0)
    564:
    565:     def update_persona_performance(self, persona: str, score: float):
>>> 566:         """Update performance tracking for a persona."""
    567:         self.persona_performance[persona]["scores"].append(score)
    568:         scores = self.persona_performance[persona]["scores"]
    569:         self.persona_performance[persona]["avg_score"] = np.mean(scores)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\phases\tool_persona_baking.py:928:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    925:         return model, tokenizer
    926:
    927:     async def _create_model_copy(self, model: nn.Module) -> nn.Module:
>>> 928:         """Create a copy of the model for baseline comparison."""
    929:         # Simple deep copy for baseline
    930:         import copy
    931:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\agent_forge\phases\tool_persona_baking.py:1199:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1196:     enable_grokfast: bool = True,
    1197:     **kwargs,
    1198: ) -> PhaseResult:
>>> 1199:     """
    1200:     Factory function to create and execute Tool & Persona Baking phase.
    1201:
    1202:     Args:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (20 calls)
File: packages\agent_forge\phases\tool_persona_baking.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'torch' methods (11 calls)
File: packages\agent_forge\phases\tool_persona_baking.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'examples' methods (6 calls)
File: packages\agent_forge\phases\tool_persona_baking.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'np' methods (9 calls)
File: packages\agent_forge\phases\tool_persona_baking.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (20 calls)
File: packages\agent_forge\phases\tool_persona_baking.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'model' methods (11 calls)
File: packages\agent_forge\phases\tool_persona_baking.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

SEQUENTIAL_COUPLING: Sequential coupling detected: Function '__post_init__' is part of a sequence-dependent API
File: packages\agent_forge\phases\tool_persona_baking.py:173:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    170:     save_intermediate_models: bool = True
    171:     wandb_project: str | None = "agent-forge"
    172:
>>> 173:     def __post_init__(self):
    174:         super().__post_init__()
    175:         if self.device == "auto":
    176:             self.device = "cuda" if torch.cuda.is_available() else "cpu"


SEQUENTIAL_COUPLING: Sequential coupling detected: Function '__init__' is part of a sequence-dependent API
File: packages\agent_forge\phases\tool_persona_baking.py:822:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    819:     Comprehensive tool integration and persona optimization.
    820:     """
    821:
>>> 822:     def __init__(self, config: ToolPersonaBakingConfig):
    823:         super().__init__(config)
    824:         self.config = config
    825:


SEQUENTIAL_COUPLING: Sequential coupling detected: Function '_init_grokfast_buffers' is part of a sequence-dependent API
File: packages\agent_forge\phases\tool_persona_baking.py:210:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    207:         # Initialize Grokfast EMA buffers
    208:         self._init_grokfast_buffers()
    209:
>>> 210:     def _init_grokfast_buffers(self):
    211:         """Initialize EMA gradient buffers for Grokfast."""
    212:         for group in self.param_groups:
    213:             for p in group["params"]:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (60 total)
File: packages\agent_forge\phases\tool_persona_baking.py:126:32
Recommendation: Replace magic numbers with named constants or enums
Code context:
    123:
    124:     # Baking configuration with Grokfast
    125:     enable_grokfast: bool = True
>>> 126:     grokfast_ema_alpha: float = 0.98
    127:     grokfast_lambda_init: float = 0.05
    128:     grokfast_lambda_max: float = 0.25
    129:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (60 total)
File: packages\agent_forge\phases\tool_persona_baking.py:127:34
Recommendation: Replace magic numbers with named constants or enums
Code context:
    124:     # Baking configuration with Grokfast
    125:     enable_grokfast: bool = True
    126:     grokfast_ema_alpha: float = 0.98
>>> 127:     grokfast_lambda_init: float = 0.05
    128:     grokfast_lambda_max: float = 0.25
    129:
    130:     baking_iterations: int = 5


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (60 total)
File: packages\agent_forge\phases\tool_persona_baking.py:128:33
Recommendation: Replace magic numbers with named constants or enums
Code context:
    125:     enable_grokfast: bool = True
    126:     grokfast_ema_alpha: float = 0.98
    127:     grokfast_lambda_init: float = 0.05
>>> 128:     grokfast_lambda_max: float = 0.25
    129:
    130:     baking_iterations: int = 5
    131:     convergence_threshold: float = 0.90


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (60 total)
File: packages\agent_forge\phases\tool_persona_baking.py:130:29
Recommendation: Replace magic numbers with named constants or enums
Code context:
    127:     grokfast_lambda_init: float = 0.05
    128:     grokfast_lambda_max: float = 0.25
    129:
>>> 130:     baking_iterations: int = 5
    131:     convergence_threshold: float = 0.90
    132:     baking_learning_rate: float = 1e-5
    133:     baking_epochs_per_iteration: int = 3


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (60 total)
File: packages\agent_forge\phases\tool_persona_baking.py:131:35
Recommendation: Replace magic numbers with named constants or enums
Code context:
    128:     grokfast_lambda_max: float = 0.25
    129:
    130:     baking_iterations: int = 5
>>> 131:     convergence_threshold: float = 0.90
    132:     baking_learning_rate: float = 1e-5
    133:     baking_epochs_per_iteration: int = 3
    134:     baking_strength: float = 0.15


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'phases' methods (7 calls)
File: packages\agent_forge\phases\__init__.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\backup\backup_cli.py:81:32
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     78:                     }
     79:                 )
     80:             else:
>>>  81:                 self._success(f"Backup created successfully: {backup_id}")
     82:                 self._info(f"Type: {backup_info.backup_type.value}")
     83:                 self._info(f"Size: {backup_info.size_bytes / 1024 / 1024:.2f} MB")
     84:                 self._info(f"Files: {backup_info.file_count}")


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\backup\backup_cli.py:494:13
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    491:         "backup_type",
    492:         default="full",
    493:         type=click.Choice(["full", "incremental", "tenant"]),
>>> 494:         help="Type of backup to create",
    495:     )
    496:     @click.option("--tenant", multiple=True, help="Tenant IDs to include (for tenant backup)")
    497:     @click.option("--exclude", multiple=True, help="Components to exclude")


LONG_PARAMETER_LIST: Function 'restore' has 7 parameters (>5)
File: packages\core\backup\backup_cli.py:554:4
Recommendation: Use parameter objects, data classes, or keyword-only arguments
Code context:
    551:     @click.option("--component", help="Component name (for component restore)")
    552:     @click.option("--no-rollback", is_flag=True, help="Skip creating rollback point")
    553:     @click.option("--dry-run", is_flag=True, help="Show what would be restored without doing it")
>>> 554:     def restore(backup_id, restore_type, strategy, tenant, component, no_rollback, dry_run):
    555:         """Restore from backup"""
    556:         cli = BackupCLI()
    557:         asyncio.run(


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (74 calls)
File: packages\core\backup\backup_cli.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'asyncio' methods (14 calls)
File: packages\core\backup\backup_cli.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'click' methods (29 calls)
File: packages\core\backup\backup_cli.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'cli' methods (12 calls)
File: packages\core\backup\backup_cli.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'backup_cli' methods (9 calls)
File: packages\core\backup\backup_cli.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (23 total)
File: packages\core\backup\backup_cli.py:75:60
Recommendation: Replace magic numbers with named constants or enums
Code context:
     72:                         "backup_id": backup_id,
     73:                         "backup_type": backup_info.backup_type.value,
     74:                         "status": backup_info.status.value,
>>>  75:                         "size_mb": backup_info.size_bytes / 1024 / 1024,
     76:                         "file_count": backup_info.file_count,
     77:                         "created_at": backup_info.created_at.isoformat(),
     78:                     }


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (23 total)
File: packages\core\backup\backup_cli.py:75:67
Recommendation: Replace magic numbers with named constants or enums
Code context:
     72:                         "backup_id": backup_id,
     73:                         "backup_type": backup_info.backup_type.value,
     74:                         "status": backup_info.status.value,
>>>  75:                         "size_mb": backup_info.size_bytes / 1024 / 1024,
     76:                         "file_count": backup_info.file_count,
     77:                         "created_at": backup_info.created_at.isoformat(),
     78:                     }


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (23 total)
File: packages\core\backup\backup_cli.py:83:61
Recommendation: Replace magic numbers with named constants or enums
Code context:
     80:             else:
     81:                 self._success(f"Backup created successfully: {backup_id}")
     82:                 self._info(f"Type: {backup_info.backup_type.value}")
>>>  83:                 self._info(f"Size: {backup_info.size_bytes / 1024 / 1024:.2f} MB")
     84:                 self._info(f"Files: {backup_info.file_count}")
     85:                 self._info(f"Status: {backup_info.status.value}")
     86:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (23 total)
File: packages\core\backup\backup_cli.py:83:68
Recommendation: Replace magic numbers with named constants or enums
Code context:
     80:             else:
     81:                 self._success(f"Backup created successfully: {backup_id}")
     82:                 self._info(f"Type: {backup_info.backup_type.value}")
>>>  83:                 self._info(f"Size: {backup_info.size_bytes / 1024 / 1024:.2f} MB")
     84:                 self._info(f"Files: {backup_info.file_count}")
     85:                 self._info(f"Status: {backup_info.status.value}")
     86:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (23 total)
File: packages\core\backup\backup_cli.py:91:86
Recommendation: Replace magic numbers with named constants or enums
Code context:
     88:             self._error(f"Backup failed: {e}")
     89:
     90:     async def list_backups(
>>>  91:         self, backup_type: str | None = None, status: str | None = None, limit: int = 20, output_format: str = "table"
     92:     ):
     93:         """List available backups."""
     94:         await self._initialize_managers()


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\backup\backup_manager.py:131:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    128:         logger.info(f"Backup manager initialized at {self.backup_root}")
    129:
    130:     def _load_or_create_encryption_key(self) -> bytes:
>>> 131:         """Load or create encryption key for backup security."""
    132:         key_file = self.backup_root / ".backup_key"
    133:
    134:         if key_file.exists():


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\backup\backup_manager.py:188:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    185:         cursor = conn.cursor()
    186:
    187:         cursor.execute(
>>> 188:             """
    189:             CREATE TABLE IF NOT EXISTS backups (
    190:                 backup_id TEXT PRIMARY KEY,
    191:                 backup_type TEXT NOT NULL,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\backup\backup_manager.py:212:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    209:         )
    210:
    211:         cursor.execute(
>>> 212:             """
    213:             CREATE TABLE IF NOT EXISTS restore_history (
    214:                 id INTEGER PRIMARY KEY AUTOINCREMENT,
    215:                 backup_id TEXT NOT NULL,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\backup\backup_manager.py:227:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    224:         )
    225:
    226:         cursor.execute(
>>> 227:             """
    228:             CREATE INDEX IF NOT EXISTS idx_backup_created
    229:             ON backups(created_at)
    230:         """


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\backup\backup_manager.py:234:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    231:         )
    232:
    233:         cursor.execute(
>>> 234:             """
    235:             CREATE INDEX IF NOT EXISTS idx_backup_type
    236:             ON backups(backup_type, status)
    237:         """


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\backup\backup_manager.py:244:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    241:         conn.close()
    242:
    243:     def _load_backup_metadata(self):
>>> 244:         """Load existing backup metadata from database."""
    245:         conn = sqlite3.connect(self.metadata_db)
    246:         cursor = conn.cursor()
    247:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\backup\backup_manager.py:248:23
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    245:         conn = sqlite3.connect(self.metadata_db)
    246:         cursor = conn.cursor()
    247:
>>> 248:         cursor.execute("SELECT * FROM backups ORDER BY created_at DESC")
    249:         rows = cursor.fetchall()
    250:
    251:         for row in rows:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\backup\backup_manager.py:283:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    280:     async def create_full_backup(
    281:         self, include_tenants: list[str] | None = None, exclude_components: list[str] | None = None
    282:     ) -> str:
>>> 283:         """Create comprehensive full system backup."""
    284:         backup_id = f"full_{datetime.utcnow().strftime('%Y%m%d_%H%M%S')}"
    285:
    286:         metadata = BackupMetadata(


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\backup\backup_manager.py:410:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    407:             raise
    408:
    409:     async def create_incremental_backup(self, base_backup_id: str | None = None) -> str:
>>> 410:         """Create incremental backup (changes since last backup)."""
    411:         backup_id = f"inc_{datetime.utcnow().strftime('%Y%m%d_%H%M%S')}"
    412:
    413:         # Find base backup


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\backup\backup_manager.py:514:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    511:             raise
    512:
    513:     async def create_tenant_backup(self, tenant_id: str, include_models: bool = True) -> str:
>>> 514:         """Create backup for specific tenant."""
    515:         backup_id = f"tenant_{tenant_id}_{datetime.utcnow().strftime('%Y%m%d_%H%M%S')}"
    516:
    517:         metadata = BackupMetadata(


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\backup\backup_manager.py:950:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    947:     # Utility methods
    948:
    949:     async def _create_compressed_archive(self, source_dir: Path, archive_path: Path):
>>> 950:         """Create compressed tar archive."""
    951:         with tarfile.open(archive_path, "w:gz", compresslevel=self.config["compression"]["level"]) as tar:
    952:             tar.add(source_dir, arcname=source_dir.name)
    953:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\backup\backup_manager.py:1014:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1011:         cursor = conn.cursor()
    1012:
    1013:         cursor.execute(
>>> 1014:             """
    1015:             INSERT OR REPLACE INTO backups
    1016:             (backup_id, backup_type, created_at, completed_at, status, size_bytes,
    1017:              checksum, encrypted, compression_ratio, tenants_included, components_included,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\backup\backup_manager.py:1046:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1043:         conn.close()
    1044:
    1045:     async def _get_backup_metadata(self, backup_id: str) -> BackupMetadata | None:
>>> 1046:         """Get backup metadata from database."""
    1047:         conn = sqlite3.connect(self.metadata_db)
    1048:         cursor = conn.cursor()
    1049:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\backup\backup_manager.py:1050:23
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1047:         conn = sqlite3.connect(self.metadata_db)
    1048:         cursor = conn.cursor()
    1049:
>>> 1050:         cursor.execute("SELECT * FROM backups WHERE backup_id = ?", (backup_id,))
    1051:         row = cursor.fetchone()
    1052:         conn.close()
    1053:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\backup\backup_manager.py:1081:23
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1078:         conn = sqlite3.connect(self.metadata_db)
    1079:         cursor = conn.cursor()
    1080:
>>> 1081:         cursor.execute("SELECT backup_id FROM backups WHERE status = 'completed' ORDER BY created_at DESC LIMIT 1")
    1082:         row = cursor.fetchone()
    1083:         conn.close()
    1084:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\backup\backup_manager.py:1163:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1160:         conn = sqlite3.connect(self.metadata_db)
    1161:         cursor = conn.cursor()
    1162:
>>> 1163:         query = "SELECT * FROM backups"
    1164:         params = []
    1165:         conditions = []
    1166:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\backup\backup_manager.py:1178:17
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1175:         if conditions:
    1176:             query += " WHERE " + " AND ".join(conditions)
    1177:
>>> 1178:         query += " ORDER BY created_at DESC LIMIT ?"
    1179:         params.append(limit)
    1180:
    1181:         cursor.execute(query, params)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\backup\backup_manager.py:1223:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1220:         # Create full backup
    1221:         print("Creating full backup...")
    1222:         backup_id = await backup_manager.create_full_backup()
>>> 1223:         print(f"Full backup created: {backup_id}")
    1224:
    1225:         # List backups
    1226:         backups = await backup_manager.list_backups()


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (44 calls)
File: packages\core\backup\backup_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (38 calls)
File: packages\core\backup\backup_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'f' methods (9 calls)
File: packages\core\backup\backup_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'json' methods (28 calls)
File: packages\core\backup\backup_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'sqlite3' methods (6 calls)
File: packages\core\backup\backup_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'conn' methods (14 calls)
File: packages\core\backup\backup_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'cursor' methods (13 calls)
File: packages\core\backup\backup_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'datetime' methods (17 calls)
File: packages\core\backup\backup_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'tasks' methods (9 calls)
File: packages\core\backup\backup_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'archive_path' methods (9 calls)
File: packages\core\backup\backup_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'shutil' methods (23 calls)
File: packages\core\backup\backup_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'warnings' methods (8 calls)
File: packages\core\backup\backup_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'dest_path' methods (8 calls)
File: packages\core\backup\backup_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (72 total)
File: packages\core\backup\backup_manager.py:143:27
Recommendation: Replace magic numbers with named constants or enums
Code context:
    140:             with open(key_file, "wb") as f:
    141:                 f.write(key)
    142:             # Restrict permissions
>>> 143:             key_file.chmod(0o600)
    144:             return key
    145:
    146:     def _load_config(self) -> dict[str, Any]:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (72 total)
File: packages\core\backup\backup_manager.py:150:37
Recommendation: Replace magic numbers with named constants or enums
Code context:
    147:         """Load backup configuration."""
    148:         default_config = {
    149:             "retention_policy": {
>>> 150:                 "full_backups_keep": 30,  # Keep 30 full backups
    151:                 "incremental_keep_days": 90,  # Keep incrementals for 90 days
    152:                 "tenant_backups_keep": 10,  # Keep 10 tenant backups per tenant
    153:             },


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (72 total)
File: packages\core\backup\backup_manager.py:151:41
Recommendation: Replace magic numbers with named constants or enums
Code context:
    148:         default_config = {
    149:             "retention_policy": {
    150:                 "full_backups_keep": 30,  # Keep 30 full backups
>>> 151:                 "incremental_keep_days": 90,  # Keep incrementals for 90 days
    152:                 "tenant_backups_keep": 10,  # Keep 10 tenant backups per tenant
    153:             },
    154:             "compression": {


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (72 total)
File: packages\core\backup\backup_manager.py:156:25
Recommendation: Replace magic numbers with named constants or enums
Code context:
    153:             },
    154:             "compression": {
    155:                 "enabled": True,
>>> 156:                 "level": 6,  # gzip compression level
    157:                 "threshold_mb": 10,  # Compress files larger than 10MB
    158:             },
    159:             "encryption": {"enabled": True, "algorithm": "AES-256", "key_rotation_days": 90},


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (72 total)
File: packages\core\backup\backup_manager.py:159:89
Recommendation: Replace magic numbers with named constants or enums
Code context:
    156:                 "level": 6,  # gzip compression level
    157:                 "threshold_mb": 10,  # Compress files larger than 10MB
    158:             },
>>> 159:             "encryption": {"enabled": True, "algorithm": "AES-256", "key_rotation_days": 90},
    160:             "scheduling": {
    161:                 "full_backup_hour": 2,  # 2 AM daily full backup
    162:                 "incremental_interval_hours": 6,  # Every 6 hours


LONG_PARAMETER_LIST: Function 'add_scheduled_job' has 11 parameters (>5)
File: packages\core\backup\backup_scheduler.py:180:4
Recommendation: Use parameter objects, data classes, or keyword-only arguments
Code context:
    177:                 interval_hours=schedules["config_backup"]["interval_hours"],
    178:             )
    179:
>>> 180:     def add_scheduled_job(
    181:         self,
    182:         job_id: str,
    183:         schedule_type: ScheduleType,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\backup\backup_scheduler.py:642:35
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    639:                     await self._delete_backup(backup.backup_id)
    640:                     logger.info(f"Deleted old backup: {backup.backup_id}")
    641:                 except Exception as e:
>>> 642:                     logger.error(f"Failed to delete backup {backup.backup_id}: {e}")
    643:
    644:     async def _delete_backup(self, backup_id: str):
    645:         """Delete backup files and metadata."""


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\backup\backup_scheduler.py:645:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    642:                     logger.error(f"Failed to delete backup {backup.backup_id}: {e}")
    643:
    644:     async def _delete_backup(self, backup_id: str):
>>> 645:         """Delete backup files and metadata."""
    646:         # Find and delete backup files
    647:         for backup_dir in [
    648:             self.backup_manager.full_backups_dir,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\backup\backup_scheduler.py:661:23
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    658:         # Remove from database
    659:         conn = sqlite3.connect(self.backup_manager.metadata_db)
    660:         cursor = conn.cursor()
>>> 661:         cursor.execute("DELETE FROM backups WHERE backup_id = ?", (backup_id,))
    662:         conn.commit()
    663:         conn.close()
    664:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\backup\backup_scheduler.py:740:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    737:
    738:
    739: async def create_backup_scheduler(backup_manager: BackupManager, restore_manager: RestoreManager) -> BackupScheduler:
>>> 740:     """Create and configure backup scheduler."""
    741:     scheduler = BackupScheduler(backup_manager, restore_manager)
    742:
    743:     logger.info("Backup scheduler created")


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\backup\backup_scheduler.py:743:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    740:     """Create and configure backup scheduler."""
    741:     scheduler = BackupScheduler(backup_manager, restore_manager)
    742:
>>> 743:     logger.info("Backup scheduler created")
    744:     return scheduler
    745:
    746:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (21 calls)
File: packages\core\backup\backup_scheduler.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (28 calls)
File: packages\core\backup\backup_scheduler.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'datetime' methods (14 calls)
File: packages\core\backup\backup_scheduler.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'asyncio' methods (14 calls)
File: packages\core\backup\backup_scheduler.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

SEQUENTIAL_COUPLING: Sequential coupling detected: Function '__init__' is part of a sequence-dependent API
File: packages\core\backup\backup_scheduler.py:72:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
     69: class BackupScheduler:
     70:     """Automated backup scheduler with health monitoring."""
     71:
>>>  72:     def __init__(self, backup_manager: BackupManager, restore_manager: RestoreManager):
     73:         """Initialize backup scheduler."""
     74:         self.backup_manager = backup_manager
     75:         self.restore_manager = restore_manager


SEQUENTIAL_COUPLING: Sequential coupling detected: Function '_initialize_default_schedules' is part of a sequence-dependent API
File: packages\core\backup\backup_scheduler.py:138:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    135:
    136:         return default_config
    137:
>>> 138:     def _initialize_default_schedules(self):
    139:         """Initialize default scheduled jobs."""
    140:         schedules = self.scheduler_config["default_schedules"]
    141:


SEQUENTIAL_COUPLING: Sequential coupling detected: Function '_calculate_next_run' is part of a sequence-dependent API
File: packages\core\backup\backup_scheduler.py:252:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    249:
    250:         return False
    251:
>>> 252:     def _calculate_next_run(self, job: ScheduledJob):
    253:         """Calculate next run time for job."""
    254:         if not job.enabled:
    255:             job.next_run = None


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (45 total)
File: packages\core\backup\backup_scheduler.py:101:112
Recommendation: Replace magic numbers with named constants or enums
Code context:
     98:
     99:         default_config = {
    100:             "default_schedules": {
>>> 101:                 "full_backup": {"enabled": True, "schedule": "daily", "hour": 2, "minute": 0, "retention_days": 30},
    102:                 "incremental_backup": {"enabled": True, "schedule": "hourly", "interval_hours": 6, "retention_days": 7},
    103:                 "tenant_backup": {
    104:                     "enabled": True,


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (45 total)
File: packages\core\backup\backup_scheduler.py:102:96
Recommendation: Replace magic numbers with named constants or enums
Code context:
     99:         default_config = {
    100:             "default_schedules": {
    101:                 "full_backup": {"enabled": True, "schedule": "daily", "hour": 2, "minute": 0, "retention_days": 30},
>>> 102:                 "incremental_backup": {"enabled": True, "schedule": "hourly", "interval_hours": 6, "retention_days": 7},
    103:                 "tenant_backup": {
    104:                     "enabled": True,
    105:                     "schedule": "daily",


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (45 total)
File: packages\core\backup\backup_scheduler.py:102:117
Recommendation: Replace magic numbers with named constants or enums
Code context:
     99:         default_config = {
    100:             "default_schedules": {
    101:                 "full_backup": {"enabled": True, "schedule": "daily", "hour": 2, "minute": 0, "retention_days": 30},
>>> 102:                 "incremental_backup": {"enabled": True, "schedule": "hourly", "interval_hours": 6, "retention_days": 7},
    103:                 "tenant_backup": {
    104:                     "enabled": True,
    105:                     "schedule": "daily",


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (45 total)
File: packages\core\backup\backup_scheduler.py:106:28
Recommendation: Replace magic numbers with named constants or enums
Code context:
    103:                 "tenant_backup": {
    104:                     "enabled": True,
    105:                     "schedule": "daily",
>>> 106:                     "hour": 3,
    107:                     "minute": 30,
    108:                     "retention_per_tenant": 10,
    109:                 },


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (45 total)
File: packages\core\backup\backup_scheduler.py:107:30
Recommendation: Replace magic numbers with named constants or enums
Code context:
    104:                     "enabled": True,
    105:                     "schedule": "daily",
    106:                     "hour": 3,
>>> 107:                     "minute": 30,
    108:                     "retention_per_tenant": 10,
    109:                 },
    110:                 "config_backup": {"enabled": True, "schedule": "hourly", "interval_hours": 4, "retention_days": 14},


HARDCODED_PATH: Hardcoded path or URL detected
File: packages\core\backup\constants.py:31:33
Recommendation: Use configuration files, environment variables, or path utilities
Code context:
     28: BACKUP_LOG_FILENAME: Final[str] = "backup.log"
     29:
     30: # Directory structure
>>>  31: DEFAULT_BACKUP_DIR: Final[str] = "/var/backups/aivillage"
     32: TEMP_BACKUP_DIR: Final[str] = "/tmp/aivillage_backup"
     33: RESTORE_TEMP_DIR: Final[str] = "/tmp/aivillage_restore"
     34: QUARANTINE_DIR: Final[str] = "/var/quarantine/aivillage"


HARDCODED_PATH: Hardcoded path or URL detected
File: packages\core\backup\constants.py:34:29
Recommendation: Use configuration files, environment variables, or path utilities
Code context:
     31: DEFAULT_BACKUP_DIR: Final[str] = "/var/backups/aivillage"
     32: TEMP_BACKUP_DIR: Final[str] = "/tmp/aivillage_backup"
     33: RESTORE_TEMP_DIR: Final[str] = "/tmp/aivillage_restore"
>>>  34: QUARANTINE_DIR: Final[str] = "/var/quarantine/aivillage"
     35:
     36: # Database backup
     37: DB_BACKUP_TIMEOUT_SECONDS: Final[int] = 300


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\backup\constants.py:148:34
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    145:     BACKUP_STARTED: Final[str] = "Backup operation started for {backup_type}"
    146:     BACKUP_COMPLETED: Final[str] = "Backup completed successfully: {backup_file}"
    147:     BACKUP_FAILED: Final[str] = "Backup operation failed: {error}"
>>> 148:     RESTORE_STARTED: Final[str] = "Restore operation started from {backup_file}"
    149:     RESTORE_COMPLETED: Final[str] = "Restore completed successfully"
    150:     RESTORE_FAILED: Final[str] = "Restore operation failed: {error}"
    151:     VERIFICATION_PASSED: Final[str] = "Backup verification passed"


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (29 total)
File: packages\core\backup\constants.py:11:51
Recommendation: Replace magic numbers with named constants or enums
Code context:
      8: from typing import Final
      9:
     10: # Backup timing and scheduling
>>>  11: BACKUP_STATUS_CHECK_INTERVAL_SECONDS: Final[int] = 5
     12: BACKUP_CLEANUP_INTERVAL_HOURS: Final[int] = 24
     13: BACKUP_RETENTION_DAYS: Final[int] = 30
     14: INCREMENTAL_BACKUP_INTERVAL_HOURS: Final[int] = 6


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (29 total)
File: packages\core\backup\constants.py:12:44
Recommendation: Replace magic numbers with named constants or enums
Code context:
      9:
     10: # Backup timing and scheduling
     11: BACKUP_STATUS_CHECK_INTERVAL_SECONDS: Final[int] = 5
>>>  12: BACKUP_CLEANUP_INTERVAL_HOURS: Final[int] = 24
     13: BACKUP_RETENTION_DAYS: Final[int] = 30
     14: INCREMENTAL_BACKUP_INTERVAL_HOURS: Final[int] = 6
     15: FULL_BACKUP_INTERVAL_DAYS: Final[int] = 7


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (29 total)
File: packages\core\backup\constants.py:13:36
Recommendation: Replace magic numbers with named constants or enums
Code context:
     10: # Backup timing and scheduling
     11: BACKUP_STATUS_CHECK_INTERVAL_SECONDS: Final[int] = 5
     12: BACKUP_CLEANUP_INTERVAL_HOURS: Final[int] = 24
>>>  13: BACKUP_RETENTION_DAYS: Final[int] = 30
     14: INCREMENTAL_BACKUP_INTERVAL_HOURS: Final[int] = 6
     15: FULL_BACKUP_INTERVAL_DAYS: Final[int] = 7
     16:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (29 total)
File: packages\core\backup\constants.py:14:48
Recommendation: Replace magic numbers with named constants or enums
Code context:
     11: BACKUP_STATUS_CHECK_INTERVAL_SECONDS: Final[int] = 5
     12: BACKUP_CLEANUP_INTERVAL_HOURS: Final[int] = 24
     13: BACKUP_RETENTION_DAYS: Final[int] = 30
>>>  14: INCREMENTAL_BACKUP_INTERVAL_HOURS: Final[int] = 6
     15: FULL_BACKUP_INTERVAL_DAYS: Final[int] = 7
     16:
     17: # File size and compression


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (29 total)
File: packages\core\backup\constants.py:15:40
Recommendation: Replace magic numbers with named constants or enums
Code context:
     12: BACKUP_CLEANUP_INTERVAL_HOURS: Final[int] = 24
     13: BACKUP_RETENTION_DAYS: Final[int] = 30
     14: INCREMENTAL_BACKUP_INTERVAL_HOURS: Final[int] = 6
>>>  15: FULL_BACKUP_INTERVAL_DAYS: Final[int] = 7
     16:
     17: # File size and compression
     18: MAX_BACKUP_SIZE_GB: Final[int] = 100


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\backup\restore_manager.py:125:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    122:         cursor = conn.cursor()
    123:
    124:         cursor.execute(
>>> 125:             """
    126:             CREATE TABLE IF NOT EXISTS restores (
    127:                 restore_id TEXT PRIMARY KEY,
    128:                 backup_id TEXT NOT NULL,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\backup\restore_manager.py:150:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    147:         )
    148:
    149:         cursor.execute(
>>> 150:             """
    151:             CREATE INDEX IF NOT EXISTS idx_restore_created
    152:             ON restores(created_at)
    153:         """


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\backup\restore_manager.py:157:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    154:         )
    155:
    156:         cursor.execute(
>>> 157:             """
    158:             CREATE INDEX IF NOT EXISTS idx_restore_backup
    159:             ON restores(backup_id)
    160:         """


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\backup\restore_manager.py:171:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    168:     async def restore_full_system(
    169:         self, backup_id: str, strategy: RestoreStrategy = RestoreStrategy.REPLACE, create_rollback: bool = True
    170:     ) -> str:
>>> 171:         """Restore complete system from backup."""
    172:         restore_id = f"full_{datetime.utcnow().strftime('%Y%m%d_%H%M%S')}"
    173:
    174:         # Validate backup


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\backup\restore_manager.py:311:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    308:     async def restore_tenant(
    309:         self, backup_id: str, tenant_id: str, strategy: RestoreStrategy = RestoreStrategy.REPLACE
    310:     ) -> str:
>>> 311:         """Restore specific tenant from backup."""
    312:         restore_id = f"tenant_{tenant_id}_{datetime.utcnow().strftime('%Y%m%d_%H%M%S')}"
    313:
    314:         # Validate backup contains tenant


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\backup\restore_manager.py:389:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    386:     async def restore_component(
    387:         self, backup_id: str, component: str, strategy: RestoreStrategy = RestoreStrategy.REPLACE
    388:     ) -> str:
>>> 389:         """Restore specific component from backup."""
    390:         restore_id = f"comp_{component}_{datetime.utcnow().strftime('%Y%m%d_%H%M%S')}"
    391:
    392:         # Validate backup contains component


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\backup\restore_manager.py:986:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    983:             raise
    984:
    985:     async def _create_rollback_point(self, metadata: RestoreMetadata):
>>> 986:         """Create rollback point before restore."""
    987:         logger.info("Creating rollback point")
    988:
    989:         try:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\backup\restore_manager.py:1023:26
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1020:             metadata.rollback_point_created = True
    1021:             metadata.rollback_data_path = rollback_path
    1022:
>>> 1023:             logger.info(f"Rollback point created at {rollback_path}")
    1024:
    1025:         except Exception as e:
    1026:             logger.warning(f"Failed to create rollback point: {e}")


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\backup\restore_manager.py:1026:29
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1023:             logger.info(f"Rollback point created at {rollback_path}")
    1024:
    1025:         except Exception as e:
>>> 1026:             logger.warning(f"Failed to create rollback point: {e}")
    1027:             metadata.rollback_point_created = False
    1028:
    1029:     async def _rollback_restore(self, metadata: RestoreMetadata):


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\backup\restore_manager.py:1141:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1138:         cursor = conn.cursor()
    1139:
    1140:         cursor.execute(
>>> 1141:             """
    1142:             INSERT OR REPLACE INTO restores
    1143:             (restore_id, backup_id, restore_type, strategy, created_at, completed_at,
    1144:              status, components_to_restore, tenants_to_restore, rollback_point_created,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\backup\restore_manager.py:1181:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1178:         conn = sqlite3.connect(self.restore_db)
    1179:         cursor = conn.cursor()
    1180:
>>> 1181:         query = "SELECT * FROM restores"
    1182:         params = []
    1183:
    1184:         if status:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\backup\restore_manager.py:1188:17
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1185:             query += " WHERE status = ?"
    1186:             params.append(status.value)
    1187:
>>> 1188:         query += " ORDER BY created_at DESC LIMIT ?"
    1189:         params.append(limit)
    1190:
    1191:         cursor.execute(query, params)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\backup\restore_manager.py:1231:23
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1228:         conn = sqlite3.connect(self.restore_db)
    1229:         cursor = conn.cursor()
    1230:
>>> 1231:         cursor.execute("SELECT * FROM restores WHERE restore_id = ?", (restore_id,))
    1232:         row = cursor.fetchone()
    1233:         conn.close()
    1234:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (41 calls)
File: packages\core\backup\restore_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (40 calls)
File: packages\core\backup\restore_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'conn' methods (10 calls)
File: packages\core\backup\restore_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'cursor' methods (8 calls)
File: packages\core\backup\restore_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'datetime' methods (13 calls)
File: packages\core\backup\restore_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'restore_tasks' methods (8 calls)
File: packages\core\backup\restore_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'result' methods (9 calls)
File: packages\core\backup\restore_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'shutil' methods (48 calls)
File: packages\core\backup\restore_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'rbac_db_dest' methods (6 calls)
File: packages\core\backup\restore_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'warnings' methods (7 calls)
File: packages\core\backup\restore_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'tenant_db_dest' methods (6 calls)
File: packages\core\backup\restore_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'tenant_dir' methods (10 calls)
File: packages\core\backup\restore_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'dest_path' methods (11 calls)
File: packages\core\backup\restore_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'item' methods (16 calls)
File: packages\core\backup\restore_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'json' methods (18 calls)
File: packages\core\backup\restore_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (43 total)
File: packages\core\backup\restore_manager.py:1176:84
Recommendation: Replace magic numbers with named constants or enums
Code context:
    1173:
    1174:     # Public query methods
    1175:
>>> 1176:     async def list_restores(self, status: RestoreStatus | None = None, limit: int = 50) -> list[RestoreMetadata]:
    1177:         """List restore operations."""
    1178:         conn = sqlite3.connect(self.restore_db)
    1179:         cursor = conn.cursor()


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (43 total)
File: packages\core\backup\restore_manager.py:1201:45
Recommendation: Replace magic numbers with named constants or enums
Code context:
    1198:                 restore_id=row[0],
    1199:                 backup_id=row[1],
    1200:                 restore_type=RestoreType(row[2]),
>>> 1201:                 strategy=RestoreStrategy(row[3]),
    1202:                 created_at=datetime.fromisoformat(row[4]),
    1203:                 completed_at=datetime.fromisoformat(row[5]) if row[5] else None,
    1204:                 status=RestoreStatus(row[6]),


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (43 total)
File: packages\core\backup\restore_manager.py:1202:54
Recommendation: Replace magic numbers with named constants or enums
Code context:
    1199:                 backup_id=row[1],
    1200:                 restore_type=RestoreType(row[2]),
    1201:                 strategy=RestoreStrategy(row[3]),
>>> 1202:                 created_at=datetime.fromisoformat(row[4]),
    1203:                 completed_at=datetime.fromisoformat(row[5]) if row[5] else None,
    1204:                 status=RestoreStatus(row[6]),
    1205:                 components_to_restore=json.loads(row[7]) if row[7] else [],


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (43 total)
File: packages\core\backup\restore_manager.py:1203:67
Recommendation: Replace magic numbers with named constants or enums
Code context:
    1200:                 restore_type=RestoreType(row[2]),
    1201:                 strategy=RestoreStrategy(row[3]),
    1202:                 created_at=datetime.fromisoformat(row[4]),
>>> 1203:                 completed_at=datetime.fromisoformat(row[5]) if row[5] else None,
    1204:                 status=RestoreStatus(row[6]),
    1205:                 components_to_restore=json.loads(row[7]) if row[7] else [],
    1206:                 tenants_to_restore=json.loads(row[8]) if row[8] else [],


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (43 total)
File: packages\core\backup\restore_manager.py:1203:56
Recommendation: Replace magic numbers with named constants or enums
Code context:
    1200:                 restore_type=RestoreType(row[2]),
    1201:                 strategy=RestoreStrategy(row[3]),
    1202:                 created_at=datetime.fromisoformat(row[4]),
>>> 1203:                 completed_at=datetime.fromisoformat(row[5]) if row[5] else None,
    1204:                 status=RestoreStatus(row[6]),
    1205:                 components_to_restore=json.loads(row[7]) if row[7] else [],
    1206:                 tenants_to_restore=json.loads(row[8]) if row[8] else [],


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'nn' methods (28 calls)
File: packages\core\benchmarks\benchmark_compression.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (29 total)
File: packages\core\benchmarks\benchmark_compression.py:27:22
Recommendation: Replace magic numbers with named constants or enums
Code context:
     24: def create_test_models():
     25:     models = {
     26:         "tiny": nn.Sequential(
>>>  27:             nn.Linear(128, 64),
     28:             nn.ReLU(),
     29:             nn.Linear(64, 10),
     30:         ),


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (29 total)
File: packages\core\benchmarks\benchmark_compression.py:27:27
Recommendation: Replace magic numbers with named constants or enums
Code context:
     24: def create_test_models():
     25:     models = {
     26:         "tiny": nn.Sequential(
>>>  27:             nn.Linear(128, 64),
     28:             nn.ReLU(),
     29:             nn.Linear(64, 10),
     30:         ),


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (29 total)
File: packages\core\benchmarks\benchmark_compression.py:29:22
Recommendation: Replace magic numbers with named constants or enums
Code context:
     26:         "tiny": nn.Sequential(
     27:             nn.Linear(128, 64),
     28:             nn.ReLU(),
>>>  29:             nn.Linear(64, 10),
     30:         ),
     31:         "small": nn.Sequential(
     32:             nn.Linear(784, 256),


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (29 total)
File: packages\core\benchmarks\benchmark_compression.py:32:22
Recommendation: Replace magic numbers with named constants or enums
Code context:
     29:             nn.Linear(64, 10),
     30:         ),
     31:         "small": nn.Sequential(
>>>  32:             nn.Linear(784, 256),
     33:             nn.ReLU(),
     34:             nn.Linear(256, 128),
     35:             nn.ReLU(),


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (29 total)
File: packages\core\benchmarks\benchmark_compression.py:32:27
Recommendation: Replace magic numbers with named constants or enums
Code context:
     29:             nn.Linear(64, 10),
     30:         ),
     31:         "small": nn.Sequential(
>>>  32:             nn.Linear(784, 256),
     33:             nn.ReLU(),
     34:             nn.Linear(256, 128),
     35:             nn.ReLU(),


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\benchmarks\benchmark_unified_compression.py:80:28
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     77:                 print(f"    Time: {elapsed:.2f}s")
     78:                 print(f"    Memory used: {mem_used:.1f}MB")
     79:                 if "Unified" in comp_name:
>>>  80:                     print(f"    Method selected: {result['method']}")
     81:                 results.append(
     82:                     {
     83:                         "model": model_name,


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'nn' methods (11 calls)
File: packages\core\benchmarks\benchmark_unified_compression.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (30 total)
File: packages\core\benchmarks\benchmark_unified_compression.py:24:22
Recommendation: Replace magic numbers with named constants or enums
Code context:
     21:         "tiny": nn.Linear(100, 100),
     22:         "small": nn.Sequential(nn.Linear(1000, 1000), nn.ReLU(), nn.Linear(1000, 1000)),
     23:         "medium": nn.Sequential(
>>>  24:             nn.Linear(2048, 2048),
     25:             nn.ReLU(),
     26:             nn.Linear(2048, 2048),
     27:             nn.ReLU(),


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (30 total)
File: packages\core\benchmarks\benchmark_unified_compression.py:24:28
Recommendation: Replace magic numbers with named constants or enums
Code context:
     21:         "tiny": nn.Linear(100, 100),
     22:         "small": nn.Sequential(nn.Linear(1000, 1000), nn.ReLU(), nn.Linear(1000, 1000)),
     23:         "medium": nn.Sequential(
>>>  24:             nn.Linear(2048, 2048),
     25:             nn.ReLU(),
     26:             nn.Linear(2048, 2048),
     27:             nn.ReLU(),


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (30 total)
File: packages\core\benchmarks\benchmark_unified_compression.py:26:22
Recommendation: Replace magic numbers with named constants or enums
Code context:
     23:         "medium": nn.Sequential(
     24:             nn.Linear(2048, 2048),
     25:             nn.ReLU(),
>>>  26:             nn.Linear(2048, 2048),
     27:             nn.ReLU(),
     28:             nn.Linear(2048, 2048),
     29:         ),


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (30 total)
File: packages\core\benchmarks\benchmark_unified_compression.py:26:28
Recommendation: Replace magic numbers with named constants or enums
Code context:
     23:         "medium": nn.Sequential(
     24:             nn.Linear(2048, 2048),
     25:             nn.ReLU(),
>>>  26:             nn.Linear(2048, 2048),
     27:             nn.ReLU(),
     28:             nn.Linear(2048, 2048),
     29:         ),


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (30 total)
File: packages\core\benchmarks\benchmark_unified_compression.py:28:22
Recommendation: Replace magic numbers with named constants or enums
Code context:
     25:             nn.ReLU(),
     26:             nn.Linear(2048, 2048),
     27:             nn.ReLU(),
>>>  28:             nn.Linear(2048, 2048),
     29:         ),
     30:     }
     31:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\benchmarks\hyperag_creativity.py:2:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
      1: #!/usr/bin/env python3
>>>   2: """HypeRAG Creativity Benchmark Suite.
      3:
      4: Measures novelty and plausibility of creative connections generated by the HypeRAG system.
      5:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\benchmarks\hyperag_creativity.py:83:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     80:         self.cross_domain_pairs = self._create_cross_domain_pairs()
     81:
     82:     def _create_remote_association_tasks(self) -> list[RemoteAssociationTask]:
>>>  83:         """Create remote association challenge tasks."""
     84:         tasks = [
     85:             # Easy tasks
     86:             RemoteAssociationTask("rat_001", ["cottage", "swiss", "cake"], "cheese", "food", "easy"),


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\benchmarks\hyperag_creativity.py:107:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    104:         return tasks
    105:
    106:     def _create_cross_domain_pairs(self) -> list[CrossDomainPair]:
>>> 107:         """Create cross-domain concept connection tasks."""
    108:         pairs = [
    109:             # Biology ↔ Finance
    110:             CrossDomainPair(


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\benchmarks\hyperag_creativity.py:262:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    259:         self.user_scores = {}
    260:
    261:     def load_user_evaluation_scores(self, scores_path: Path) -> None:
>>> 262:         """Load manual user evaluation scores from JSON file."""
    263:         try:
    264:             with open(scores_path) as f:
    265:                 self.user_scores = json.load(f)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\benchmarks\hyperag_creativity.py:590:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    587:         return creativity_metrics
    588:
    589:     def _combine_results(self, rat_results: dict, cd_results: dict) -> dict[str, float]:
>>> 590:         """Combine results from both evaluation types."""
    591:         rat_metrics = rat_results["summary_metrics"]
    592:         cd_metrics = cd_results["summary_metrics"]
    593:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\benchmarks\hyperag_creativity.py:648:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    645:
    646:
    647: def create_sample_user_scores():
>>> 648:     """Create a sample user evaluation scores file."""
    649:     sample_scores = {}
    650:
    651:     # Generate sample scores for common bridge IDs


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (15 calls)
File: packages\core\benchmarks\hyperag_creativity.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (13 calls)
File: packages\core\benchmarks\hyperag_creativity.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (29 total)
File: packages\core\benchmarks\hyperag_creativity.py:368:45
Recommendation: Replace magic numbers with named constants or enums
Code context:
    365:         for i, cue_word in enumerate(task.cue_words):
    366:             bridge = CreativeBridge(
    367:                 id=f"{task.task_id}_bridge_{i}",
>>> 368:                 confidence=np.random.uniform(0.4, 0.9),
    369:                 bridge_type="semantic_association",
    370:                 source_nodes=[cue_word],
    371:                 target_nodes=[task.target_word],


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (29 total)
File: packages\core\benchmarks\hyperag_creativity.py:368:50
Recommendation: Replace magic numbers with named constants or enums
Code context:
    365:         for i, cue_word in enumerate(task.cue_words):
    366:             bridge = CreativeBridge(
    367:                 id=f"{task.task_id}_bridge_{i}",
>>> 368:                 confidence=np.random.uniform(0.4, 0.9),
    369:                 bridge_type="semantic_association",
    370:                 source_nodes=[cue_word],
    371:                 target_nodes=[task.target_word],


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (29 total)
File: packages\core\benchmarks\hyperag_creativity.py:379:45
Recommendation: Replace magic numbers with named constants or enums
Code context:
    376:         for i in range(2):  # Generate 2 additional creative bridges
    377:             bridge = CreativeBridge(
    378:                 id=f"{task.task_id}_creative_{i}",
>>> 379:                 confidence=np.random.uniform(0.3, 0.8),
    380:                 bridge_type="creative_leap",
    381:                 source_nodes=task.cue_words,
    382:                 target_nodes=[task.target_word, f"creative_concept_{i}"],


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (29 total)
File: packages\core\benchmarks\hyperag_creativity.py:379:50
Recommendation: Replace magic numbers with named constants or enums
Code context:
    376:         for i in range(2):  # Generate 2 additional creative bridges
    377:             bridge = CreativeBridge(
    378:                 id=f"{task.task_id}_creative_{i}",
>>> 379:                 confidence=np.random.uniform(0.3, 0.8),
    380:                 bridge_type="creative_leap",
    381:                 source_nodes=task.cue_words,
    382:                 target_nodes=[task.target_word, f"creative_concept_{i}"],


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (29 total)
File: packages\core\benchmarks\hyperag_creativity.py:393:66
Recommendation: Replace magic numbers with named constants or enums
Code context:
    390:         bridges = []
    391:
    392:         # Generate bridges based on expected connections
>>> 393:         for i, connection in enumerate(pair.expected_connections[:3]):  # Top 3 expected
    394:             bridge = CreativeBridge(
    395:                 id=f"{pair.pair_id}_bridge_{i}",
    396:                 confidence=np.random.uniform(0.5, 0.9),


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\benchmarks\hyperag_personalization.py:88:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     85:         self.doc_click_queries = self._create_doc_click_queries()
     86:
     87:     def _create_movielens_queries(self) -> list[UserQuery]:
>>>  88:         """Create MovieLens-style queries."""
     89:         queries = []
     90:
     91:         # User 1: Action movie enthusiast


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\benchmarks\hyperag_personalization.py:184:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    181:         return queries
    182:
    183:     def _create_doc_click_queries(self) -> list[UserQuery]:
>>> 184:         """Create document click-based queries."""
    185:         queries = []
    186:
    187:         # User 1: Machine Learning researcher


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (13 calls)
File: packages\core\benchmarks\hyperag_personalization.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'queries' methods (10 calls)
File: packages\core\benchmarks\hyperag_personalization.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'results' methods (10 calls)
File: packages\core\benchmarks\hyperag_personalization.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'datetime' methods (9 calls)
File: packages\core\benchmarks\hyperag_personalization.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (8 calls)
File: packages\core\benchmarks\hyperag_personalization.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (140 total)
File: packages\core\benchmarks\hyperag_personalization.py:99:33
Recommendation: Replace magic numbers with named constants or enums
Code context:
     96:                 query_text="exciting action movies with great special effects",
     97:                 relevant_items=["movie_001", "movie_005", "movie_012", "movie_018"],
     98:                 relevance_scores={
>>>  99:                     "movie_001": 0.95,  # Top Gun: Maverick
    100:                     "movie_005": 0.88,  # John Wick 4
    101:                     "movie_012": 0.82,  # Fast X
    102:                     "movie_018": 0.79,  # Mission Impossible


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (140 total)
File: packages\core\benchmarks\hyperag_personalization.py:100:33
Recommendation: Replace magic numbers with named constants or enums
Code context:
     97:                 relevant_items=["movie_001", "movie_005", "movie_012", "movie_018"],
     98:                 relevance_scores={
     99:                     "movie_001": 0.95,  # Top Gun: Maverick
>>> 100:                     "movie_005": 0.88,  # John Wick 4
    101:                     "movie_012": 0.82,  # Fast X
    102:                     "movie_018": 0.79,  # Mission Impossible
    103:                     "movie_023": 0.65,  # Marvel movie


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (140 total)
File: packages\core\benchmarks\hyperag_personalization.py:101:33
Recommendation: Replace magic numbers with named constants or enums
Code context:
     98:                 relevance_scores={
     99:                     "movie_001": 0.95,  # Top Gun: Maverick
    100:                     "movie_005": 0.88,  # John Wick 4
>>> 101:                     "movie_012": 0.82,  # Fast X
    102:                     "movie_018": 0.79,  # Mission Impossible
    103:                     "movie_023": 0.65,  # Marvel movie
    104:                 },


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (140 total)
File: packages\core\benchmarks\hyperag_personalization.py:102:33
Recommendation: Replace magic numbers with named constants or enums
Code context:
     99:                     "movie_001": 0.95,  # Top Gun: Maverick
    100:                     "movie_005": 0.88,  # John Wick 4
    101:                     "movie_012": 0.82,  # Fast X
>>> 102:                     "movie_018": 0.79,  # Mission Impossible
    103:                     "movie_023": 0.65,  # Marvel movie
    104:                 },
    105:                 domain="movies",


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (140 total)
File: packages\core\benchmarks\hyperag_personalization.py:103:33
Recommendation: Replace magic numbers with named constants or enums
Code context:
    100:                     "movie_005": 0.88,  # John Wick 4
    101:                     "movie_012": 0.82,  # Fast X
    102:                     "movie_018": 0.79,  # Mission Impossible
>>> 103:                     "movie_023": 0.65,  # Marvel movie
    104:                 },
    105:                 domain="movies",
    106:             )


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\benchmarks\hyperag_repair_test_suite.py:2:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
      1: #!/usr/bin/env python3
>>>   2: """HypeRAG Graph Repair Test Suite.
      3:
      4: Injects controlled violations into test knowledge graphs and measures the repair pipeline's ability to:
      5: - Detect violations (Detection Recall)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\benchmarks\hyperag_repair_test_suite.py:97:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     94:         self.violation_templates = self._create_violation_templates()
     95:
     96:     def _create_violation_templates(self) -> dict[str, dict]:
>>>  97:         """Create templates for different violation types."""
     98:         return {
     99:             "allergy_conflict": {
    100:                 "description": "Patient prescribed drug they are allergic to",


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\benchmarks\hyperag_repair_test_suite.py:118:31
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    115:                 "repair_operations": ["update_property"],
    116:             },
    117:             "missing_critical_property": {
>>> 118:                 "description": "Critical property missing from entity",
    119:                 "severity": "medium",
    120:                 "detection_expected": True,
    121:                 "repair_operations": ["add_property", "update_property"],


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\benchmarks\hyperag_repair_test_suite.py:146:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    143:     def create_medical_test_graph(
    144:         self,
    145:     ) -> tuple[list[TestGraphNode], list[TestGraphEdge]]:
>>> 146:         """Create a medical domain test graph."""
    147:         nodes = [
    148:             # Patients
    149:             TestGraphNode("P001", "Patient", {"name": "John Doe", "age": 45, "gender": "M"}),


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (9 calls)
File: packages\core\benchmarks\hyperag_repair_test_suite.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'edges' methods (6 calls)
File: packages\core\benchmarks\hyperag_repair_test_suite.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'datetime' methods (8 calls)
File: packages\core\benchmarks\hyperag_repair_test_suite.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (8 calls)
File: packages\core\benchmarks\hyperag_repair_test_suite.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'proposal' methods (6 calls)
File: packages\core\benchmarks\hyperag_repair_test_suite.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (23 total)
File: packages\core\benchmarks\hyperag_repair_test_suite.py:149:73
Recommendation: Replace magic numbers with named constants or enums
Code context:
    146:         """Create a medical domain test graph."""
    147:         nodes = [
    148:             # Patients
>>> 149:             TestGraphNode("P001", "Patient", {"name": "John Doe", "age": 45, "gender": "M"}),
    150:             TestGraphNode("P002", "Patient", {"name": "Jane Smith", "age": 32, "gender": "F"}),
    151:             TestGraphNode("P003", "Patient", {"name": "Bob Johnson", "age": 67, "gender": "M"}),
    152:             # Drugs


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (23 total)
File: packages\core\benchmarks\hyperag_repair_test_suite.py:150:75
Recommendation: Replace magic numbers with named constants or enums
Code context:
    147:         nodes = [
    148:             # Patients
    149:             TestGraphNode("P001", "Patient", {"name": "John Doe", "age": 45, "gender": "M"}),
>>> 150:             TestGraphNode("P002", "Patient", {"name": "Jane Smith", "age": 32, "gender": "F"}),
    151:             TestGraphNode("P003", "Patient", {"name": "Bob Johnson", "age": 67, "gender": "M"}),
    152:             # Drugs
    153:             TestGraphNode("D001", "Drug", {"name": "Aspirin", "class": "NSAID"}),


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (23 total)
File: packages\core\benchmarks\hyperag_repair_test_suite.py:151:76
Recommendation: Replace magic numbers with named constants or enums
Code context:
    148:             # Patients
    149:             TestGraphNode("P001", "Patient", {"name": "John Doe", "age": 45, "gender": "M"}),
    150:             TestGraphNode("P002", "Patient", {"name": "Jane Smith", "age": 32, "gender": "F"}),
>>> 151:             TestGraphNode("P003", "Patient", {"name": "Bob Johnson", "age": 67, "gender": "M"}),
    152:             # Drugs
    153:             TestGraphNode("D001", "Drug", {"name": "Aspirin", "class": "NSAID"}),
    154:             TestGraphNode("D002", "Drug", {"name": "Penicillin", "class": "Antibiotic"}),


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (23 total)
File: packages\core\benchmarks\hyperag_repair_test_suite.py:195:54
Recommendation: Replace magic numbers with named constants or enums
Code context:
    192:
    193:     def inject_allergy_conflict(self, nodes: list[TestGraphNode], edges: list[TestGraphEdge]) -> InjectedViolation:
    194:         """Inject an allergy conflict violation."""
>>> 195:         violation_id = f"violation_{uuid.uuid4().hex[:8]}"
    196:
    197:         # Find a patient with an allergy
    198:         allergic_patient = None


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (23 total)
File: packages\core\benchmarks\hyperag_repair_test_suite.py:268:54
Recommendation: Replace magic numbers with named constants or enums
Code context:
    265:
    266:     def inject_duplicate_identity(self, nodes: list[TestGraphNode], edges: list[TestGraphEdge]) -> InjectedViolation:
    267:         """Inject a duplicate identity violation."""
>>> 268:         violation_id = f"violation_{uuid.uuid4().hex[:8]}"
    269:
    270:         # Create a duplicate of an existing patient
    271:         original_patient = nodes[0]  # Take first patient


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'writer' methods (7 calls)
File: packages\core\benchmarks\p2p_network_benchmark.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'time' methods (12 calls)
File: packages\core\benchmarks\production_benchmark_suite.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (19 calls)
File: packages\core\benchmarks\production_benchmark_suite.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'monitor' methods (10 calls)
File: packages\core\benchmarks\production_benchmark_suite.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

SEQUENTIAL_COUPLING: Sequential coupling detected: Function '__init__' is part of a sequence-dependent API
File: packages\core\benchmarks\production_benchmark_suite.py:303:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    300: class ProductionBenchmarkSuite:
    301:     """Main benchmark suite orchestrator."""
    302:
>>> 303:     def __init__(self) -> None:
    304:         self.results = {}
    305:         self.timestamp = datetime.now().isoformat()
    306:


SEQUENTIAL_COUPLING: Sequential coupling detected: Function 'run_compression_test' is part of a sequence-dependent API
File: packages\core\benchmarks\production_benchmark_suite.py:84:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
     81:     def __init__(self) -> None:
     82:         self.results = {}
     83:
>>>  84:     def run_compression_test(self) -> dict[str, Any]:
     85:         """Test compression pipeline with sample model."""
     86:         logger.info("Starting compression pipeline benchmark...")
     87:         monitor = PerformanceMonitor()


SEQUENTIAL_COUPLING: Sequential coupling detected: Function 'run_evolution_test' is part of a sequence-dependent API
File: packages\core\benchmarks\production_benchmark_suite.py:157:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    154:     def __init__(self) -> None:
    155:         self.results = {}
    156:
>>> 157:     def run_evolution_test(self) -> dict[str, Any]:
    158:         """Test evolution system with mini tournament."""
    159:         logger.info("Starting evolution system benchmark...")
    160:         monitor = PerformanceMonitor()


SEQUENTIAL_COUPLING: Sequential coupling detected: Function 'run_rag_test' is part of a sequence-dependent API
File: packages\core\benchmarks\production_benchmark_suite.py:217:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    214:     def __init__(self) -> None:
    215:         self.results = {}
    216:
>>> 217:     def run_rag_test(self) -> dict[str, Any]:
    218:         """Test RAG pipeline with sample documents and queries."""
    219:         logger.info("Starting RAG pipeline benchmark...")
    220:         monitor = PerformanceMonitor()


SEQUENTIAL_COUPLING: Sequential coupling detected: Function 'run_all_benchmarks' is part of a sequence-dependent API
File: packages\core\benchmarks\production_benchmark_suite.py:307:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    304:         self.results = {}
    305:         self.timestamp = datetime.now().isoformat()
    306:
>>> 307:     def run_all_benchmarks(self) -> dict[str, Any]:
    308:         """Run all production system benchmarks."""
    309:         logger.info("Starting production benchmark suite...")
    310:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (30 total)
File: packages\core\benchmarks\production_benchmark_suite.py:71:51
Recommendation: Replace magic numbers with named constants or enums
Code context:
     68:         memory_delta = self.peak_memory - self.start_memory
     69:
     70:         return {
>>>  71:             "elapsed_time_seconds": round(elapsed, 3),
     72:             "memory_delta_mb": round(memory_delta / (1024 * 1024), 2),
     73:             "peak_memory_mb": round(self.peak_memory / (1024 * 1024), 2),
     74:             "cpu_percent": psutil.cpu_percent(interval=1),


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (30 total)
File: packages\core\benchmarks\production_benchmark_suite.py:72:53
Recommendation: Replace magic numbers with named constants or enums
Code context:
     69:
     70:         return {
     71:             "elapsed_time_seconds": round(elapsed, 3),
>>>  72:             "memory_delta_mb": round(memory_delta / (1024 * 1024), 2),
     73:             "peak_memory_mb": round(self.peak_memory / (1024 * 1024), 2),
     74:             "cpu_percent": psutil.cpu_percent(interval=1),
     75:         }


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (30 total)
File: packages\core\benchmarks\production_benchmark_suite.py:72:60
Recommendation: Replace magic numbers with named constants or enums
Code context:
     69:
     70:         return {
     71:             "elapsed_time_seconds": round(elapsed, 3),
>>>  72:             "memory_delta_mb": round(memory_delta / (1024 * 1024), 2),
     73:             "peak_memory_mb": round(self.peak_memory / (1024 * 1024), 2),
     74:             "cpu_percent": psutil.cpu_percent(interval=1),
     75:         }


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (30 total)
File: packages\core\benchmarks\production_benchmark_suite.py:73:56
Recommendation: Replace magic numbers with named constants or enums
Code context:
     70:         return {
     71:             "elapsed_time_seconds": round(elapsed, 3),
     72:             "memory_delta_mb": round(memory_delta / (1024 * 1024), 2),
>>>  73:             "peak_memory_mb": round(self.peak_memory / (1024 * 1024), 2),
     74:             "cpu_percent": psutil.cpu_percent(interval=1),
     75:         }
     76:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (30 total)
File: packages\core\benchmarks\production_benchmark_suite.py:73:63
Recommendation: Replace magic numbers with named constants or enums
Code context:
     70:         return {
     71:             "elapsed_time_seconds": round(elapsed, 3),
     72:             "memory_delta_mb": round(memory_delta / (1024 * 1024), 2),
>>>  73:             "peak_memory_mb": round(self.peak_memory / (1024 * 1024), 2),
     74:             "cpu_percent": psutil.cpu_percent(interval=1),
     75:         }
     76:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\benchmarks\run_all.py:19:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     16:
     17:
     18: async def run_all(output_file: Path) -> dict:
>>>  19:     """Run all benchmarks and write aggregated metrics to *output_file*.
     20:
     21:     Parameters
     22:     ----------


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\benchmarks\__init__.py:1:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
>>>   1: """Auto-generated __init__.py for proper module imports.
      2: Created by test infrastructure repair script.
      3: """


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'datetime' methods (8 calls)
File: packages\core\bin\admin_server.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'psutil' methods (6 calls)
File: packages\core\bin\admin_server.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'random' methods (6 calls)
File: packages\core\bin\admin_server.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

SEQUENTIAL_COUPLING: Sequential coupling detected: Function '__init__' is part of a sequence-dependent API
File: packages\core\bin\admin_server.py:36:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
     33: class AdminDashboardServer:
     34:     """Admin dashboard server for backend monitoring"""
     35:
>>>  36:     def __init__(self, port: int = 3006):
     37:         self.port = port
     38:         self.app = FastAPI(
     39:             title="AIVillage Admin Dashboard", description="Backend monitoring and health dashboard", version="1.0.0"


SEQUENTIAL_COUPLING: Sequential coupling detected: Function 'setup_middleware' is part of a sequence-dependent API
File: packages\core\bin\admin_server.py:45:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
     42:         self.setup_middleware()
     43:         self.setup_routes()
     44:
>>>  45:     def setup_middleware(self):
     46:         """Configure CORS and other middleware"""
     47:         self.app.add_middleware(
     48:             CORSMiddleware,


SEQUENTIAL_COUPLING: Sequential coupling detected: Function 'setup_routes' is part of a sequence-dependent API
File: packages\core\bin\admin_server.py:55:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
     52:             allow_headers=["*"],
     53:         )
     54:
>>>  55:     def setup_routes(self):
     56:         """Setup API routes"""
     57:
     58:         @self.app.get("/", response_class=HTMLResponse)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\bin\main.py:47:13
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     44:         "--agent-type",
     45:         choices=["king", "sage", "magi", "base"],
     46:         default="base",
>>>  47:         help="Type of agent to create/train (for agent-forge mode)",
     48:     )
     49:     parser.add_argument("--name", help="Agent name (for agent-forge mode)")
     50:     parser.add_argument("--input", help="Input file or directory")


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'parser' methods (12 calls)
File: packages\core\bin\main.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'rag_args' methods (6 calls)
File: packages\core\bin\main.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

SEQUENTIAL_COUPLING: Sequential coupling detected: Function 'run_agent_forge_mode' is part of a sequence-dependent API
File: packages\core\bin\main.py:54:0
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
     51:     parser.add_argument("--output", help="Output file or directory")
     52:
     53:
>>>  54: def run_agent_forge_mode(args):
     55:     """Run Agent Forge mode."""
     56:     try:
     57:         from agent_forge.main import main as agent_forge_main


SEQUENTIAL_COUPLING: Sequential coupling detected: Function 'run_king_mode' is part of a sequence-dependent API
File: packages\core\bin\main.py:75:0
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
     72:         return 1
     73:
     74:
>>>  75: def run_king_mode(args):
     76:     """Run KING agent mode."""
     77:     try:
     78:         from agents.king.main import main as king_main


SEQUENTIAL_COUPLING: Sequential coupling detected: Function 'run_rag_mode' is part of a sequence-dependent API
File: packages\core\bin\main.py:98:0
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
     95:         return 1
     96:
     97:
>>>  98: def run_rag_mode(args):
     99:     """Run RAG system mode."""
    100:     try:
    101:         from rag_system.main import main as rag_main


SEQUENTIAL_COUPLING: Sequential coupling detected: Function 'run_core_mode' is part of a sequence-dependent API
File: packages\core\bin\main.py:123:0
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    120:         return 1
    121:
    122:
>>> 123: def run_core_mode(args):
    124:     """Run core utilities mode."""
    125:     try:
    126:         from agent_forge.core.main import main as core_main


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (10 calls)
File: packages\core\bin\server.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'app' methods (12 calls)
File: packages\core\bin\server.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (36 total)
File: packages\core\common\constants.py:11:35
Recommendation: Replace magic numbers with named constants or enums
Code context:
      8: from typing import Final
      9:
     10: # HTTP and networking
>>>  11: HTTP_TIMEOUT_SECONDS: Final[int] = 30
     12: HTTP_MAX_RETRIES: Final[int] = 3
     13: HTTP_RETRY_DELAY_SECONDS: Final[int] = 1
     14: DEFAULT_PORT: Final[int] = 8000


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (36 total)
File: packages\core\common\constants.py:12:31
Recommendation: Replace magic numbers with named constants or enums
Code context:
      9:
     10: # HTTP and networking
     11: HTTP_TIMEOUT_SECONDS: Final[int] = 30
>>>  12: HTTP_MAX_RETRIES: Final[int] = 3
     13: HTTP_RETRY_DELAY_SECONDS: Final[int] = 1
     14: DEFAULT_PORT: Final[int] = 8000
     15: MAX_CONNECTIONS: Final[int] = 100


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (36 total)
File: packages\core\common\constants.py:14:27
Recommendation: Replace magic numbers with named constants or enums
Code context:
     11: HTTP_TIMEOUT_SECONDS: Final[int] = 30
     12: HTTP_MAX_RETRIES: Final[int] = 3
     13: HTTP_RETRY_DELAY_SECONDS: Final[int] = 1
>>>  14: DEFAULT_PORT: Final[int] = 8000
     15: MAX_CONNECTIONS: Final[int] = 100
     16: CONNECTION_POOL_SIZE: Final[int] = 20
     17: KEEP_ALIVE_TIMEOUT_SECONDS: Final[int] = 75


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (36 total)
File: packages\core\common\constants.py:16:35
Recommendation: Replace magic numbers with named constants or enums
Code context:
     13: HTTP_RETRY_DELAY_SECONDS: Final[int] = 1
     14: DEFAULT_PORT: Final[int] = 8000
     15: MAX_CONNECTIONS: Final[int] = 100
>>>  16: CONNECTION_POOL_SIZE: Final[int] = 20
     17: KEEP_ALIVE_TIMEOUT_SECONDS: Final[int] = 75
     18:
     19: # Logging configuration


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (36 total)
File: packages\core\common\constants.py:17:41
Recommendation: Replace magic numbers with named constants or enums
Code context:
     14: DEFAULT_PORT: Final[int] = 8000
     15: MAX_CONNECTIONS: Final[int] = 100
     16: CONNECTION_POOL_SIZE: Final[int] = 20
>>>  17: KEEP_ALIVE_TIMEOUT_SECONDS: Final[int] = 75
     18:
     19: # Logging configuration
     20: LOG_MAX_BYTES: Final[int] = 10 * 1024 * 1024  # 10MB


LONG_PARAMETER_LIST: Function '__init__' has 8 parameters (>5)
File: packages\core\common\flags.py:35:4
Recommendation: Use parameter objects, data classes, or keyword-only arguments
Code context:
     32: class FeatureFlag:
     33:     """Individual feature flag configuration."""
     34:
>>>  35:     def __init__(
     36:         self,
     37:         key: str,
     38:         state: FlagState = FlagState.DISABLED,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\common\flags.py:123:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    120:         return str(project_root / "config" / "flags.yaml")
    121:
    122:     def load_flags(self) -> None:
>>> 123:         """Load flags from configuration file."""
    124:         with self._lock:
    125:             try:
    126:                 if os.path.exists(self.config_path):


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\common\flags.py:149:24
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    146:                     self._create_default_config()
    147:
    148:             except Exception as e:
>>> 149:                 print(f"Warning: Failed to load feature flags from {self.config_path}: {e}")
    150:                 # Continue with empty flags rather than failing
    151:
    152:     def _create_default_config(self) -> None:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\common\flags.py:153:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    150:                 # Continue with empty flags rather than failing
    151:
    152:     def _create_default_config(self) -> None:
>>> 153:         """Create default configuration file."""
    154:         os.makedirs(os.path.dirname(self.config_path), exist_ok=True)
    155:
    156:         default_config = {


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'flag_data' methods (6 calls)
File: packages\core\common\flags.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

LONG_PARAMETER_LIST: Function '__init__' has 6 parameters (>5)
File: packages\core\common\http_client.py:213:4
Recommendation: Use parameter objects, data classes, or keyword-only arguments
Code context:
    210: class ResilientHttpClient:
    211:     """Production HTTP client with retries, circuit breakers, and idempotency."""
    212:
>>> 213:     def __init__(
    214:         self,
    215:         retry_config: RetryConfig | None = None,
    216:         circuit_config: CircuitBreakerConfig | None = None,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\common\http_client.py:239:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    236:         )
    237:
    238:     def _get_circuit_breaker(self, url: str) -> CircuitBreaker:
>>> 239:         """Get or create circuit breaker for service."""
    240:         try:
    241:             parsed_url = httpx.URL(url)
    242:             service_name = f"{parsed_url.scheme}://{parsed_url.host}:{parsed_url.port or (443 if parsed_url.scheme == 'https' else 80)}"


HARDCODED_PATH: Hardcoded path or URL detected
File: packages\core\common\http_client.py:467:16
Recommendation: Use configuration files, environment variables, or path utilities
Code context:
    464:         try:
    465:             # Make idempotent POST request
    466:             response = await client.post(
>>> 467:                 "https://api.example.com/users",
    468:                 json={"name": "John", "email": "john@example.com"},
    469:                 idempotency_key="create-user-123",
    470:             )


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'time' methods (6 calls)
File: packages\core\common\http_client.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (18 calls)
File: packages\core\common\http_client.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (8 calls)
File: packages\core\common\http_client.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'httpx' methods (6 calls)
File: packages\core\common\http_client.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (28 total)
File: packages\core\common\http_client.py:38:24
Recommendation: Replace magic numbers with named constants or enums
Code context:
     35: class RetryConfig:
     36:     """Configuration for retry behavior."""
     37:
>>>  38:     max_attempts: int = 3
     39:     base_delay: float = 1.0  # seconds
     40:     max_delay: float = 60.0  # seconds
     41:     exponential_base: float = 2.0


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (28 total)
File: packages\core\common\http_client.py:40:23
Recommendation: Replace magic numbers with named constants or enums
Code context:
     37:
     38:     max_attempts: int = 3
     39:     base_delay: float = 1.0  # seconds
>>>  40:     max_delay: float = 60.0  # seconds
     41:     exponential_base: float = 2.0
     42:     jitter: bool = True
     43:     retry_on_status_codes: set[int] = field(default_factory=lambda: {500, 502, 503, 504, 520, 521, 522, 523, 524})


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (28 total)
File: packages\core\common\http_client.py:43:69
Recommendation: Replace magic numbers with named constants or enums
Code context:
     40:     max_delay: float = 60.0  # seconds
     41:     exponential_base: float = 2.0
     42:     jitter: bool = True
>>>  43:     retry_on_status_codes: set[int] = field(default_factory=lambda: {500, 502, 503, 504, 520, 521, 522, 523, 524})
     44:
     45:
     46: @dataclass


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (28 total)
File: packages\core\common\http_client.py:43:74
Recommendation: Replace magic numbers with named constants or enums
Code context:
     40:     max_delay: float = 60.0  # seconds
     41:     exponential_base: float = 2.0
     42:     jitter: bool = True
>>>  43:     retry_on_status_codes: set[int] = field(default_factory=lambda: {500, 502, 503, 504, 520, 521, 522, 523, 524})
     44:
     45:
     46: @dataclass


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (28 total)
File: packages\core\common\http_client.py:43:79
Recommendation: Replace magic numbers with named constants or enums
Code context:
     40:     max_delay: float = 60.0  # seconds
     41:     exponential_base: float = 2.0
     42:     jitter: bool = True
>>>  43:     retry_on_status_codes: set[int] = field(default_factory=lambda: {500, 502, 503, 504, 520, 521, 522, 523, 524})
     44:
     45:
     46: @dataclass


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\compliance\aivillage_integration.py:96:20
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     93:                 "permissions": [
     94:                     "compliance:discover:all",
     95:                     "compliance:manage_locations:all",
>>>  96:                     "compliance:create_retention_jobs:all",
     97:                     "compliance:execute_retention_jobs:all",
     98:                     "compliance:approve_retention_jobs:all",
     99:                     "compliance:generate_reports:all",


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\compliance\aivillage_integration.py:109:20
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    106:                 "permissions": [
    107:                     "compliance:discover:tenant",
    108:                     "compliance:manage_locations:tenant",
>>> 109:                     "compliance:create_retention_jobs:tenant",
    110:                     "compliance:generate_reports:tenant",
    111:                     "compliance:audit_trail:read",
    112:                 ],


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\compliance\aivillage_integration.py:142:30
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    139:                     description=role_config["description"],
    140:                     permissions=role_config["permissions"],
    141:                 )
>>> 142:                 logger.info(f"Created compliance role: {role_config['role_name']} ({role_id})")
    143:             except Exception as e:
    144:                 logger.warning(f"Failed to create role {role_config['role_name']}: {e}")
    145:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\compliance\aivillage_integration.py:144:33
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    141:                 )
    142:                 logger.info(f"Created compliance role: {role_config['role_name']} ({role_id})")
    143:             except Exception as e:
>>> 144:                 logger.warning(f"Failed to create role {role_config['role_name']}: {e}")
    145:
    146:     async def _setup_backup_integration(self):
    147:         """Integrate PII/PHI compliance with backup system."""


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\compliance\aivillage_integration.py:194:30
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    191:                     retention_days=job_config["retention_days"],
    192:                     encryption=job_config["encryption"],
    193:                 )
>>> 194:                 logger.info(f"Created compliance backup job: {backup_id}")
    195:             except Exception as e:
    196:                 logger.warning(f"Failed to create backup job {job_config['name']}: {e}")
    197:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\compliance\aivillage_integration.py:196:33
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    193:                 )
    194:                 logger.info(f"Created compliance backup job: {backup_id}")
    195:             except Exception as e:
>>> 196:                 logger.warning(f"Failed to create backup job {job_config['name']}: {e}")
    197:
    198:     async def _setup_governance_integration(self):
    199:         """Integrate compliance workflows with MCP governance dashboard."""


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\compliance\aivillage_integration.py:217:24
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    214:             },
    215:             {
    216:                 "tool_id": "retention_job_create",
>>> 217:                 "name": "Create Data Retention Job",
    218:                 "description": "Create automated data retention job",
    219:                 "category": "compliance",
    220:                 "requires_approval": True,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\compliance\aivillage_integration.py:218:31
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    215:             {
    216:                 "tool_id": "retention_job_create",
    217:                 "name": "Create Data Retention Job",
>>> 218:                 "description": "Create automated data retention job",
    219:                 "category": "compliance",
    220:                 "requires_approval": True,
    221:                 "approval_roles": ["compliance_admin", "data_protection_officer"],


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\compliance\aivillage_integration.py:341:72
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    338:                 custom_retention_days=custom_days,
    339:             )
    340:
>>> 341:             return {"status": "success", "job_id": job_id, "message": f"Created retention job: {job_id}"}
    342:
    343:         except Exception as e:
    344:             logger.error(f"Retention job creation failed: {e}")


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (29 calls)
File: packages\core\compliance\aivillage_integration.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'request' methods (11 calls)
File: packages\core\compliance\aivillage_integration.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\compliance\compliance_cli.py:275:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    272:         custom_days: int = None,
    273:         schedule: str = "0 2 * * 0",
    274:     ):
>>> 275:         """Create a new data retention job."""
    276:         await self._initialize_manager()
    277:
    278:         try:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\compliance\compliance_cli.py:290:28
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    287:                 schedule_cron=schedule,
    288:             )
    289:
>>> 290:             self._success(f"Retention job created: {job_id}")
    291:             self._info(f"Name: {name}")
    292:             self._info(f"Policy: {retention_policy}")
    293:             if custom_days:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\compliance\compliance_cli.py:299:26
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    296:             self._info(f"Schedule: {schedule}")
    297:
    298:         except Exception as e:
>>> 299:             self._error(f"Failed to create retention job: {e}")
    300:
    301:     async def list_retention_jobs(self, output_format: str = "table"):
    302:         """List retention jobs."""


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\compliance\compliance_cli.py:486:24
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    483:                         "approval_status": job.approval_status,
    484:                         "run_count": job.run_count,
    485:                         "success_count": job.success_count,
>>> 486:                         "total_records_deleted": job.total_records_deleted,
    487:                     }
    488:                 )
    489:


LONG_PARAMETER_LIST: Function 'create_retention_job' has 6 parameters (>5)
File: packages\core\compliance\compliance_cli.py:644:4
Recommendation: Use parameter objects, data classes, or keyword-only arguments
Code context:
    641:     )
    642:     @click.option("--custom-days", type=int, help="Custom retention days (for custom policy)")
    643:     @click.option("--schedule", default="0 2 * * 0", help="Cron schedule")
>>> 644:     def create_retention_job(name, description, locations, retention_policy, custom_days, schedule):
    645:         """Create data retention job"""
    646:         cli = ComplianceCLI()
    647:         location_list = [loc.strip() for loc in locations.split(",")]


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\compliance\compliance_cli.py:645:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    642:     @click.option("--custom-days", type=int, help="Custom retention days (for custom policy)")
    643:     @click.option("--schedule", default="0 2 * * 0", help="Cron schedule")
    644:     def create_retention_job(name, description, locations, retention_policy, custom_days, schedule):
>>> 645:         """Create data retention job"""
    646:         cli = ComplianceCLI()
    647:         location_list = [loc.strip() for loc in locations.split(",")]
    648:         asyncio.run(cli.create_retention_job(name, description, location_list, retention_policy, custom_days, schedule))


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (67 calls)
File: packages\core\compliance\compliance_cli.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'f' methods (9 calls)
File: packages\core\compliance\compliance_cli.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'click' methods (32 calls)
File: packages\core\compliance\compliance_cli.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'asyncio' methods (12 calls)
File: packages\core\compliance\compliance_cli.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'cli' methods (12 calls)
File: packages\core\compliance\compliance_cli.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'compliance_cli' methods (9 calls)
File: packages\core\compliance\compliance_cli.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (21 total)
File: packages\core\compliance\compliance_cli.py:86:59
Recommendation: Replace magic numbers with named constants or enums
Code context:
     83:                     rows.append(
     84:                         [
     85:                             location.location_id[:20] + "..."
>>>  86:                             if len(location.location_id) > 20
     87:                             else location.location_id,
     88:                             location.source_type,
     89:                             (location.path[:30] + "...") if len(location.path) > 30 else location.path,


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (21 total)
File: packages\core\compliance\compliance_cli.py:85:50
Recommendation: Replace magic numbers with named constants or enums
Code context:
     82:                 for location in discoveries:
     83:                     rows.append(
     84:                         [
>>>  85:                             location.location_id[:20] + "..."
     86:                             if len(location.location_id) > 20
     87:                             else location.location_id,
     88:                             location.source_type,


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (21 total)
File: packages\core\compliance\compliance_cli.py:89:81
Recommendation: Replace magic numbers with named constants or enums
Code context:
     86:                             if len(location.location_id) > 20
     87:                             else location.location_id,
     88:                             location.source_type,
>>>  89:                             (location.path[:30] + "...") if len(location.path) > 30 else location.path,
     90:                             location.classification.value,
     91:                             f"{location.confidence_score:.2f}",
     92:                             str(location.estimated_records),


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (21 total)
File: packages\core\compliance\compliance_cli.py:89:44
Recommendation: Replace magic numbers with named constants or enums
Code context:
     86:                             if len(location.location_id) > 20
     87:                             else location.location_id,
     88:                             location.source_type,
>>>  89:                             (location.path[:30] + "...") if len(location.path) > 30 else location.path,
     90:                             location.classification.value,
     91:                             f"{location.confidence_score:.2f}",
     92:                             str(location.estimated_records),


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (21 total)
File: packages\core\compliance\compliance_cli.py:114:78
Recommendation: Replace magic numbers with named constants or enums
Code context:
    111:             self._error(f"Discovery failed: {e}")
    112:
    113:     async def list_locations(
>>> 114:         self, classification: str = None, tenant_id: str = None, limit: int = 50, output_format: str = "table"
    115:     ):
    116:         """List discovered PII/PHI locations."""
    117:         await self._initialize_manager()


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\compliance\pii_phi_manager.py:84:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     81:
     82: @dataclass
     83: class DataLocation:
>>>  84:     """Location where PII/PHI data is found."""
     85:
     86:     location_id: str
     87:     source_type: str  # database, file, api_endpoint, etc.


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\compliance\pii_phi_manager.py:505:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    502:
    503:         # Data locations table
    504:         cursor.execute(
>>> 505:             """
    506:             CREATE TABLE IF NOT EXISTS data_locations (
    507:                 location_id TEXT PRIMARY KEY,
    508:                 source_type TEXT NOT NULL,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\compliance\pii_phi_manager.py:536:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    533:
    534:         # Retention jobs table
    535:         cursor.execute(
>>> 536:             """
    537:             CREATE TABLE IF NOT EXISTS retention_jobs (
    538:                 job_id TEXT PRIMARY KEY,
    539:                 name TEXT NOT NULL,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\compliance\pii_phi_manager.py:566:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    563:
    564:         # Audit log table
    565:         cursor.execute(
>>> 566:             """
    567:             CREATE TABLE IF NOT EXISTS audit_log (
    568:                 audit_id TEXT PRIMARY KEY,
    569:                 event_type TEXT NOT NULL,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\compliance\pii_phi_manager.py:586:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    583:
    584:         # Detection history table
    585:         cursor.execute(
>>> 586:             """
    587:             CREATE TABLE IF NOT EXISTS detection_history (
    588:                 detection_id TEXT PRIMARY KEY,
    589:                 location_id TEXT NOT NULL,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\compliance\pii_phi_manager.py:603:23
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    600:         )
    601:
    602:         # Create indexes
>>> 603:         cursor.execute("CREATE INDEX IF NOT EXISTS idx_locations_classification ON data_locations(classification)")
    604:         cursor.execute("CREATE INDEX IF NOT EXISTS idx_locations_tenant ON data_locations(tenant_id)")
    605:         cursor.execute("CREATE INDEX IF NOT EXISTS idx_locations_compliance ON data_locations(compliant)")
    606:         cursor.execute("CREATE INDEX IF NOT EXISTS idx_jobs_enabled ON retention_jobs(enabled)")


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\compliance\pii_phi_manager.py:604:23
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    601:
    602:         # Create indexes
    603:         cursor.execute("CREATE INDEX IF NOT EXISTS idx_locations_classification ON data_locations(classification)")
>>> 604:         cursor.execute("CREATE INDEX IF NOT EXISTS idx_locations_tenant ON data_locations(tenant_id)")
    605:         cursor.execute("CREATE INDEX IF NOT EXISTS idx_locations_compliance ON data_locations(compliant)")
    606:         cursor.execute("CREATE INDEX IF NOT EXISTS idx_jobs_enabled ON retention_jobs(enabled)")
    607:         cursor.execute("CREATE INDEX IF NOT EXISTS idx_jobs_next_run ON retention_jobs(next_run)")


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\compliance\pii_phi_manager.py:605:23
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    602:         # Create indexes
    603:         cursor.execute("CREATE INDEX IF NOT EXISTS idx_locations_classification ON data_locations(classification)")
    604:         cursor.execute("CREATE INDEX IF NOT EXISTS idx_locations_tenant ON data_locations(tenant_id)")
>>> 605:         cursor.execute("CREATE INDEX IF NOT EXISTS idx_locations_compliance ON data_locations(compliant)")
    606:         cursor.execute("CREATE INDEX IF NOT EXISTS idx_jobs_enabled ON retention_jobs(enabled)")
    607:         cursor.execute("CREATE INDEX IF NOT EXISTS idx_jobs_next_run ON retention_jobs(next_run)")
    608:         cursor.execute("CREATE INDEX IF NOT EXISTS idx_audit_timestamp ON audit_log(timestamp)")


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\compliance\pii_phi_manager.py:606:23
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    603:         cursor.execute("CREATE INDEX IF NOT EXISTS idx_locations_classification ON data_locations(classification)")
    604:         cursor.execute("CREATE INDEX IF NOT EXISTS idx_locations_tenant ON data_locations(tenant_id)")
    605:         cursor.execute("CREATE INDEX IF NOT EXISTS idx_locations_compliance ON data_locations(compliant)")
>>> 606:         cursor.execute("CREATE INDEX IF NOT EXISTS idx_jobs_enabled ON retention_jobs(enabled)")
    607:         cursor.execute("CREATE INDEX IF NOT EXISTS idx_jobs_next_run ON retention_jobs(next_run)")
    608:         cursor.execute("CREATE INDEX IF NOT EXISTS idx_audit_timestamp ON audit_log(timestamp)")
    609:         cursor.execute("CREATE INDEX IF NOT EXISTS idx_audit_event_type ON audit_log(event_type)")


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\compliance\pii_phi_manager.py:607:23
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    604:         cursor.execute("CREATE INDEX IF NOT EXISTS idx_locations_tenant ON data_locations(tenant_id)")
    605:         cursor.execute("CREATE INDEX IF NOT EXISTS idx_locations_compliance ON data_locations(compliant)")
    606:         cursor.execute("CREATE INDEX IF NOT EXISTS idx_jobs_enabled ON retention_jobs(enabled)")
>>> 607:         cursor.execute("CREATE INDEX IF NOT EXISTS idx_jobs_next_run ON retention_jobs(next_run)")
    608:         cursor.execute("CREATE INDEX IF NOT EXISTS idx_audit_timestamp ON audit_log(timestamp)")
    609:         cursor.execute("CREATE INDEX IF NOT EXISTS idx_audit_event_type ON audit_log(event_type)")
    610:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\compliance\pii_phi_manager.py:608:23
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    605:         cursor.execute("CREATE INDEX IF NOT EXISTS idx_locations_compliance ON data_locations(compliant)")
    606:         cursor.execute("CREATE INDEX IF NOT EXISTS idx_jobs_enabled ON retention_jobs(enabled)")
    607:         cursor.execute("CREATE INDEX IF NOT EXISTS idx_jobs_next_run ON retention_jobs(next_run)")
>>> 608:         cursor.execute("CREATE INDEX IF NOT EXISTS idx_audit_timestamp ON audit_log(timestamp)")
    609:         cursor.execute("CREATE INDEX IF NOT EXISTS idx_audit_event_type ON audit_log(event_type)")
    610:
    611:         conn.commit()


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\compliance\pii_phi_manager.py:609:23
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    606:         cursor.execute("CREATE INDEX IF NOT EXISTS idx_jobs_enabled ON retention_jobs(enabled)")
    607:         cursor.execute("CREATE INDEX IF NOT EXISTS idx_jobs_next_run ON retention_jobs(next_run)")
    608:         cursor.execute("CREATE INDEX IF NOT EXISTS idx_audit_timestamp ON audit_log(timestamp)")
>>> 609:         cursor.execute("CREATE INDEX IF NOT EXISTS idx_audit_event_type ON audit_log(event_type)")
    610:
    611:         conn.commit()
    612:         conn.close()


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\compliance\pii_phi_manager.py:615:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    612:         conn.close()
    613:
    614:     def _load_existing_data(self):
>>> 615:         """Load existing data locations and retention jobs from database."""
    616:         conn = sqlite3.connect(self.compliance_db)
    617:         conn.row_factory = sqlite3.Row
    618:         cursor = conn.cursor()


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\compliance\pii_phi_manager.py:621:23
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    618:         cursor = conn.cursor()
    619:
    620:         # Load data locations
>>> 621:         cursor.execute("SELECT * FROM data_locations")
    622:         for row in cursor.fetchall():
    623:             location = DataLocation(
    624:                 location_id=row["location_id"],


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\compliance\pii_phi_manager.py:649:23
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    646:             self.data_locations[location.location_id] = location
    647:
    648:         # Load retention jobs
>>> 649:         cursor.execute("SELECT * FROM retention_jobs")
    650:         for row in cursor.fetchall():
    651:             job = RetentionJob(
    652:                 job_id=row["job_id"],


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\compliance\pii_phi_manager.py:666:42
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    663:                 success_count=row["success_count"],
    664:                 failure_count=row["failure_count"],
    665:                 total_records_processed=row["total_records_processed"],
>>> 666:                 total_records_deleted=row["total_records_deleted"],
    667:                 last_error=row["last_error"],
    668:                 requires_approval=bool(row["requires_approval"]),
    669:                 approval_status=row["approval_status"],


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\compliance\pii_phi_manager.py:690:27
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    687:             cursor = conn.cursor()
    688:
    689:             # Get all tables
>>> 690:             cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
    691:             tables = [row[0] for row in cursor.fetchall()]
    692:
    693:             for table_name in tables:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\compliance\pii_phi_manager.py:735:49
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    732:                                 )
    733:
    734:                                 # Get record count
>>> 735:                                 cursor.execute(f"SELECT COUNT(*) FROM {table_name}")
    736:                                 record_count = cursor.fetchone()[0]
    737:
    738:                                 location = DataLocation(


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\compliance\pii_phi_manager.py:926:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    923:         custom_retention_days: int | None = None,
    924:         schedule_cron: str = "0 2 * * 0",
    925:     ) -> str:
>>> 926:         """Create a new data retention job."""
    927:         job_id = f"retention_{int(time.time())}_{hashlib.md5(name.encode()).hexdigest()[:8]}"
    928:
    929:         job = RetentionJob(


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\compliance\pii_phi_manager.py:943:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    940:         await self._save_retention_job(job)
    941:
    942:         await self._log_audit_event(
>>> 943:             "retention_job_created",
    944:             job_id=job_id,
    945:             details={
    946:                 "name": name,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\compliance\pii_phi_manager.py:953:22
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    950:             },
    951:         )
    952:
>>> 953:         logger.info(f"Created retention job: {job_id} ({name})")
    954:         return job_id
    955:
    956:     async def execute_retention_job(self, job_id: str) -> dict[str, Any]:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\compliance\pii_phi_manager.py:1058:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1055:         return policy_days.get(policy, 365)
    1056:
    1057:     async def _delete_expired_data(self, location: DataLocation, cutoff_date: datetime) -> int:
>>> 1058:         """Delete expired data from a specific location."""
    1059:         deleted_count = 0
    1060:
    1061:         if location.source_type == "database":


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\compliance\pii_phi_manager.py:1069:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1066:         return deleted_count
    1067:
    1068:     async def _delete_from_database(self, location: DataLocation, cutoff_date: datetime) -> int:
>>> 1069:         """Delete expired data from database."""
    1070:         try:
    1071:             conn = sqlite3.connect(location.path)
    1072:             cursor = conn.cursor()


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\compliance\pii_phi_manager.py:1091:24
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1088:                 # Delete records older than cutoff date
    1089:                 timestamp_col = timestamp_columns[0]
    1090:                 cursor.execute(
>>> 1091:                     f"""
    1092:                     DELETE FROM {location.table_name}
    1093:                     WHERE {timestamp_col} < ?
    1094:                 """,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\compliance\pii_phi_manager.py:1092:53
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1089:                 timestamp_col = timestamp_columns[0]
    1090:                 cursor.execute(
    1091:                     f"""
>>> 1092:                     DELETE FROM {location.table_name}
    1093:                     WHERE {timestamp_col} < ?
    1094:                 """,
    1095:                     (cutoff_date.isoformat(),),


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\compliance\pii_phi_manager.py:1110:27
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1107:             return deleted_count
    1108:
    1109:         except Exception as e:
>>> 1110:             logger.error(f"Error deleting from database {location.path}: {e}")
    1111:             raise
    1112:
    1113:     async def _delete_from_file(self, location: DataLocation, cutoff_date: datetime) -> int:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\compliance\pii_phi_manager.py:1114:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1111:             raise
    1112:
    1113:     async def _delete_from_file(self, location: DataLocation, cutoff_date: datetime) -> int:
>>> 1114:         """Delete expired data from file."""
    1115:         try:
    1116:             file_path = Path(location.path)
    1117:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\compliance\pii_phi_manager.py:1124:34
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1121:
    1122:                 if file_mtime < cutoff_date:
    1123:                     file_path.unlink()
>>> 1124:                     logger.info(f"Deleted expired file: {file_path}")
    1125:                     return 1
    1126:
    1127:             return 0


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\compliance\pii_phi_manager.py:1141:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1138:         cursor = conn.cursor()
    1139:
    1140:         cursor.execute(
>>> 1141:             """
    1142:             INSERT OR REPLACE INTO data_locations
    1143:             (location_id, source_type, path, table_name, column_name, field_name, tenant_id,
    1144:              classification, retention_policy, regulations, discovered_at, last_verified,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\compliance\pii_phi_manager.py:1183:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1180:         cursor = conn.cursor()
    1181:
    1182:         cursor.execute(
>>> 1183:             """
    1184:             INSERT OR REPLACE INTO retention_jobs
    1185:             (job_id, name, description, location_ids, retention_policy, custom_retention_days,
    1186:              enabled, schedule_cron, last_run, next_run, run_count, success_count, failure_count,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\compliance\pii_phi_manager.py:1236:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1233:         cursor = conn.cursor()
    1234:
    1235:         cursor.execute(
>>> 1236:             """
    1237:             INSERT INTO audit_log
    1238:             (audit_id, event_type, timestamp, user_id, tenant_id, location_id, job_id,
    1239:              details, classification, regulation, compliance_status, risk_level)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\compliance\pii_phi_manager.py:1779:24
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1776:                     location_ids=pii_locations[:5],
    1777:                     retention_policy=RetentionPolicy.STANDARD,
    1778:                 )
>>> 1779:                 print(f"\nCreated retention job: {job_id}")
    1780:
    1781:     asyncio.run(main())


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (47 calls)
File: packages\core\compliance\pii_phi_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (21 calls)
File: packages\core\compliance\pii_phi_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'json' methods (10 calls)
File: packages\core\compliance\pii_phi_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'sqlite3' methods (7 calls)
File: packages\core\compliance\pii_phi_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'conn' methods (19 calls)
File: packages\core\compliance\pii_phi_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'cursor' methods (29 calls)
File: packages\core\compliance\pii_phi_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'datetime' methods (14 calls)
File: packages\core\compliance\pii_phi_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'file_path' methods (6 calls)
File: packages\core\compliance\pii_phi_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'violations' methods (8 calls)
File: packages\core\compliance\pii_phi_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'recommendations' methods (11 calls)
File: packages\core\compliance\pii_phi_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

SEQUENTIAL_COUPLING: Sequential coupling detected: Function '__init__' is part of a sequence-dependent API
File: packages\core\compliance\pii_phi_manager.py:433:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    430: class PIIPHIManager:
    431:     """Main PII/PHI management and compliance system."""
    432:
>>> 433:     def __init__(self, config_path: Path | None = None):
    434:         """Initialize PII/PHI manager."""
    435:         self.config_path = config_path or Path("config/compliance/pii_phi_config.json")
    436:         self.detection_engine = PIIDetectionEngine()


SEQUENTIAL_COUPLING: Sequential coupling detected: Function '_initialize_builtin_rules' is part of a sequence-dependent API
File: packages\core\compliance\pii_phi_manager.py:156:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    153:         self.compiled_patterns: dict[str, re.Pattern] = {}
    154:         self._initialize_builtin_rules()
    155:
>>> 156:     def _initialize_builtin_rules(self):
    157:         """Initialize built-in detection rules for common PII/PHI."""
    158:
    159:         rules = [


SEQUENTIAL_COUPLING: Sequential coupling detected: Function '_init_database' is part of a sequence-dependent API
File: packages\core\compliance\pii_phi_manager.py:498:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    495:
    496:         return default_config
    497:
>>> 498:     def _init_database(self):
    499:         """Initialize compliance database."""
    500:         conn = sqlite3.connect(self.compliance_db)
    501:         cursor = conn.cursor()


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (55 total)
File: packages\core\compliance\pii_phi_manager.py:76:34
Recommendation: Replace magic numbers with named constants or enums
Code context:
     73:     classification: DataClassification
     74:     pattern: str  # Regex pattern for detection
     75:     field_names: list[str] = field(default_factory=list)  # Common field names
>>>  76:     confidence_threshold: float = 0.8  # Confidence threshold for match
     77:     regulation: ComplianceRegulation | None = None
     78:     examples: list[str] = field(default_factory=list)
     79:     false_positive_patterns: list[str] = field(default_factory=list)


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (55 total)
File: packages\core\compliance\pii_phi_manager.py:359:26
Recommendation: Replace magic numbers with named constants or enums
Code context:
    356:         self, rule: PIIDetectionRule, matches: list[str], field_name: str = "", total_samples: int = 1
    357:     ) -> float:
    358:         """Calculate confidence score for a detection."""
>>> 359:         base_confidence = 0.5
    360:
    361:         # Boost confidence for field name matches
    362:         if field_name:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (55 total)
File: packages\core\compliance\pii_phi_manager.py:365:35
Recommendation: Replace magic numbers with named constants or enums
Code context:
    362:         if field_name:
    363:             field_matches = self.detect_in_field_name(field_name)
    364:             if rule in field_matches:
>>> 365:                 base_confidence += 0.3
    366:
    367:         # Boost confidence based on match quality
    368:         if matches:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (55 total)
File: packages\core\compliance\pii_phi_manager.py:370:60
Recommendation: Replace magic numbers with named constants or enums
Code context:
    367:         # Boost confidence based on match quality
    368:         if matches:
    369:             # Higher confidence for more matches (up to a point)
>>> 370:             match_ratio = min(len(matches) / total_samples, 0.5)
    371:             base_confidence += match_ratio * 0.3
    372:
    373:             # Boost confidence for well-formed matches


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (55 total)
File: packages\core\compliance\pii_phi_manager.py:371:45
Recommendation: Replace magic numbers with named constants or enums
Code context:
    368:         if matches:
    369:             # Higher confidence for more matches (up to a point)
    370:             match_ratio = min(len(matches) / total_samples, 0.5)
>>> 371:             base_confidence += match_ratio * 0.3
    372:
    373:             # Boost confidence for well-formed matches
    374:             valid_matches = 0


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\cost_management\cloud_cost_tagging.py:230:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    227:             "default_region_aws": "us-west-2",
    228:             "default_region_azure": "West US 2",
    229:             "default_region_gcp": "us-west2",
>>> 230:             "cost_update_interval_hours": 1,
    231:             "auto_tagging_enabled": True,
    232:             "cost_optimization_enabled": True,
    233:             "unused_resource_detection": True,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\cost_management\cloud_cost_tagging.py:243:29
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    240:                 user_config = json.load(f)
    241:             default_config.update(user_config)
    242:         except Exception as e:
>>> 243:             logger.warning(f"Could not load config from {self.config_path}: {e}")
    244:
    245:         return default_config
    246:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\cost_management\cloud_cost_tagging.py:495:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    492:         return allocation
    493:
    494:     async def _update_resource_costs(self, resources: list[CloudResource]):
>>> 495:         """Update cost information for resources."""
    496:         current_time = time.time()
    497:
    498:         for resource in resources:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\cost_management\cloud_cost_tagging.py:519:33
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    516:                 resource.cost_last_updated = current_time
    517:
    518:             except Exception as e:
>>> 519:                 logger.warning(f"Could not update cost for {resource.resource_id}: {e}")
    520:
    521:     async def _get_aws_resource_cost(self, resource: CloudResource) -> float:
    522:         """Get AWS resource cost per hour."""


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\cost_management\cloud_cost_tagging.py:709:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    706:
    707: # Helper functions
    708: async def create_cloud_cost_manager_with_infrastructure() -> CloudCostManager:
>>> 709:     """Create cloud cost manager with available infrastructure."""
    710:     fog_orchestrator = None
    711:     cost_tracker = None
    712:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (14 calls)
File: packages\core\cost_management\cloud_cost_tagging.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (15 calls)
File: packages\core\cost_management\cloud_cost_tagging.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'resource_spec' methods (9 calls)
File: packages\core\cost_management\cloud_cost_tagging.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (39 total)
File: packages\core\cost_management\cloud_cost_tagging.py:219:36
Recommendation: Replace magic numbers with named constants or enums
Code context:
    216:
    217:         # Monitoring
    218:         self.last_cost_update = 0.0
>>> 219:         self.cost_update_interval = 3600  # 1 hour
    220:
    221:         logger.info("Cloud cost manager initialized")
    222:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (39 total)
File: packages\core\cost_management\cloud_cost_tagging.py:365:29
Recommendation: Replace magic numbers with named constants or enums
Code context:
    362:             # Parse resource ID to get resource group and resource name
    363:             # Format: /subscriptions/{sub}/resourceGroups/{rg}/providers/{provider}/{type}/{name}
    364:             parts = resource_id.split("/")
>>> 365:             if len(parts) >= 9:
    366:                 resource_group = parts[4]
    367:                 provider_namespace = parts[6]
    368:                 resource_type = parts[7]


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (39 total)
File: packages\core\cost_management\cloud_cost_tagging.py:366:39
Recommendation: Replace magic numbers with named constants or enums
Code context:
    363:             # Format: /subscriptions/{sub}/resourceGroups/{rg}/providers/{provider}/{type}/{name}
    364:             parts = resource_id.split("/")
    365:             if len(parts) >= 9:
>>> 366:                 resource_group = parts[4]
    367:                 provider_namespace = parts[6]
    368:                 resource_type = parts[7]
    369:                 resource_name = parts[8]


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (39 total)
File: packages\core\cost_management\cloud_cost_tagging.py:367:43
Recommendation: Replace magic numbers with named constants or enums
Code context:
    364:             parts = resource_id.split("/")
    365:             if len(parts) >= 9:
    366:                 resource_group = parts[4]
>>> 367:                 provider_namespace = parts[6]
    368:                 resource_type = parts[7]
    369:                 resource_name = parts[8]
    370:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (39 total)
File: packages\core\cost_management\cloud_cost_tagging.py:368:38
Recommendation: Replace magic numbers with named constants or enums
Code context:
    365:             if len(parts) >= 9:
    366:                 resource_group = parts[4]
    367:                 provider_namespace = parts[6]
>>> 368:                 resource_type = parts[7]
    369:                 resource_name = parts[8]
    370:
    371:                 # Update tags


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\cost_management\constants.py:146:42
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    143:     COST_SPIKE_DETECTED: Final[str] = "Cost spike detected: {percent}% increase in {category}"
    144:     OPTIMIZATION_SUGGESTION: Final[str] = "Cost optimization suggestion: {suggestion} could save {amount}"
    145:     RESOURCE_UNDERUTILIZED: Final[str] = "Resource {resource_id} underutilized: {utilization}%"
>>> 146:     COST_ALLOCATION_UPDATED: Final[str] = "Cost allocation updated for {entity}: {amount}"
    147:     BILLING_PERIOD_ENDED: Final[str] = "Billing period ended. Total cost: {amount}"
    148:     FORECAST_GENERATED: Final[str] = "Cost forecast generated: projected {amount} for next {period}"
    149:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (47 total)
File: packages\core\cost_management\constants.py:11:43
Recommendation: Replace magic numbers with named constants or enums
Code context:
      8: from typing import Final
      9:
     10: # Cost tracking intervals
>>>  11: COST_UPDATE_INTERVAL_MINUTES: Final[int] = 5
     12: COST_AGGREGATION_INTERVAL_HOURS: Final[int] = 1
     13: COST_REPORT_GENERATION_INTERVAL_HOURS: Final[int] = 24
     14: COST_ALERT_CHECK_INTERVAL_MINUTES: Final[int] = 15


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (47 total)
File: packages\core\cost_management\constants.py:13:52
Recommendation: Replace magic numbers with named constants or enums
Code context:
     10: # Cost tracking intervals
     11: COST_UPDATE_INTERVAL_MINUTES: Final[int] = 5
     12: COST_AGGREGATION_INTERVAL_HOURS: Final[int] = 1
>>>  13: COST_REPORT_GENERATION_INTERVAL_HOURS: Final[int] = 24
     14: COST_ALERT_CHECK_INTERVAL_MINUTES: Final[int] = 15
     15:
     16: # Budget and billing


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (47 total)
File: packages\core\cost_management\constants.py:14:48
Recommendation: Replace magic numbers with named constants or enums
Code context:
     11: COST_UPDATE_INTERVAL_MINUTES: Final[int] = 5
     12: COST_AGGREGATION_INTERVAL_HOURS: Final[int] = 1
     13: COST_REPORT_GENERATION_INTERVAL_HOURS: Final[int] = 24
>>>  14: COST_ALERT_CHECK_INTERVAL_MINUTES: Final[int] = 15
     15:
     16: # Budget and billing
     17: DEFAULT_MONTHLY_BUDGET_USD: Final[float] = 1000.0


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (47 total)
File: packages\core\cost_management\constants.py:18:47
Recommendation: Replace magic numbers with named constants or enums
Code context:
     15:
     16: # Budget and billing
     17: DEFAULT_MONTHLY_BUDGET_USD: Final[float] = 1000.0
>>>  18: BUDGET_WARNING_THRESHOLD_PERCENT: Final[int] = 80
     19: BUDGET_CRITICAL_THRESHOLD_PERCENT: Final[int] = 95
     20: COST_ALLOCATION_PRECISION_DIGITS: Final[int] = 4
     21: BILLING_CYCLE_DAYS: Final[int] = 30


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (47 total)
File: packages\core\cost_management\constants.py:19:48
Recommendation: Replace magic numbers with named constants or enums
Code context:
     16: # Budget and billing
     17: DEFAULT_MONTHLY_BUDGET_USD: Final[float] = 1000.0
     18: BUDGET_WARNING_THRESHOLD_PERCENT: Final[int] = 80
>>>  19: BUDGET_CRITICAL_THRESHOLD_PERCENT: Final[int] = 95
     20: COST_ALLOCATION_PRECISION_DIGITS: Final[int] = 4
     21: BILLING_CYCLE_DAYS: Final[int] = 30
     22:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\cost_management\cost_governance_dashboard.py:217:29
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    214:                 user_config = json.load(f)
    215:             default_config.update(user_config)
    216:         except Exception as e:
>>> 217:             logger.warning(f"Could not load config from {config_path}: {e}")
    218:
    219:         return default_config
    220:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\cost_management\cost_governance_dashboard.py:269:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    266:         )
    267:
    268:     async def update_dashboard_metrics(self) -> CostDashboardMetrics:
>>> 269:         """Update and return current dashboard metrics."""
    270:         current_time = time.time()
    271:
    272:         # Skip update if too recent


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\cost_management\cost_governance_dashboard.py:352:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    349:         return metrics
    350:
    351:     async def _get_cached_metrics(self) -> CostDashboardMetrics:
>>> 352:         """Return cached cost metrics from system monitoring."""
    353:         # Return current metrics from cost tracking systems
    354:         return CostDashboardMetrics(
    355:             total_cost_current_period=0,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\cost_management\cost_governance_dashboard.py:437:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    434:         return total_savings
    435:
    436:     async def _check_budget_alerts(self, metrics: CostDashboardMetrics):
>>> 437:         """Check for budget alerts and create new alerts as needed."""
    438:
    439:         for category, governance in self.budget_governance.items():
    440:             # Get category-specific cost


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\cost_management\cost_governance_dashboard.py:524:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    521:         threshold_value: float,
    522:         recommended_actions: list[str],
    523:     ):
>>> 524:         """Create and store new cost alert."""
    525:
    526:         alert = CostAlert(
    527:             alert_id=alert_id,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\cost_management\cost_governance_dashboard.py:802:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    799:
    800: # Helper functions
    801: async def create_cost_governance_dashboard_with_infrastructure() -> CostGovernanceDashboard:
>>> 802:     """Create cost governance dashboard with all available infrastructure."""
    803:     cost_tracker = None
    804:     transport_optimizer = None
    805:     cloud_manager = None


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (19 calls)
File: packages\core\cost_management\cost_governance_dashboard.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (20 calls)
File: packages\core\cost_management\cost_governance_dashboard.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'time' methods (8 calls)
File: packages\core\cost_management\cost_governance_dashboard.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (41 total)
File: packages\core\cost_management\cost_governance_dashboard.py:88:37
Recommendation: Replace magic numbers with named constants or enums
Code context:
     85:     # Approval settings
     86:     requires_approval: bool = True
     87:     approvers: list[str] = field(default_factory=list)  # User IDs who can approve
>>>  88:     auto_approve_percentage: float = 0.8  # Auto-approve up to 80% of budget
     89:
     90:     # Alert settings
     91:     warning_threshold: float = 0.75  # Alert at 75% of budget


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (41 total)
File: packages\core\cost_management\cost_governance_dashboard.py:91:31
Recommendation: Replace magic numbers with named constants or enums
Code context:
     88:     auto_approve_percentage: float = 0.8  # Auto-approve up to 80% of budget
     89:
     90:     # Alert settings
>>>  91:     warning_threshold: float = 0.75  # Alert at 75% of budget
     92:     critical_threshold: float = 0.90  # Critical alert at 90%
     93:
     94:     # Governance rules


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (41 total)
File: packages\core\cost_management\cost_governance_dashboard.py:92:32
Recommendation: Replace magic numbers with named constants or enums
Code context:
     89:
     90:     # Alert settings
     91:     warning_threshold: float = 0.75  # Alert at 75% of budget
>>>  92:     critical_threshold: float = 0.90  # Critical alert at 90%
     93:
     94:     # Governance rules
     95:     allow_budget_extension: bool = False


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (41 total)
File: packages\core\cost_management\cost_governance_dashboard.py:96:38
Recommendation: Replace magic numbers with named constants or enums
Code context:
     93:
     94:     # Governance rules
     95:     allow_budget_extension: bool = False
>>>  96:     max_extension_percentage: float = 0.20  # Max 20% extension
     97:     require_justification: bool = True
     98:
     99:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (41 total)
File: packages\core\cost_management\cost_governance_dashboard.py:184:36
Recommendation: Replace magic numbers with named constants or enums
Code context:
    181:
    182:         # Dashboard state
    183:         self.last_update_time: float = 0
>>> 184:         self.update_interval: int = 300  # 5 minutes
    185:
    186:         # Configuration
    187:         self.config = self._load_config()


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\cost_management\edge_cost_allocation.py:260:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    257:     async def allocate_resources_for_task(
    258:         self, task_id: str, task_requirements: dict[str, Any], preferred_devices: list[str] | None = None
    259:     ) -> list[ResourceAllocation]:
>>> 260:         """
    261:         Allocate edge device resources for specific task.
    262:
    263:         Args:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\cost_management\edge_cost_allocation.py:452:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    449:     async def _calculate_device_score(
    450:         self, device: DeviceCapabilities, task_requirements: dict[str, Any]
    451:     ) -> dict[str, Any]:
>>> 452:         """Calculate scoring for device selection."""
    453:
    454:         # Check constraints
    455:         constraints = await self._check_device_constraints(device)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\cost_management\edge_cost_allocation.py:626:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    623:         return 0.5 + (success_rate * 0.5)  # 0.5 to 1.0 multiplier
    624:
    625:     async def update_device_status(self, device_id: str, status_update: dict[str, Any]) -> bool:
>>> 626:         """Update device status and check for reallocation needs."""
    627:         if device_id not in self.registered_devices:
    628:             return False
    629:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\cost_management\edge_cost_allocation.py:655:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    652:         return True
    653:
    654:     async def _deallocate_device(self, device_id: str, reason: str):
>>> 655:         """Remove device from current allocations."""
    656:         if device_id in self.current_allocations:
    657:             allocation = self.current_allocations.pop(device_id)
    658:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\cost_management\edge_cost_allocation.py:749:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    746:
    747: # Helper functions
    748: async def create_edge_cost_allocator_with_infrastructure() -> EdgeCostAllocator:
>>> 749:     """Create edge cost allocator with available infrastructure."""
    750:     edge_manager = None
    751:     cost_tracker = None
    752:     transport_optimizer = None


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\cost_management\edge_cost_allocation.py:852:14
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    849:         await allocator.update_device_status(
    850:             "mobile-pixel-7", {"battery_percent": 18, "cpu_temp_celsius": 45}  # Low battery
    851:         )
>>> 852:         print("📱 Updated mobile device status (low battery)")
    853:
    854:         # Generate allocation report
    855:         report = allocator.get_allocation_report()


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (14 calls)
File: packages\core\cost_management\edge_cost_allocation.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (11 calls)
File: packages\core\cost_management\edge_cost_allocation.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (68 total)
File: packages\core\cost_management\edge_cost_allocation.py:71:30
Recommendation: Replace magic numbers with named constants or enums
Code context:
     68:
     69:     # Current state
     70:     battery_percent: float | None = None
>>>  71:     cpu_temp_celsius: float = 25.0
     72:     memory_usage_percent: float = 50.0
     73:     network_type: str = "wifi"  # wifi, cellular, ethernet
     74:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (68 total)
File: packages\core\cost_management\edge_cost_allocation.py:72:34
Recommendation: Replace magic numbers with named constants or enums
Code context:
     69:     # Current state
     70:     battery_percent: float | None = None
     71:     cpu_temp_celsius: float = 25.0
>>>  72:     memory_usage_percent: float = 50.0
     73:     network_type: str = "wifi"  # wifi, cellular, ethernet
     74:
     75:     # Cost factors


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (68 total)
File: packages\core\cost_management\edge_cost_allocation.py:76:38
Recommendation: Replace magic numbers with named constants or enums
Code context:
     73:     network_type: str = "wifi"  # wifi, cellular, ethernet
     74:
     75:     # Cost factors
>>>  76:     electricity_cost_per_kwh: float = 0.12
     77:     data_cost_per_gb: float = 0.0  # 0 for unlimited plans
     78:     device_depreciation_per_hour: float = 0.001
     79:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (68 total)
File: packages\core\cost_management\edge_cost_allocation.py:78:42
Recommendation: Replace magic numbers with named constants or enums
Code context:
     75:     # Cost factors
     76:     electricity_cost_per_kwh: float = 0.12
     77:     data_cost_per_gb: float = 0.0  # 0 for unlimited plans
>>>  78:     device_depreciation_per_hour: float = 0.001
     79:
     80:     # Participation preferences
     81:     max_participation_level: DeviceParticipationLevel = DeviceParticipationLevel.STANDARD


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (68 total)
File: packages\core\cost_management\edge_cost_allocation.py:83:35
Recommendation: Replace magic numbers with named constants or enums
Code context:
     80:     # Participation preferences
     81:     max_participation_level: DeviceParticipationLevel = DeviceParticipationLevel.STANDARD
     82:     allow_cellular_participation: bool = False
>>>  83:     min_battery_threshold: float = 20.0
     84:     max_thermal_threshold: float = 55.0
     85:
     86:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\cost_management\p2p_transport_optimizer.py:1:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
>>>   1: """
      2: AIVillage P2P Transport Cost Optimizer
      3:
      4: This module provides intelligent P2P transport cost optimization and budget alerts


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\cost_management\p2p_transport_optimizer.py:180:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    177:         priority: str = "normal",
    178:         device_context: dict[str, Any] | None = None,
    179:     ) -> RoutingDecision:
>>> 180:         """
    181:         Optimize transport selection based on cost, device context, and conditions.
    182:
    183:         Args:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\cost_management\p2p_transport_optimizer.py:328:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    325:         priority: str,
    326:         device_context: dict[str, Any],
    327:     ) -> TransportType:
>>> 328:         """Apply the configured optimization strategy to select transport."""
    329:
    330:         if self.optimization_strategy == CostOptimizationStrategy.MINIMIZE_COST:
    331:             # Select lowest total cost


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\cost_management\p2p_transport_optimizer.py:386:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    383:             return max(transport_costs.keys(), key=balanced_score)
    384:
    385:     async def _get_device_context(self) -> dict[str, Any]:
>>> 386:         """Get current device context from edge manager."""
    387:         context = {"battery_percent": 100, "cpu_temp_celsius": 25, "network_type": "wifi", "data_budget_mb": 1000}
    388:
    389:         if self.edge_manager and hasattr(self.edge_manager, "get_device_status"):


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\cost_management\p2p_transport_optimizer.py:591:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    588:         return recommendations
    589:
    590:     def set_optimization_strategy(self, strategy: CostOptimizationStrategy):
>>> 591:         """Update the optimization strategy."""
    592:         old_strategy = self.optimization_strategy
    593:         self.optimization_strategy = strategy
    594:         logger.info(f"Optimization strategy changed: {old_strategy.value} -> {strategy.value}")


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\cost_management\p2p_transport_optimizer.py:599:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    596:
    597: # Helper functions for integration
    598: async def create_transport_optimizer_with_infrastructure() -> P2PTransportOptimizer:
>>> 599:     """Create P2P transport optimizer with all available infrastructure."""
    600:     transport_manager = None
    601:     edge_manager = None
    602:     cost_tracker = None


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (6 calls)
File: packages\core\cost_management\p2p_transport_optimizer.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (10 calls)
File: packages\core\cost_management\p2p_transport_optimizer.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'transport_costs' methods (7 calls)
File: packages\core\cost_management\p2p_transport_optimizer.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'recommendations' methods (7 calls)
File: packages\core\cost_management\p2p_transport_optimizer.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'optimizer' methods (6 calls)
File: packages\core\cost_management\p2p_transport_optimizer.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (48 total)
File: packages\core\cost_management\p2p_transport_optimizer.py:53:31
Recommendation: Replace magic numbers with named constants or enums
Code context:
     50:     battery_cost_per_mb: float  # Battery drain cost per MB
     51:     cellular_multiplier: float = 2.0  # Cellular cost multiplier
     52:     wifi_multiplier: float = 1.0  # WiFi cost multiplier
>>>  53:     reliability_score: float = 0.8  # Transport reliability (0-1)
     54:     setup_latency_ms: int = 100  # Connection setup latency
     55:     throughput_mbps: float = 1.0  # Expected throughput
     56:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (48 total)
File: packages\core\cost_management\p2p_transport_optimizer.py:122:41
Recommendation: Replace magic numbers with named constants or enums
Code context:
    119:         # Configuration
    120:         self.config = {
    121:             "cost_optimization_enabled": True,
>>> 122:             "battery_threshold_percent": 20,  # Switch to BitChat below 20%
    123:             "cellular_cost_awareness": True,  # Factor in cellular costs
    124:             "budget_alert_threshold": 0.8,  # Alert at 80% budget
    125:             "max_routing_history": 1000,  # Keep last 1000 decisions


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (48 total)
File: packages\core\cost_management\p2p_transport_optimizer.py:124:38
Recommendation: Replace magic numbers with named constants or enums
Code context:
    121:             "cost_optimization_enabled": True,
    122:             "battery_threshold_percent": 20,  # Switch to BitChat below 20%
    123:             "cellular_cost_awareness": True,  # Factor in cellular costs
>>> 124:             "budget_alert_threshold": 0.8,  # Alert at 80% budget
    125:             "max_routing_history": 1000,  # Keep last 1000 decisions
    126:             "cost_calculation_interval": 60,  # Recalculate costs every minute
    127:         }


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (48 total)
File: packages\core\cost_management\p2p_transport_optimizer.py:126:41
Recommendation: Replace magic numbers with named constants or enums
Code context:
    123:             "cellular_cost_awareness": True,  # Factor in cellular costs
    124:             "budget_alert_threshold": 0.8,  # Alert at 80% budget
    125:             "max_routing_history": 1000,  # Keep last 1000 decisions
>>> 126:             "cost_calculation_interval": 60,  # Recalculate costs every minute
    127:         }
    128:
    129:         logger.info("P2P transport optimizer initialized")


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (48 total)
File: packages\core\cost_management\p2p_transport_optimizer.py:139:32
Recommendation: Replace magic numbers with named constants or enums
Code context:
    136:         profiles[TransportType.BITCHAT] = TransportCostProfile(
    137:             transport_type=TransportType.BITCHAT,
    138:             base_cost_per_mb=0.0,  # No direct data cost
>>> 139:             battery_cost_per_mb=0.001,  # Minimal battery per MB
    140:             cellular_multiplier=1.0,  # Not cellular dependent
    141:             wifi_multiplier=1.0,  # Not wifi dependent
    142:             reliability_score=0.7,  # Medium reliability (mesh dependent)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\deployment\cloud_cost_analyzer.py:505:31
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    502:             if instance_type:
    503:                 compute_cost = Decimal(str(instance_hourly)) * resource_spec.instance_count
    504:                 hourly_cost += compute_cost
>>> 505:                 notes.append(f"Selected instance type: {instance_type}")
    506:
    507:             # Add storage cost
    508:             if resource_spec.storage_gb:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\deployment\cloud_cost_analyzer.py:817:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    814:
    815:
    816: async def create_cost_analyzer() -> CloudCostAnalyzer:
>>> 817:     """Create and initialize cloud cost analyzer."""
    818:     analyzer = CloudCostAnalyzer()
    819:     logger.info("Cloud cost analyzer created successfully")
    820:     return analyzer


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\deployment\cloud_cost_analyzer.py:819:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    816: async def create_cost_analyzer() -> CloudCostAnalyzer:
    817:     """Create and initialize cloud cost analyzer."""
    818:     analyzer = CloudCostAnalyzer()
>>> 819:     logger.info("Cloud cost analyzer created successfully")
    820:     return analyzer
    821:
    822:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (8 calls)
File: packages\core\deployment\cloud_cost_analyzer.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (6 calls)
File: packages\core\deployment\cloud_cost_analyzer.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'provider_pricing' methods (9 calls)
File: packages\core\deployment\cloud_cost_analyzer.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'analysis' methods (8 calls)
File: packages\core\deployment\cloud_cost_analyzer.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (167 total)
File: packages\core\deployment\cloud_cost_analyzer.py:78:34
Recommendation: Replace magic numbers with named constants or enums
Code context:
     75:
     76:     # Instance specs
     77:     instance_count: int = 1
>>>  78:     uptime_hours_per_month: int = 744  # 24 * 31
     79:
     80:     # Additional metadata
     81:     tags: dict[str, str] = field(default_factory=dict)


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (167 total)
File: packages\core\deployment\cloud_cost_analyzer.py:128:30
Recommendation: Replace magic numbers with named constants or enums
Code context:
    125:
    126:     # Analysis metadata
    127:     analysis_date: datetime = field(default_factory=datetime.utcnow)
>>> 128:     confidence_level: float = 0.85  # 85% confidence in estimates
    129:
    130:     def add_recommendation(self, category: str, description: str, potential_savings: Decimal = Decimal("0")):
    131:         """Add optimization recommendation."""


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (167 total)
File: packages\core\deployment\cloud_cost_analyzer.py:148:25
Recommendation: Replace magic numbers with named constants or enums
Code context:
    145:         # Regional cost multipliers (USD base pricing)
    146:         self.region_multipliers = {
    147:             "us-east-1": 1.0,  # AWS Virginia (baseline)
>>> 148:             "us-west-2": 1.05,  # AWS Oregon
    149:             "eu-west-1": 1.15,  # AWS Ireland
    150:             "ap-southeast-1": 1.2,  # AWS Singapore
    151:             "ap-northeast-1": 1.25,  # AWS Tokyo


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (167 total)
File: packages\core\deployment\cloud_cost_analyzer.py:149:25
Recommendation: Replace magic numbers with named constants or enums
Code context:
    146:         self.region_multipliers = {
    147:             "us-east-1": 1.0,  # AWS Virginia (baseline)
    148:             "us-west-2": 1.05,  # AWS Oregon
>>> 149:             "eu-west-1": 1.15,  # AWS Ireland
    150:             "ap-southeast-1": 1.2,  # AWS Singapore
    151:             "ap-northeast-1": 1.25,  # AWS Tokyo
    152:         }


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (167 total)
File: packages\core\deployment\cloud_cost_analyzer.py:150:30
Recommendation: Replace magic numbers with named constants or enums
Code context:
    147:             "us-east-1": 1.0,  # AWS Virginia (baseline)
    148:             "us-west-2": 1.05,  # AWS Oregon
    149:             "eu-west-1": 1.15,  # AWS Ireland
>>> 150:             "ap-southeast-1": 1.2,  # AWS Singapore
    151:             "ap-northeast-1": 1.25,  # AWS Tokyo
    152:         }
    153:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\deployment\continuous_deployment_automation.py:60:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     57:
     58: @dataclass
     59: class GitWorkflowResult:
>>>  60:     """Results from git workflow operations"""
     61:
     62:     staged_files: list[str]
     63:     changed_files: list[str]


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\deployment\continuous_deployment_automation.py:70:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     67:
     68:
     69: class ContinuousDeploymentAutomation:
>>>  70:     """
     71:     Automated continuous deployment system for AIVillage
     72:
     73:     Handles complete deployment pipeline from git operations to production deployment


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\deployment\continuous_deployment_automation.py:140:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    137:             return False
    138:
    139:     async def stage_and_commit_changes(self, commit_message: str) -> GitWorkflowResult:
>>> 140:         """
    141:         Execute git workflow: stage changed files, list changes, update docs, commit
    142:
    143:         Args:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\deployment\continuous_deployment_automation.py:257:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    254:         return True
    255:
    256:     async def _update_documentation(self) -> bool:
>>> 257:         """Update project documentation"""
    258:         logger.info("Updating documentation...")
    259:
    260:         try:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\deployment\continuous_deployment_automation.py:265:27
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    262:             await self._update_project_documentation()
    263:             return True
    264:         except Exception as e:
>>> 265:             logger.error(f"Documentation update failed: {e}")
    266:             return False
    267:
    268:     async def _deploy_to_environment(self) -> bool:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\deployment\continuous_deployment_automation.py:346:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    343:         return []
    344:
    345:     async def _update_project_documentation(self) -> bool:
>>> 346:         """Update TABLE_OF_CONTENTS.md and README.md"""
    347:         logger.info("Updating project documentation...")
    348:
    349:         try:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\deployment\continuous_deployment_automation.py:420:28
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    417:                 with open(toc_path, "w", encoding="utf-8") as f:
    418:                     f.write(toc_content)
    419:
>>> 420:                 logger.info("Updated TABLE_OF_CONTENTS.md")
    421:
    422:             # Update README with Global South achievement
    423:             if readme_path.exists():


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\deployment\continuous_deployment_automation.py:457:27
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    454:             return True
    455:
    456:         except Exception as e:
>>> 457:             logger.error(f"Failed to update documentation: {e}")
    458:             return False
    459:
    460:     async def _commit_changes(self, message: str) -> str | None:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (38 calls)
File: packages\core\deployment\continuous_deployment_automation.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (23 calls)
File: packages\core\deployment\continuous_deployment_automation.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\global_south\mobile_optimization_bridge.py:184:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    181:
    182:     @classmethod
    183:     def for_device_state(cls, state: MobileDeviceState) -> "OptimizationPolicy":
>>> 184:         """Create optimization policy based on device state."""
    185:         policy = cls()
    186:
    187:         # Battery-based optimizations


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\global_south\mobile_optimization_bridge.py:344:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    341:                 await asyncio.sleep(self.monitoring_interval)
    342:
    343:     async def _update_device_state(self, state: MobileDeviceState) -> None:
>>> 344:         """Update device state and apply optimizations."""
    345:         previous_state = self.current_state
    346:         self.current_state = state
    347:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\global_south\mobile_optimization_bridge.py:596:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    593: async def create_mobile_optimization_bridge(
    594:     offline_coordinator=None, monitoring_interval: int = 30, start_monitoring: bool = True
    595: ) -> MobileOptimizationBridge:
>>> 596:     """Create and optionally start mobile optimization bridge."""
    597:     bridge = MobileOptimizationBridge(offline_coordinator=offline_coordinator, monitoring_interval=monitoring_interval)
    598:
    599:     if start_monitoring:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\global_south\mobile_optimization_bridge.py:602:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    599:     if start_monitoring:
    600:         await bridge.start_monitoring()
    601:
>>> 602:     logger.info("Mobile optimization bridge created and started")
    603:     return bridge
    604:
    605:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (18 calls)
File: packages\core\global_south\mobile_optimization_bridge.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (8 calls)
File: packages\core\global_south\mobile_optimization_bridge.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (61 total)
File: packages\core\global_south\mobile_optimization_bridge.py:76:66
Recommendation: Replace magic numbers with named constants or enums
Code context:
     73:             # Battery detection
     74:             if hasattr(psutil, "sensors_battery"):
     75:                 battery = psutil.sensors_battery()
>>>  76:                 battery_percent = battery.percent if battery else 50.0
     77:                 is_charging = battery.power_plugged if battery else False
     78:             else:
     79:                 battery_percent = 50.0  # Default assumption


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (61 total)
File: packages\core\global_south\mobile_optimization_bridge.py:79:34
Recommendation: Replace magic numbers with named constants or enums
Code context:
     76:                 battery_percent = battery.percent if battery else 50.0
     77:                 is_charging = battery.power_plugged if battery else False
     78:             else:
>>>  79:                 battery_percent = 50.0  # Default assumption
     80:                 is_charging = False
     81:
     82:             # Determine battery status


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (61 total)
File: packages\core\global_south\mobile_optimization_bridge.py:85:35
Recommendation: Replace magic numbers with named constants or enums
Code context:
     82:             # Determine battery status
     83:             if battery_percent < 10:
     84:                 battery_status = BatteryStatus.CRITICAL
>>>  85:             elif battery_percent < 25:
     86:                 battery_status = BatteryStatus.LOW
     87:             elif battery_percent < 50:
     88:                 battery_status = BatteryStatus.MODERATE


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (61 total)
File: packages\core\global_south\mobile_optimization_bridge.py:87:35
Recommendation: Replace magic numbers with named constants or enums
Code context:
     84:                 battery_status = BatteryStatus.CRITICAL
     85:             elif battery_percent < 25:
     86:                 battery_status = BatteryStatus.LOW
>>>  87:             elif battery_percent < 50:
     88:                 battery_status = BatteryStatus.MODERATE
     89:             elif battery_percent < 80:
     90:                 battery_status = BatteryStatus.GOOD


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (61 total)
File: packages\core\global_south\mobile_optimization_bridge.py:89:35
Recommendation: Replace magic numbers with named constants or enums
Code context:
     86:                 battery_status = BatteryStatus.LOW
     87:             elif battery_percent < 50:
     88:                 battery_status = BatteryStatus.MODERATE
>>>  89:             elif battery_percent < 80:
     90:                 battery_status = BatteryStatus.GOOD
     91:             else:
     92:                 battery_status = BatteryStatus.EXCELLENT


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\global_south\offline_coordinator.py:620:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    617:         cache_file.unlink(missing_ok=True)
    618:
    619:     async def _remove_message(self, message_id: str) -> None:
>>> 620:         """Remove message from storage."""
    621:         if message_id not in self.message_index:
    622:             return
    623:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\global_south\offline_coordinator.py:742:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    739:         return random.random() < success_rate
    740:
    741:     async def _receive_messages(self, window: ConnectivityWindow, max_bytes: int) -> list[dict[str, Any]]:
>>> 742:         """Receive new messages from remote sources."""
    743:         # This would integrate with actual message receiving systems
    744:         # For now, return empty list
    745:         return []


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\global_south\offline_coordinator.py:748:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    745:         return []
    746:
    747:     async def _sync_cache_updates(self, window: ConnectivityWindow, max_bytes: int) -> int:
>>> 748:         """Sync cache updates from remote sources."""
    749:         # This would integrate with actual cache synchronization
    750:         # For now, return 0 updates
    751:         return 0


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\global_south\offline_coordinator.py:805:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    802:             json.dump(cache_data, f)
    803:
    804:     async def load_persisted_data(self) -> None:
>>> 805:         """Load persisted messages and cache from disk."""
    806:         logger.info("Loading persisted offline data...")
    807:
    808:         # Load messages


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\global_south\offline_coordinator.py:839:35
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    836:                     self.message_index[message.message_id] = message
    837:
    838:                 except Exception as e:
>>> 839:                     logger.error(f"Failed to load message from {message_file}: {e}")
    840:                     message_file.unlink(missing_ok=True)
    841:
    842:         # Load cache


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\global_south\offline_coordinator.py:872:35
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    869:                     self.cache_lru_order.append(entry.key)
    870:
    871:                 except Exception as e:
>>> 872:                     logger.error(f"Failed to load cache from {cache_file}: {e}")
    873:                     cache_file.unlink(missing_ok=True)
    874:
    875:         # Update storage usage


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\global_south\offline_coordinator.py:889:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    886: async def create_offline_coordinator(
    887:     storage_path: Path = None, max_storage_mb: int = 500, daily_data_budget_usd: float = 0.50
    888: ) -> GlobalSouthOfflineCoordinator:
>>> 889:     """Create and initialize offline coordinator."""
    890:     coordinator = GlobalSouthOfflineCoordinator(
    891:         storage_path=storage_path, max_storage_mb=max_storage_mb, daily_data_budget_usd=daily_data_budget_usd
    892:     )


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'datetime' methods (15 calls)
File: packages\core\global_south\offline_coordinator.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (29 calls)
File: packages\core\global_south\offline_coordinator.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (25 calls)
File: packages\core\global_south\offline_coordinator.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'coordinator' methods (6 calls)
File: packages\core\global_south\offline_coordinator.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (47 total)
File: packages\core\global_south\offline_coordinator.py:53:24
Recommendation: Replace magic numbers with named constants or enums
Code context:
     50:     timestamp: datetime
     51:     expiry: datetime | None = None
     52:     delivery_attempts: int = 0
>>>  53:     max_attempts: int = 5
     54:
     55:     def is_expired(self) -> bool:
     56:         """Check if message has expired."""


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (47 total)
File: packages\core\global_south\offline_coordinator.py:73:21
Recommendation: Replace magic numbers with named constants or enums
Code context:
     70:     timestamp: datetime
     71:     priority: SyncPriority
     72:     size_bytes: int
>>>  73:     ttl_hours: int = 24
     74:     access_count: int = 0
     75:     last_accessed: datetime | None = None
     76:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (47 total)
File: packages\core\global_south\offline_coordinator.py:101:25
Recommendation: Replace magic numbers with named constants or enums
Code context:
     98:     def bytes_affordable(self, budget_usd: float) -> int:
     99:         """Calculate how many bytes can be transferred within budget."""
    100:         if self.data_cost_per_mb <= 0:
>>> 101:             return 100 * 1024 * 1024  # 100MB if free
    102:
    103:         affordable_mb = budget_usd / self.data_cost_per_mb
    104:         return int(affordable_mb * 1024 * 1024)


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (47 total)
File: packages\core\global_south\offline_coordinator.py:101:32
Recommendation: Replace magic numbers with named constants or enums
Code context:
     98:     def bytes_affordable(self, budget_usd: float) -> int:
     99:         """Calculate how many bytes can be transferred within budget."""
    100:         if self.data_cost_per_mb <= 0:
>>> 101:             return 100 * 1024 * 1024  # 100MB if free
    102:
    103:         affordable_mb = budget_usd / self.data_cost_per_mb
    104:         return int(affordable_mb * 1024 * 1024)


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (47 total)
File: packages\core\global_south\offline_coordinator.py:104:35
Recommendation: Replace magic numbers with named constants or enums
Code context:
    101:             return 100 * 1024 * 1024  # 100MB if free
    102:
    103:         affordable_mb = budget_usd / self.data_cost_per_mb
>>> 104:         return int(affordable_mb * 1024 * 1024)
    105:
    106:     def estimated_transfer_time(self, size_bytes: int) -> timedelta:
    107:         """Estimate transfer time for given data size."""


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\global_south\p2p_mesh_integration.py:98:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     95:             self.capabilities = set(self.capabilities)
     96:
     97:     def update_last_seen(self):
>>>  98:         """Update last seen timestamp."""
     99:         self.last_seen = datetime.utcnow()
    100:         self.is_online = True
    101:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\global_south\p2p_mesh_integration.py:144:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    141:
    142:     @classmethod
    143:     def from_bytes(cls, data: bytes) -> "MeshMessage":
>>> 144:         """Deserialize message from bytes."""
    145:         if len(data) < 4:
    146:             raise ValueError("Invalid message data")
    147:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\global_south\p2p_mesh_integration.py:372:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    369:             return False
    370:
    371:     async def _handle_unified_message(self, message: UnifiedMessage, transport_type: TransportType):
>>> 372:         """Handle incoming unified messages from the transport manager."""
    373:         try:
    374:             # Update statistics
    375:             self.stats["messages_received"] += 1


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\global_south\p2p_mesh_integration.py:485:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    482:             logger.error(f"Error syncing with offline coordinator: {e}")
    483:
    484:     async def _update_peer_status(self):
>>> 485:         """Update peer status from BitChat transport."""
    486:         if not self.bitchat_transport:
    487:             return
    488:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\global_south\p2p_mesh_integration.py:516:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    513:             logger.error(f"Error updating peer status: {e}")
    514:
    515:     async def request_content(self, content_key: str, timeout_seconds: int = 30) -> bytes | None:
>>> 516:         """Request content from mesh network using existing transport system."""
    517:         # Check local cache first
    518:         if content_key in self.local_cache:
    519:             content_data, _, access_count = self.local_cache[content_key]


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\global_south\p2p_mesh_integration.py:635:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    632:
    633:     # Message handlers for Global South specific message types
    634:     async def _handle_ping_message(self, message: UnifiedMessage, transport_type: TransportType):
>>> 635:         """Handle ping messages from peers."""
    636:         logger.debug(f"Received ping from {message.metadata.sender_id} via {transport_type.value}")
    637:
    638:         # Update peer information if available


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\global_south\p2p_mesh_integration.py:656:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    653:             self.stats["peers_discovered"] += 1
    654:
    655:     async def _handle_data_message(self, message: UnifiedMessage, transport_type: TransportType):
>>> 656:         """Handle data messages from peers."""
    657:         logger.debug(f"Received data message ({len(message.payload)} bytes) from {message.metadata.sender_id}")
    658:
    659:         # Try to parse as content request


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\global_south\p2p_mesh_integration.py:678:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    675:             )
    676:
    677:     async def _handle_content_request_data(self, request_data: dict[str, Any], sender_id: str):
>>> 678:         """Handle content request from peer."""
    679:         content_key = request_data.get("key")
    680:         if not content_key:
    681:             return


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\global_south\p2p_mesh_integration.py:731:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    728:     transport_priority: TransportPriority = TransportPriority.OFFLINE_FIRST,
    729:     start_immediately: bool = True,
    730: ) -> P2PMeshIntegration:
>>> 731:     """
    732:     Create P2P mesh integration for Global South scenarios.
    733:
    734:     This factory function creates a P2P mesh integration that leverages the existing


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\global_south\p2p_mesh_integration.py:751:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    748:             logger.error("Failed to start P2P mesh integration")
    749:             return None
    750:
>>> 751:     logger.info("P2P mesh integration created for Global South scenarios")
    752:     return mesh_integration
    753:
    754:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\global_south\p2p_mesh_integration.py:788:18
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    785:             finally:
    786:                 await mesh.stop()
    787:         else:
>>> 788:             print("Failed to create mesh integration")
    789:
    790:     asyncio.run(main())


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'datetime' methods (9 calls)
File: packages\core\global_south\p2p_mesh_integration.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (13 calls)
File: packages\core\global_south\p2p_mesh_integration.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (30 calls)
File: packages\core\global_south\p2p_mesh_integration.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'asyncio' methods (9 calls)
File: packages\core\global_south\p2p_mesh_integration.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (34 total)
File: packages\core\global_south\p2p_mesh_integration.py:91:31
Recommendation: Replace magic numbers with named constants or enums
Code context:
     88:     battery_level: float | None = None
     89:     storage_available_mb: float | None = None
     90:     bandwidth_estimate_mbps: float | None = None
>>>  91:     reliability_score: float = 0.5  # 0.0-1.0
     92:
     93:     def __post_init__(self):
     94:         if isinstance(self.capabilities, list):


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (34 total)
File: packages\core\global_south\p2p_mesh_integration.py:102:46
Recommendation: Replace magic numbers with named constants or enums
Code context:
     99:         self.last_seen = datetime.utcnow()
    100:         self.is_online = True
    101:
>>> 102:     def is_stale(self, timeout_seconds: int = 300) -> bool:
    103:         """Check if peer information is stale."""
    104:         return (datetime.utcnow() - self.last_seen).total_seconds() > timeout_seconds
    105:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (34 total)
File: packages\core\global_south\p2p_mesh_integration.py:118:20
Recommendation: Replace magic numbers with named constants or enums
Code context:
    115:     content: bytes
    116:     timestamp: datetime
    117:     ttl: int = 10  # Time to live (hop count)
>>> 118:     priority: int = 5  # 1-10, higher = more important
    119:     compression_used: bool = False
    120:     signature: bytes | None = None
    121:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (34 total)
File: packages\core\global_south\p2p_mesh_integration.py:145:23
Recommendation: Replace magic numbers with named constants or enums
Code context:
    142:     @classmethod
    143:     def from_bytes(cls, data: bytes) -> "MeshMessage":
    144:         """Deserialize message from bytes."""
>>> 145:         if len(data) < 4:
    146:             raise ValueError("Invalid message data")
    147:
    148:         header_length = struct.unpack("!I", data[:4])[0]


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (34 total)
File: packages\core\global_south\p2p_mesh_integration.py:148:50
Recommendation: Replace magic numbers with named constants or enums
Code context:
    145:         if len(data) < 4:
    146:             raise ValueError("Invalid message data")
    147:
>>> 148:         header_length = struct.unpack("!I", data[:4])[0]
    149:         if len(data) < 4 + header_length:
    150:             raise ValueError("Incomplete message data")
    151:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\global_south\test_p2p_integration.py:44:14
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     41:             device_id="test-device-001", data_budget_mb=10, storage_path="./test_storage"  # Small budget for testing
     42:         )
     43:         await offline_coordinator.start()
>>>  44:         print("✓ Offline coordinator created and started")
     45:
     46:         # Test 2: Create P2P mesh integration
     47:         print("\n2. Creating P2P mesh integration...")


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\global_south\test_p2p_integration.py:57:18
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     54:         )
     55:
     56:         if mesh:
>>>  57:             print("✓ P2P mesh integration created successfully")
     58:
     59:             # Test 3: Check status
     60:             print("\n3. Checking integration status...")


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\global_south\test_p2p_integration.py:113:18
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    110:             print("✓ All systems stopped")
    111:
    112:         else:
>>> 113:             print("✗ Failed to create P2P mesh integration")
    114:             return False
    115:
    116:         print("\n" + "=" * 60)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\global_south\test_p2p_integration.py:185:10
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    182:
    183: except ImportError as e:
    184:     print(f"❌ Import error: {e}")
>>> 185:     print("Make sure you're running this from the AIVillage root directory")
    186:     print("and all required packages are available.")


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'mesh' methods (8 calls)
File: packages\core\global_south\test_p2p_integration.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\jobs\hyperag_scan_hidden_links.py:171:27
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    168:         Returns:
    169:             List of high co-mention entity pairs
    170:         """
>>> 171:         self.logger.info(f"Analyzing Hippo-Index logs from {self.log_path}")
    172:
    173:         cutoff_time = datetime.now() - timedelta(hours=self.lookback_hours)
    174:         co_mention_counts = defaultdict(int)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\jobs\hyperag_scan_hidden_links.py:530:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    527:         self.logger.info(summary)
    528:
    529:     async def _create_mock_proposal(self, candidate: CandidateEdge):
>>> 530:         """Create mock repair proposal from candidate edge."""
    531:         # Mock implementation - would create actual RepairOperation in production
    532:         return {
    533:             "operation_type": "add_edge",


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logging' methods (6 calls)
File: packages\core\jobs\hyperag_scan_hidden_links.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'datetime' methods (10 calls)
File: packages\core\jobs\hyperag_scan_hidden_links.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (10 calls)
File: packages\core\jobs\hyperag_scan_hidden_links.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (21 total)
File: packages\core\jobs\hyperag_scan_hidden_links.py:147:61
Recommendation: Replace magic numbers with named constants or enums
Code context:
    144: class HippoIndexAnalyzer:
    145:     """Analyzes Hippo-Index logs for high co-mention entity pairs."""
    146:
>>> 147:     def __init__(self, log_path: Path, lookback_hours: int = 24) -> None:
    148:         """Initialize analyzer.
    149:
    150:         Args:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (21 total)
File: packages\core\jobs\hyperag_scan_hidden_links.py:162:50
Recommendation: Replace magic numbers with named constants or enums
Code context:
    159:         self.entity_pattern = re.compile(r"\[ENTITY:([^\]]+)\]")
    160:         self.co_mention_pattern = re.compile(r"\[COMENTION:([^\]]+)\|([^\]]+)\]")
    161:
>>> 162:     def analyze_logs(self, min_co_mentions: int = 3) -> list[CoMentionPair]:
    163:         """Analyze Hippo-Index logs for entity co-mentions.
    164:
    165:         Args:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (21 total)
File: packages\core\jobs\hyperag_scan_hidden_links.py:200:54
Recommendation: Replace magic numbers with named constants or enums
Code context:
    197:                     entity2=entity2,
    198:                     co_mention_count=count,
    199:                     confidence=confidence,
>>> 200:                     contexts=pair_contexts[pair_key][:5],  # Keep top 5 contexts
    201:                     last_seen=pair_last_seen.get(pair_key, datetime.now()),
    202:                 )
    203:                 pairs.append(pair)


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (21 total)
File: packages\core\jobs\hyperag_scan_hidden_links.py:253:48
Recommendation: Replace magic numbers with named constants or enums
Code context:
    250:                         co_mention_counts[pair_key] += 1
    251:
    252:                         # Extract context (surrounding text)
>>> 253:                         context = line.strip()[:200]  # First 200 chars as context
    254:                         if context not in pair_contexts[pair_key]:
    255:                             pair_contexts[pair_key].append(context)
    256:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (21 total)
File: packages\core\jobs\hyperag_scan_hidden_links.py:269:63
Recommendation: Replace magic numbers with named constants or enums
Code context:
    266:                                 entity1, entity2 = sorted([entities[i].strip(), entities[j].strip()])
    267:                                 pair_key = f"{entity1}|{entity2}"
    268:
>>> 269:                                 co_mention_counts[pair_key] += 0.5  # Lower weight for implicit co-mention
    270:
    271:                                 context = line.strip()[:200]
    272:                                 if context not in pair_contexts[pair_key]:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\jobs\test_scanner.py:22:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     19:
     20:
     21: def create_mock_hippo_logs(log_dir: Path) -> None:
>>>  22:     """Create mock Hippo-Index log files for testing."""
     23:     log_dir.mkdir(parents=True, exist_ok=True)
     24:
     25:     # Create mock log file with co-mentions


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\jobs\test_scanner.py:33:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     30:         "2025-07-23T01:16:00Z [COMENTION:aspirin|headache] found in medical query",
     31:         "2025-07-23T01:17:00Z Patient reported [ENTITY:aspirin] allergy, also has [ENTITY:headache]",
     32:         "2025-07-23T01:18:00Z [COMENTION:aspirin|headache] [COMENTION:headache|treatment]",
>>>  33:         "2025-07-23T01:19:00Z [ENTITY:ibuprofen] alternative to [ENTITY:aspirin] for [ENTITY:headache]",
     34:         "2025-07-23T01:20:00Z [COMENTION:ibuprofen|headache] recommended by doctor",
     35:         "2025-07-23T01:21:00Z Multiple mentions: [ENTITY:aspirin] [ENTITY:ibuprofen] [ENTITY:headache]",
     36:     ]


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\jobs\test_scanner.py:42:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     39:         for entry in mock_entries:
     40:             f.write(entry + "\n")
     41:
>>>  42:     print(f"Created mock log file: {log_file}")
     43:
     44:
     45: async def test_hippo_analyzer() -> None:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\jobs\__init__.py:1:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
>>>   1: """Auto-generated __init__.py for proper module imports.
      2: Created by test infrastructure repair script.
      3: """


HARDCODED_PATH: Hardcoded path or URL detected
File: packages\core\legacy\chat_engine.py:28:33
Recommendation: Use configuration files, environment variables, or path utilities
Code context:
     25: logger = logging.getLogger(__name__)
     26: logger.setLevel(logging.INFO)
     27:
>>>  28: TWIN_URL = os.getenv("TWIN_URL", "https://twin:8001/v1/chat")
     29: CALIB_ENABLED = os.getenv("CALIBRATION_ENABLED", "0") == "1"
     30:
     31: if CALIB_ENABLED:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (6 calls)
File: packages\core\legacy\chat_engine.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'parser' methods (9 calls)
File: packages\core\legacy\cli.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\communication.py:68:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     65:
     66:     @classmethod
     67:     def from_dict(cls, data: dict[str, Any]) -> "AgentMessage":
>>>  68:         """Create message from dictionary format."""
     69:         return cls(
     70:             type=AgentMessageType(data["type"]),
     71:             sender=data["sender"],


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\communication.py:134:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    131:         self.subscribers[agent_name] = handler
    132:
    133:     def unsubscribe(self, agent_name: str) -> None:
>>> 134:         """Unsubscribe an agent from receiving messages.
    135:
    136:         Args:
    137:             agent_name: Name of the agent to unsubscribe


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\communication.py:155:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    152:             await handler(message)
    153:
    154:     async def broadcast(self, message: AgentMessage, exclude: list[str] | None = None) -> None:
>>> 155:         """Broadcast a message to all subscribed agents.
    156:
    157:         Args:
    158:             message: The message to broadcast


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\communication.py:178:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    175:                 await handler(broadcast_message)
    176:
    177:     async def query(self, sender: str, receiver: str, content: Any) -> Any:
>>> 178:         """Send a query and wait for response.
    179:
    180:         Args:
    181:             sender: Name of the sending agent


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\config_manager.py:327:49
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    324:             # Check required P2P settings match CODEX requirements
    325:             expected_port = 4001
    326:             if port != expected_port:
>>> 327:                 warnings.append(f"P2P port {port} differs from CODEX requirement: {expected_port}")
    328:
    329:         # Digital twin validation
    330:         if integration.get("digital_twin", {}).get("enabled"):


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\config_manager.py:453:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    450:
    451:
    452: def get_config_manager(**kwargs) -> CODEXConfigManager:
>>> 453:     """Get or create the global configuration manager."""
    454:     global _config_manager
    455:
    456:     if _config_manager is None:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\config_manager.py:473:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    470:
    471:
    472: def get_config(key_path: str, default=None):
>>> 473:     """Get configuration value from global config manager."""
    474:     return get_config_manager().get(key_path, default)
    475:
    476:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (17 calls)
File: packages\core\legacy\config_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (14 calls)
File: packages\core\legacy\config_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'errors' methods (7 calls)
File: packages\core\legacy\config_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\error_handling.py:116:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    113:
    114:     @classmethod
    115:     def from_dict(cls, data: dict[str, Any]) -> "Message":
>>> 116:         """Create message from dictionary format."""
    117:         return cls(
    118:             type=MessageType(data["type"]),
    119:             content=data["content"],


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\error_handling.py:131:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    128:
    129:
    130: class StandardCommunicationProtocol:
>>> 131:     """Standard protocol for communication between components.
    132:
    133:     This class extends the full implementation from :mod:`src.communications` and
    134:     adds convenience helpers for creating structured messages.


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\error_handling.py:149:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    146:         recipient: str,
    147:         metadata: dict[str, Any] | None = None,
    148:     ) -> Message:
>>> 149:         """Create a request message."""
    150:         return Message(
    151:             type=MessageType.REQUEST,
    152:             content=content,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\error_handling.py:165:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    162:         recipient: str,
    163:         metadata: dict[str, Any] | None = None,
    164:     ) -> Message:
>>> 165:         """Create a response message."""
    166:         return Message(
    167:             type=MessageType.RESPONSE,
    168:             content=content,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\error_handling.py:176:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    173:
    174:     @staticmethod
    175:     def create_error(error: str, sender: str, recipient: str, metadata: dict[str, Any] | None = None) -> Message:
>>> 176:         """Create an error message."""
    177:         return Message(
    178:             type=MessageType.ERROR,
    179:             content={"error": error},


LONG_PARAMETER_LIST: Function '__init__' has 6 parameters (>5)
File: packages\core\legacy\error_handling.py:258:4
Recommendation: Use parameter objects, data classes, or keyword-only arguments
Code context:
    255: class AIVillageException(Exception):
    256:     """Base exception class for AIVillage with structured error information."""
    257:
>>> 258:     def __init__(
    259:         self,
    260:         message: str,
    261:         category: ErrorCategory = ErrorCategory.UNKNOWN,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\error_handling.py:373:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    370:
    371:
    372: def migrate_from_legacy_exception(legacy_exception: Exception) -> AIVillageException:
>>> 373:     """Migrate from legacy exception to new AIVillageException."""
    374:     if isinstance(legacy_exception, AIVillageException):
    375:         return legacy_exception
    376:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'datetime' methods (6 calls)
File: packages\core\legacy\error_handling.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'asyncio' methods (6 calls)
File: packages\core\legacy\error_handling.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'kwargs' methods (12 calls)
File: packages\core\legacy\error_handling.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\evidence.py:55:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     52:
     53:     @classmethod
     54:     def from_json(cls, s: str) -> EvidencePack:
>>>  55:         """Deserialize pack from JSON."""
     56:         return cls.model_validate_json(s)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\evolution_metrics_api.py:125:31
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    122:                 health["database"]["wal_mode"] = mode.lower() == "wal"
    123:
    124:                 # Get metrics count
>>> 125:                 cursor.execute("SELECT COUNT(*) FROM fitness_metrics")
    126:                 health["metrics"]["total_collected"] = cursor.fetchone()[0]
    127:
    128:                 # Get current round


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\evolution_metrics_api.py:129:31
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    126:                 health["metrics"]["total_collected"] = cursor.fetchone()[0]
    127:
    128:                 # Get current round
>>> 129:                 cursor.execute("SELECT id, status FROM evolution_rounds ORDER BY id DESC LIMIT 1")
    130:                 row = cursor.fetchone()
    131:                 if row:
    132:                     health["database"]["current_round"] = row[0]


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\evolution_metrics_api.py:155:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    152:
    153:             # Get latest round metrics
    154:             cursor.execute(
>>> 155:                 """
    156:                 SELECT
    157:                     COUNT(DISTINCT agent_id) as agent_count,
    158:                     AVG(fitness_score) as avg_fitness,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\evolution_metrics_api.py:180:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    177:
    178:             # Get resource usage
    179:             cursor.execute(
>>> 180:                 """
    181:                 SELECT
    182:                     AVG(cpu_usage) as avg_cpu,
    183:                     AVG(memory_usage_mb) as avg_memory


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\evolution_metrics_api.py:213:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    210:             cursor = conn.cursor()
    211:
    212:             cursor.execute(
>>> 213:                 """
    214:                 SELECT
    215:                     agent_id,
    216:                     AVG(fitness_score) as avg_fitness,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\evolution_metrics_api.py:255:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    252:             cursor = conn.cursor()
    253:
    254:             cursor.execute(
>>> 255:                 """
    256:                 SELECT
    257:                     fitness_score,
    258:                     performance_metrics,


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (22 calls)
File: packages\core\legacy\evolution_metrics_api.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'os' methods (7 calls)
File: packages\core\legacy\evolution_metrics_api.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'conn' methods (9 calls)
File: packages\core\legacy\evolution_metrics_api.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'cursor' methods (14 calls)
File: packages\core\legacy\evolution_metrics_api.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\evolution_metrics_integrated.py:122:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    119:
    120:     @classmethod
    121:     def from_dict(cls, data: dict[str, Any]) -> "EvolutionMetricsData":
>>> 122:         """Create from dictionary."""
    123:         return cls(**data)
    124:
    125:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\evolution_metrics_integrated.py:269:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    266:         try:
    267:             cursor = self.db_conn.cursor()
    268:             cursor.execute(
>>> 269:                 """
    270:                 INSERT INTO evolution_rounds (round_number, generation, status, timestamp)
    271:                 VALUES (?, ?, ?, ?)
    272:             """,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\evolution_metrics_integrated.py:294:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    291:         try:
    292:             cursor = self.db_conn.cursor()
    293:             cursor.execute(
>>> 294:                 """
    295:                 UPDATE evolution_rounds
    296:                 SET status = 'completed'
    297:                 WHERE id = ?


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\evolution_metrics_integrated.py:331:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    328:         value: float,
    329:         metadata: dict | None = None,
    330:     ) -> None:
>>> 331:         """Record a single KPI value.
    332:
    333:         Args:
    334:             agent_id: Agent identifier


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\evolution_metrics_integrated.py:393:20
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    390:             for metrics in metrics_list:
    391:                 # Insert fitness metrics
    392:                 cursor.execute(
>>> 393:                     """
    394:                     INSERT INTO fitness_metrics
    395:                     (round_id, agent_id, fitness_score, performance_metrics, timestamp)
    396:                     VALUES (?, ?, ?, ?, ?)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\evolution_metrics_integrated.py:426:20
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    423:
    424:                 # Insert resource metrics
    425:                 cursor.execute(
>>> 426:                     """
    427:                     INSERT INTO resource_metrics
    428:                     (round_id, cpu_usage, memory_usage_mb, network_io_kb, disk_io_kb, gpu_usage, timestamp)
    429:                     VALUES (?, ?, ?, ?, ?, ?, ?)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\evolution_metrics_integrated.py:445:24
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    442:                 # Insert selection outcomes if applicable
    443:                 if metrics.selection_method:
    444:                     cursor.execute(
>>> 445:                         """
    446:                         INSERT INTO selection_outcomes
    447:                         (round_id, parent_agent_id, selection_method, mutation_applied, survival_reason, timestamp)
    448:                         VALUES (?, ?, ?, ?, ?, ?)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\evolution_metrics_integrated.py:528:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    525:         try:
    526:             cursor = self.db_conn.cursor()
    527:             cursor.execute(
>>> 528:                 """
    529:                 SELECT
    530:                     fm.fitness_score,
    531:                     fm.performance_metrics,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\evolution_metrics_integrated.py:594:31
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    591:         if self.db_conn:
    592:             try:
    593:                 cursor = self.db_conn.cursor()
>>> 594:                 cursor.execute("SELECT COUNT(*) FROM fitness_metrics")
    595:                 count = cursor.fetchone()[0]
    596:                 status["database"]["total_records"] = count
    597:             except Exception as e:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\evolution_metrics_integrated.py:642:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    639:
    640:
    641: def get_metrics_instance() -> IntegratedEvolutionMetrics:
>>> 642:     """Get or create the singleton metrics instance."""
    643:     global _metrics_instance
    644:     if _metrics_instance is None:
    645:         _metrics_instance = IntegratedEvolutionMetrics()


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'os' methods (8 calls)
File: packages\core\legacy\evolution_metrics_integrated.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (11 calls)
File: packages\core\legacy\evolution_metrics_integrated.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (20 calls)
File: packages\core\legacy\evolution_metrics_integrated.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'cursor' methods (9 calls)
File: packages\core\legacy\evolution_metrics_integrated.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

SEQUENTIAL_COUPLING: Sequential coupling detected: Function '__init__' is part of a sequence-dependent API
File: packages\core\legacy\evolution_metrics_integrated.py:137:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    134:     - Real-time metrics collection
    135:     """
    136:
>>> 137:     def __init__(self) -> None:
    138:         """Initialize the integrated metrics system."""
    139:         # Load configuration from environment
    140:         self.db_path = os.getenv("AIVILLAGE_DB_PATH", "./data/evolution_metrics.db")


SEQUENTIAL_COUPLING: Sequential coupling detected: Function '_init_storage' is part of a sequence-dependent API
File: packages\core\legacy\evolution_metrics_integrated.py:170:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    167:         # Initialize storage
    168:         self._init_storage()
    169:
>>> 170:     def _init_storage(self) -> None:
    171:         """Initialize storage backends."""
    172:         # Initialize SQLite
    173:         self._init_sqlite()


SEQUENTIAL_COUPLING: Sequential coupling detected: Function '_init_sqlite' is part of a sequence-dependent API
File: packages\core\legacy\evolution_metrics_integrated.py:182:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    179:         # Create log directory
    180:         Path(self.log_dir).mkdir(parents=True, exist_ok=True)
    181:
>>> 182:     def _init_sqlite(self) -> None:
    183:         """Initialize SQLite database with WAL mode."""
    184:         try:
    185:             self.db_conn = sqlite3.connect(self.db_path, check_same_thread=False)


SEQUENTIAL_COUPLING: Sequential coupling detected: Function '_init_redis' is part of a sequence-dependent API
File: packages\core\legacy\evolution_metrics_integrated.py:197:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    194:             logger.exception(f"Failed to initialize SQLite: {e}")
    195:             raise
    196:
>>> 197:     def _init_redis(self) -> None:
    198:         """Initialize Redis connection with fallback."""
    199:         if not REDIS_AVAILABLE:
    200:             logger.warning("Redis module not available, using SQLite only")


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (13 total)
File: packages\core\legacy\evolution_metrics_integrated.py:209:39
Recommendation: Replace magic numbers with named constants or enums
Code context:
    206:                 port=self.redis_port,
    207:                 db=self.redis_db,
    208:                 decode_responses=True,
>>> 209:                 socket_connect_timeout=5,
    210:                 socket_timeout=5,
    211:             )
    212:             # Test connection


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (13 total)
File: packages\core\legacy\evolution_metrics_integrated.py:210:31
Recommendation: Replace magic numbers with named constants or enums
Code context:
    207:                 db=self.redis_db,
    208:                 decode_responses=True,
    209:                 socket_connect_timeout=5,
>>> 210:                 socket_timeout=5,
    211:             )
    212:             # Test connection
    213:             self.redis_client.ping()


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (13 total)
File: packages\core\legacy\evolution_metrics_integrated.py:251:44
Recommendation: Replace magic numbers with named constants or enums
Code context:
    248:         # Wait for worker to finish
    249:         if self.worker_thread:
    250:             self.worker_queue.put(None)  # Signal to stop
>>> 251:             self.worker_thread.join(timeout=5)
    252:
    253:         # Close connections
    254:         if self.db_conn:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (13 total)
File: packages\core\legacy\evolution_metrics_integrated.py:478:42
Recommendation: Replace magic numbers with named constants or enums
Code context:
    475:             self.redis_client.zadd(key, {json.dumps(metrics.to_dict()): metrics.timestamp})
    476:
    477:             # Set expiry (1 hour)
>>> 478:             self.redis_client.expire(key, 3600)
    479:
    480:             # Update real-time leaderboard
    481:             self.redis_client.zadd("evolution:leaderboard", {metrics.agent_id: metrics.fitness_score})


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (13 total)
File: packages\core\legacy\evolution_metrics_integrated.py:512:85
Recommendation: Replace magic numbers with named constants or enums
Code context:
    509:         # Add leaderboard from Redis if available
    510:         if self.redis_client:
    511:             try:
>>> 512:                 top_agents = self.redis_client.zrevrange("evolution:leaderboard", 0, 9, withscores=True)
    513:                 summary["top_agents"] = [{"agent_id": agent, "fitness_score": score} for agent, score in top_agents]
    514:             except Exception as e:
    515:                 logger.warning(f"Failed to get top agents: {e}")


LONG_PARAMETER_LIST: Function 'create_logging_config' has 7 parameters (>5)
File: packages\core\legacy\logging_config.py:83:0
Recommendation: Use parameter objects, data classes, or keyword-only arguments
Code context:
     80:         return msg, kwargs
     81:
     82:
>>>  83: def create_logging_config(
     84:     log_level: str = "INFO",
     85:     log_dir: str | None = None,
     86:     structured_logging: bool = True,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\logging_config.py:92:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     89:     max_file_size: int = 10 * 1024 * 1024,  # 10MB
     90:     backup_count: int = 5,
     91: ) -> dict[str, Any]:
>>>  92:     """Create logging configuration dictionary.
     93:
     94:     Args:
     95:         log_level: Default logging level


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\logging_config.py:208:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    205:     structured_logging: bool = True,
    206:     **kwargs,
    207: ) -> logging.Logger:
>>> 208:     """Setup AIVillage logging with standardized configuration.
    209:
    210:     Args:
    211:         log_level: Logging level (DEBUG, INFO, WARNING, ERROR, CRITICAL)


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (7 calls)
File: packages\core\legacy\logging_config.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\__init__.py:52:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     49:     "ValidationException",
     50:     "error_handler",
     51:     "get_component_logger",
>>>  52:     "migrate_from_legacy_exception",
     53:     "safe_execute",
     54:     "with_error_handling",
     55: ]


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\operations\artifact_collector.py:1:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
>>>   1: """
      2: AIVillage Operational Artifacts Collection System
      3:
      4: Collects, validates, and manages operational artifacts from CI/CD pipeline


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\operations\artifact_collector.py:96:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     93:
     94:
     95: class OperationalArtifactCollector:
>>>  96:     """
     97:     Main artifact collection system for AIVillage operational visibility.
     98:
     99:     Collects artifacts from CI/CD pipeline and local builds, validates them,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\operations\artifact_collector.py:117:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    114:         logger.info("Operational artifact collector initialized")
    115:
    116:     def _setup_directories(self):
>>> 117:         """Create required artifact directories."""
    118:         for dir_path in [
    119:             self.config.artifacts_base_dir,
    120:             self.config.archive_base_dir,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\operations\artifact_collector.py:175:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    172:     async def collect_ci_artifacts(
    173:         self, pipeline_id: str, commit_sha: str, branch: str, artifact_sources: dict[ArtifactType, str]
    174:     ) -> list[ArtifactMetadata]:
>>> 175:         """
    176:         Collect artifacts from CI/CD pipeline.
    177:
    178:         Args:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\operations\artifact_collector.py:289:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    286:             return None
    287:
    288:     async def _download_artifact(self, url: str, destination: Path):
>>> 289:         """Download artifact from URL using async HTTP client."""
    290:         try:
    291:             import aiofiles
    292:             import aiohttp


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\operations\artifact_collector.py:402:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    399:         return metadata
    400:
    401:     async def _update_artifacts_index(self):
>>> 402:         """Update the artifacts index file."""
    403:         index_file = Path(self.config.artifacts_base_dir) / "index.json"
    404:
    405:         # Create index data


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\operations\artifact_collector.py:442:22
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    439:         with open(index_file, "w") as f:
    440:             json.dump(index_data, f, indent=2)
    441:
>>> 442:         logger.info(f"Updated artifacts index: {len(self.artifacts)} artifacts")
    443:
    444:     def search_artifacts(
    445:         self,


LONG_PARAMETER_LIST: Function 'search_artifacts' has 6 parameters (>5)
File: packages\core\operations\artifact_collector.py:444:4
Recommendation: Use parameter objects, data classes, or keyword-only arguments
Code context:
    441:
    442:         logger.info(f"Updated artifacts index: {len(self.artifacts)} artifacts")
    443:
>>> 444:     def search_artifacts(
    445:         self,
    446:         artifact_type: ArtifactType | None = None,
    447:         pipeline_id: str | None = None,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\operations\artifact_collector.py:474:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    471:         return sorted(results, key=lambda x: x.collected_at, reverse=True)
    472:
    473:     async def generate_operational_report(self, days_back: int = 7) -> dict[str, Any]:
>>> 474:         """Generate operational report from collected artifacts."""
    475:         cutoff_time = time.time() - (days_back * 24 * 3600)
    476:         recent_artifacts = [a for a in self.artifacts if a.collected_at > cutoff_time]
    477:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\operations\artifact_collector.py:569:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    566:     commit_sha: str,
    567:     branch: str,
    568: ) -> list[ArtifactMetadata]:
>>> 569:     """Collect artifacts from GitHub Actions workflow run."""
    570:
    571:     # Map of expected GitHub Actions artifacts to their types
    572:     github_artifact_mapping = {


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (8 calls)
File: packages\core\operations\artifact_collector.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (10 calls)
File: packages\core\operations\artifact_collector.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'time' methods (7 calls)
File: packages\core\operations\artifact_collector.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'data' methods (12 calls)
File: packages\core\operations\artifact_collector.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (22 total)
File: packages\core\operations\artifact_collector.py:75:38
Recommendation: Replace magic numbers with named constants or enums
Code context:
     72:
     73:     # Collection settings
     74:     enabled_types: list[ArtifactType] = field(default_factory=lambda: list(ArtifactType))
>>>  75:     collection_timeout_seconds: int = 300
     76:     max_artifact_size_mb: int = 100
     77:     retention_days: int = 90
     78:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (22 total)
File: packages\core\operations\artifact_collector.py:77:26
Recommendation: Replace magic numbers with named constants or enums
Code context:
     74:     enabled_types: list[ArtifactType] = field(default_factory=lambda: list(ArtifactType))
     75:     collection_timeout_seconds: int = 300
     76:     max_artifact_size_mb: int = 100
>>>  77:     retention_days: int = 90
     78:
     79:     # Storage settings
     80:     artifacts_base_dir: str = "artifacts"


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (22 total)
File: packages\core\operations\artifact_collector.py:130:31
Recommendation: Replace magic numbers with named constants or enums
Code context:
    127:         return {
    128:             ArtifactType.COVERAGE: {
    129:                 "required_extensions": [".xml", ".json", ".html"],
>>> 130:                 "max_size_mb": 50,
    131:                 "required_fields": ["coverage_percent", "lines_covered"],
    132:                 "schema_validation": True,
    133:             },


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (22 total)
File: packages\core\operations\artifact_collector.py:136:31
Recommendation: Replace magic numbers with named constants or enums
Code context:
    133:             },
    134:             ArtifactType.SECURITY: {
    135:                 "required_extensions": [".json", ".sarif", ".xml"],
>>> 136:                 "max_size_mb": 25,
    137:                 "required_fields": ["scan_date", "vulnerabilities"],
    138:                 "schema_validation": True,
    139:             },


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (22 total)
File: packages\core\operations\artifact_collector.py:148:31
Recommendation: Replace magic numbers with named constants or enums
Code context:
    145:             },
    146:             ArtifactType.PERFORMANCE: {
    147:                 "required_extensions": [".json", ".csv", ".html"],
>>> 148:                 "max_size_mb": 20,
    149:                 "required_fields": ["benchmarks", "metrics"],
    150:                 "schema_validation": True,
    151:             },


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\operations\github_workflow_integration.py:1:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
>>>   1: """
      2: GitHub Actions Workflow Integration for AIVillage Operational Artifacts
      3:
      4: Provides integration with GitHub Actions workflows to automatically collect


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\operations\github_workflow_integration.py:82:25
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     79:   schedule:
     80:     - cron: '{self.config.schedule_cron}'"""
     81:
>>>  82:         workflow_yaml += """
     83:   workflow_dispatch:
     84:
     85: jobs:


HARDCODED_PATH: Hardcoded path or URL detected
File: packages\core\operations\github_workflow_integration.py:82:25
Recommendation: Use configuration files, environment variables, or path utilities
Code context:
     79:   schedule:
     80:     - cron: '{self.config.schedule_cron}'"""
     81:
>>>  82:         workflow_yaml += """
     83:   workflow_dispatch:
     84:
     85: jobs:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\operations\github_workflow_integration.py:381:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    378:         return workflow_yaml
    379:
    380:     async def download_workflow_artifacts(self, workflow_run_id: str, download_dir: Path) -> dict[str, Path]:
>>> 381:         """Download artifacts from GitHub Actions workflow run."""
    382:
    383:         if not self.github_token:
    384:             raise ValueError("GitHub token required for artifact download")


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\operations\github_workflow_integration.py:403:60
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    400:             artifact_path = download_dir / f"{artifact_name}.zip"
    401:             downloaded_artifacts[artifact_name] = artifact_path
    402:
>>> 403:         logger.info(f"Downloaded {len(downloaded_artifacts)} artifacts from workflow {workflow_run_id}")
    404:         return downloaded_artifacts
    405:
    406:     def create_workflow_file(self, output_path: Path):


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\operations\github_workflow_integration.py:407:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    404:         return downloaded_artifacts
    405:
    406:     def create_workflow_file(self, output_path: Path):
>>> 407:         """Create GitHub Actions workflow file."""
    408:         workflow_yaml = self.generate_workflow_yaml()
    409:
    410:         # Create .github/workflows directory


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\operations\github_workflow_integration.py:418:22
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    415:         workflow_file = workflow_dir / f"{self.config.workflow_name}.yml"
    416:         workflow_file.write_text(workflow_yaml)
    417:
>>> 418:         logger.info(f"Created GitHub Actions workflow: {workflow_file}")
    419:         return workflow_file
    420:
    421:     async def integrate_with_collector(


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\operations\github_workflow_integration.py:464:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    461:
    462:
    463: def create_github_integration_config() -> GitHubWorkflowConfig:
>>> 464:     """Create GitHub integration configuration from environment."""
    465:     return GitHubWorkflowConfig(
    466:         github_token=os.getenv("GITHUB_TOKEN"),
    467:         repository=os.getenv("GITHUB_REPOSITORY"),


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\operations\github_workflow_integration.py:483:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    480:     pipeline_id: str | None = None,
    481:     commit_sha: str | None = None,
    482: ) -> list[ArtifactMetadata]:
>>> 483:     """Collect artifacts from local development environment."""
    484:
    485:     # Use git to get current commit info if not provided
    486:     if not commit_sha:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\operations\github_workflow_integration.py:544:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    541:
    542:         # Generate workflow file
    543:         workflow_file = integration.create_workflow_file(Path.cwd())
>>> 544:         print(f"Created workflow file: {workflow_file}")
    545:
    546:         # Create collector and collect local artifacts
    547:         collector_config = CollectionConfig()


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'os' methods (9 calls)
File: packages\core\operations\github_workflow_integration.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\aivillage_rbac_integration.py:143:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    140:             return {"error": f"Unknown action: {action}", "status": 400}
    141:
    142:     async def create_agent(self, user_id: str, tenant_id: str, params: dict[str, Any]) -> dict[str, Any]:
>>> 143:         """Create new agent with tenant isolation."""
    144:         if not await self.rbac.check_permission(user_id, Permission.AGENT_CREATE):
    145:             return {"error": "Permission denied", "status": 403}
    146:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\aivillage_rbac_integration.py:236:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    233:         }
    234:
    235:     async def update_agent(self, user_id: str, tenant_id: str, agent_id: str, params: dict[str, Any]) -> dict[str, Any]:
>>> 236:         """Update agent configuration."""
    237:         if not await self.rbac.check_permission(user_id, Permission.AGENT_UPDATE, agent_id):
    238:             return {"error": "Permission denied", "status": 403}
    239:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\aivillage_rbac_integration.py:251:33
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    248:             )
    249:
    250:             if not success:
>>> 251:                 return {"error": "Agent not found or update failed", "status": 404}
    252:
    253:         except Exception as e:
    254:             return {"error": f"Update failed: {str(e)}", "status": 400}


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\aivillage_rbac_integration.py:255:51
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    252:
    253:         except Exception as e:
    254:             return {"error": f"Update failed: {str(e)}", "status": 400}
>>> 255:         return {"status": 200, "data": {"message": "Agent updated successfully"}}
    256:
    257:     async def delete_agent(self, user_id: str, tenant_id: str, agent_id: str) -> dict[str, Any]:
    258:         """Delete agent."""


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\aivillage_rbac_integration.py:269:51
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    266:         if not success:
    267:             return {"error": "Agent not found", "status": 404}
    268:
>>> 269:         return {"status": 200, "data": {"message": "Agent deleted successfully"}}
    270:
    271:
    272: class RAGSystemIntegration:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\aivillage_rbac_integration.py:305:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    302:             return {"error": f"Unknown action: {action}", "status": 400}
    303:
    304:     async def create_collection(self, user_id: str, tenant_id: str, params: dict[str, Any]) -> dict[str, Any]:
>>> 305:         """Create RAG collection with tenant isolation."""
    306:         if not await self.rbac.check_permission(user_id, Permission.RAG_CREATE):
    307:             return {"error": "Permission denied", "status": 403}
    308:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\aivillage_rbac_integration.py:395:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    392:         }
    393:
    394:     async def delete_collection(self, user_id: str, tenant_id: str, collection_id: str) -> dict[str, Any]:
>>> 395:         """Delete RAG collection."""
    396:         if not await self.rbac.check_permission(user_id, Permission.RAG_DELETE, collection_id):
    397:             return {"error": "Permission denied", "status": 403}
    398:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\aivillage_rbac_integration.py:408:51
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    405:                 return {"error": "Collection not found", "status": 404}
    406:         except Exception as e:
    407:             return {"error": f"Deletion failed: {str(e)}", "status": 400}
>>> 408:         return {"status": 200, "data": {"message": "Collection deleted successfully"}}
    409:
    410:
    411: class P2PNetworkIntegration:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\aivillage_rbac_integration.py:444:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    441:             return {"error": f"Unknown action: {action}", "status": 400}
    442:
    443:     async def create_network(self, user_id: str, tenant_id: str, params: dict[str, Any]) -> dict[str, Any]:
>>> 444:         """Create P2P network with tenant isolation."""
    445:         if not await self.rbac.check_permission(user_id, Permission.P2P_CREATE):
    446:             return {"error": "Permission denied", "status": 403}
    447:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\aivillage_rbac_integration.py:478:27
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    475:         return {
    476:             "status": 200,
    477:             "data": {
>>> 478:                 "message": "Joined network successfully",
    479:                 "network_id": network_id,
    480:                 "peer_id": f"peer_{user_id}_{datetime.utcnow().timestamp()}",
    481:             },


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\aivillage_rbac_integration.py:663:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    660:             return {"error": f"Unknown action: {action}", "status": 400}
    661:
    662:     async def create_twin(self, user_id: str, tenant_id: str, params: dict[str, Any]) -> dict[str, Any]:
>>> 663:         """Create digital twin with privacy protection."""
    664:         if not await self.rbac.check_permission(user_id, Permission.AGENT_CREATE):
    665:             return {"error": "Permission denied", "status": 403}
    666:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\aivillage_rbac_integration.py:707:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    704:         }
    705:
    706:     async def update_twin(self, user_id: str, tenant_id: str, twin_id: str, params: dict[str, Any]) -> dict[str, Any]:
>>> 707:         """Update digital twin settings."""
    708:         # Users can only update their own twins
    709:         user = self.rbac.users.get(user_id)
    710:         if not user or user.tenant_id != tenant_id:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\aivillage_rbac_integration.py:713:51
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    710:         if not user or user.tenant_id != tenant_id:
    711:             return {"error": "Permission denied", "status": 403}
    712:
>>> 713:         return {"status": 200, "data": {"message": "Digital twin updated successfully"}}
    714:
    715:     async def get_twin_status(self, user_id: str, tenant_id: str, twin_id: str) -> dict[str, Any]:
    716:         """Get digital twin status."""


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (27 calls)
File: packages\core\security\aivillage_rbac_integration.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'params' methods (9 calls)
File: packages\core\security\aivillage_rbac_integration.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'datetime' methods (13 calls)
File: packages\core\security\aivillage_rbac_integration.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (77 total)
File: packages\core\security\aivillage_rbac_integration.py:58:69
Recommendation: Replace magic numbers with named constants or enums
Code context:
     55:             # Validate user and tenant
     56:             user = self.rbac.users.get(user_id)
     57:             if not user or user.tenant_id != tenant_id:
>>>  58:                 return {"error": "Invalid user or tenant", "status": 403}
     59:
     60:             # Route to appropriate integration
     61:             if system == "agents":


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (77 total)
File: packages\core\security\aivillage_rbac_integration.py:78:72
Recommendation: Replace magic numbers with named constants or enums
Code context:
     75:             elif system == "mobile":
     76:                 return await self.mobile_integration.handle_request(action, user_id, tenant_id, resource_id, params)
     77:             else:
>>>  78:                 return {"error": f"Unknown system: {system}", "status": 400}
     79:
     80:         except PermissionError as e:
     81:             return {"error": str(e), "status": 403}


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (77 total)
File: packages\core\security\aivillage_rbac_integration.py:81:47
Recommendation: Replace magic numbers with named constants or enums
Code context:
     78:                 return {"error": f"Unknown system: {system}", "status": 400}
     79:
     80:         except PermissionError as e:
>>>  81:             return {"error": str(e), "status": 403}
     82:         except Exception as e:
     83:             logger.error(f"API call error: {e}")
     84:             return {"error": "Internal server error", "status": 500}


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (77 total)
File: packages\core\security\aivillage_rbac_integration.py:84:64
Recommendation: Replace magic numbers with named constants or enums
Code context:
     81:             return {"error": str(e), "status": 403}
     82:         except Exception as e:
     83:             logger.error(f"API call error: {e}")
>>>  84:             return {"error": "Internal server error", "status": 500}
     85:
     86:     def require_system_permission(self, permission: Permission):
     87:         """Decorator for protecting system-level operations."""


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (77 total)
File: packages\core\security\aivillage_rbac_integration.py:140:68
Recommendation: Replace magic numbers with named constants or enums
Code context:
    137:         elif action == "delete_agent":
    138:             return await self.delete_agent(user_id, tenant_id, resource_id)
    139:         else:
>>> 140:             return {"error": f"Unknown action: {action}", "status": 400}
    141:
    142:     async def create_agent(self, user_id: str, tenant_id: str, params: dict[str, Any]) -> dict[str, Any]:
    143:         """Create new agent with tenant isolation."""


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (35 total)
File: packages\core\security\constants.py:13:46
Recommendation: Replace magic numbers with named constants or enums
Code context:
     10:
     11: # JWT Configuration
     12: JWT_ALGORITHM: Final[str] = "HS256"
>>>  13: JWT_ACCESS_TOKEN_EXPIRE_MINUTES: Final[int] = 30
     14: JWT_REFRESH_TOKEN_EXPIRE_DAYS: Final[int] = 7
     15: JWT_SECRET_KEY_LENGTH: Final[int] = 32
     16:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (35 total)
File: packages\core\security\constants.py:14:44
Recommendation: Replace magic numbers with named constants or enums
Code context:
     11: # JWT Configuration
     12: JWT_ALGORITHM: Final[str] = "HS256"
     13: JWT_ACCESS_TOKEN_EXPIRE_MINUTES: Final[int] = 30
>>>  14: JWT_REFRESH_TOKEN_EXPIRE_DAYS: Final[int] = 7
     15: JWT_SECRET_KEY_LENGTH: Final[int] = 32
     16:
     17: # Password Security


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (35 total)
File: packages\core\security\constants.py:15:36
Recommendation: Replace magic numbers with named constants or enums
Code context:
     12: JWT_ALGORITHM: Final[str] = "HS256"
     13: JWT_ACCESS_TOKEN_EXPIRE_MINUTES: Final[int] = 30
     14: JWT_REFRESH_TOKEN_EXPIRE_DAYS: Final[int] = 7
>>>  15: JWT_SECRET_KEY_LENGTH: Final[int] = 32
     16:
     17: # Password Security
     18: PASSWORD_MIN_LENGTH: Final[int] = 8


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (35 total)
File: packages\core\security\constants.py:18:34
Recommendation: Replace magic numbers with named constants or enums
Code context:
     15: JWT_SECRET_KEY_LENGTH: Final[int] = 32
     16:
     17: # Password Security
>>>  18: PASSWORD_MIN_LENGTH: Final[int] = 8
     19: PASSWORD_MAX_LENGTH: Final[int] = 128
     20: PASSWORD_HASH_ROUNDS: Final[int] = 12
     21: PASSWORD_RESET_TOKEN_EXPIRE_HOURS: Final[int] = 1


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (35 total)
File: packages\core\security\constants.py:19:34
Recommendation: Replace magic numbers with named constants or enums
Code context:
     16:
     17: # Password Security
     18: PASSWORD_MIN_LENGTH: Final[int] = 8
>>>  19: PASSWORD_MAX_LENGTH: Final[int] = 128
     20: PASSWORD_HASH_ROUNDS: Final[int] = 12
     21: PASSWORD_RESET_TOKEN_EXPIRE_HOURS: Final[int] = 1
     22:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\demo_rbac_integration.py:48:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     45:         tenant_id=tenant.tenant_id,
     46:         role=Role.DEVELOPER,
     47:     )
>>>  48:     print(f"   Created developer: {developer.username}")
     49:
     50:     data_scientist = await rbac.create_user(
     51:         username="bob_scientist",


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\demo_rbac_integration.py:57:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     54:         tenant_id=tenant.tenant_id,
     55:         role=Role.DATA_SCIENTIST,
     56:     )
>>>  57:     print(f"   Created data scientist: {data_scientist.username}")
     58:
     59:     regular_user = await rbac.create_user(
     60:         username="charlie_user",


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\demo_rbac_integration.py:66:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     63:         tenant_id=tenant.tenant_id,
     64:         role=Role.USER,
     65:     )
>>>  66:     print(f"   Created regular user: {regular_user.username}")
     67:
     68:     # Test authentication
     69:     print("\n4. Testing authentication...")


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\demo_rbac_integration.py:166:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    163:     )
    164:
    165:     if rag_result.get("status") == 201:
>>> 166:         print(f"   ✅ RAG collection created: {rag_result['data']['collection_id']}")
    167:         collection_id = rag_result["data"]["collection_id"]
    168:
    169:         # Query RAG (as regular user - should work)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\demo_rbac_integration.py:199:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    196:     )
    197:
    198:     if p2p_result.get("status") == 201:
>>> 199:         print(f"   ✅ P2P network created: {p2p_result['data']['network_id']}")
    200:         network_id = p2p_result["data"]["network_id"]
    201:
    202:         # Join network (as regular user - should work)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\demo_rbac_integration.py:213:20
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    210:         )
    211:
    212:         if join_result.get("status") == 200:
>>> 213:             print(f"   ✅ P2P network joined: {join_result['data']['peer_id']}")
    214:         else:
    215:             print(f"   ❌ P2P network join failed: {join_result.get('error')}")
    216:     else:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\demo_rbac_integration.py:215:20
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    212:         if join_result.get("status") == 200:
    213:             print(f"   ✅ P2P network joined: {join_result['data']['peer_id']}")
    214:         else:
>>> 215:             print(f"   ❌ P2P network join failed: {join_result.get('error')}")
    216:     else:
    217:         print(f"   ❌ P2P network creation failed: {p2p_result.get('error')}")
    218:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\demo_rbac_integration.py:301:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    298:         endpoints = [
    299:             "POST /auth/login - User authentication",
    300:             "POST /auth/refresh - Token refresh",
>>> 301:             "POST /tenants - Create tenant",
    302:             "POST /users - Create user",
    303:             "GET  /agents - List agents",
    304:             "POST /agents - Create agent",


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\demo_rbac_integration.py:302:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    299:             "POST /auth/login - User authentication",
    300:             "POST /auth/refresh - Token refresh",
    301:             "POST /tenants - Create tenant",
>>> 302:             "POST /users - Create user",
    303:             "GET  /agents - List agents",
    304:             "POST /agents - Create agent",
    305:             "POST /agents/{id}/execute - Execute agent",


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\demo_rbac_integration.py:304:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    301:             "POST /tenants - Create tenant",
    302:             "POST /users - Create user",
    303:             "GET  /agents - List agents",
>>> 304:             "POST /agents - Create agent",
    305:             "POST /agents/{id}/execute - Execute agent",
    306:             "GET  /rag/collections - List RAG collections",
    307:             "POST /rag/collections - Create RAG collection",


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\demo_rbac_integration.py:307:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    304:             "POST /agents - Create agent",
    305:             "POST /agents/{id}/execute - Execute agent",
    306:             "GET  /rag/collections - List RAG collections",
>>> 307:             "POST /rag/collections - Create RAG collection",
    308:             "POST /rag/collections/{id}/query - Query RAG",
    309:             "POST /p2p/networks - Create P2P network",
    310:             "GET  /p2p/networks - List P2P networks",


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\demo_rbac_integration.py:309:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    306:             "GET  /rag/collections - List RAG collections",
    307:             "POST /rag/collections - Create RAG collection",
    308:             "POST /rag/collections/{id}/query - Query RAG",
>>> 309:             "POST /p2p/networks - Create P2P network",
    310:             "GET  /p2p/networks - List P2P networks",
    311:             "POST /agent-forge/training - Start training",
    312:             "POST /digital-twin - Create digital twin",


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\demo_rbac_integration.py:312:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    309:             "POST /p2p/networks - Create P2P network",
    310:             "GET  /p2p/networks - List P2P networks",
    311:             "POST /agent-forge/training - Start training",
>>> 312:             "POST /digital-twin - Create digital twin",
    313:             "POST /mobile/devices - Register device",
    314:             "GET  /audit/logs - Get audit logs",
    315:         ]


HARDCODED_PATH: Hardcoded path or URL detected
File: packages\core\security\demo_rbac_integration.py:322:14
Recommendation: Use configuration files, environment variables, or path utilities
Code context:
    319:
    320:         print("\n🚀 To start the API server:")
    321:         print("   python -m packages.core.security.rbac_api_server")
>>> 322:         print("   Then visit: http://localhost:8000/docs")
    323:
    324:         return server
    325:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'rbac' methods (10 calls)
File: packages\core\security\demo_rbac_integration.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'integration' methods (8 calls)
File: packages\core\security\demo_rbac_integration.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (14 total)
File: packages\core\security\demo_rbac_integration.py:21:16
Recommendation: Replace magic numbers with named constants or enums
Code context:
     18: async def demo_rbac_system():
     19:     """Comprehensive demo of RBAC system with AIVillage integration."""
     20:     print("🚀 AIVillage RBAC Integration Demo")
>>>  21:     print("=" * 50)
     22:
     23:     # Initialize RBAC system
     24:     print("\n1. Initializing RBAC system...")


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (14 total)
File: packages\core\security\demo_rbac_integration.py:34:30
Recommendation: Replace magic numbers with named constants or enums
Code context:
     31:     tenant = await rbac.create_tenant(
     32:         name="Demo Corporation",
     33:         admin_user={"username": "demo_admin", "email": "admin@demo.corp", "password": "SecurePassword123!"},
>>>  34:         config={"max_agents": 20, "max_rag_collections": 10, "storage_quota_gb": 500},
     35:     )
     36:     print(f"   Created tenant: {tenant.name} ({tenant.tenant_id})")
     37:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (14 total)
File: packages\core\security\demo_rbac_integration.py:34:81
Recommendation: Replace magic numbers with named constants or enums
Code context:
     31:     tenant = await rbac.create_tenant(
     32:         name="Demo Corporation",
     33:         admin_user={"username": "demo_admin", "email": "admin@demo.corp", "password": "SecurePassword123!"},
>>>  34:         config={"max_agents": 20, "max_rag_collections": 10, "storage_quota_gb": 500},
     35:     )
     36:     print(f"   Created tenant: {tenant.name} ({tenant.tenant_id})")
     37:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (14 total)
File: packages\core\security\demo_rbac_integration.py:115:88
Recommendation: Replace magic numbers with named constants or enums
Code context:
    112:         action="create_agent",
    113:         user_id=developer.user_id,
    114:         tenant_id=tenant.tenant_id,
>>> 115:         params={"name": "demo_agent", "type": "king_agent", "config": {"max_memory_mb": 1024}},
    116:     )
    117:
    118:     if agent_result.get("status") == 201:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (14 total)
File: packages\core\security\demo_rbac_integration.py:118:37
Recommendation: Replace magic numbers with named constants or enums
Code context:
    115:         params={"name": "demo_agent", "type": "king_agent", "config": {"max_memory_mb": 1024}},
    116:     )
    117:
>>> 118:     if agent_result.get("status") == 201:
    119:         print(f"   ✅ Agent created: {agent_result['data']['agent_id']}")
    120:         agent_id = agent_result["data"]["agent_id"]
    121:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\digital_twin_encryption.py:18:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     15:     """Handles encryption/decryption for digital twin sensitive data."""
     16:
     17:     def __init__(self):
>>>  18:         """Initialize encryption with key from environment or generate new one."""
     19:         key_b64 = os.environ.get("DIGITAL_TWIN_ENCRYPTION_KEY")
     20:         if not key_b64:
     21:             raise DigitalTwinEncryptionError("DIGITAL_TWIN_ENCRYPTION_KEY environment variable required")


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\multi_tenant_manager.py:87:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     84:         cursor = conn.cursor()
     85:
     86:         cursor.execute(
>>>  87:             """
     88:             CREATE TABLE IF NOT EXISTS resources (
     89:                 resource_id TEXT PRIMARY KEY,
     90:                 tenant_id TEXT NOT NULL,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\multi_tenant_manager.py:105:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    102:         )
    103:
    104:         cursor.execute(
>>> 105:             """
    106:             CREATE INDEX IF NOT EXISTS idx_tenant_resources
    107:             ON resources(tenant_id, resource_type)
    108:         """


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\multi_tenant_manager.py:112:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    109:         )
    110:
    111:         cursor.execute(
>>> 112:             """
    113:             CREATE TABLE IF NOT EXISTS resource_usage (
    114:                 id INTEGER PRIMARY KEY AUTOINCREMENT,
    115:                 tenant_id TEXT NOT NULL,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\multi_tenant_manager.py:130:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    127:         conn.close()
    128:
    129:     def _load_resources(self):
>>> 130:         """Load existing resources from database."""
    131:         conn = sqlite3.connect(self.db_path)
    132:         cursor = conn.cursor()
    133:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\multi_tenant_manager.py:134:23
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    131:         conn = sqlite3.connect(self.db_path)
    132:         cursor = conn.cursor()
    133:
>>> 134:         cursor.execute("SELECT * FROM resources WHERE status = 'active'")
    135:         rows = cursor.fetchall()
    136:
    137:         for row in rows:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\multi_tenant_manager.py:161:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    158:     async def create_agent(
    159:         self, tenant_id: str, user_id: str, agent_name: str, agent_type: str, config: dict[str, Any]
    160:     ) -> TenantResource:
>>> 161:         """Create isolated agent for tenant."""
    162:         # Check permissions
    163:         if not await self.rbac.check_permission(user_id, Permission.AGENT_CREATE):
    164:             raise PermissionError(f"User {user_id} cannot create agents")


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\multi_tenant_manager.py:164:50
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    161:         """Create isolated agent for tenant."""
    162:         # Check permissions
    163:         if not await self.rbac.check_permission(user_id, Permission.AGENT_CREATE):
>>> 164:             raise PermissionError(f"User {user_id} cannot create agents")
    165:
    166:         # Check quota
    167:         if not await self.rbac.check_quota(tenant_id, "agents"):


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\multi_tenant_manager.py:240:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    237:         return self.tenant_resources[tenant_id][ResourceType.AGENT]
    238:
    239:     async def delete_agent(self, tenant_id: str, user_id: str, agent_name: str) -> bool:
>>> 240:         """Delete agent and clean up resources."""
    241:         # Check permissions
    242:         if not await self.rbac.check_permission(user_id, Permission.AGENT_DELETE):
    243:             raise PermissionError(f"User {user_id} cannot delete agents")


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\multi_tenant_manager.py:243:50
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    240:         """Delete agent and clean up resources."""
    241:         # Check permissions
    242:         if not await self.rbac.check_permission(user_id, Permission.AGENT_DELETE):
>>> 243:             raise PermissionError(f"User {user_id} cannot delete agents")
    244:
    245:         # Find agent
    246:         agents = self.tenant_resources[tenant_id][ResourceType.AGENT]


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\multi_tenant_manager.py:277:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    274:     async def create_rag_collection(
    275:         self, tenant_id: str, user_id: str, collection_name: str, config: dict[str, Any]
    276:     ) -> TenantResource:
>>> 277:         """Create isolated RAG collection for tenant."""
    278:         # Check permissions
    279:         if not await self.rbac.check_permission(user_id, Permission.RAG_CREATE):
    280:             raise PermissionError(f"User {user_id} cannot create RAG collections")


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\multi_tenant_manager.py:280:50
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    277:         """Create isolated RAG collection for tenant."""
    278:         # Check permissions
    279:         if not await self.rbac.check_permission(user_id, Permission.RAG_CREATE):
>>> 280:             raise PermissionError(f"User {user_id} cannot create RAG collections")
    281:
    282:         # Check quota
    283:         if not await self.rbac.check_quota(tenant_id, "rag_collections"):


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\multi_tenant_manager.py:334:22
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    331:         # Update quota
    332:         await self.rbac.update_quota_usage(tenant_id, "rag_collections", 1, "add")
    333:
>>> 334:         logger.info(f"Created RAG collection {collection_id} for tenant {tenant_id}")
    335:         return resource
    336:
    337:     async def add_documents_to_rag(


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\multi_tenant_manager.py:343:50
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    340:         """Add documents to RAG collection with isolation."""
    341:         # Check permissions
    342:         if not await self.rbac.check_permission(user_id, Permission.RAG_UPDATE):
>>> 343:             raise PermissionError(f"User {user_id} cannot update RAG collections")
    344:
    345:         # Find collection
    346:         collections = self.tenant_resources[tenant_id][ResourceType.RAG_COLLECTION]


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\multi_tenant_manager.py:377:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    374:     async def create_p2p_network(
    375:         self, tenant_id: str, user_id: str, network_name: str, config: dict[str, Any]
    376:     ) -> TenantResource:
>>> 377:         """Create isolated P2P network for tenant."""
    378:         # Check permissions
    379:         if not await self.rbac.check_permission(user_id, Permission.P2P_CREATE):
    380:             raise PermissionError(f"User {user_id} cannot create P2P networks")


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\multi_tenant_manager.py:380:50
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    377:         """Create isolated P2P network for tenant."""
    378:         # Check permissions
    379:         if not await self.rbac.check_permission(user_id, Permission.P2P_CREATE):
>>> 380:             raise PermissionError(f"User {user_id} cannot create P2P networks")
    381:
    382:         # Create isolated network configuration
    383:         network_id = f"{tenant_id}_p2p_{network_name}_{datetime.utcnow().timestamp()}"


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\multi_tenant_manager.py:527:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    524:         sharing_db_path = self.data_path / "tenant_sharing.db"
    525:         with sqlite3.connect(sharing_db_path) as conn:
    526:             conn.execute(
>>> 527:                 """CREATE TABLE IF NOT EXISTS resource_sharing (
    528:                     id INTEGER PRIMARY KEY AUTOINCREMENT,
    529:                     resource_id TEXT NOT NULL,
    530:                     owner_tenant TEXT NOT NULL,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\multi_tenant_manager.py:540:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    537:             )
    538:
    539:             conn.execute(
>>> 540:                 """INSERT INTO resource_sharing
    541:                    (resource_id, owner_tenant, shared_with, permissions, shared_at, shared_by)
    542:                    VALUES (?, ?, ?, ?, ?, ?)""",
    543:                 (


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\multi_tenant_manager.py:616:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    613:             return
    614:
    615:         cursor.execute(
>>> 616:             """
    617:             INSERT INTO resource_usage
    618:             (tenant_id, resource_type, timestamp, cpu_percent, memory_mb, storage_gb, network_mb)
    619:             VALUES (?, ?, ?, ?, ?, ?, ?)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\multi_tenant_manager.py:641:50
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    638:         """Clean up all resources for tenant."""
    639:         # Check permissions
    640:         if not await self.rbac.check_permission(user_id, Permission.TENANT_DELETE):
>>> 641:             raise PermissionError(f"User {user_id} cannot delete tenant resources")
    642:
    643:         # Delete all tenant resources
    644:         for resource_type, resources in self.tenant_resources[tenant_id].items():


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\multi_tenant_manager.py:672:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    669:         cursor = conn.cursor()
    670:
    671:         cursor.execute(
>>> 672:             """
    673:             INSERT OR REPLACE INTO resources
    674:             (resource_id, tenant_id, resource_type, name, created_at,
    675:              metadata, data_path, config, status, size_bytes)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\multi_tenant_manager.py:696:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    693:         conn.close()
    694:
    695:     def _delete_resource(self, resource_id: str):
>>> 696:         """Delete resource from database."""
    697:         conn = sqlite3.connect(self.db_path)
    698:         cursor = conn.cursor()
    699:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\multi_tenant_manager.py:700:23
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    697:         conn = sqlite3.connect(self.db_path)
    698:         cursor = conn.cursor()
    699:
>>> 700:         cursor.execute("UPDATE resources SET status = 'deleted' WHERE resource_id = ?", (resource_id,))
    701:
    702:         conn.commit()
    703:         conn.close()


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\multi_tenant_manager.py:706:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    703:         conn.close()
    704:
    705:     def _update_resource_size(self, resource_id: str, size_bytes: int):
>>> 706:         """Update resource size in database."""
    707:         conn = sqlite3.connect(self.db_path)
    708:         cursor = conn.cursor()
    709:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\multi_tenant_manager.py:710:23
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    707:         conn = sqlite3.connect(self.db_path)
    708:         cursor = conn.cursor()
    709:
>>> 710:         cursor.execute("UPDATE resources SET size_bytes = ? WHERE resource_id = ?", (size_bytes, resource_id))
    711:
    712:         conn.commit()
    713:         conn.close()


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\multi_tenant_manager.py:716:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    713:         conn.close()
    714:
    715:     async def _get_resource_by_id(self, resource_id: str) -> TenantResource | None:
>>> 716:         """Get resource by ID from database."""
    717:         conn = sqlite3.connect(self.db_path)
    718:         cursor = conn.cursor()
    719:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\multi_tenant_manager.py:720:23
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    717:         conn = sqlite3.connect(self.db_path)
    718:         cursor = conn.cursor()
    719:
>>> 720:         cursor.execute("SELECT * FROM resources WHERE resource_id = ? AND status = 'active'", (resource_id,))
    721:         row = cursor.fetchone()
    722:         conn.close()
    723:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\multi_tenant_manager.py:788:20
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    785:                 collection_name="knowledge_base",
    786:                 config={"vector_db_type": "faiss"},
    787:             )
>>> 788:             print(f"Created RAG collection: {rag.resource_id}")
    789:
    790:             # Get usage
    791:             usage = await manager.get_tenant_usage(tenant_id=tenant.tenant_id, user_id=admin_user.user_id)


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (11 calls)
File: packages\core\security\multi_tenant_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (11 calls)
File: packages\core\security\multi_tenant_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'sqlite3' methods (8 calls)
File: packages\core\security\multi_tenant_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'conn' methods (22 calls)
File: packages\core\security\multi_tenant_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'cursor' methods (11 calls)
File: packages\core\security\multi_tenant_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'datetime' methods (14 calls)
File: packages\core\security\multi_tenant_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'json' methods (13 calls)
File: packages\core\security\multi_tenant_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'config' methods (10 calls)
File: packages\core\security\multi_tenant_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (28 total)
File: packages\core\security\multi_tenant_manager.py:142:25
Recommendation: Replace magic numbers with named constants or enums
Code context:
    139:                 resource_id=row[0],
    140:                 tenant_id=row[1],
    141:                 resource_type=row[2],
>>> 142:                 name=row[3],
    143:                 created_at=datetime.fromisoformat(row[4]),
    144:                 metadata=json.loads(row[5]) if row[5] else {},
    145:                 data_path=Path(row[6]) if row[6] else None,


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (28 total)
File: packages\core\security\multi_tenant_manager.py:143:54
Recommendation: Replace magic numbers with named constants or enums
Code context:
    140:                 tenant_id=row[1],
    141:                 resource_type=row[2],
    142:                 name=row[3],
>>> 143:                 created_at=datetime.fromisoformat(row[4]),
    144:                 metadata=json.loads(row[5]) if row[5] else {},
    145:                 data_path=Path(row[6]) if row[6] else None,
    146:                 config=json.loads(row[7]) if row[7] else {},


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (28 total)
File: packages\core\security\multi_tenant_manager.py:144:51
Recommendation: Replace magic numbers with named constants or enums
Code context:
    141:                 resource_type=row[2],
    142:                 name=row[3],
    143:                 created_at=datetime.fromisoformat(row[4]),
>>> 144:                 metadata=json.loads(row[5]) if row[5] else {},
    145:                 data_path=Path(row[6]) if row[6] else None,
    146:                 config=json.loads(row[7]) if row[7] else {},
    147:                 status=row[8],


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (28 total)
File: packages\core\security\multi_tenant_manager.py:144:40
Recommendation: Replace magic numbers with named constants or enums
Code context:
    141:                 resource_type=row[2],
    142:                 name=row[3],
    143:                 created_at=datetime.fromisoformat(row[4]),
>>> 144:                 metadata=json.loads(row[5]) if row[5] else {},
    145:                 data_path=Path(row[6]) if row[6] else None,
    146:                 config=json.loads(row[7]) if row[7] else {},
    147:                 status=row[8],


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (28 total)
File: packages\core\security\multi_tenant_manager.py:145:46
Recommendation: Replace magic numbers with named constants or enums
Code context:
    142:                 name=row[3],
    143:                 created_at=datetime.fromisoformat(row[4]),
    144:                 metadata=json.loads(row[5]) if row[5] else {},
>>> 145:                 data_path=Path(row[6]) if row[6] else None,
    146:                 config=json.loads(row[7]) if row[7] else {},
    147:                 status=row[8],
    148:                 size_bytes=row[9],


LONG_PARAMETER_LIST: Function '__init__' has 9 parameters (>5)
File: packages\core\security\multi_tenant_system.py:45:4
Recommendation: Use parameter objects, data classes, or keyword-only arguments
Code context:
     42: class ResourceQuota:
     43:     """Resource quotas for tenants."""
     44:
>>>  45:     def __init__(
     46:         self,
     47:         max_users: int = 10,
     48:         max_storage_gb: int = 10,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\multi_tenant_system.py:182:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    179:         with self._get_connection() as conn:
    180:             # Organizations table
    181:             conn.execute(
>>> 182:                 """
    183:                 CREATE TABLE IF NOT EXISTS organizations (
    184:                     id TEXT PRIMARY KEY,
    185:                     name TEXT UNIQUE NOT NULL,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\multi_tenant_system.py:221:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    218:
    219:             # Workspaces table (sub-tenants within organizations)
    220:             conn.execute(
>>> 221:                 """
    222:                 CREATE TABLE IF NOT EXISTS workspaces (
    223:                     id TEXT PRIMARY KEY,
    224:                     organization_id TEXT NOT NULL,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\multi_tenant_system.py:250:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    247:
    248:             # Tenant memberships
    249:             conn.execute(
>>> 250:                 """
    251:                 CREATE TABLE IF NOT EXISTS tenant_memberships (
    252:                     id INTEGER PRIMARY KEY AUTOINCREMENT,
    253:                     user_id TEXT NOT NULL,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\multi_tenant_system.py:279:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    276:
    277:             # Resource quotas
    278:             conn.execute(
>>> 279:                 """
    280:                 CREATE TABLE IF NOT EXISTS resource_quotas (
    281:                     id INTEGER PRIMARY KEY AUTOINCREMENT,
    282:                     tenant_id TEXT NOT NULL,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\multi_tenant_system.py:307:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    304:
    305:             # Resource usage tracking
    306:             conn.execute(
>>> 307:                 """
    308:                 CREATE TABLE IF NOT EXISTS resource_usage (
    309:                     id INTEGER PRIMARY KEY AUTOINCREMENT,
    310:                     tenant_id TEXT NOT NULL,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\multi_tenant_system.py:337:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    334:
    335:             # Tenant data isolation mapping
    336:             conn.execute(
>>> 337:                 """
    338:                 CREATE TABLE IF NOT EXISTS tenant_data_isolation (
    339:                     id INTEGER PRIMARY KEY AUTOINCREMENT,
    340:                     tenant_id TEXT NOT NULL,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\multi_tenant_system.py:363:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    360:
    361:             # Audit log for tenant operations
    362:             conn.execute(
>>> 363:                 """
    364:                 CREATE TABLE IF NOT EXISTS tenant_audit_log (
    365:                     id INTEGER PRIMARY KEY AUTOINCREMENT,
    366:                     timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\multi_tenant_system.py:383:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    380:
    381:             # Create indexes
    382:             indexes = [
>>> 383:                 "CREATE INDEX IF NOT EXISTS idx_workspaces_org ON workspaces (organization_id)",
    384:                 "CREATE INDEX IF NOT EXISTS idx_memberships_user ON tenant_memberships (user_id)",
    385:                 "CREATE INDEX IF NOT EXISTS idx_memberships_org ON tenant_memberships (organization_id)",
    386:                 "CREATE INDEX IF NOT EXISTS idx_quotas_tenant ON resource_quotas (tenant_id)",


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\multi_tenant_system.py:384:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    381:             # Create indexes
    382:             indexes = [
    383:                 "CREATE INDEX IF NOT EXISTS idx_workspaces_org ON workspaces (organization_id)",
>>> 384:                 "CREATE INDEX IF NOT EXISTS idx_memberships_user ON tenant_memberships (user_id)",
    385:                 "CREATE INDEX IF NOT EXISTS idx_memberships_org ON tenant_memberships (organization_id)",
    386:                 "CREATE INDEX IF NOT EXISTS idx_quotas_tenant ON resource_quotas (tenant_id)",
    387:                 "CREATE INDEX IF NOT EXISTS idx_usage_tenant ON resource_usage (tenant_id)",


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\multi_tenant_system.py:385:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    382:             indexes = [
    383:                 "CREATE INDEX IF NOT EXISTS idx_workspaces_org ON workspaces (organization_id)",
    384:                 "CREATE INDEX IF NOT EXISTS idx_memberships_user ON tenant_memberships (user_id)",
>>> 385:                 "CREATE INDEX IF NOT EXISTS idx_memberships_org ON tenant_memberships (organization_id)",
    386:                 "CREATE INDEX IF NOT EXISTS idx_quotas_tenant ON resource_quotas (tenant_id)",
    387:                 "CREATE INDEX IF NOT EXISTS idx_usage_tenant ON resource_usage (tenant_id)",
    388:                 "CREATE INDEX IF NOT EXISTS idx_isolation_tenant ON tenant_data_isolation (tenant_id)",


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\multi_tenant_system.py:386:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    383:                 "CREATE INDEX IF NOT EXISTS idx_workspaces_org ON workspaces (organization_id)",
    384:                 "CREATE INDEX IF NOT EXISTS idx_memberships_user ON tenant_memberships (user_id)",
    385:                 "CREATE INDEX IF NOT EXISTS idx_memberships_org ON tenant_memberships (organization_id)",
>>> 386:                 "CREATE INDEX IF NOT EXISTS idx_quotas_tenant ON resource_quotas (tenant_id)",
    387:                 "CREATE INDEX IF NOT EXISTS idx_usage_tenant ON resource_usage (tenant_id)",
    388:                 "CREATE INDEX IF NOT EXISTS idx_isolation_tenant ON tenant_data_isolation (tenant_id)",
    389:                 "CREATE INDEX IF NOT EXISTS idx_audit_tenant ON tenant_audit_log (tenant_id)",


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\multi_tenant_system.py:387:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    384:                 "CREATE INDEX IF NOT EXISTS idx_memberships_user ON tenant_memberships (user_id)",
    385:                 "CREATE INDEX IF NOT EXISTS idx_memberships_org ON tenant_memberships (organization_id)",
    386:                 "CREATE INDEX IF NOT EXISTS idx_quotas_tenant ON resource_quotas (tenant_id)",
>>> 387:                 "CREATE INDEX IF NOT EXISTS idx_usage_tenant ON resource_usage (tenant_id)",
    388:                 "CREATE INDEX IF NOT EXISTS idx_isolation_tenant ON tenant_data_isolation (tenant_id)",
    389:                 "CREATE INDEX IF NOT EXISTS idx_audit_tenant ON tenant_audit_log (tenant_id)",
    390:                 "CREATE INDEX IF NOT EXISTS idx_audit_timestamp ON tenant_audit_log (timestamp)",


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\multi_tenant_system.py:388:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    385:                 "CREATE INDEX IF NOT EXISTS idx_memberships_org ON tenant_memberships (organization_id)",
    386:                 "CREATE INDEX IF NOT EXISTS idx_quotas_tenant ON resource_quotas (tenant_id)",
    387:                 "CREATE INDEX IF NOT EXISTS idx_usage_tenant ON resource_usage (tenant_id)",
>>> 388:                 "CREATE INDEX IF NOT EXISTS idx_isolation_tenant ON tenant_data_isolation (tenant_id)",
    389:                 "CREATE INDEX IF NOT EXISTS idx_audit_tenant ON tenant_audit_log (tenant_id)",
    390:                 "CREATE INDEX IF NOT EXISTS idx_audit_timestamp ON tenant_audit_log (timestamp)",
    391:             ]


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\multi_tenant_system.py:389:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    386:                 "CREATE INDEX IF NOT EXISTS idx_quotas_tenant ON resource_quotas (tenant_id)",
    387:                 "CREATE INDEX IF NOT EXISTS idx_usage_tenant ON resource_usage (tenant_id)",
    388:                 "CREATE INDEX IF NOT EXISTS idx_isolation_tenant ON tenant_data_isolation (tenant_id)",
>>> 389:                 "CREATE INDEX IF NOT EXISTS idx_audit_tenant ON tenant_audit_log (tenant_id)",
    390:                 "CREATE INDEX IF NOT EXISTS idx_audit_timestamp ON tenant_audit_log (timestamp)",
    391:             ]
    392:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\multi_tenant_system.py:390:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    387:                 "CREATE INDEX IF NOT EXISTS idx_usage_tenant ON resource_usage (tenant_id)",
    388:                 "CREATE INDEX IF NOT EXISTS idx_isolation_tenant ON tenant_data_isolation (tenant_id)",
    389:                 "CREATE INDEX IF NOT EXISTS idx_audit_tenant ON tenant_audit_log (tenant_id)",
>>> 390:                 "CREATE INDEX IF NOT EXISTS idx_audit_timestamp ON tenant_audit_log (timestamp)",
    391:             ]
    392:
    393:             for index_sql in indexes:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\multi_tenant_system.py:400:34
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    397:         """Initialize the platform-level tenant."""
    398:         with self._get_connection() as conn:
    399:             # Check if platform tenant exists
>>> 400:             cursor = conn.execute("SELECT id FROM organizations WHERE id = 'platform' AND tenant_type = 'platform'")
    401:             if not cursor.fetchone():
    402:                 # Create platform tenant
    403:                 self.create_organization(


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\multi_tenant_system.py:412:28
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    409:                     isolation_level=IsolationLevel.PHYSICAL,
    410:                     admin_email="admin@aivillage.local",
    411:                 )
>>> 412:                 logger.info("Created platform tenant")
    413:
    414:     def create_organization(
    415:         self,


LONG_PARAMETER_LIST: Function 'create_organization' has 11 parameters (>5)
File: packages\core\security\multi_tenant_system.py:414:4
Recommendation: Use parameter objects, data classes, or keyword-only arguments
Code context:
    411:                 )
    412:                 logger.info("Created platform tenant")
    413:
>>> 414:     def create_organization(
    415:         self,
    416:         org_id: str | None = None,
    417:         name: str = None,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\multi_tenant_system.py:427:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    424:         data_residency: str | None = None,
    425:         **kwargs,
    426:     ) -> str:
>>> 427:         """Create a new organization.
    428:
    429:         Args:
    430:             org_id: Organization ID (generated if not provided)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\multi_tenant_system.py:450:20
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    447:             try:
    448:                 # Create organization
    449:                 conn.execute(
>>> 450:                     """
    451:                     INSERT INTO organizations (
    452:                         id, name, display_name, description,
    453:                         tenant_type, isolation_level,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\multi_tenant_system.py:476:20
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    473:                 # Set default quotas based on tenant type
    474:                 quota = DEFAULT_QUOTAS[tenant_type]
    475:                 conn.execute(
>>> 476:                     """
    477:                     INSERT INTO resource_quotas (
    478:                         tenant_id, tenant_type,
    479:                         max_users, max_storage_gb, max_api_calls_per_day,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\multi_tenant_system.py:499:20
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    496:
    497:                 # Initialize usage tracking
    498:                 conn.execute(
>>> 499:                     """
    500:                     INSERT INTO resource_usage (tenant_id, tenant_type)
    501:                     VALUES (?, 'organization')
    502:                 """,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\multi_tenant_system.py:523:30
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    520:                     details={"tenant_type": tenant_type.value, "isolation_level": isolation_level.value},
    521:                 )
    522:
>>> 523:                 logger.info(f"Created organization: {org_id} ({name})")
    524:                 return org_id
    525:
    526:             except sqlite3.IntegrityError as e:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\multi_tenant_system.py:527:31
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    524:                 return org_id
    525:
    526:             except sqlite3.IntegrityError as e:
>>> 527:                 logger.error(f"Failed to create organization: {e}")
    528:                 raise ValueError(f"Organization with name '{name}' already exists")
    529:
    530:     def create_workspace(


LONG_PARAMETER_LIST: Function 'create_workspace' has 8 parameters (>5)
File: packages\core\security\multi_tenant_system.py:530:4
Recommendation: Use parameter objects, data classes, or keyword-only arguments
Code context:
    527:                 logger.error(f"Failed to create organization: {e}")
    528:                 raise ValueError(f"Organization with name '{name}' already exists")
    529:
>>> 530:     def create_workspace(
    531:         self,
    532:         organization_id: str,
    533:         name: str,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\multi_tenant_system.py:540:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    537:         is_public: bool = False,
    538:         **kwargs,
    539:     ) -> str:
>>> 540:         """Create a workspace within an organization.
    541:
    542:         Args:
    543:             organization_id: Parent organization ID


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\multi_tenant_system.py:559:38
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    556:         # Get organization's isolation level if not specified
    557:         if isolation_level is None:
    558:             with self._get_connection() as conn:
>>> 559:                 cursor = conn.execute("SELECT isolation_level FROM organizations WHERE id = ?", (organization_id,))
    560:                 row = cursor.fetchone()
    561:                 if not row:
    562:                     raise ValueError(f"Organization {organization_id} not found")


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\multi_tenant_system.py:568:20
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    565:         with self._get_connection() as conn:
    566:             try:
    567:                 conn.execute(
>>> 568:                     """
    569:                     INSERT INTO workspaces (
    570:                         id, organization_id, name, display_name,
    571:                         description, settings, isolation_level, is_public


LONG_PARAMETER_LIST: Function 'add_user_to_tenant' has 7 parameters (>5)
File: packages\core\security\multi_tenant_system.py:601:4
Recommendation: Use parameter objects, data classes, or keyword-only arguments
Code context:
    598:             except sqlite3.IntegrityError:
    599:                 raise ValueError(f"Workspace '{name}' already exists in organization")
    600:
>>> 601:     def add_user_to_tenant(
    602:         self,
    603:         user_id: str,
    604:         organization_id: str,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\multi_tenant_system.py:630:20
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    627:                     raise ValueError("User quota exceeded for organization")
    628:
    629:                 conn.execute(
>>> 630:                     """
    631:                     INSERT OR REPLACE INTO tenant_memberships (
    632:                         user_id, organization_id, workspace_id,
    633:                         role, permissions, invited_by


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\multi_tenant_system.py:675:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    672:         organization_id: str,
    673:         workspace_id: str | None = None,
    674:     ) -> bool:
>>> 675:         """Remove user from a tenant.
    676:
    677:         Args:
    678:             user_id: User ID to remove


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\multi_tenant_system.py:688:20
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    685:         with self._get_connection() as conn:
    686:             if workspace_id:
    687:                 conn.execute(
>>> 688:                     """
    689:                     DELETE FROM tenant_memberships
    690:                     WHERE user_id = ? AND organization_id = ? AND workspace_id = ?
    691:                 """,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\multi_tenant_system.py:696:20
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    693:                 )
    694:             else:
    695:                 conn.execute(
>>> 696:                     """
    697:                     DELETE FROM tenant_memberships
    698:                     WHERE user_id = ? AND organization_id = ?
    699:                 """,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\multi_tenant_system.py:709:23
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    706:             # Log removal
    707:             self._log_audit(
    708:                 tenant_id=organization_id,
>>> 709:                 action="user_removed_from_tenant",
    710:                 resource_type="user",
    711:                 resource_id=user_id,
    712:                 details={"workspace_id": workspace_id},


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\multi_tenant_system.py:728:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    725:         """
    726:         with self._get_connection() as conn:
    727:             cursor = conn.execute(
>>> 728:                 """
    729:                 SELECT
    730:                     m.organization_id,
    731:                     m.workspace_id,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\multi_tenant_system.py:771:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    768:         with self._get_connection() as conn:
    769:             # Try as organization first
    770:             cursor = conn.execute(
>>> 771:                 """
    772:                 SELECT id, isolation_level, settings
    773:                 FROM organizations
    774:                 WHERE id = ?


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\multi_tenant_system.py:791:20
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    788:             else:
    789:                 # Try as workspace
    790:                 cursor = conn.execute(
>>> 791:                     """
    792:                     SELECT w.id, w.organization_id, w.isolation_level, w.settings
    793:                     FROM workspaces w
    794:                     WHERE w.id = ?


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\multi_tenant_system.py:842:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    839:         with self._get_connection() as conn:
    840:             # Check organization membership
    841:             cursor = conn.execute(
>>> 842:                 """
    843:                 SELECT role, permissions
    844:                 FROM tenant_memberships
    845:                 WHERE user_id = ? AND organization_id = ? AND is_active = 1


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\multi_tenant_system.py:854:20
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    851:             if not row:
    852:                 # Check workspace membership
    853:                 cursor = conn.execute(
>>> 854:                     """
    855:                     SELECT m.role, m.permissions
    856:                     FROM tenant_memberships m
    857:                     JOIN workspaces w ON m.workspace_id = w.id


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\multi_tenant_system.py:992:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    989:         """
    990:         with self._get_connection() as conn:
    991:             cursor = conn.execute(
>>> 992:                 """
    993:                 SELECT q.max_users, u.current_users
    994:                 FROM resource_quotas q
    995:                 JOIN resource_usage u ON q.tenant_id = u.tenant_id


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\multi_tenant_system.py:1039:20
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1036:
    1037:         with self._get_connection() as conn:
    1038:             cursor = conn.execute(
>>> 1039:                 f"""
    1040:                 SELECT q.{quota_field} as quota, u.{usage_field} as usage
    1041:                 FROM resource_quotas q
    1042:                 JOIN resource_usage u ON q.tenant_id = u.tenant_id


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\multi_tenant_system.py:1040:64
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1037:         with self._get_connection() as conn:
    1038:             cursor = conn.execute(
    1039:                 f"""
>>> 1040:                 SELECT q.{quota_field} as quota, u.{usage_field} as usage
    1041:                 FROM resource_quotas q
    1042:                 JOIN resource_usage u ON q.tenant_id = u.tenant_id
    1043:                 WHERE q.tenant_id = ?


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\multi_tenant_system.py:1059:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1056:         resource_type: str,
    1057:         delta: int,
    1058:     ):
>>> 1059:         """Update resource usage for tenant.
    1060:
    1061:         Args:
    1062:             tenant_id: Tenant ID


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\multi_tenant_system.py:1084:20
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1081:
    1082:         with self._get_connection() as conn:
    1083:             conn.execute(
>>> 1084:                 f"""
    1085:                 UPDATE resource_usage
    1086:                 SET {field} = MAX(0, {field} + ?),
    1087:                     updated_at = CURRENT_TIMESTAMP


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\multi_tenant_system.py:1086:44
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1083:             conn.execute(
    1084:                 f"""
    1085:                 UPDATE resource_usage
>>> 1086:                 SET {field} = MAX(0, {field} + ?),
    1087:                     updated_at = CURRENT_TIMESTAMP
    1088:                 WHERE tenant_id = ?
    1089:             """,


LONG_PARAMETER_LIST: Function '_log_audit' has 9 parameters (>5)
File: packages\core\security\multi_tenant_system.py:1093:4
Recommendation: Use parameter objects, data classes, or keyword-only arguments
Code context:
    1090:                 (delta, tenant_id),
    1091:             )
    1092:
>>> 1093:     def _log_audit(
    1094:         self,
    1095:         tenant_id: str,
    1096:         action: str,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\multi_tenant_system.py:1118:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1115:         """
    1116:         with self._get_connection() as conn:
    1117:             conn.execute(
>>> 1118:                 """
    1119:                 INSERT INTO tenant_audit_log (
    1120:                     tenant_id, user_id, action,
    1121:                     resource_type, resource_id,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\multi_tenant_system.py:1149:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1146:         with self._get_connection() as conn:
    1147:             # Get basic info
    1148:             cursor = conn.execute(
>>> 1149:                 """
    1150:                 SELECT * FROM organizations WHERE id = ?
    1151:             """,
    1152:                 (tenant_id,),


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\multi_tenant_system.py:1158:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1155:
    1156:             # Get quotas and usage
    1157:             cursor = conn.execute(
>>> 1158:                 """
    1159:                 SELECT * FROM resource_quotas WHERE tenant_id = ?
    1160:             """,
    1161:                 (tenant_id,),


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\multi_tenant_system.py:1166:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1163:             quotas = dict(cursor.fetchone() or {})
    1164:
    1165:             cursor = conn.execute(
>>> 1166:                 """
    1167:                 SELECT * FROM resource_usage WHERE tenant_id = ?
    1168:             """,
    1169:                 (tenant_id,),


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\multi_tenant_system.py:1175:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1172:
    1173:             # Get member count
    1174:             cursor = conn.execute(
>>> 1175:                 """
    1176:                 SELECT COUNT(*) as member_count
    1177:                 FROM tenant_memberships
    1178:                 WHERE organization_id = ? AND is_active = 1


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\multi_tenant_system.py:1186:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1183:
    1184:             # Get workspace count
    1185:             cursor = conn.execute(
>>> 1186:                 """
    1187:                 SELECT COUNT(*) as workspace_count
    1188:                 FROM workspaces
    1189:                 WHERE organization_id = ? AND is_active = 1


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\multi_tenant_system.py:1225:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1222:         compliance_level="GDPR",
    1223:     )
    1224:
>>> 1225:     print(f"Created organization: {org_id}")
    1226:
    1227:     # Create a workspace
    1228:     ws_id = system.create_workspace(


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (27 calls)
File: packages\core\security\multi_tenant_system.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (7 calls)
File: packages\core\security\multi_tenant_system.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'conn' methods (35 calls)
File: packages\core\security\multi_tenant_system.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'cursor' methods (14 calls)
File: packages\core\security\multi_tenant_system.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'json' methods (8 calls)
File: packages\core\security\multi_tenant_system.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'system' methods (6 calls)
File: packages\core\security\multi_tenant_system.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

SEQUENTIAL_COUPLING: Sequential coupling detected: Function '__init__' is part of a sequence-dependent API
File: packages\core\security\multi_tenant_system.py:137:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    134: class MultiTenantSystem:
    135:     """Multi-tenant isolation and management system."""
    136:
>>> 137:     def __init__(self, db_path: str | None = None):
    138:         """Initialize multi-tenant system.
    139:
    140:         Args:


SEQUENTIAL_COUPLING: Sequential coupling detected: Function '_init_database' is part of a sequence-dependent API
File: packages\core\security\multi_tenant_system.py:177:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    174:         finally:
    175:             conn.close()
    176:
>>> 177:     def _init_database(self):
    178:         """Initialize database schema."""
    179:         with self._get_connection() as conn:
    180:             # Organizations table


SEQUENTIAL_COUPLING: Sequential coupling detected: Function '_init_platform_tenant' is part of a sequence-dependent API
File: packages\core\security\multi_tenant_system.py:396:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    393:             for index_sql in indexes:
    394:                 conn.execute(index_sql)
    395:
>>> 396:     def _init_platform_tenant(self):
    397:         """Initialize the platform-level tenant."""
    398:         with self._get_connection() as conn:
    399:             # Check if platform tenant exists


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (33 total)
File: packages\core\security\multi_tenant_system.py:49:37
Recommendation: Replace magic numbers with named constants or enums
Code context:
     46:         self,
     47:         max_users: int = 10,
     48:         max_storage_gb: int = 10,
>>>  49:         max_api_calls_per_day: int = 10000,
     50:         max_models: int = 5,
     51:         max_agents: int = 10,
     52:         max_rag_documents: int = 1000,


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (33 total)
File: packages\core\security\multi_tenant_system.py:50:26
Recommendation: Replace magic numbers with named constants or enums
Code context:
     47:         max_users: int = 10,
     48:         max_storage_gb: int = 10,
     49:         max_api_calls_per_day: int = 10000,
>>>  50:         max_models: int = 5,
     51:         max_agents: int = 10,
     52:         max_rag_documents: int = 1000,
     53:         max_p2p_connections: int = 50,


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (33 total)
File: packages\core\security\multi_tenant_system.py:53:35
Recommendation: Replace magic numbers with named constants or enums
Code context:
     50:         max_models: int = 5,
     51:         max_agents: int = 10,
     52:         max_rag_documents: int = 1000,
>>>  53:         max_p2p_connections: int = 50,
     54:         max_compute_hours: int = 100,
     55:     ):
     56:         self.max_users = max_users


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (33 total)
File: packages\core\security\multi_tenant_system.py:70:23
Recommendation: Replace magic numbers with named constants or enums
Code context:
     67: DEFAULT_QUOTAS = {
     68:     TenantType.PERSONAL: ResourceQuota(
     69:         max_users=1,
>>>  70:         max_storage_gb=5,
     71:         max_api_calls_per_day=1000,
     72:         max_models=2,
     73:         max_agents=3,


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (33 total)
File: packages\core\security\multi_tenant_system.py:73:19
Recommendation: Replace magic numbers with named constants or enums
Code context:
     70:         max_storage_gb=5,
     71:         max_api_calls_per_day=1000,
     72:         max_models=2,
>>>  73:         max_agents=3,
     74:         max_rag_documents=100,
     75:         max_p2p_connections=10,
     76:         max_compute_hours=10,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\rbac_api_server.py:202:68
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    199:                 if current_user["tenant_id"] != request.tenant_id:
    200:                     user = self.integration.rbac.users.get(current_user["user_id"])
    201:                     if not user or user.role.value != "super_admin":
>>> 202:                         raise HTTPException(status_code=403, detail="Cannot create users in other tenants")
    203:
    204:                 role = Role(request.role)
    205:                 user = await self.integration.rbac.create_user(


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\rbac_api_server.py:396:23
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    393:
    394:             return result["data"]
    395:
>>> 396:         @self.app.post("/p2p/networks/{network_id}/join")
    397:         async def join_p2p_network(
    398:             network_id: str, params: dict[str, Any], current_user: dict = Depends(get_current_user)
    399:         ):


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\rbac_api_server.py:575:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    572:
    573:
    574: async def create_rbac_server() -> RBACAPIServer:
>>> 575:     """Create and configure RBAC API server."""
    576:     # Initialize RBAC integration
    577:     integration = await initialize_aivillage_rbac()
    578:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\rbac_api_server.py:582:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    579:     # Create server
    580:     server = RBACAPIServer(integration)
    581:
>>> 582:     logger.info("RBAC API server created successfully")
    583:     return server
    584:
    585:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (9 calls)
File: packages\core\security\rbac_api_server.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (6 calls)
File: packages\core\security\rbac_api_server.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'result' methods (36 calls)
File: packages\core\security\rbac_api_server.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (50 total)
File: packages\core\security\rbac_api_server.py:114:48
Recommendation: Replace magic numbers with named constants or enums
Code context:
    111:             token = credentials.credentials
    112:             payload = await self.integration.rbac.verify_token(token)
    113:             if not payload:
>>> 114:                 raise HTTPException(status_code=401, detail="Invalid token")
    115:             return payload
    116:
    117:         # Health check


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (50 total)
File: packages\core\security\rbac_api_server.py:143:48
Recommendation: Replace magic numbers with named constants or enums
Code context:
    140:                     "tenant_id": session.tenant_id,
    141:                 }
    142:             except Exception as e:
>>> 143:                 raise HTTPException(status_code=401, detail=str(e))
    144:
    145:         @self.app.post("/auth/refresh")
    146:         async def refresh_token(refresh_token: str):


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (50 total)
File: packages\core\security\rbac_api_server.py:150:52
Recommendation: Replace magic numbers with named constants or enums
Code context:
    147:             try:
    148:                 session = await self.integration.rbac.refresh_token(refresh_token)
    149:                 if not session:
>>> 150:                     raise HTTPException(status_code=401, detail="Invalid refresh token")
    151:
    152:                 return {
    153:                     "access_token": session.token,


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (50 total)
File: packages\core\security\rbac_api_server.py:159:48
Recommendation: Replace magic numbers with named constants or enums
Code context:
    156:                     "expires_at": session.expires_at.isoformat(),
    157:                 }
    158:             except Exception as e:
>>> 159:                 raise HTTPException(status_code=401, detail=str(e))
    160:
    161:         @self.app.post("/auth/logout")
    162:         async def logout(current_user: dict = Depends(get_current_user)):


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (50 total)
File: packages\core\security\rbac_api_server.py:182:48
Recommendation: Replace magic numbers with named constants or enums
Code context:
    179:
    180:                 return {"tenant_id": tenant.tenant_id, "name": tenant.name, "created_at": tenant.created_at.isoformat()}
    181:             except Exception as e:
>>> 182:                 raise HTTPException(status_code=400, detail=str(e))
    183:
    184:         @self.app.get("/tenants/{tenant_id}/usage")
    185:         async def get_tenant_usage(tenant_id: str, current_user: dict = Depends(get_current_user)):


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\rbac_system.py:298:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    295:         logger.info("RBAC system initialized")
    296:
    297:     def _load_config(self):
>>> 298:         """Load RBAC configuration from file."""
    299:         if self.config_path.exists():
    300:             with open(self.config_path) as f:
    301:                 config = json.load(f)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\rbac_system.py:328:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    325:     async def create_tenant(
    326:         self, name: str, admin_user: dict[str, str], config: dict[str, Any] | None = None
    327:     ) -> TenantConfig:
>>> 328:         """Create new tenant with isolated resources."""
    329:         tenant_id = f"tenant_{secrets.token_urlsafe(16)}"
    330:
    331:         tenant = TenantConfig(


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\rbac_system.py:367:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    364:         return tenant
    365:
    366:     async def delete_tenant(self, tenant_id: str, requester_id: str) -> bool:
>>> 367:         """Delete tenant and all associated resources."""
    368:         if not await self.check_permission(requester_id, Permission.TENANT_DELETE):
    369:             raise PermissionError(f"User {requester_id} lacks permission to delete tenants")
    370:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\rbac_system.py:369:55
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    366:     async def delete_tenant(self, tenant_id: str, requester_id: str) -> bool:
    367:         """Delete tenant and all associated resources."""
    368:         if not await self.check_permission(requester_id, Permission.TENANT_DELETE):
>>> 369:             raise PermissionError(f"User {requester_id} lacks permission to delete tenants")
    370:
    371:         if tenant_id not in self.tenants:
    372:             return False


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\rbac_system.py:413:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    410:     async def create_user(
    411:         self, username: str, email: str, password: str, tenant_id: str, role: Role = Role.USER
    412:     ) -> User:
>>> 413:         """Create new user within tenant."""
    414:         if tenant_id not in self.tenants:
    415:             raise ValueError(f"Tenant {tenant_id} does not exist")
    416:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\rbac_system.py:442:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    439:         return user
    440:
    441:     async def delete_user(self, user_id: str, requester_id: str) -> bool:
>>> 442:         """Delete user from system."""
    443:         if user_id not in self.users:
    444:             return False
    445:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\rbac_system.py:452:38
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    449:         # Check permissions
    450:         if requester and requester.tenant_id != user.tenant_id:
    451:             if requester.role != Role.SUPER_ADMIN:
>>> 452:                 raise PermissionError("Cannot delete user from different tenant")
    453:
    454:         # Revoke all sessions
    455:         user_sessions = [s for s in self.sessions.values() if s.user_id == user_id]


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\rbac_system.py:470:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    467:     async def authenticate(
    468:         self, username: str, password: str, tenant_id: str, ip_address: str, user_agent: str
    469:     ) -> Session:
>>> 470:         """Authenticate user and create session."""
    471:         # Find user
    472:         user = None
    473:         for u in self.users.values():


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\rbac_system.py:498:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    495:         return session
    496:
    497:     async def _create_session(self, user: User, ip_address: str, user_agent: str) -> Session:
>>> 498:         """Create new user session with JWT tokens."""
    499:         session_id = f"session_{secrets.token_urlsafe(16)}"
    500:         now = datetime.utcnow()
    501:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\rbac_system.py:753:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    750:         return True
    751:
    752:     async def update_quota_usage(self, tenant_id: str, resource_type: str, amount: int, operation: str = "add"):
>>> 753:         """Update quota usage for tenant."""
    754:         if tenant_id not in self.tenants:
    755:             return
    756:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\rbac_system.py:872:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    869:     # Resource Cleanup Methods
    870:
    871:     async def _cleanup_agent_resource(self, agent_id: str, tenant_id: str):
>>> 872:         """Clean up agent resource from tenant."""
    873:         try:
    874:             # Import here to avoid circular dependencies
    875:             from packages.agents.core.agent_orchestration_system import AgentOrchestrator


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\rbac_system.py:892:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    889:             logger.error(f"Failed to cleanup agent {agent_id}: {e}")
    890:
    891:     async def _cleanup_rag_resource(self, collection_id: str, tenant_id: str):
>>> 892:         """Clean up RAG resource from tenant."""
    893:         try:
    894:             # Import here to avoid circular dependencies
    895:             from packages.rag.core.hyper_rag import HyperRAG


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\security\rbac_system.py:998:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    995:         # Test authorization
    996:         can_create_agent = await rbac.check_permission(developer.user_id, Permission.AGENT_CREATE)
    997:
>>> 998:         print(f"Developer can create agents: {can_create_agent}")
    999:
    1000:     asyncio.run(main())


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (29 calls)
File: packages\core\security\rbac_system.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (20 calls)
File: packages\core\security\rbac_system.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'config' methods (7 calls)
File: packages\core\security\rbac_system.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'datetime' methods (8 calls)
File: packages\core\security\rbac_system.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (21 total)
File: packages\core\security\rbac_system.py:224:31
Recommendation: Replace magic numbers with named constants or enums
Code context:
    221:     isolated_namespaces: list[str] = field(default_factory=list)
    222:     allowed_models: list[str] = field(default_factory=list)
    223:     max_agents: int = 10
>>> 224:     max_rag_collections: int = 5
    225:     max_p2p_nodes: int = 20
    226:     storage_quota_gb: int = 100
    227:     compute_quota_vcpu: int = 8


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (21 total)
File: packages\core\security\rbac_system.py:225:25
Recommendation: Replace magic numbers with named constants or enums
Code context:
    222:     allowed_models: list[str] = field(default_factory=list)
    223:     max_agents: int = 10
    224:     max_rag_collections: int = 5
>>> 225:     max_p2p_nodes: int = 20
    226:     storage_quota_gb: int = 100
    227:     compute_quota_vcpu: int = 8
    228:     memory_quota_gb: int = 32


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (21 total)
File: packages\core\security\rbac_system.py:227:30
Recommendation: Replace magic numbers with named constants or enums
Code context:
    224:     max_rag_collections: int = 5
    225:     max_p2p_nodes: int = 20
    226:     storage_quota_gb: int = 100
>>> 227:     compute_quota_vcpu: int = 8
    228:     memory_quota_gb: int = 32
    229:     # Resource tracking
    230:     agent_resources: dict[str, Any] = field(default_factory=dict)


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (21 total)
File: packages\core\security\rbac_system.py:228:27
Recommendation: Replace magic numbers with named constants or enums
Code context:
    225:     max_p2p_nodes: int = 20
    226:     storage_quota_gb: int = 100
    227:     compute_quota_vcpu: int = 8
>>> 228:     memory_quota_gb: int = 32
    229:     # Resource tracking
    230:     agent_resources: dict[str, Any] = field(default_factory=dict)
    231:     rag_resources: dict[str, Any] = field(default_factory=dict)


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (21 total)
File: packages\core\security\rbac_system.py:275:48
Recommendation: Replace magic numbers with named constants or enums
Code context:
    272:     def __init__(self, config_path: Path | None = None):
    273:         """Initialize RBAC system with configuration."""
    274:         self.config_path = config_path or Path("config/security/rbac.json")
>>> 275:         self.jwt_secret = secrets.token_urlsafe(32)
    276:         self.jwt_algorithm = "HS256"
    277:         self.token_expiry = timedelta(hours=1)
    278:         self.refresh_expiry = timedelta(days=7)


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'parser' methods (7 calls)
File: packages\core\tools\measure_compression.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'parser' methods (6 calls)
File: packages\core\tools\stub_fix.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\tools\verify_cleanup.py:45:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     42:
     43:
     44: def iter_actions(log_path: Path) -> Iterable[str]:
>>>  45:     """Yield cleanup actions from ``log_path``.
     46:
     47:     Empty lines are ignored. The function is separated for easier testing.
     48:     """


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (30 total)
File: packages\core\training\constants.py:12:37
Recommendation: Replace magic numbers with named constants or enums
Code context:
      9: from typing import Final
     10:
     11: # Model size constants
>>>  12: PARAMETERS_PER_MILLION: Final[int] = 1_000_000
     13: HRRM_MODEL_SIZE_50M: Final[int] = 50_000_000
     14: HRRM_MODEL_COUNT: Final[int] = 3
     15:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (30 total)
File: packages\core\training\constants.py:13:34
Recommendation: Replace magic numbers with named constants or enums
Code context:
     10:
     11: # Model size constants
     12: PARAMETERS_PER_MILLION: Final[int] = 1_000_000
>>>  13: HRRM_MODEL_SIZE_50M: Final[int] = 50_000_000
     14: HRRM_MODEL_COUNT: Final[int] = 3
     15:
     16: # Training configuration


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (30 total)
File: packages\core\training\constants.py:14:31
Recommendation: Replace magic numbers with named constants or enums
Code context:
     11: # Model size constants
     12: PARAMETERS_PER_MILLION: Final[int] = 1_000_000
     13: HRRM_MODEL_SIZE_50M: Final[int] = 50_000_000
>>>  14: HRRM_MODEL_COUNT: Final[int] = 3
     15:
     16: # Training configuration
     17: DEFAULT_BATCH_SIZE: Final[int] = 32


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (30 total)
File: packages\core\training\constants.py:17:33
Recommendation: Replace magic numbers with named constants or enums
Code context:
     14: HRRM_MODEL_COUNT: Final[int] = 3
     15:
     16: # Training configuration
>>>  17: DEFAULT_BATCH_SIZE: Final[int] = 32
     18: DEFAULT_LEARNING_RATE: Final[float] = 1e-4
     19: DEFAULT_EPOCHS: Final[int] = 100
     20: MAX_SEQUENCE_LENGTH: Final[int] = 512


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (30 total)
File: packages\core\training\constants.py:18:38
Recommendation: Replace magic numbers with named constants or enums
Code context:
     15:
     16: # Training configuration
     17: DEFAULT_BATCH_SIZE: Final[int] = 32
>>>  18: DEFAULT_LEARNING_RATE: Final[float] = 1e-4
     19: DEFAULT_EPOCHS: Final[int] = 100
     20: MAX_SEQUENCE_LENGTH: Final[int] = 512
     21: GRADIENT_CLIP_VALUE: Final[float] = 1.0


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (6 calls)
File: packages\core\legacy\agents\specialist_agent_registry.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (6 calls)
File: packages\core\legacy\agents\specialist_agent_registry.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'task' methods (6 calls)
File: packages\core\legacy\agents\specialist_agent_registry.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (53 total)
File: packages\core\legacy\agents\specialist_agent_registry.py:74:32
Recommendation: Replace magic numbers with named constants or enums
Code context:
     71:     coordination_preferences: dict[str, Any] = field(default_factory=dict)
     72:
     73:     # Operational parameters
>>>  74:     max_concurrent_tasks: int = 3
     75:     task_timeout_seconds: int = 300
     76:     priority_multiplier: float = 1.0
     77:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (53 total)
File: packages\core\legacy\agents\specialist_agent_registry.py:75:32
Recommendation: Replace magic numbers with named constants or enums
Code context:
     72:
     73:     # Operational parameters
     74:     max_concurrent_tasks: int = 3
>>>  75:     task_timeout_seconds: int = 300
     76:     priority_multiplier: float = 1.0
     77:
     78:     # Integration settings


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (53 total)
File: packages\core\legacy\agents\specialist_agent_registry.py:81:33
Recommendation: Replace magic numbers with named constants or enums
Code context:
     78:     # Integration settings
     79:     requires_human_oversight: bool = False
     80:     can_delegate_tasks: bool = True
>>>  81:     collaboration_score: float = 0.8
     82:
     83:     # Technical configuration
     84:     implementation_class: str | None = None


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (53 total)
File: packages\core\legacy\agents\specialist_agent_registry.py:147:75
Recommendation: Replace magic numbers with named constants or enums
Code context:
    144:             capabilities=[
    145:                 AgentCapabilityConfig(AgentCapability.DECISION_MAKING, 1.0),
    146:                 AgentCapabilityConfig(AgentCapability.STRATEGIC_PLANNING, 1.0),
>>> 147:                 AgentCapabilityConfig(AgentCapability.RESOURCE_ALLOCATION, 0.9),
    148:             ],
    149:             max_concurrent_tasks=10,
    150:             priority_multiplier=2.0,


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (53 total)
File: packages\core\legacy\agents\specialist_agent_registry.py:163:74
Recommendation: Replace magic numbers with named constants or enums
Code context:
    160:             secondary_roles=[AgentRole.INTELLIGENCE],
    161:             capabilities=[
    162:                 AgentCapabilityConfig(AgentCapability.KNOWLEDGE_SYNTHESIS, 1.0),
>>> 163:                 AgentCapabilityConfig(AgentCapability.STRATEGIC_PLANNING, 0.9),
    164:                 AgentCapabilityConfig(AgentCapability.HISTORICAL_ANALYSIS, 0.9),
    165:             ],
    166:             max_concurrent_tasks=5,


LONG_PARAMETER_LIST: Function 'register_deprecation' has 6 parameters (>5)
File: packages\core\legacy\compatibility\bridge_system.py:114:4
Recommendation: Use parameter objects, data classes, or keyword-only arguments
Code context:
    111:             logger.error(f"Failed to register mapping: {e}")
    112:             return False
    113:
>>> 114:     def register_deprecation(
    115:         self,
    116:         item_name: str,
    117:         deprecated_since: str,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\compatibility\bridge_system.py:153:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    150:             return False
    151:
    152:     def create_import_bridge(self, old_module: str, new_module: str) -> bool:
>>> 153:         """Create an import bridge that redirects old imports to new modules.
    154:
    155:         Args:
    156:             old_module: Old module path


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\compatibility\bridge_system.py:189:26
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    186:             self.active_bridges[old_module] = bridge_module
    187:
    188:             self.migration_stats["total_redirects"] += 1
>>> 189:             logger.info(f"Created import bridge: {old_module} -> {new_module}")
    190:             return True
    191:
    192:         except Exception as e:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\compatibility\bridge_system.py:193:27
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    190:             return True
    191:
    192:         except Exception as e:
>>> 193:             logger.error(f"Failed to create import bridge {old_module} -> {new_module}: {e}")
    194:             return False
    195:
    196:     def create_class_wrapper(self, old_class: type, new_class: type, deprecated_since: str = "1.0.0") -> type:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\compatibility\bridge_system.py:197:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    194:             return False
    195:
    196:     def create_class_wrapper(self, old_class: type, new_class: type, deprecated_since: str = "1.0.0") -> type:
>>> 197:         """
    198:         Create a wrapper class that provides backward compatibility.
    199:
    200:         Args:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\compatibility\bridge_system.py:235:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    232:     def create_function_wrapper(
    233:         self, old_func: Callable, new_func: Callable, deprecated_since: str = "1.0.0"
    234:     ) -> Callable:
>>> 235:         """
    236:         Create a wrapper function that provides backward compatibility.
    237:
    238:         Args:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\compatibility\bridge_system.py:280:36
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    277: REMOVAL: {deprecation.removal_version}
    278: REPLACEMENT: {deprecation.replacement}
    279:
>>> 280: Notes: {deprecation.migration_notes}
    281:
    282: Example migration:
    283:   Old: from {old_api.split(".")[0]} import {old_api.split(".")[-1]}


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\compatibility\bridge_system.py:369:26
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    366:         report.append("-" * 40)
    367:
    368:         if self.deprecations:
>>> 369:             report.append("1. Update imports to use new module paths")
    370:             report.append("2. Replace deprecated classes with new implementations")
    371:             report.append("3. Update function calls to use new API signatures")
    372:             report.append("4. Test thoroughly after migration")


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\compatibility\bridge_system.py:371:26
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    368:         if self.deprecations:
    369:             report.append("1. Update imports to use new module paths")
    370:             report.append("2. Replace deprecated classes with new implementations")
>>> 371:             report.append("3. Update function calls to use new API signatures")
    372:             report.append("4. Test thoroughly after migration")
    373:         else:
    374:             report.append("No active deprecations - migration is complete!")


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\compatibility\bridge_system.py:390:32
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    387:                 new_module="src.software.agent_forge",
    388:                 deprecated_in="1.0.0",
    389:                 removed_in="2.0.0",
>>> 390:                 migration_guide="Update imports to use src.software.agent_forge",
    391:             ),
    392:             # Production migrations
    393:             CompatibilityMapping(


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\compatibility\bridge_system.py:398:32
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    395:                 new_module="src.production",
    396:                 deprecated_in="1.0.0",
    397:                 removed_in="2.0.0",
>>> 398:                 migration_guide="Update imports to use src.production",
    399:             ),
    400:             # Communication system migrations
    401:             CompatibilityMapping(


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\compatibility\bridge_system.py:406:32
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    403:                 new_module="src.communications",
    404:                 deprecated_in="1.0.0",
    405:                 removed_in="2.0.0",
>>> 406:                 migration_guide="Update imports to use src.communications",
    407:             ),
    408:             # Core system migrations
    409:             CompatibilityMapping(


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\compatibility\bridge_system.py:414:32
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    411:                 new_module="src.core",
    412:                 deprecated_in="1.0.0",
    413:                 removed_in="2.0.0",
>>> 414:                 migration_guide="Update imports to use src.core",
    415:             ),
    416:             # Hardware layer migrations
    417:             CompatibilityMapping(


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\compatibility\bridge_system.py:455:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    452:
    453: # Convenience functions for common operations
    454: def create_legacy_import_bridge(old_module: str, new_module: str) -> bool:
>>> 455:     """
    456:     Create a legacy import bridge for backward compatibility.
    457:
    458:     Args:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\compatibility\bridge_system.py:583:31
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    580:                 if create_legacy_import_bridge(old_module, new_module):
    581:                     bridges_created += 1
    582:             except Exception as e:
>>> 583:                 logger.debug(f"Could not create bridge {old_module} -> {new_module}: {e}")
    584:
    585:         if bridges_created > 0:
    586:             logger.info(f"Created {bridges_created} compatibility bridges")


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (11 calls)
File: packages\core\legacy\compatibility\bridge_system.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'report' methods (31 calls)
File: packages\core\legacy\compatibility\bridge_system.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

SEQUENTIAL_COUPLING: Sequential coupling detected: Function '__init__' is part of a sequence-dependent API
File: packages\core\legacy\compatibility\bridge_system.py:212:12
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    209:         class CompatibilityWrapper(new_class):
    210:             """Compatibility wrapper for deprecated class."""
    211:
>>> 212:             def __init__(self, *args, **kwargs):
    213:                 # Issue deprecation warning
    214:                 self._issue_deprecation_warning(
    215:                     f"{old_class.__name__} is deprecated since v{deprecated_since}. "


SEQUENTIAL_COUPLING: Sequential coupling detected: Function 'wrapped_init' is part of a sequence-dependent API
File: packages\core\legacy\compatibility\bridge_system.py:536:12
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    533:             # Class decorator
    534:             original_init = func_or_class.__init__
    535:
>>> 536:             def wrapped_init(self, *args, **kwargs):
    537:                 warnings.warn(
    538:                     f"{func_or_class.__name__} is deprecated since v{deprecated_since}. "
    539:                     f"Use {replacement} instead. Will be removed in v{removal_version}.",


SEQUENTIAL_COUPLING: Sequential coupling detected: Function 'setup_aivillage_bridges' is part of a sequence-dependent API
File: packages\core\legacy\compatibility\bridge_system.py:565:0
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    562:
    563:
    564: # Auto-setup common bridges on import
>>> 565: def setup_aivillage_bridges():
    566:     """Set up common AIVillage compatibility bridges."""
    567:     try:
    568:         # Create bridges for moved modules


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\compatibility\__init__.py:1:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
>>>   1: """
      2: Compatibility Bridge Package
      3:
      4: Provides seamless compatibility between old and new AIVillage architecture.


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\compatibility\__init__.py:33:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     30:     "CompatibilityMapping",
     31:     "DeprecationInfo",
     32:     "compatibility_bridge",
>>>  33:     "create_legacy_import_bridge",
     34:     "register_deprecated_api",
     35:     "get_migration_help",
     36:     "deprecated_api",


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'struct' methods (6 calls)
File: packages\core\legacy\compression\advanced_pipeline.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'blob' methods (7 calls)
File: packages\core\legacy\compression\advanced_pipeline.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'out' methods (9 calls)
File: packages\core\legacy\compression\cascade_compressor.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'struct' methods (7 calls)
File: packages\core\legacy\compression\integrated_pipeline.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\compression\unified_compressor.py:1:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
>>>   1: """Unified compression interface selecting between simple and advanced methods."""
      2:
      3: from __future__ import annotations
      4:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\compression\unified_compressor.py:17:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     14:
     15:
     16: class UnifiedCompressor:
>>>  17:     """Intelligent compression selector.
     18:
     19:     Chooses between the sprint 9 ``SimpleQuantizer`` and the four stage
     20:     ``AdvancedCompressionPipeline``.  The decision is based on model size and


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\compression\unified_compressor.py:46:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     43:
     44:     # ------------------------------------------------------------------
     45:     def compress(self, model: torch.nn.Module | str | Path) -> dict[str, object]:
>>>  46:         """Compress ``model`` selecting the appropriate method."""
     47:         if isinstance(model, str | Path):
     48:             tmp = torch.load(model, map_location="cpu")
     49:             param_count = sum(p.numel() for p in tmp.parameters())


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (9 calls)
File: packages\core\legacy\compression\unified_compressor.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'p' methods (6 calls)
File: packages\core\legacy\compression\unified_compressor.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (11 total)
File: packages\core\legacy\compression\unified_compressor.py:28:31
Recommendation: Replace magic numbers with named constants or enums
Code context:
     25:     def __init__(
     26:         self,
     27:         target_device: str = "mobile",
>>>  28:         memory_limit_mb: int = 2048,
     29:         target_compression: float | None = None,
     30:     ) -> None:
     31:         self.target_device = target_device


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (11 total)
File: packages\core\legacy\compression\unified_compressor.py:54:38
Recommendation: Replace magic numbers with named constants or enums
Code context:
     51:         else:
     52:             param_count = sum(p.numel() for p in model.parameters())
     53:
>>>  54:         model_size_mb = param_count * 4 / 1024 / 1024
     55:         logger.info("Model size: %s params (%.1fMB)", f"{param_count:,}", model_size_mb)
     56:
     57:         if self.target_compression is not None:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (11 total)
File: packages\core\legacy\compression\unified_compressor.py:54:42
Recommendation: Replace magic numbers with named constants or enums
Code context:
     51:         else:
     52:             param_count = sum(p.numel() for p in model.parameters())
     53:
>>>  54:         model_size_mb = param_count * 4 / 1024 / 1024
     55:         logger.info("Model size: %s params (%.1fMB)", f"{param_count:,}", model_size_mb)
     56:
     57:         if self.target_compression is not None:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (11 total)
File: packages\core\legacy\compression\unified_compressor.py:54:49
Recommendation: Replace magic numbers with named constants or enums
Code context:
     51:         else:
     52:             param_count = sum(p.numel() for p in model.parameters())
     53:
>>>  54:         model_size_mb = param_count * 4 / 1024 / 1024
     55:         logger.info("Model size: %s params (%.1fMB)", f"{param_count:,}", model_size_mb)
     56:
     57:         if self.target_compression is not None:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (11 total)
File: packages\core\legacy\compression\unified_compressor.py:60:69
Recommendation: Replace magic numbers with named constants or enums
Code context:
     57:         if self.target_compression is not None:
     58:             required_ratio = self.target_compression
     59:         else:
>>>  60:             required_ratio = model_size_mb / (self.memory_limit_mb * 0.5)
     61:
     62:         logger.info("Required compression ratio: %.1fx", required_ratio)
     63:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\config\configuration_manager.py:1:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
>>>   1: """Central configuration manager for AIVillage CODEX integration.
      2:
      3: This module provides a unified configuration system that loads settings from
      4: multiple sources in priority order and validates all configurations before use.


HARDCODED_PATH: Hardcoded path or URL detected
File: packages\core\legacy\config\configuration_manager.py:170:37
Recommendation: Use configuration files, environment variables, or path utilities
Code context:
    167:                 "SECURITY_CSP_ENABLED": "true",
    168:                 "TLS_VERIFY_PEER": "true",
    169:                 # Production paths
>>> 170:                 "AIVILLAGE_DB_PATH": "/var/lib/aivillage/evolution_metrics.db",
    171:                 "DIGITAL_TWIN_DB_PATH": "/var/lib/aivillage/digital_twin.db",
    172:                 "RAG_FAISS_INDEX_PATH": "/var/lib/aivillage/faiss_index",
    173:                 "DIGITAL_TWIN_VAULT_PATH": "/var/lib/aivillage/secure/vault",


HARDCODED_PATH: Hardcoded path or URL detected
File: packages\core\legacy\config\configuration_manager.py:171:40
Recommendation: Use configuration files, environment variables, or path utilities
Code context:
    168:                 "TLS_VERIFY_PEER": "true",
    169:                 # Production paths
    170:                 "AIVILLAGE_DB_PATH": "/var/lib/aivillage/evolution_metrics.db",
>>> 171:                 "DIGITAL_TWIN_DB_PATH": "/var/lib/aivillage/digital_twin.db",
    172:                 "RAG_FAISS_INDEX_PATH": "/var/lib/aivillage/faiss_index",
    173:                 "DIGITAL_TWIN_VAULT_PATH": "/var/lib/aivillage/secure/vault",
    174:                 "BACKUP_STORAGE_PATH": "/var/backups/aivillage",


HARDCODED_PATH: Hardcoded path or URL detected
File: packages\core\legacy\config\configuration_manager.py:172:40
Recommendation: Use configuration files, environment variables, or path utilities
Code context:
    169:                 # Production paths
    170:                 "AIVILLAGE_DB_PATH": "/var/lib/aivillage/evolution_metrics.db",
    171:                 "DIGITAL_TWIN_DB_PATH": "/var/lib/aivillage/digital_twin.db",
>>> 172:                 "RAG_FAISS_INDEX_PATH": "/var/lib/aivillage/faiss_index",
    173:                 "DIGITAL_TWIN_VAULT_PATH": "/var/lib/aivillage/secure/vault",
    174:                 "BACKUP_STORAGE_PATH": "/var/backups/aivillage",
    175:                 "AIVILLAGE_LOG_DIR": "/var/log/aivillage",


HARDCODED_PATH: Hardcoded path or URL detected
File: packages\core\legacy\config\configuration_manager.py:173:43
Recommendation: Use configuration files, environment variables, or path utilities
Code context:
    170:                 "AIVILLAGE_DB_PATH": "/var/lib/aivillage/evolution_metrics.db",
    171:                 "DIGITAL_TWIN_DB_PATH": "/var/lib/aivillage/digital_twin.db",
    172:                 "RAG_FAISS_INDEX_PATH": "/var/lib/aivillage/faiss_index",
>>> 173:                 "DIGITAL_TWIN_VAULT_PATH": "/var/lib/aivillage/secure/vault",
    174:                 "BACKUP_STORAGE_PATH": "/var/backups/aivillage",
    175:                 "AIVILLAGE_LOG_DIR": "/var/log/aivillage",
    176:             },


HARDCODED_PATH: Hardcoded path or URL detected
File: packages\core\legacy\config\configuration_manager.py:174:39
Recommendation: Use configuration files, environment variables, or path utilities
Code context:
    171:                 "DIGITAL_TWIN_DB_PATH": "/var/lib/aivillage/digital_twin.db",
    172:                 "RAG_FAISS_INDEX_PATH": "/var/lib/aivillage/faiss_index",
    173:                 "DIGITAL_TWIN_VAULT_PATH": "/var/lib/aivillage/secure/vault",
>>> 174:                 "BACKUP_STORAGE_PATH": "/var/backups/aivillage",
    175:                 "AIVILLAGE_LOG_DIR": "/var/log/aivillage",
    176:             },
    177:         ),


HARDCODED_PATH: Hardcoded path or URL detected
File: packages\core\legacy\config\configuration_manager.py:175:37
Recommendation: Use configuration files, environment variables, or path utilities
Code context:
    172:                 "RAG_FAISS_INDEX_PATH": "/var/lib/aivillage/faiss_index",
    173:                 "DIGITAL_TWIN_VAULT_PATH": "/var/lib/aivillage/secure/vault",
    174:                 "BACKUP_STORAGE_PATH": "/var/backups/aivillage",
>>> 175:                 "AIVILLAGE_LOG_DIR": "/var/log/aivillage",
    176:             },
    177:         ),
    178:     }


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\config\configuration_manager.py:197:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    194:         self.profile = self.PROFILES[self.profile_name]
    195:
    196:     def load_configuration(self, cli_args: dict[str, Any] | None = None, validate: bool = True) -> dict[str, str]:
>>> 197:         """Load configuration from all sources in priority order.
    198:
    199:         Priority order (highest to lowest):
    200:         1. Command line arguments


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\config\configuration_manager.py:271:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    268:                     logger.warning(f"Found {env_file} but python-dotenv not available")
    269:
    270:     def _load_config_file(self, filename: str) -> None:
>>> 271:         """Load configuration from YAML or JSON file."""
    272:         for ext in ["yaml", "yml", "json"]:
    273:             config_path = self.config_dir / f"{filename}.{ext}"
    274:             if config_path.exists():


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\config\configuration_manager.py:317:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    314:         return result
    315:
    316:     def _load_environment_variables(self) -> None:
>>> 317:         """Load configuration from environment variables."""
    318:         # Filter environment variables to only include relevant ones
    319:         relevant_vars = {}
    320:         aivillage_prefixes = [


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\config\configuration_manager.py:357:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    354:         logger.debug(f"Loaded {len(relevant_vars)} environment variables")
    355:
    356:     def _load_cli_args(self, cli_args: dict[str, Any]) -> None:
>>> 357:         """Load configuration from command line arguments."""
    358:         # Convert CLI args to environment variable format
    359:         env_format_args = {}
    360:         for key, value in cli_args.items():


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (22 calls)
File: packages\core\legacy\config\configuration_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (13 calls)
File: packages\core\legacy\config\configuration_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'lines' methods (8 calls)
File: packages\core\legacy\config\configuration_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'parser' methods (6 calls)
File: packages\core\legacy\config\configuration_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

HARDCODED_PATH: Hardcoded path or URL detected
File: packages\core\legacy\config\environment_validator.py:412:42
Recommendation: Use configuration files, environment variables, or path utilities
Code context:
    409:                 ]:
    410:                     return False
    411:             elif expected_type == "url":
>>> 412:                 if not (value.startswith(("http://", "https://", "redis://", "mongodb://"))):
    413:                     return False
    414:             elif expected_type == "path":
    415:                 # Basic path validation - just check it's not obviously invalid


HARDCODED_PATH: Hardcoded path or URL detected
File: packages\core\legacy\config\environment_validator.py:412:53
Recommendation: Use configuration files, environment variables, or path utilities
Code context:
    409:                 ]:
    410:                     return False
    411:             elif expected_type == "url":
>>> 412:                 if not (value.startswith(("http://", "https://", "redis://", "mongodb://"))):
    413:                     return False
    414:             elif expected_type == "path":
    415:                 # Basic path validation - just check it's not obviously invalid


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\config\environment_validator.py:555:50
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    552:                                         variable=var,
    553:                                         level=ValidationLevel.INFO,
    554:                                         result=ValidationResult.VALID,
>>> 555:                                         message=f"Created directory for {var}: {parent}",
    556:                                     )
    557:                                 )
    558:                             except OSError as e:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\config\environment_validator.py:564:50
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    561:                                         variable=var,
    562:                                         level=ValidationLevel.ERROR,
    563:                                         result=ValidationResult.INVALID,
>>> 564:                                         message=f"Cannot create directory {parent}: {e}",
    565:                                         suggestion="Ensure parent directory exists and is writable",
    566:                                     )
    567:                                 )


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\config\environment_validator.py:577:46
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    574:                                     variable=var,
    575:                                     level=ValidationLevel.INFO,
    576:                                     result=ValidationResult.VALID,
>>> 577:                                     message=f"Created directory for {var}: {path}",
    578:                                 )
    579:                             )
    580:                         except OSError as e:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\config\environment_validator.py:586:46
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    583:                                     variable=var,
    584:                                     level=ValidationLevel.ERROR,
    585:                                     result=ValidationResult.INVALID,
>>> 586:                                     message=f"Cannot create directory {path}: {e}",
    587:                                     suggestion="Ensure path is valid and parent is writable",
    588:                                 )
    589:                             )


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\config\environment_validator.py:622:43
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    619:                                 level=ValidationLevel.WARNING,
    620:                                 result=ValidationResult.INVALID,
    621:                                 message=f"Parent directory {parent} doesn't exist",
>>> 622:                                 suggestion="Create parent directory or update path",
    623:                             )
    624:                         )
    625:                     elif not os.access(parent, os.W_OK):


HARDCODED_PATH: Hardcoded path or URL detected
File: packages\core\legacy\config\environment_validator.py:799:52
Recommendation: Use configuration files, environment variables, or path utilities
Code context:
    796:                     )
    797:
    798:             qdrant_url = env_vars.get("QDRANT_URL")
>>> 799:             if qdrant_url and qdrant_url.startswith("http://"):
    800:                 self.report.add_issue(
    801:                     ValidationIssue(
    802:                         variable="QDRANT_URL",


HARDCODED_PATH: Hardcoded path or URL detected
File: packages\core\legacy\config\environment_validator.py:805:32
Recommendation: Use configuration files, environment variables, or path utilities
Code context:
    802:                         variable="QDRANT_URL",
    803:                         level=ValidationLevel.ERROR,
    804:                         result=ValidationResult.INSECURE,
>>> 805:                         message="Production requires QDRANT_URL to use https://",
    806:                         suggestion="Use an HTTPS Qdrant endpoint and provide proper certificates",
    807:                     )
    808:                 )


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (9 calls)
File: packages\core\legacy\config\environment_validator.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'report_lines' methods (8 calls)
File: packages\core\legacy\config\environment_validator.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (34 total)
File: packages\core\legacy\config\environment_validator.py:276:24
Recommendation: Replace magic numbers with named constants or enums
Code context:
    273:
    274:     # Port ranges
    275:     PORT_RANGES = {
>>> 276:         "LIBP2P_PORT": (1024, 65535),
    277:         "LIBP2P_WEBSOCKET_PORT": (1024, 65535),
    278:         "DIGITAL_TWIN_API_PORT": (8000, 9000),
    279:         "EVOLUTION_METRICS_API_PORT": (8000, 9000),


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (34 total)
File: packages\core\legacy\config\environment_validator.py:276:30
Recommendation: Replace magic numbers with named constants or enums
Code context:
    273:
    274:     # Port ranges
    275:     PORT_RANGES = {
>>> 276:         "LIBP2P_PORT": (1024, 65535),
    277:         "LIBP2P_WEBSOCKET_PORT": (1024, 65535),
    278:         "DIGITAL_TWIN_API_PORT": (8000, 9000),
    279:         "EVOLUTION_METRICS_API_PORT": (8000, 9000),


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (34 total)
File: packages\core\legacy\config\environment_validator.py:277:34
Recommendation: Replace magic numbers with named constants or enums
Code context:
    274:     # Port ranges
    275:     PORT_RANGES = {
    276:         "LIBP2P_PORT": (1024, 65535),
>>> 277:         "LIBP2P_WEBSOCKET_PORT": (1024, 65535),
    278:         "DIGITAL_TWIN_API_PORT": (8000, 9000),
    279:         "EVOLUTION_METRICS_API_PORT": (8000, 9000),
    280:         "RAG_PIPELINE_API_PORT": (8000, 9000),


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (34 total)
File: packages\core\legacy\config\environment_validator.py:277:40
Recommendation: Replace magic numbers with named constants or enums
Code context:
    274:     # Port ranges
    275:     PORT_RANGES = {
    276:         "LIBP2P_PORT": (1024, 65535),
>>> 277:         "LIBP2P_WEBSOCKET_PORT": (1024, 65535),
    278:         "DIGITAL_TWIN_API_PORT": (8000, 9000),
    279:         "EVOLUTION_METRICS_API_PORT": (8000, 9000),
    280:         "RAG_PIPELINE_API_PORT": (8000, 9000),


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (34 total)
File: packages\core\legacy\config\environment_validator.py:278:34
Recommendation: Replace magic numbers with named constants or enums
Code context:
    275:     PORT_RANGES = {
    276:         "LIBP2P_PORT": (1024, 65535),
    277:         "LIBP2P_WEBSOCKET_PORT": (1024, 65535),
>>> 278:         "DIGITAL_TWIN_API_PORT": (8000, 9000),
    279:         "EVOLUTION_METRICS_API_PORT": (8000, 9000),
    280:         "RAG_PIPELINE_API_PORT": (8000, 9000),
    281:         "P2P_STATUS_API_PORT": (8000, 9000),


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\database_manager.py:71:31
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     68:     """Centralized database manager for all CODEX components."""
     69:
     70:     # Database schemas
>>>  71:     EVOLUTION_METRICS_SCHEMA = """
     72:     -- Schema version tracking
     73:     CREATE TABLE IF NOT EXISTS schema_version (
     74:         version INTEGER PRIMARY KEY,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\database_manager.py:135:26
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    132:     CREATE INDEX IF NOT EXISTS idx_selection_outcomes_round ON selection_outcomes(round_id);
    133:     """
    134:
>>> 135:     DIGITAL_TWIN_SCHEMA = """
    136:     -- Schema version tracking
    137:     CREATE TABLE IF NOT EXISTS schema_version (
    138:         version INTEGER PRIMARY KEY,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\database_manager.py:213:23
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    210:     CREATE INDEX IF NOT EXISTS idx_knowledge_states_mastery ON knowledge_states(mastery_level);
    211:     """
    212:
>>> 213:     RAG_INDEX_SCHEMA = """
    214:     -- Schema version tracking
    215:     CREATE TABLE IF NOT EXISTS schema_version (
    216:         version INTEGER PRIMARY KEY,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\database_manager.py:320:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    317:         logger.info("Database manager initialized successfully")
    318:
    319:     async def _create_data_directories(self) -> None:
>>> 320:         """Create necessary data directories."""
    321:         if self.config_manager:
    322:             dirs = [
    323:                 self.config_manager.get("AIVILLAGE_LOG_DIR", "./logs"),


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\database_manager.py:373:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    370:             await self._create_sqlite_database(db_name, db_config)
    371:
    372:     async def _create_sqlite_database(self, name: str, config: dict[str, str]) -> None:
>>> 373:         """Create and initialize a SQLite database."""
    374:         db_path = config["path"]
    375:
    376:         if db_path == ":memory:":


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\database_manager.py:401:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    398:             # Insert schema version
    399:             schema_version = 1
    400:             conn.execute(
>>> 401:                 "INSERT OR REPLACE INTO schema_version (version, description) VALUES (?, ?)",
    402:                 (schema_version, config["description"]),
    403:             )
    404:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\database_manager.py:512:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    509:
    510:     @asynccontextmanager
    511:     async def get_redis_connection(self, pool_name: str):
>>> 512:         """Get Redis connection from pool (async context manager)."""
    513:         if pool_name not in self.redis_pools:
    514:             # Fallback to None - caller should handle
    515:             yield None


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\database_manager.py:579:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    576:         return results
    577:
    578:     async def create_backup(self, database: str, backup_path: str | None = None) -> str:
>>> 579:         """Create database backup."""
    580:         if database not in self.connections:
    581:             msg = f"Database {database} not found"
    582:             raise ValueError(msg)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\database_manager.py:640:31
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    637:                 cursor = conn.cursor()
    638:
    639:                 # Get table information
>>> 640:                 cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
    641:                 tables = [row[0] for row in cursor.fetchall()]
    642:
    643:                 table_stats = {}


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\database_manager.py:648:41
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    645:
    646:                 for table in tables:
    647:                     if table != "sqlite_sequence":
>>> 648:                         cursor.execute(f"SELECT COUNT(*) FROM {table}")
    649:                         count = cursor.fetchone()[0]
    650:                         table_stats[table] = count
    651:                         total_rows += count


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (32 calls)
File: packages\core\legacy\database\database_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (6 calls)
File: packages\core\legacy\database\database_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'conn' methods (17 calls)
File: packages\core\legacy\database\database_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'cursor' methods (12 calls)
File: packages\core\legacy\database\database_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\database_validator.py:115:31
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    112:                 cursor = conn.cursor()
    113:
    114:                 # Test basic query
>>> 115:                 cursor.execute("SELECT sqlite_version()")
    116:                 version = cursor.fetchone()[0]
    117:
    118:                 # Test write capability


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\database_validator.py:119:31
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    116:                 version = cursor.fetchone()[0]
    117:
    118:                 # Test write capability
>>> 119:                 cursor.execute("SELECT COUNT(*) FROM sqlite_master WHERE type='table'")
    120:                 table_count = cursor.fetchone()[0]
    121:
    122:                 duration_ms = (time.time() - start_time) * 1000


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\database_validator.py:159:20
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    156:
    157:                 # Check schema version
    158:                 cursor.execute(
>>> 159:                     """
    160:                 SELECT version, description FROM schema_version
    161:                 ORDER BY version DESC LIMIT 1
    162:                 """


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\database_validator.py:185:20
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    182:                 # Validate required tables exist
    183:                 expected_tables = self._get_expected_tables(database)
    184:                 cursor.execute(
>>> 185:                     """
    186:                 SELECT name FROM sqlite_master
    187:                 WHERE type='table' AND name NOT LIKE 'sqlite_%'
    188:                 """


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\database_validator.py:274:24
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    271:                     # Test evolution round creation
    272:                     f"test_round_{int(time.time())}"
    273:                     cursor.execute(
>>> 274:                         """
    275:                     INSERT INTO evolution_rounds (start_time, status, agent_count)
    276:                     VALUES (?, 'testing', 1)
    277:                     """,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\database_validator.py:285:24
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    282:
    283:                     # Test fitness metric creation
    284:                     cursor.execute(
>>> 285:                         """
    286:                     INSERT INTO fitness_metrics
    287:                     (round_id, agent_id, evolution_id, fitness_score, timestamp)
    288:                     VALUES (?, 'test_agent', 'test_evolution', 0.85, ?)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\database_validator.py:295:24
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    292:
    293:                     # Test query
    294:                     cursor.execute(
>>> 295:                         """
    296:                     SELECT COUNT(*) FROM fitness_metrics WHERE round_id = ?
    297:                     """,
    298:                         (round_id,),


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\database_validator.py:303:35
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    300:                     count = cursor.fetchone()[0]
    301:
    302:                     # Cleanup test data
>>> 303:                     cursor.execute("DELETE FROM fitness_metrics WHERE round_id = ?", (round_id,))
    304:                     cursor.execute("DELETE FROM evolution_rounds WHERE id = ?", (round_id,))
    305:
    306:                     conn.commit()


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\database_validator.py:304:35
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    301:
    302:                     # Cleanup test data
    303:                     cursor.execute("DELETE FROM fitness_metrics WHERE round_id = ?", (round_id,))
>>> 304:                     cursor.execute("DELETE FROM evolution_rounds WHERE id = ?", (round_id,))
    305:
    306:                     conn.commit()
    307:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\database_validator.py:309:32
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    306:                     conn.commit()
    307:
    308:                     passed = count == 1
>>> 309:                     message = f"CRUD operations successful, inserted and queried {count} record(s)"
    310:
    311:                 elif database == "digital_twin":
    312:                     # Test profile creation


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\database_validator.py:315:24
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    312:                     # Test profile creation
    313:                     test_student_id = f"test_student_{int(time.time())}"
    314:                     cursor.execute(
>>> 315:                         """
    316:                     INSERT INTO learning_profiles
    317:                     (student_id, name, age, grade_level)
    318:                     VALUES (?, 'Test Student', 12, 7)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\database_validator.py:325:24
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    322:
    323:                     # Test query
    324:                     cursor.execute(
>>> 325:                         """
    326:                     SELECT name FROM learning_profiles WHERE student_id = ?
    327:                     """,
    328:                         (test_student_id,),


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\database_validator.py:334:24
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    331:
    332:                     # Cleanup
    333:                     cursor.execute(
>>> 334:                         "DELETE FROM learning_profiles WHERE student_id = ?",
    335:                         (test_student_id,),
    336:                     )
    337:                     conn.commit()


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\database_validator.py:346:24
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    343:                     # Test document creation
    344:                     test_doc_id = f"test_doc_{int(time.time())}"
    345:                     cursor.execute(
>>> 346:                         """
    347:                     INSERT INTO documents
    348:                     (document_id, title, content_hash, word_count)
    349:                     VALUES (?, 'Test Document', 'test_hash_123', 100)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\database_validator.py:356:24
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    353:
    354:                     # Test query
    355:                     cursor.execute(
>>> 356:                         """
    357:                     SELECT title FROM documents WHERE document_id = ?
    358:                     """,
    359:                         (test_doc_id,),


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\database_validator.py:364:35
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    361:                     result = cursor.fetchone()
    362:
    363:                     # Cleanup
>>> 364:                     cursor.execute("DELETE FROM documents WHERE document_id = ?", (test_doc_id,))
    365:                     conn.commit()
    366:
    367:                     passed = result and result[0] == "Test Document"


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\database_validator.py:381:52
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    378:                         database=database,
    379:                         test_name="basic_operations",
    380:                         passed=passed,
>>> 381:                         value={"operations_tested": "insert, select, delete"},
    382:                         message=message,
    383:                         duration_ms=duration_ms,
    384:                     )


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\database_validator.py:411:31
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    408:
    409:                 # Benchmark SELECT performance
    410:                 select_start = time.time()
>>> 411:                 cursor.execute("SELECT COUNT(*) FROM sqlite_master")
    412:                 select_duration = (time.time() - select_start) * 1000
    413:
    414:                 self.performance_metrics.append(


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\database_validator.py:458:41
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    455:                 tables = self._get_expected_tables(database)
    456:                 for table in tables:
    457:                     if table != "schema_version":
>>> 458:                         cursor.execute(f"SELECT COUNT(*) FROM {table}")
    459:                         cursor.fetchone()
    460:
    461:                 query_duration = (time.time() - query_start) * 1000


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\database_validator.py:520:31
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    517:             if database == "evolution_metrics":
    518:                 test_data.append(
    519:                     {
>>> 520:                         "sql": "INSERT INTO evolution_rounds (start_time, status) VALUES (?, 'test')",
    521:                         "params": (time.time() + i,),
    522:                     }
    523:                 )


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\database_validator.py:527:31
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    524:             elif database == "digital_twin":
    525:                 test_data.append(
    526:                     {
>>> 527:                         "sql": """INSERT INTO learning_profiles
    528:                              (student_id, name, age, grade_level)
    529:                              VALUES (?, ?, 10, 5)""",
    530:                         "params": (f"perf_test_student_{i}", f"Test Student {i}"),


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\database_validator.py:536:31
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    533:             elif database == "rag_index":
    534:                 test_data.append(
    535:                     {
>>> 536:                         "sql": """INSERT INTO documents
    537:                              (document_id, title, content_hash, word_count)
    538:                              VALUES (?, ?, ?, 100)""",
    539:                         "params": (


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\database_validator.py:552:33
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    549:     def _get_cleanup_sql(self, database: str) -> str | None:
    550:         """Get cleanup SQL for test data."""
    551:         cleanup_map = {
>>> 552:             "evolution_metrics": "DELETE FROM evolution_rounds WHERE status = 'test'",
    553:             "digital_twin": "DELETE FROM learning_profiles WHERE student_id LIKE 'perf_test_%'",
    554:             "rag_index": "DELETE FROM documents WHERE document_id LIKE 'perf_test_%'",
    555:         }


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\database_validator.py:553:28
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    550:         """Get cleanup SQL for test data."""
    551:         cleanup_map = {
    552:             "evolution_metrics": "DELETE FROM evolution_rounds WHERE status = 'test'",
>>> 553:             "digital_twin": "DELETE FROM learning_profiles WHERE student_id LIKE 'perf_test_%'",
    554:             "rag_index": "DELETE FROM documents WHERE document_id LIKE 'perf_test_%'",
    555:         }
    556:         return cleanup_map.get(database)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\database_validator.py:554:25
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    551:         cleanup_map = {
    552:             "evolution_metrics": "DELETE FROM evolution_rounds WHERE status = 'test'",
    553:             "digital_twin": "DELETE FROM learning_profiles WHERE student_id LIKE 'perf_test_%'",
>>> 554:             "rag_index": "DELETE FROM documents WHERE document_id LIKE 'perf_test_%'",
    555:         }
    556:         return cleanup_map.get(database)
    557:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\database_validator.py:583:41
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    580:                 table_stats = {}
    581:                 for table in self._get_expected_tables(database):
    582:                     if table != "schema_version":
>>> 583:                         cursor.execute(f"SELECT COUNT(*) FROM {table}")
    584:                         row_count = cursor.fetchone()[0]
    585:                         table_stats[table] = row_count
    586:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\database_validator.py:589:20
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    586:
    587:                 # Check index usage
    588:                 cursor.execute(
>>> 589:                     """
    590:                 SELECT name, sql FROM sqlite_master
    591:                 WHERE type='index' AND sql IS NOT NULL
    592:                 """


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\database_validator.py:660:24
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    657:                 if database == "evolution_metrics":
    658:                     # Check that all fitness_metrics have valid round_ids
    659:                     cursor.execute(
>>> 660:                         """
    661:                     SELECT COUNT(*) FROM fitness_metrics fm
    662:                     LEFT JOIN evolution_rounds er ON fm.round_id = er.id
    663:                     WHERE er.id IS NULL


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\database_validator.py:673:24
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    670:                 elif database == "digital_twin":
    671:                     # Check that all learning_sessions have valid student_ids
    672:                     cursor.execute(
>>> 673:                         """
    674:                     SELECT COUNT(*) FROM learning_sessions ls
    675:                     LEFT JOIN learning_profiles lp ON ls.student_id = lp.student_id
    676:                     WHERE lp.student_id IS NULL


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\database_validator.py:686:24
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    683:                 elif database == "rag_index":
    684:                     # Check that all chunks have valid document_ids
    685:                     cursor.execute(
>>> 686:                         """
    687:                     SELECT COUNT(*) FROM chunks c
    688:                     LEFT JOIN documents d ON c.document_id = d.document_id
    689:                     WHERE d.document_id IS NULL


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'time' methods (40 calls)
File: packages\core\legacy\database\database_validator.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (15 calls)
File: packages\core\legacy\database\database_validator.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'conn' methods (14 calls)
File: packages\core\legacy\database\database_validator.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'cursor' methods (47 calls)
File: packages\core\legacy\database\database_validator.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'recommendations' methods (6 calls)
File: packages\core\legacy\database\database_validator.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (11 total)
File: packages\core\legacy\database\database_validator.py:573:46
Recommendation: Replace magic numbers with named constants or enums
Code context:
    570:                 page_size = cursor.fetchone()[0]
    571:
    572:                 db_size_bytes = page_count * page_size
>>> 573:                 db_size_mb = db_size_bytes / (1024 * 1024)
    574:
    575:                 # Check for unused space
    576:                 cursor.execute("PRAGMA freelist_count")


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (11 total)
File: packages\core\legacy\database\database_validator.py:573:53
Recommendation: Replace magic numbers with named constants or enums
Code context:
    570:                 page_size = cursor.fetchone()[0]
    571:
    572:                 db_size_bytes = page_count * page_size
>>> 573:                 db_size_mb = db_size_bytes / (1024 * 1024)
    574:
    575:                 # Check for unused space
    576:                 cursor.execute("PRAGMA freelist_count")


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (11 total)
File: packages\core\legacy\database\database_validator.py:600:49
Recommendation: Replace magic numbers with named constants or enums
Code context:
    597:
    598:                 # Generate optimization recommendations
    599:                 recommendations = []
>>> 600:                 if freelist_count > page_count * 0.1:
    601:                     recommendations.append("Consider running VACUUM to reclaim space")
    602:
    603:                 if db_size_mb > 100:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (11 total)
File: packages\core\legacy\database\database_validator.py:607:32
Recommendation: Replace magic numbers with named constants or enums
Code context:
    604:                     recommendations.append("Large database - consider partitioning")
    605:
    606:                 total_rows = sum(table_stats.values())
>>> 607:                 if total_rows > 10000 and len(indexes) < 3:
    608:                     recommendations.append("Consider adding more indexes for better query performance")
    609:
    610:                 self.results.append(


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (11 total)
File: packages\core\legacy\database\database_validator.py:607:57
Recommendation: Replace magic numbers with named constants or enums
Code context:
    604:                     recommendations.append("Large database - consider partitioning")
    605:
    606:                 total_rows = sum(table_stats.values())
>>> 607:                 if total_rows > 10000 and len(indexes) < 3:
    608:                     recommendations.append("Consider adding more indexes for better query performance")
    609:
    610:                 self.results.append(


LONG_PARAMETER_LIST: Function '__init__' has 8 parameters (>5)
File: packages\core\legacy\database\migrations.py:27:4
Recommendation: Use parameter objects, data classes, or keyword-only arguments
Code context:
     24: class Migration:
     25:     """Represents a single database migration."""
     26:
>>>  27:     def __init__(
     28:         self,
     29:         version: int,
     30:         name: str,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\migrations.py:68:28
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     65:             Migration(
     66:                 version=1,
     67:                 name="initial_schema",
>>>  68:                 description="Create initial evolution metrics tables",
     69:                 up_sql=self.database_manager.EVOLUTION_METRICS_SCHEMA,
     70:                 down_sql="""
     71:                 DROP TABLE IF EXISTS selection_outcomes;


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\migrations.py:70:25
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     67:                 name="initial_schema",
     68:                 description="Create initial evolution metrics tables",
     69:                 up_sql=self.database_manager.EVOLUTION_METRICS_SCHEMA,
>>>  70:                 down_sql="""
     71:                 DROP TABLE IF EXISTS selection_outcomes;
     72:                 DROP TABLE IF EXISTS resource_metrics;
     73:                 DROP TABLE IF EXISTS fitness_metrics;


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\migrations.py:82:23
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     79:                 version=2,
     80:                 name="add_agent_metadata",
     81:                 description="Add metadata columns for enhanced agent tracking",
>>>  82:                 up_sql="""
     83:                 ALTER TABLE fitness_metrics ADD COLUMN agent_type TEXT;
     84:                 ALTER TABLE fitness_metrics ADD COLUMN generation INTEGER DEFAULT 0;
     85:                 ALTER TABLE evolution_rounds ADD COLUMN configuration TEXT;


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\migrations.py:90:25
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     87:                 CREATE INDEX IF NOT EXISTS idx_fitness_metrics_agent_type ON fitness_metrics(agent_type);
     88:                 CREATE INDEX IF NOT EXISTS idx_fitness_metrics_generation ON fitness_metrics(generation);
     89:                 """,
>>>  90:                 down_sql="""
     91:                 DROP INDEX IF EXISTS idx_fitness_metrics_generation;
     92:                 DROP INDEX IF EXISTS idx_fitness_metrics_agent_type;
     93:                 -- Note: SQLite doesn't support DROP COLUMN, would need table recreation


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\migrations.py:103:28
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    100:             Migration(
    101:                 version=1,
    102:                 name="initial_schema",
>>> 103:                 description="Create initial digital twin tables",
    104:                 up_sql=self.database_manager.DIGITAL_TWIN_SCHEMA,
    105:                 down_sql="""
    106:                 DROP TABLE IF EXISTS knowledge_states;


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\migrations.py:105:25
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    102:                 name="initial_schema",
    103:                 description="Create initial digital twin tables",
    104:                 up_sql=self.database_manager.DIGITAL_TWIN_SCHEMA,
>>> 105:                 down_sql="""
    106:                 DROP TABLE IF EXISTS knowledge_states;
    107:                 DROP TABLE IF EXISTS learning_sessions;
    108:                 DROP TABLE IF EXISTS learning_profiles;


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\migrations.py:116:23
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    113:                 version=2,
    114:                 name="add_privacy_fields",
    115:                 description="Add privacy and compliance tracking fields",
>>> 116:                 up_sql="""
    117:                 ALTER TABLE learning_profiles ADD COLUMN privacy_consent TEXT;
    118:                 ALTER TABLE learning_profiles ADD COLUMN data_retention_until TIMESTAMP;
    119:                 ALTER TABLE learning_sessions ADD COLUMN privacy_level TEXT DEFAULT 'standard';


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\migrations.py:123:25
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    120:
    121:                 CREATE INDEX IF NOT EXISTS idx_learning_profiles_retention ON learning_profiles(data_retention_until);
    122:                 """,
>>> 123:                 down_sql="""
    124:                 DROP INDEX IF EXISTS idx_learning_profiles_retention;
    125:                 -- Note: SQLite doesn't support DROP COLUMN, would need table recreation
    126:                 """,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\migrations.py:135:28
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    132:             Migration(
    133:                 version=1,
    134:                 name="initial_schema",
>>> 135:                 description="Create initial RAG index tables",
    136:                 up_sql=self.database_manager.RAG_INDEX_SCHEMA,
    137:                 down_sql="""
    138:                 DROP TABLE IF EXISTS query_cache;


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\migrations.py:137:25
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    134:                 name="initial_schema",
    135:                 description="Create initial RAG index tables",
    136:                 up_sql=self.database_manager.RAG_INDEX_SCHEMA,
>>> 137:                 down_sql="""
    138:                 DROP TABLE IF EXISTS query_cache;
    139:                 DROP TABLE IF EXISTS embeddings_metadata;
    140:                 DROP TABLE IF EXISTS chunks;


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\migrations.py:149:23
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    146:                 version=2,
    147:                 name="add_semantic_search",
    148:                 description="Add semantic search enhancements",
>>> 149:                 up_sql="""
    150:                 ALTER TABLE chunks ADD COLUMN semantic_keywords TEXT;
    151:                 ALTER TABLE documents ADD COLUMN document_category TEXT;
    152:                 ALTER TABLE query_cache ADD COLUMN query_intent TEXT;


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\migrations.py:166:25
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    163:                 CREATE INDEX IF NOT EXISTS idx_documents_category ON documents(document_category);
    164:                 CREATE INDEX IF NOT EXISTS idx_semantic_clusters_keywords ON semantic_clusters(keywords);
    165:                 """,
>>> 166:                 down_sql="""
    167:                 DROP INDEX IF EXISTS idx_semantic_clusters_keywords;
    168:                 DROP INDEX IF EXISTS idx_documents_category;
    169:                 DROP TABLE IF EXISTS semantic_clusters;


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\migrations.py:184:31
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    181:         with self.database_manager.get_connection(database) as conn:
    182:             try:
    183:                 cursor = conn.cursor()
>>> 184:                 cursor.execute("SELECT MAX(version) FROM schema_version")
    185:                 result = cursor.fetchone()
    186:                 return result[0] if result[0] is not None else 0
    187:             except sqlite3.OperationalError:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\migrations.py:201:20
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    198:             try:
    199:                 cursor = conn.cursor()
    200:                 cursor.execute(
>>> 201:                     """
    202:                 SELECT version, applied_at, description
    203:                 FROM schema_version
    204:                 ORDER BY version ASC


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\migrations.py:300:20
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    297:                 # Check if migration already applied
    298:                 cursor = conn.cursor()
    299:                 cursor.execute(
>>> 300:                     "SELECT 1 FROM schema_version WHERE version = ?",
    301:                     (migration.version,),
    302:                 )
    303:                 if cursor.fetchone():


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\migrations.py:318:20
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    315:
    316:                 # Record migration
    317:                 conn.execute(
>>> 318:                     "INSERT INTO schema_version (version, description) VALUES (?, ?)",
    319:                     (migration.version, migration.description),
    320:                 )
    321:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\migrations.py:350:29
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    347:                 conn.executescript(migration.down_sql)
    348:
    349:                 # Remove migration record
>>> 350:                 conn.execute("DELETE FROM schema_version WHERE version = ?", (migration.version,))
    351:
    352:                 # Commit transaction
    353:                 conn.commit()


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\migrations.py:403:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    400:         return validation_results
    401:
    402:     async def create_migration_template(self, database: str, name: str) -> str:
>>> 403:         """Create a template for a new migration."""
    404:         if database not in self.migrations:
    405:             msg = f"Unknown database {database}"
    406:             raise ValueError(msg)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\migrations.py:415:37
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    412:         template = f'''"""  # nosec B608
    413: Migration {next_version}: {name}
    414: Database: {database}
>>> 415: Created: {datetime.now().isoformat()}
    416: """
    417:
    418: from core.database.migrations import Migration


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\migrations.py:422:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    419:
    420: migration_{next_version} = Migration(
    421:     version={next_version},
>>> 422:     name="{name}",
    423:     description="Custom migration - update with specific description",
    424:     up_sql="""
    425:     -- Add your forward migration SQL here


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\migrations.py:431:34
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    428:     -- Add your rollback migration SQL here
    429:     """,
    430:     # data_migration=custom_data_migration_function,  # Optional
>>> 431:     # requires=[{next_version - 1}]  # Optional dependencies
    432: )
    433:
    434: # Optional: Custom data migration function


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\migrations.py:446:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    443:
    444:
    445: class DataMigrator:
>>> 446:     """Handles data migration from existing systems."""
    447:
    448:     def __init__(self, database_manager) -> None:
    449:         self.database_manager = database_manager


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\migrations.py:452:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    449:         self.database_manager = database_manager
    450:
    451:     async def migrate_evolution_metrics_from_json(self, json_file_path: str) -> bool:
>>> 452:         """Migrate evolution metrics from JSON file to SQLite database."""
    453:         json_path = Path(json_file_path)
    454:         if not json_path.exists():
    455:             logger.warning(f"JSON file {json_file_path} not found, skipping migration")


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\migrations.py:458:22
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    455:             logger.warning(f"JSON file {json_file_path} not found, skipping migration")
    456:             return True
    457:
>>> 458:         logger.info(f"Migrating evolution metrics from {json_file_path}")
    459:
    460:         try:
    461:             with open(json_path) as f:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\migrations.py:475:28
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    472:                 if "rounds" in data:
    473:                     for round_data in data["rounds"]:
    474:                         conn.execute(
>>> 475:                             """
    476:                         INSERT OR REPLACE INTO evolution_rounds
    477:                         (start_time, end_time, status, agent_count, success_rate, metadata)
    478:                         VALUES (?, ?, ?, ?, ?, ?)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\migrations.py:495:36
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    492:                         if "fitness_metrics" in round_data:
    493:                             for metric in round_data["fitness_metrics"]:
    494:                                 conn.execute(
>>> 495:                                     """
    496:                                 INSERT INTO fitness_metrics
    497:                                 (round_id, agent_id, evolution_id, fitness_score, improvement_delta, timestamp, metadata)
    498:                                 VALUES (?, ?, ?, ?, ?, ?, ?)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\migrations.py:512:30
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    509:                                 )
    510:
    511:                 conn.commit()
>>> 512:                 logger.info(f"Successfully migrated evolution metrics from {json_file_path}")
    513:                 return True
    514:
    515:             except Exception as e:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\migrations.py:521:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    518:                 return False
    519:
    520:     async def migrate_digital_twin_profiles(self, profiles_dir: str) -> bool:
>>> 521:         """Migrate digital twin profiles from directory structure to database."""
    522:         profiles_path = Path(profiles_dir)
    523:         if not profiles_path.exists():
    524:             logger.warning(f"Profiles directory {profiles_dir} not found, skipping migration")


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\migrations.py:527:22
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    524:             logger.warning(f"Profiles directory {profiles_dir} not found, skipping migration")
    525:             return True
    526:
>>> 527:         logger.info(f"Migrating digital twin profiles from {profiles_dir}")
    528:
    529:         with self.database_manager.get_connection("digital_twin") as conn:
    530:             try:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\migrations.py:541:28
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    538:
    539:                         # Insert learning profile
    540:                         conn.execute(
>>> 541:                             """
    542:                         INSERT OR REPLACE INTO learning_profiles
    543:                         (student_id, name, age, grade_level, language, region, learning_style,
    544:                          strengths, challenges, interests, attention_span_minutes,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\migrations.py:571:36
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    568:                             student_id = profile_data.get("student_id", profile_file.stem)
    569:                             for session in profile_data["sessions"]:
    570:                                 conn.execute(
>>> 571:                                     """
    572:                                 INSERT INTO learning_sessions
    573:                                 (session_id, student_id, start_time, end_time, duration_minutes,
    574:                                  concepts_covered, questions_asked, questions_correct,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\migrations.py:598:30
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    595:                         continue
    596:
    597:                 conn.commit()
>>> 598:                 logger.info(f"Successfully migrated digital twin profiles from {profiles_dir}")
    599:                 return True
    600:
    601:             except Exception as e:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (6 calls)
File: packages\core\legacy\database\migrations.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'conn' methods (24 calls)
File: packages\core\legacy\database\migrations.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'cursor' methods (6 calls)
File: packages\core\legacy\database\migrations.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (25 calls)
File: packages\core\legacy\database\migrations.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'json' methods (11 calls)
File: packages\core\legacy\database\migrations.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'round_data' methods (6 calls)
File: packages\core\legacy\database\migrations.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'metric' methods (6 calls)
File: packages\core\legacy\database\migrations.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'profile_data' methods (15 calls)
File: packages\core\legacy\database\migrations.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'session' methods (10 calls)
File: packages\core\legacy\database\migrations.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\redis_manager.py:76:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     73:
     74:         # Create fallback tables
     75:         self._sqlite_conn.executescript(
>>>  76:             """
     77:         CREATE TABLE IF NOT EXISTS redis_fallback (
     78:             key TEXT PRIMARY KEY,
     79:             value BLOB NOT NULL,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\redis_manager.py:115:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    112:         self._sqlite_conn.commit()
    113:
    114:     async def get(self, key: str) -> Any | None:
>>> 115:         """Get value from fallback storage."""
    116:         if self.storage_type == "memory":
    117:             item = self._memory_store.get(key)
    118:             if item is None:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\redis_manager.py:136:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    133:         if self.storage_type == "sqlite" and self._sqlite_conn:
    134:             cursor = self._sqlite_conn.cursor()
    135:             cursor.execute(
>>> 136:                 """
    137:             SELECT value, value_type, expires_at
    138:             FROM redis_fallback
    139:             WHERE key = ? AND (expires_at IS NULL OR expires_at > ?)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\redis_manager.py:210:20
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    207:                     value_type = "secure_serialized"
    208:
    209:                 self._sqlite_conn.execute(
>>> 210:                     """
    211:                 INSERT OR REPLACE INTO redis_fallback
    212:                     (key, value, value_type, expires_at)
    213:                 VALUES (?, ?, ?, ?)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\redis_manager.py:244:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    241:         return False
    242:
    243:     async def delete(self, key: str) -> bool:
>>> 244:         """Delete value from fallback storage."""
    245:         if self.storage_type == "memory":
    246:             return self._memory_store.pop(key, None) is not None
    247:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\redis_manager.py:250:27
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    247:
    248:         if self.storage_type == "sqlite" and self._sqlite_conn:
    249:             cursor = self._sqlite_conn.cursor()
>>> 250:             cursor.execute("DELETE FROM redis_fallback WHERE key = ?", (key,))
    251:             self._sqlite_conn.commit()
    252:             return cursor.rowcount > 0
    253:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\redis_manager.py:274:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    271:             expires_at = time.time() + seconds
    272:             cursor = self._sqlite_conn.cursor()
    273:             cursor.execute(
>>> 274:                 """
    275:             UPDATE redis_fallback
    276:             SET expires_at = ?
    277:             WHERE key = ?


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\redis_manager.py:302:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    299:         if self.storage_type == "sqlite" and self._sqlite_conn:
    300:             cursor = self._sqlite_conn.cursor()
    301:             cursor.execute(
>>> 302:                 """
    303:             DELETE FROM redis_fallback
    304:             WHERE expires_at IS NOT NULL AND expires_at < ?
    305:             """,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\redis_manager.py:567:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    564:         return status
    565:
    566:     async def cleanup_expired_keys(self) -> dict[str, int]:
>>> 567:         """Cleanup expired keys from fallback stores."""
    568:         cleanup_results = {}
    569:
    570:         for store_name, fallback_store in self.fallback_stores.items():


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\redis_manager.py:577:35
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    574:                 if expired_count > 0:
    575:                     logger.info(f"Cleaned up {expired_count} expired keys from {store_name}")
    576:             except Exception as e:
>>> 577:                 logger.exception(f"Failed to cleanup expired keys from {store_name}: {e}")
    578:                 cleanup_results[store_name] = 0
    579:
    580:         return cleanup_results


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\redis_manager.py:619:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    616:         self.connection_type = connection_type
    617:
    618:     async def get(self, key: str) -> Any | None:
>>> 619:         """Get value from Redis or fallback storage."""
    620:         if self.redis_client:
    621:             try:
    622:                 value = await self.redis_client.get(key)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\redis_manager.py:662:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    659:         return False
    660:
    661:     async def delete(self, key: str) -> bool:
>>> 662:         """Delete value from Redis or fallback storage."""
    663:         if self.redis_client:
    664:             try:
    665:                 result = await self.redis_client.delete(key)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\database\redis_manager.py:668:33
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    665:                 result = await self.redis_client.delete(key)
    666:                 return result > 0
    667:             except Exception as e:
>>> 668:                 logger.warning(f"Redis delete failed for {key}: {e}")
    669:                 # Fall through to fallback
    670:
    671:         if self.fallback_store:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'time' methods (9 calls)
File: packages\core\legacy\database\redis_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'json' methods (7 calls)
File: packages\core\legacy\database\redis_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (31 calls)
File: packages\core\legacy\database\redis_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'redis_client' methods (6 calls)
File: packages\core\legacy\database\redis_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'redis_manager' methods (6 calls)
File: packages\core\legacy\database\redis_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\debug\debug_manager.py:66:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     63:         self._setup_debug_environment()
     64:
     65:     def _load_config(self) -> DebugConfig:
>>>  66:         """Load debug configuration from environment variables."""
     67:         config = DebugConfig()
     68:
     69:         # CODEX required environment variables


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (13 calls)
File: packages\core\legacy\debug\debug_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'os' methods (6 calls)
File: packages\core\legacy\debug\debug_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (13 total)
File: packages\core\legacy\debug\debug_manager.py:161:28
Recommendation: Replace magic numbers with named constants or enums
Code context:
    158:             return
    159:
    160:         debug_info = {
>>> 161:             "query": query[:500],  # Truncate very long queries
    162:             "params": str(params)[:200] if params else None,
    163:             "duration_ms": duration_ms,
    164:             "result_count": result_count,


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (13 total)
File: packages\core\legacy\debug\debug_manager.py:162:35
Recommendation: Replace magic numbers with named constants or enums
Code context:
    159:
    160:         debug_info = {
    161:             "query": query[:500],  # Truncate very long queries
>>> 162:             "params": str(params)[:200] if params else None,
    163:             "duration_ms": duration_ms,
    164:             "result_count": result_count,
    165:             "timestamp": datetime.now().isoformat(),


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (13 total)
File: packages\core\legacy\debug\debug_manager.py:203:49
Recommendation: Replace magic numbers with named constants or enums
Code context:
    200:         """Stop resource monitoring."""
    201:         self._monitoring_active = False
    202:         if self._monitoring_thread and self._monitoring_thread.is_alive():
>>> 203:             self._monitoring_thread.join(timeout=5.0)
    204:
    205:         self.logger.info("Stopped resource monitoring")
    206:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (13 total)
File: packages\core\legacy\debug\debug_manager.py:219:53
Recommendation: Replace magic numbers with named constants or enums
Code context:
    216:                 resource_info = {
    217:                     "cpu_percent": cpu_percent,
    218:                     "memory_percent": memory.percent,
>>> 219:                     "memory_used_mb": memory.used / (1024 * 1024),
    220:                     "memory_available_mb": memory.available / (1024 * 1024),
    221:                     "disk_percent": disk.percent,
    222:                     "disk_free_gb": disk.free / (1024 * 1024 * 1024),


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (13 total)
File: packages\core\legacy\debug\debug_manager.py:219:60
Recommendation: Replace magic numbers with named constants or enums
Code context:
    216:                 resource_info = {
    217:                     "cpu_percent": cpu_percent,
    218:                     "memory_percent": memory.percent,
>>> 219:                     "memory_used_mb": memory.used / (1024 * 1024),
    220:                     "memory_available_mb": memory.available / (1024 * 1024),
    221:                     "disk_percent": disk.percent,
    222:                     "disk_free_gb": disk.free / (1024 * 1024 * 1024),


LONG_PARAMETER_LIST: Function 'setup_debug_logging' has 6 parameters (>5)
File: packages\core\legacy\debug\logger_config.py:59:0
Recommendation: Use parameter objects, data classes, or keyword-only arguments
Code context:
     56:         return super().format(record)
     57:
     58:
>>>  59: def setup_debug_logging(
     60:     log_level: str = "DEBUG",
     61:     log_file: str | None = None,
     62:     enable_console: bool = True,


LONG_PARAMETER_LIST: Function 'log_request' has 6 parameters (>5)
File: packages\core\legacy\debug\logger_config.py:181:4
Recommendation: Use parameter objects, data classes, or keyword-only arguments
Code context:
    178:         self.logger = logging.getLogger(logger_name)
    179:         self.enabled = os.getenv("AIVILLAGE_DEBUG_MODE", "false").lower() == "true"
    180:
>>> 181:     def log_request(
    182:         self,
    183:         endpoint: str,
    184:         method: str = "POST",


LONG_PARAMETER_LIST: Function 'log_response' has 6 parameters (>5)
File: packages\core\legacy\debug\logger_config.py:207:4
Recommendation: Use parameter objects, data classes, or keyword-only arguments
Code context:
    204:                 data_str = data_str[:1000] + "... (truncated)"
    205:             self.logger.debug(f"  Data: {data_str}")
    206:
>>> 207:     def log_response(
    208:         self,
    209:         endpoint: str,
    210:         status_code: int | None = None,


LONG_PARAMETER_LIST: Function 'log_database_query' has 6 parameters (>5)
File: packages\core\legacy\debug\logger_config.py:234:4
Recommendation: Use parameter objects, data classes, or keyword-only arguments
Code context:
    231:                 data_str = data_str[:1000] + "... (truncated)"
    232:             self.logger.debug(f"  Response: {data_str}")
    233:
>>> 234:     def log_database_query(
    235:         self,
    236:         query: str,
    237:         params: Any | None = None,


LONG_PARAMETER_LIST: Function 'log_cache_operation' has 6 parameters (>5)
File: packages\core\legacy\debug\logger_config.py:264:4
Recommendation: Use parameter objects, data classes, or keyword-only arguments
Code context:
    261:                 params_str = params_str[:500] + "... (truncated)"
    262:             self.logger.debug(f"  Params: {params_str}")
    263:
>>> 264:     def log_cache_operation(
    265:         self,
    266:         operation: str,
    267:         key: str,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\debug\logger_config.py:286:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    283:         self.logger.debug(f"[CACHE_{hit_str}]{duration_str} {operation}: {display_key}{size_str}")
    284:
    285:     def _sanitize_headers(self, headers: dict[str, str]) -> dict[str, str]:
>>> 286:         """Remove sensitive information from headers."""
    287:         sensitive_headers = ["authorization", "api-key", "x-api-key", "cookie"]
    288:
    289:         sanitized = {}


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\debug\logger_config.py:299:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    296:         return sanitized
    297:
    298:     def _sanitize_query(self, query: str) -> str:
>>> 299:         """Remove or mask sensitive data from SQL queries."""
    300:         # Truncate very long queries
    301:         if len(query) > 500:
    302:             query = query[:500] + "... (truncated)"


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logging' methods (7 calls)
File: packages\core\legacy\debug\logger_config.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'aivillage_logger' methods (11 calls)
File: packages\core\legacy\debug\logger_config.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'os' methods (6 calls)
File: packages\core\legacy\debug\logger_config.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'time' methods (11 calls)
File: packages\core\legacy\debug\troubleshooting.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (21 calls)
File: packages\core\legacy\debug\troubleshooting.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'psutil' methods (7 calls)
File: packages\core\legacy\debug\troubleshooting.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'process' methods (6 calls)
File: packages\core\legacy\debug\troubleshooting.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (61 total)
File: packages\core\legacy\debug\troubleshooting.py:43:30
Recommendation: Replace magic numbers with named constants or enums
Code context:
     40:         """
     41:         if required_ports is None:
     42:             # CODEX Integration Requirements ports
>>>  43:             required_ports = [8080, 8081, 8082, 8083, 4001, 4002, 6379, 5432]
     44:
     45:         results = {
     46:             "timestamp": time.time(),


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (61 total)
File: packages\core\legacy\debug\troubleshooting.py:43:36
Recommendation: Replace magic numbers with named constants or enums
Code context:
     40:         """
     41:         if required_ports is None:
     42:             # CODEX Integration Requirements ports
>>>  43:             required_ports = [8080, 8081, 8082, 8083, 4001, 4002, 6379, 5432]
     44:
     45:         results = {
     46:             "timestamp": time.time(),


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (61 total)
File: packages\core\legacy\debug\troubleshooting.py:43:42
Recommendation: Replace magic numbers with named constants or enums
Code context:
     40:         """
     41:         if required_ports is None:
     42:             # CODEX Integration Requirements ports
>>>  43:             required_ports = [8080, 8081, 8082, 8083, 4001, 4002, 6379, 5432]
     44:
     45:         results = {
     46:             "timestamp": time.time(),


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (61 total)
File: packages\core\legacy\debug\troubleshooting.py:43:48
Recommendation: Replace magic numbers with named constants or enums
Code context:
     40:         """
     41:         if required_ports is None:
     42:             # CODEX Integration Requirements ports
>>>  43:             required_ports = [8080, 8081, 8082, 8083, 4001, 4002, 6379, 5432]
     44:
     45:         results = {
     46:             "timestamp": time.time(),


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (61 total)
File: packages\core\legacy\debug\troubleshooting.py:43:54
Recommendation: Replace magic numbers with named constants or enums
Code context:
     40:         """
     41:         if required_ports is None:
     42:             # CODEX Integration Requirements ports
>>>  43:             required_ports = [8080, 8081, 8082, 8083, 4001, 4002, 6379, 5432]
     44:
     45:         results = {
     46:             "timestamp": time.time(),


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\knowledge\rag_offline_config.py:278:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    275:     validation_errors: list[str] = field(default_factory=list)
    276:
    277:     def adapt_for_mobile(self) -> "OfflineRAGConfig":
>>> 278:         """Create mobile-optimized variant of this config."""
    279:         base_dir = Path(self.embedding.model_path).parent if self.embedding.model_path else None
    280:
    281:         mobile_config = OfflineRAGConfig(


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\knowledge\rag_offline_config.py:551:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    548:             return False
    549:
    550:     def import_config(self, file_path: Path, validate: bool = True) -> str | None:
>>> 551:         """Import configuration from file."""
    552:         try:
    553:             with open(file_path) as f:
    554:                 if file_path.suffix.lower() == ".yaml" or file_path.suffix.lower() == ".yml":


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\knowledge\rag_offline_config.py:578:27
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    575:             return config_name
    576:
    577:         except Exception as e:
>>> 578:             logger.error(f"Failed to import config from {file_path}: {e}")
    579:             return None
    580:
    581:     def get_registry_status(self) -> dict[str, Any]:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\knowledge\rag_offline_config.py:628:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    625:     top_k: int = 5,
    626:     **kwargs,
    627: ) -> OfflineRAGConfig:
>>> 628:     """Create custom RAG configuration with validated defaults."""
    629:     config = OfflineRAGConfig(
    630:         name=name,
    631:         description=f"Custom RAG config: {name}",


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'errors' methods (11 calls)
File: packages\core\legacy\knowledge\rag_offline_config.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (11 calls)
File: packages\core\legacy\knowledge\rag_offline_config.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (66 total)
File: packages\core\legacy\knowledge\rag_offline_config.py:122:22
Recommendation: Replace magic numbers with named constants or enums
Code context:
    119:     provider: EmbeddingProvider
    120:     model_name: str
    121:     model_path: str | None = None  # Local path for offline models
>>> 122:     dimensions: int = 384
    123:     max_seq_length: int = 512
    124:     batch_size: int = 32
    125:     device: str = "cpu"  # cpu, cuda, mps


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (66 total)
File: packages\core\legacy\knowledge\rag_offline_config.py:123:26
Recommendation: Replace magic numbers with named constants or enums
Code context:
    120:     model_name: str
    121:     model_path: str | None = None  # Local path for offline models
    122:     dimensions: int = 384
>>> 123:     max_seq_length: int = 512
    124:     batch_size: int = 32
    125:     device: str = "cpu"  # cpu, cuda, mps
    126:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (66 total)
File: packages\core\legacy\knowledge\rag_offline_config.py:124:22
Recommendation: Replace magic numbers with named constants or enums
Code context:
    121:     model_path: str | None = None  # Local path for offline models
    122:     dimensions: int = 384
    123:     max_seq_length: int = 512
>>> 124:     batch_size: int = 32
    125:     device: str = "cpu"  # cpu, cuda, mps
    126:
    127:     # Validation metadata


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (66 total)
File: packages\core\legacy\knowledge\rag_offline_config.py:137:22
Recommendation: Replace magic numbers with named constants or enums
Code context:
    134: class ChunkingConfig:
    135:     """Configuration for text chunking."""
    136:
>>> 137:     chunk_size: int = 512
    138:     chunk_overlap: int = 50
    139:     separator: str = "\n\n"
    140:     keep_separator: bool = True


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (66 total)
File: packages\core\legacy\knowledge\rag_offline_config.py:138:25
Recommendation: Replace magic numbers with named constants or enums
Code context:
    135:     """Configuration for text chunking."""
    136:
    137:     chunk_size: int = 512
>>> 138:     chunk_overlap: int = 50
    139:     separator: str = "\n\n"
    140:     keep_separator: bool = True
    141:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\performance\performance_optimizer.py:153:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    150:             return {"error": str(e)}
    151:
    152:     def _create_performance_indexes(self, cursor: sqlite3.Cursor, db_path: str):
>>> 153:         """Create performance indexes based on database type."""
    154:         db_name = Path(db_path).stem
    155:
    156:         if db_name == "evolution_metrics":


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\performance\performance_optimizer.py:158:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    155:
    156:         if db_name == "evolution_metrics":
    157:             indexes = [
>>> 158:                 "CREATE INDEX IF NOT EXISTS idx_evolution_rounds_timestamp ON evolution_rounds(timestamp)",
    159:                 "CREATE INDEX IF NOT EXISTS idx_fitness_metrics_agent_timestamp ON fitness_metrics(agent_id, timestamp)",
    160:                 "CREATE INDEX IF NOT EXISTS idx_fitness_metrics_score ON fitness_metrics(fitness_score DESC)",
    161:                 "CREATE INDEX IF NOT EXISTS idx_resource_metrics_timestamp ON resource_metrics(timestamp)",


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\performance\performance_optimizer.py:159:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    156:         if db_name == "evolution_metrics":
    157:             indexes = [
    158:                 "CREATE INDEX IF NOT EXISTS idx_evolution_rounds_timestamp ON evolution_rounds(timestamp)",
>>> 159:                 "CREATE INDEX IF NOT EXISTS idx_fitness_metrics_agent_timestamp ON fitness_metrics(agent_id, timestamp)",
    160:                 "CREATE INDEX IF NOT EXISTS idx_fitness_metrics_score ON fitness_metrics(fitness_score DESC)",
    161:                 "CREATE INDEX IF NOT EXISTS idx_resource_metrics_timestamp ON resource_metrics(timestamp)",
    162:                 "CREATE INDEX IF NOT EXISTS idx_selection_outcomes_round_method ON selection_outcomes(round_id, selection_method)",


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\performance\performance_optimizer.py:160:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    157:             indexes = [
    158:                 "CREATE INDEX IF NOT EXISTS idx_evolution_rounds_timestamp ON evolution_rounds(timestamp)",
    159:                 "CREATE INDEX IF NOT EXISTS idx_fitness_metrics_agent_timestamp ON fitness_metrics(agent_id, timestamp)",
>>> 160:                 "CREATE INDEX IF NOT EXISTS idx_fitness_metrics_score ON fitness_metrics(fitness_score DESC)",
    161:                 "CREATE INDEX IF NOT EXISTS idx_resource_metrics_timestamp ON resource_metrics(timestamp)",
    162:                 "CREATE INDEX IF NOT EXISTS idx_selection_outcomes_round_method ON selection_outcomes(round_id, selection_method)",
    163:             ]


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\performance\performance_optimizer.py:161:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    158:                 "CREATE INDEX IF NOT EXISTS idx_evolution_rounds_timestamp ON evolution_rounds(timestamp)",
    159:                 "CREATE INDEX IF NOT EXISTS idx_fitness_metrics_agent_timestamp ON fitness_metrics(agent_id, timestamp)",
    160:                 "CREATE INDEX IF NOT EXISTS idx_fitness_metrics_score ON fitness_metrics(fitness_score DESC)",
>>> 161:                 "CREATE INDEX IF NOT EXISTS idx_resource_metrics_timestamp ON resource_metrics(timestamp)",
    162:                 "CREATE INDEX IF NOT EXISTS idx_selection_outcomes_round_method ON selection_outcomes(round_id, selection_method)",
    163:             ]
    164:         elif db_name == "digital_twin":


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\performance\performance_optimizer.py:162:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    159:                 "CREATE INDEX IF NOT EXISTS idx_fitness_metrics_agent_timestamp ON fitness_metrics(agent_id, timestamp)",
    160:                 "CREATE INDEX IF NOT EXISTS idx_fitness_metrics_score ON fitness_metrics(fitness_score DESC)",
    161:                 "CREATE INDEX IF NOT EXISTS idx_resource_metrics_timestamp ON resource_metrics(timestamp)",
>>> 162:                 "CREATE INDEX IF NOT EXISTS idx_selection_outcomes_round_method ON selection_outcomes(round_id, selection_method)",
    163:             ]
    164:         elif db_name == "digital_twin":
    165:             indexes = [


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\performance\performance_optimizer.py:166:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    163:             ]
    164:         elif db_name == "digital_twin":
    165:             indexes = [
>>> 166:                 "CREATE INDEX IF NOT EXISTS idx_learning_profiles_updated ON learning_profiles(updated_at)",
    167:                 "CREATE INDEX IF NOT EXISTS idx_learning_sessions_profile_start ON learning_sessions(profile_id, start_time)",
    168:                 "CREATE INDEX IF NOT EXISTS idx_knowledge_states_profile_domain ON knowledge_states(profile_id, knowledge_domain)",
    169:                 "CREATE INDEX IF NOT EXISTS idx_knowledge_states_mastery ON knowledge_states(mastery_level DESC)",


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\performance\performance_optimizer.py:167:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    164:         elif db_name == "digital_twin":
    165:             indexes = [
    166:                 "CREATE INDEX IF NOT EXISTS idx_learning_profiles_updated ON learning_profiles(updated_at)",
>>> 167:                 "CREATE INDEX IF NOT EXISTS idx_learning_sessions_profile_start ON learning_sessions(profile_id, start_time)",
    168:                 "CREATE INDEX IF NOT EXISTS idx_knowledge_states_profile_domain ON knowledge_states(profile_id, knowledge_domain)",
    169:                 "CREATE INDEX IF NOT EXISTS idx_knowledge_states_mastery ON knowledge_states(mastery_level DESC)",
    170:             ]


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\performance\performance_optimizer.py:168:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    165:             indexes = [
    166:                 "CREATE INDEX IF NOT EXISTS idx_learning_profiles_updated ON learning_profiles(updated_at)",
    167:                 "CREATE INDEX IF NOT EXISTS idx_learning_sessions_profile_start ON learning_sessions(profile_id, start_time)",
>>> 168:                 "CREATE INDEX IF NOT EXISTS idx_knowledge_states_profile_domain ON knowledge_states(profile_id, knowledge_domain)",
    169:                 "CREATE INDEX IF NOT EXISTS idx_knowledge_states_mastery ON knowledge_states(mastery_level DESC)",
    170:             ]
    171:         elif db_name == "rag_index":


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\performance\performance_optimizer.py:169:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    166:                 "CREATE INDEX IF NOT EXISTS idx_learning_profiles_updated ON learning_profiles(updated_at)",
    167:                 "CREATE INDEX IF NOT EXISTS idx_learning_sessions_profile_start ON learning_sessions(profile_id, start_time)",
    168:                 "CREATE INDEX IF NOT EXISTS idx_knowledge_states_profile_domain ON knowledge_states(profile_id, knowledge_domain)",
>>> 169:                 "CREATE INDEX IF NOT EXISTS idx_knowledge_states_mastery ON knowledge_states(mastery_level DESC)",
    170:             ]
    171:         elif db_name == "rag_index":
    172:             indexes = [


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\performance\performance_optimizer.py:173:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    170:             ]
    171:         elif db_name == "rag_index":
    172:             indexes = [
>>> 173:                 "CREATE INDEX IF NOT EXISTS idx_documents_created ON documents(created_at)",
    174:                 "CREATE INDEX IF NOT EXISTS idx_documents_hash ON documents(file_hash)",
    175:                 "CREATE INDEX IF NOT EXISTS idx_chunks_document_index ON chunks(document_id, chunk_index)",
    176:                 "CREATE INDEX IF NOT EXISTS idx_embeddings_faiss ON embeddings_metadata(faiss_index_id)",


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\performance\performance_optimizer.py:174:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    171:         elif db_name == "rag_index":
    172:             indexes = [
    173:                 "CREATE INDEX IF NOT EXISTS idx_documents_created ON documents(created_at)",
>>> 174:                 "CREATE INDEX IF NOT EXISTS idx_documents_hash ON documents(file_hash)",
    175:                 "CREATE INDEX IF NOT EXISTS idx_chunks_document_index ON chunks(document_id, chunk_index)",
    176:                 "CREATE INDEX IF NOT EXISTS idx_embeddings_faiss ON embeddings_metadata(faiss_index_id)",
    177:                 "CREATE INDEX IF NOT EXISTS idx_embeddings_queries ON embeddings_metadata(query_count DESC)",


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\performance\performance_optimizer.py:175:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    172:             indexes = [
    173:                 "CREATE INDEX IF NOT EXISTS idx_documents_created ON documents(created_at)",
    174:                 "CREATE INDEX IF NOT EXISTS idx_documents_hash ON documents(file_hash)",
>>> 175:                 "CREATE INDEX IF NOT EXISTS idx_chunks_document_index ON chunks(document_id, chunk_index)",
    176:                 "CREATE INDEX IF NOT EXISTS idx_embeddings_faiss ON embeddings_metadata(faiss_index_id)",
    177:                 "CREATE INDEX IF NOT EXISTS idx_embeddings_queries ON embeddings_metadata(query_count DESC)",
    178:             ]


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\performance\performance_optimizer.py:176:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    173:                 "CREATE INDEX IF NOT EXISTS idx_documents_created ON documents(created_at)",
    174:                 "CREATE INDEX IF NOT EXISTS idx_documents_hash ON documents(file_hash)",
    175:                 "CREATE INDEX IF NOT EXISTS idx_chunks_document_index ON chunks(document_id, chunk_index)",
>>> 176:                 "CREATE INDEX IF NOT EXISTS idx_embeddings_faiss ON embeddings_metadata(faiss_index_id)",
    177:                 "CREATE INDEX IF NOT EXISTS idx_embeddings_queries ON embeddings_metadata(query_count DESC)",
    178:             ]
    179:         else:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\performance\performance_optimizer.py:177:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    174:                 "CREATE INDEX IF NOT EXISTS idx_documents_hash ON documents(file_hash)",
    175:                 "CREATE INDEX IF NOT EXISTS idx_chunks_document_index ON chunks(document_id, chunk_index)",
    176:                 "CREATE INDEX IF NOT EXISTS idx_embeddings_faiss ON embeddings_metadata(faiss_index_id)",
>>> 177:                 "CREATE INDEX IF NOT EXISTS idx_embeddings_queries ON embeddings_metadata(query_count DESC)",
    178:             ]
    179:         else:
    180:             indexes = []


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\performance\performance_optimizer.py:288:31
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    285:                     stats["wal_size_mb"] = 0
    286:
    287:                 # Table statistics
>>> 288:                 cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
    289:                 tables = [row[0] for row in cursor.fetchall()]
    290:
    291:                 table_stats = {}


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\performance\performance_optimizer.py:294:41
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    291:                 table_stats = {}
    292:                 for table in tables:
    293:                     if not table.startswith("sqlite_"):
>>> 294:                         cursor.execute(f"SELECT COUNT(*) FROM {table}")
    295:                         table_stats[table] = cursor.fetchone()[0]
    296:
    297:                 stats["tables"] = table_stats


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\performance\performance_optimizer.py:695:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    692:
    693:         # Test query performance
    694:         test_queries = [
>>> 695:             "SELECT COUNT(*) FROM fitness_metrics",
    696:             "SELECT AVG(fitness_score) FROM fitness_metrics WHERE agent_id = ?",
    697:             "SELECT * FROM evolution_rounds ORDER BY timestamp DESC LIMIT 10",
    698:         ]


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\performance\performance_optimizer.py:696:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    693:         # Test query performance
    694:         test_queries = [
    695:             "SELECT COUNT(*) FROM fitness_metrics",
>>> 696:             "SELECT AVG(fitness_score) FROM fitness_metrics WHERE agent_id = ?",
    697:             "SELECT * FROM evolution_rounds ORDER BY timestamp DESC LIMIT 10",
    698:         ]
    699:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\performance\performance_optimizer.py:697:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    694:         test_queries = [
    695:             "SELECT COUNT(*) FROM fitness_metrics",
    696:             "SELECT AVG(fitness_score) FROM fitness_metrics WHERE agent_id = ?",
>>> 697:             "SELECT * FROM evolution_rounds ORDER BY timestamp DESC LIMIT 10",
    698:         ]
    699:
    700:         query_times = []


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'conn' methods (9 calls)
File: packages\core\legacy\performance\performance_optimizer.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'time' methods (14 calls)
File: packages\core\legacy\performance\performance_optimizer.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'cursor' methods (16 calls)
File: packages\core\legacy\performance\performance_optimizer.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (23 calls)
File: packages\core\legacy\performance\performance_optimizer.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (12 calls)
File: packages\core\legacy\performance\performance_optimizer.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'datetime' methods (6 calls)
File: packages\core\legacy\performance\performance_optimizer.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'psutil' methods (6 calls)
File: packages\core\legacy\performance\performance_optimizer.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'recommendations' methods (12 calls)
File: packages\core\legacy\performance\performance_optimizer.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (86 total)
File: packages\core\legacy\performance\performance_optimizer.py:223:56
Recommendation: Replace magic numbers with named constants or enums
Code context:
    220:         # Check query cache first
    221:         if cache_key in self.query_cache:
    222:             cache_entry = self.query_cache[cache_key]
>>> 223:             if time.time() - cache_entry["timestamp"] < 60:  # 1 minute cache
    224:                 return 0.1, cache_entry["result"]  # Cache hit - very fast
    225:
    226:         # Execute query with timing


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (86 total)
File: packages\core\legacy\performance\performance_optimizer.py:224:23
Recommendation: Replace magic numbers with named constants or enums
Code context:
    221:         if cache_key in self.query_cache:
    222:             cache_entry = self.query_cache[cache_key]
    223:             if time.time() - cache_entry["timestamp"] < 60:  # 1 minute cache
>>> 224:                 return 0.1, cache_entry["result"]  # Cache hit - very fast
    225:
    226:         # Execute query with timing
    227:         start_time = time.time()


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (86 total)
File: packages\core\legacy\performance\performance_optimizer.py:242:107
Recommendation: Replace magic numbers with named constants or enums
Code context:
    239:         # Clean cache if too large
    240:         if len(self.query_cache) > 1000:
    241:             # Remove oldest 20%
>>> 242:             oldest_keys = sorted(self.query_cache.keys(), key=lambda k: self.query_cache[k]["timestamp"])[:200]
    243:             for key in oldest_keys:
    244:                 del self.query_cache[key]
    245:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (86 total)
File: packages\core\legacy\performance\performance_optimizer.py:249:60
Recommendation: Replace magic numbers with named constants or enums
Code context:
    246:         # Record performance stats
    247:         self.performance_stats[db_path].append(
    248:             {
>>> 249:                 "query": query[:50] + "..." if len(query) > 50 else query,
    250:                 "duration_ms": duration_ms,
    251:                 "timestamp": datetime.now(),
    252:             }


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (86 total)
File: packages\core\legacy\performance\performance_optimizer.py:249:32
Recommendation: Replace magic numbers with named constants or enums
Code context:
    246:         # Record performance stats
    247:         self.performance_stats[db_path].append(
    248:             {
>>> 249:                 "query": query[:50] + "..." if len(query) > 50 else query,
    250:                 "duration_ms": duration_ms,
    251:                 "timestamp": datetime.now(),
    252:             }


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\privacy\zero_knowledge_proofs.py:93:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     90:
     91:     # Schnorr Signature - Prove knowledge of private key
     92:     def create_schnorr_proof(self, message: bytes) -> ProofResponse:
>>>  93:         """
     94:         Create Schnorr signature proof of knowledge.
     95:
     96:         This proves we know the private key without revealing it.


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\privacy\zero_knowledge_proofs.py:139:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    136:
    137:     # Pedersen Commitment - Commit to value without revealing it
    138:     def create_pedersen_commitment(self, value: int) -> tuple[bytes, bytes]:
>>> 139:         """
    140:         Create Pedersen commitment to a value.
    141:
    142:         Returns commitment and opening (keep opening secret).


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\privacy\zero_knowledge_proofs.py:181:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    178:
    179:     # Range Proof - Prove value is in range without revealing it
    180:     def create_range_proof(self, value: int, min_val: int, max_val: int) -> ProofResponse:
>>> 181:         """
    182:         Create range proof that min_val <= value <= max_val.
    183:
    184:         Simplified version - production would use Bulletproofs.


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'int' methods (7 calls)
File: packages\core\legacy\privacy\zero_knowledge_proofs.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'hashlib' methods (8 calls)
File: packages\core\legacy\privacy\zero_knowledge_proofs.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (8 calls)
File: packages\core\legacy\privacy\zero_knowledge_proofs.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'json' methods (13 calls)
File: packages\core\legacy\privacy\zero_knowledge_proofs.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (18 total)
File: packages\core\legacy\privacy\zero_knowledge_proofs.py:67:11
Recommendation: Replace magic numbers with named constants or enums
Code context:
     64:
     65:     # Cryptographic parameters (simplified for demonstration)
     66:     # In production, use proper elliptic curve parameters
>>>  67:     P = 2**256 - 2**32 - 977  # Prime modulus (simplified)
     68:     G = 2  # Generator
     69:
     70:     def __init__(self, identity_key: bytes | None = None):


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (18 total)
File: packages\core\legacy\privacy\zero_knowledge_proofs.py:67:20
Recommendation: Replace magic numbers with named constants or enums
Code context:
     64:
     65:     # Cryptographic parameters (simplified for demonstration)
     66:     # In production, use proper elliptic curve parameters
>>>  67:     P = 2**256 - 2**32 - 977  # Prime modulus (simplified)
     68:     G = 2  # Generator
     69:
     70:     def __init__(self, identity_key: bytes | None = None):


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (18 total)
File: packages\core\legacy\privacy\zero_knowledge_proofs.py:67:25
Recommendation: Replace magic numbers with named constants or enums
Code context:
     64:
     65:     # Cryptographic parameters (simplified for demonstration)
     66:     # In production, use proper elliptic curve parameters
>>>  67:     P = 2**256 - 2**32 - 977  # Prime modulus (simplified)
     68:     G = 2  # Generator
     69:
     70:     def __init__(self, identity_key: bytes | None = None):


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (18 total)
File: packages\core\legacy\privacy\zero_knowledge_proofs.py:89:40
Recommendation: Replace magic numbers with named constants or enums
Code context:
     86:
     87:     def get_public_key(self) -> bytes:
     88:         """Get public key for verification."""
>>>  89:         return self.public_key.to_bytes(32, "big")
     90:
     91:     # Schnorr Signature - Prove knowledge of private key
     92:     def create_schnorr_proof(self, message: bytes) -> ProofResponse:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (18 total)
File: packages\core\legacy\privacy\zero_knowledge_proofs.py:103:45
Recommendation: Replace magic numbers with named constants or enums
Code context:
    100:         commitment = pow(self.G, r, self.P)
    101:
    102:         # Challenge (Fiat-Shamir heuristic for non-interactive)
>>> 103:         challenge_data = commitment.to_bytes(32, "big") + message
    104:         challenge = int.from_bytes(hashlib.sha256(challenge_data).digest(), "big") % self.P
    105:
    106:         # Response


LONG_PARAMETER_LIST: Function '_create_stub_analysis' has 6 parameters (>5)
File: packages\core\legacy\quality\stub_elimination_system.py:174:4
Recommendation: Use parameter objects, data classes, or keyword-only arguments
Code context:
    171:             logger.error(f"Error analyzing {file_path}: {e}")
    172:             return []
    173:
>>> 174:     def _create_stub_analysis(
    175:         self,
    176:         file_path: Path,
    177:         line_num: int,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\quality\stub_elimination_system.py:182:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    179:         stub_type: StubType,
    180:         all_lines: list[str],
    181:     ) -> StubAnalysis | None:
>>> 182:         """Create stub analysis from detected pattern."""
    183:
    184:         location = StubLocation(file_path, line_num)
    185:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\quality\stub_elimination_system.py:406:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    403:         return results
    404:
    405:     def create_elimination_plan(self, target_count: int = 50) -> list[StubAnalysis]:
>>> 406:         """Create prioritized elimination plan for top N stubs."""
    407:
    408:         # Calculate composite scores for prioritization
    409:         scored_stubs = []


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\quality\stub_elimination_system.py:437:22
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    434:         # Update elimination plan
    435:         self.elimination_plan = [stub.stub_id for stub in top_stubs]
    436:
>>> 437:         logger.info(f"Created elimination plan for top {len(top_stubs)} stubs")
    438:         return top_stubs
    439:
    440:     def generate_elimination_report(self, top_stubs: list[StubAnalysis]) -> dict[str, Any]:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\quality\stub_elimination_system.py:549:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    546: def scan_and_plan_elimination(
    547:     project_root: Path, target_count: int = 50, output_dir: Path | None = None
    548: ) -> tuple[dict[str, Any], list[StubAnalysis]]:
>>> 549:     """Scan project and create elimination plan in one step."""
    550:
    551:     planner = StubEliminationPlanner(project_root)
    552:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'f' methods (22 calls)
File: packages\core\legacy\quality\stub_elimination_system.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (10 calls)
File: packages\core\legacy\quality\stub_elimination_system.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (24 total)
File: packages\core\legacy\quality\stub_elimination_system.py:47:13
Recommendation: Replace magic numbers with named constants or enums
Code context:
     44:
     45:     CRITICAL = 1  # Blocks core functionality
     46:     HIGH = 2  # Important for integration
>>>  47:     MEDIUM = 3  # Quality improvement
     48:     LOW = 4  # Nice to have
     49:     DEFERRED = 5  # Not in current scope
     50:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (24 total)
File: packages\core\legacy\quality\stub_elimination_system.py:48:10
Recommendation: Replace magic numbers with named constants or enums
Code context:
     45:     CRITICAL = 1  # Blocks core functionality
     46:     HIGH = 2  # Important for integration
     47:     MEDIUM = 3  # Quality improvement
>>>  48:     LOW = 4  # Nice to have
     49:     DEFERRED = 5  # Not in current scope
     50:
     51:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (24 total)
File: packages\core\legacy\quality\stub_elimination_system.py:49:15
Recommendation: Replace magic numbers with named constants or enums
Code context:
     46:     HIGH = 2  # Important for integration
     47:     MEDIUM = 3  # Quality improvement
     48:     LOW = 4  # Nice to have
>>>  49:     DEFERRED = 5  # Not in current scope
     50:
     51:
     52: @dataclass


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (24 total)
File: packages\core\legacy\quality\stub_elimination_system.py:187:42
Recommendation: Replace magic numbers with named constants or enums
Code context:
    184:         location = StubLocation(file_path, line_num)
    185:
    186:         # Extract context
>>> 187:         start_context = max(0, line_num - 3)
    188:         end_context = min(len(all_lines), line_num + 2)
    189:         context_lines = all_lines[start_context:end_context]
    190:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (24 total)
File: packages\core\legacy\quality\stub_elimination_system.py:245:41
Recommendation: Replace magic numbers with named constants or enums
Code context:
    242:                         priority=StubPriority.MEDIUM,
    243:                         content=f"class {node.name}: pass",
    244:                         class_name=node.name,
>>> 245:                         complexity_score=1.5,
    246:                         elimination_effort=3.0,
    247:                         description=f"Empty class: {node.name}",
    248:                     )


LONG_PARAMETER_LIST: Function 'record_error' has 7 parameters (>5)
File: packages\core\legacy\resilience\error_handling.py:168:4
Recommendation: Use parameter objects, data classes, or keyword-only arguments
Code context:
    165:         self.component_health: dict[str, HealthStatus] = {}
    166:         self._lock = threading.Lock()
    167:
>>> 168:     def record_error(
    169:         self,
    170:         component: str,
    171:         operation: str,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\resilience\error_handling.py:226:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    223:             return ErrorCategory.INTERNAL
    224:
    225:     def _update_component_health(self, component: str, severity: ErrorSeverity):
>>> 226:         """Update component health based on error severity."""
    227:         if severity == ErrorSeverity.CRITICAL:
    228:             self.component_health[component] = HealthStatus.CRITICAL
    229:         elif severity == ErrorSeverity.HIGH:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\resilience\error_handling.py:627:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    624:             return False
    625:
    626:     def _update_overall_status(self):
>>> 627:         """Update overall system status."""
    628:         if self.health_status.critical_failures:
    629:             self.health_status.overall_status = HealthStatus.CRITICAL
    630:         elif self.health_status.degraded_services:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\resilience\error_handling.py:662:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    659:         self._register_default_health_checks()
    660:
    661:     def get_circuit_breaker(self, name: str, config: CircuitBreakerConfig | None = None) -> CircuitBreaker:
>>> 662:         """Get or create circuit breaker."""
    663:         if name not in self.circuit_breakers:
    664:             self.circuit_breakers[name] = CircuitBreaker(name, config)
    665:         return self.circuit_breakers[name]


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\resilience\error_handling.py:668:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    665:         return self.circuit_breakers[name]
    666:
    667:     def get_retry_handler(self, name: str, config: RetryConfig | None = None) -> RetryHandler:
>>> 668:         """Get or create retry handler."""
    669:         if name not in self.retry_handlers:
    670:             self.retry_handlers[name] = RetryHandler(config)
    671:         return self.retry_handlers[name]


LONG_PARAMETER_LIST: Function 'resilient_call' has 9 parameters (>5)
File: packages\core\legacy\resilience\error_handling.py:673:4
Recommendation: Use parameter objects, data classes, or keyword-only arguments
Code context:
    670:             self.retry_handlers[name] = RetryHandler(config)
    671:         return self.retry_handlers[name]
    672:
>>> 673:     def resilient_call(
    674:         self,
    675:         component: str,
    676:         operation: str,


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'time' methods (18 calls)
File: packages\core\legacy\resilience\error_handling.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (20 calls)
File: packages\core\legacy\resilience\error_handling.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logging' methods (14 calls)
File: packages\core\legacy\resilience\error_handling.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (19 total)
File: packages\core\legacy\resilience\error_handling.py:92:24
Recommendation: Replace magic numbers with named constants or enums
Code context:
     89: class RetryConfig:
     90:     """Retry configuration."""
     91:
>>>  92:     max_attempts: int = 3
     93:     initial_delay_ms: float = 100.0
     94:     max_delay_ms: float = 30000.0
     95:     backoff_multiplier: float = 2.0


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (19 total)
File: packages\core\legacy\resilience\error_handling.py:94:26
Recommendation: Replace magic numbers with named constants or enums
Code context:
     91:
     92:     max_attempts: int = 3
     93:     initial_delay_ms: float = 100.0
>>>  94:     max_delay_ms: float = 30000.0
     95:     backoff_multiplier: float = 2.0
     96:     jitter: bool = True
     97:     strategy: RetryStrategy = RetryStrategy.EXPONENTIAL_BACKOFF


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (19 total)
File: packages\core\legacy\resilience\error_handling.py:106:29
Recommendation: Replace magic numbers with named constants or enums
Code context:
    103: class CircuitBreakerConfig:
    104:     """Circuit breaker configuration."""
    105:
>>> 106:     failure_threshold: int = 5
    107:     success_threshold: int = 3
    108:     timeout_ms: float = 60000.0
    109:     half_open_max_calls: int = 5


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (19 total)
File: packages\core\legacy\resilience\error_handling.py:107:29
Recommendation: Replace magic numbers with named constants or enums
Code context:
    104:     """Circuit breaker configuration."""
    105:
    106:     failure_threshold: int = 5
>>> 107:     success_threshold: int = 3
    108:     timeout_ms: float = 60000.0
    109:     half_open_max_calls: int = 5
    110:     failure_rate_threshold: float = 0.5


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (19 total)
File: packages\core\legacy\resilience\error_handling.py:108:24
Recommendation: Replace magic numbers with named constants or enums
Code context:
    105:
    106:     failure_threshold: int = 5
    107:     success_threshold: int = 3
>>> 108:     timeout_ms: float = 60000.0
    109:     half_open_max_calls: int = 5
    110:     failure_rate_threshold: float = 0.5
    111:     minimum_calls: int = 10


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\resources\adaptive_loader.py:81:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     78:
     79:
     80: class AdaptiveLoader:
>>>  81:     """Adaptive model loader that selects optimal loading strategy based on device resources."""
     82:
     83:     def __init__(self, device_profiler: DeviceProfiler, constraint_manager: ConstraintManager) -> None:
     84:         self.device_profiler = device_profiler


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\resources\adaptive_loader.py:279:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    276:             return None, {"error": str(e)}
    277:
    278:     async def _select_optimal_variant(self, model_name: str, context: LoadingContext) -> ModelVariant | None:
>>> 279:         """Select optimal model variant based on current resources and context."""
    280:         if model_name not in self.model_variants:
    281:             logger.warning(f"No variants registered for model {model_name}")
    282:             return None


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\resources\adaptive_loader.py:504:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    501:         return await self._load_compressed_model(model_name, fallback_variant)
    502:
    503:     def unload_model(self, model_name: str) -> bool:
>>> 504:         """Unload model from cache."""
    505:         if model_name in self.loaded_models:
    506:             del self.loaded_models[model_name]
    507:             if model_name in self.model_metadata:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (15 calls)
File: packages\core\legacy\resources\adaptive_loader.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (11 calls)
File: packages\core\legacy\resources\adaptive_loader.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'asyncio' methods (6 calls)
File: packages\core\legacy\resources\adaptive_loader.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

SEQUENTIAL_COUPLING: Sequential coupling detected: Function '__init__' is part of a sequence-dependent API
File: packages\core\legacy\resources\adaptive_loader.py:83:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
     80: class AdaptiveLoader:
     81:     """Adaptive model loader that selects optimal loading strategy based on device resources."""
     82:
>>>  83:     def __init__(self, device_profiler: DeviceProfiler, constraint_manager: ConstraintManager) -> None:
     84:         self.device_profiler = device_profiler
     85:         self.constraint_manager = constraint_manager
     86:


SEQUENTIAL_COUPLING: Sequential coupling detected: Function '_initialize_preferred_strategies' is part of a sequence-dependent API
File: packages\core\legacy\resources\adaptive_loader.py:118:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    115:         # Initialize built-in model variants
    116:         self._initialize_builtin_variants()
    117:
>>> 118:     def _initialize_preferred_strategies(
    119:         self,
    120:     ) -> dict[DeviceType, list[LoadingStrategy]]:
    121:         """Initialize preferred loading strategies by device type."""


SEQUENTIAL_COUPLING: Sequential coupling detected: Function '_initialize_builtin_variants' is part of a sequence-dependent API
File: packages\core\legacy\resources\adaptive_loader.py:161:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    158:             ],
    159:         }
    160:
>>> 161:     def _initialize_builtin_variants(self) -> None:
    162:         """Initialize built-in model variants for common evolution models."""
    163:         # Example model variants for evolution systems
    164:         self.register_model_variants(


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (40 total)
File: packages\core\legacy\resources\adaptive_loader.py:99:45
Recommendation: Replace magic numbers with named constants or enums
Code context:
     96:         self.preferred_strategies = self._initialize_preferred_strategies()
     97:
     98:         # Adaptive parameters
>>>  99:         self.quality_degradation_threshold = 0.7  # Below this, prefer speed
    100:         self.memory_safety_margin = 0.8  # Use 80% of available memory max
    101:         self.cpu_safety_margin = 0.75  # Use 75% of available CPU max
    102:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (40 total)
File: packages\core\legacy\resources\adaptive_loader.py:100:36
Recommendation: Replace magic numbers with named constants or enums
Code context:
     97:
     98:         # Adaptive parameters
     99:         self.quality_degradation_threshold = 0.7  # Below this, prefer speed
>>> 100:         self.memory_safety_margin = 0.8  # Use 80% of available memory max
    101:         self.cpu_safety_margin = 0.75  # Use 75% of available CPU max
    102:
    103:         # Statistics


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (40 total)
File: packages\core\legacy\resources\adaptive_loader.py:101:33
Recommendation: Replace magic numbers with named constants or enums
Code context:
     98:         # Adaptive parameters
     99:         self.quality_degradation_threshold = 0.7  # Below this, prefer speed
    100:         self.memory_safety_margin = 0.8  # Use 80% of available memory max
>>> 101:         self.cpu_safety_margin = 0.75  # Use 75% of available CPU max
    102:
    103:         # Statistics
    104:         self.stats = {


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (40 total)
File: packages\core\legacy\resources\adaptive_loader.py:170:28
Recommendation: Replace magic numbers with named constants or enums
Code context:
    167:                 ModelVariant(
    168:                     name="base_evolution_model_tiny",
    169:                     strategy=LoadingStrategy.QUANTIZED,
>>> 170:                     size_mb=50,
    171:                     memory_requirement_mb=100,
    172:                     cpu_requirement_percent=20.0,
    173:                     quality_score=0.6,


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (40 total)
File: packages\core\legacy\resources\adaptive_loader.py:172:44
Recommendation: Replace magic numbers with named constants or enums
Code context:
    169:                     strategy=LoadingStrategy.QUANTIZED,
    170:                     size_mb=50,
    171:                     memory_requirement_mb=100,
>>> 172:                     cpu_requirement_percent=20.0,
    173:                     quality_score=0.6,
    174:                     loading_time_estimate_seconds=2.0,
    175:                     supports_quantization=True,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\resources\constraint_manager.py:165:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    162:         self.constraint_templates = self._create_constraint_templates()
    163:
    164:     def _create_default_constraints(self) -> ResourceConstraints:
>>> 165:         """Create default constraints based on device profile."""
    166:         profile = self.device_profiler.profile
    167:
    168:         # Calculate memory constraints (conservative)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\resources\constraint_manager.py:213:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    210:         )
    211:
    212:     def _create_constraint_templates(self) -> dict[str, ResourceConstraints]:
>>> 213:         """Create pre-defined constraint templates."""
    214:         base = self.default_constraints
    215:
    216:         return {


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\resources\constraint_manager.py:616:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    613:         return self.constraint_templates.get(evolution_type)
    614:
    615:     def update_constraints(self, task_id: str, new_constraints: ResourceConstraints) -> None:
>>> 616:         """Update constraints for active task."""
    617:         if task_id in self.active_tasks:
    618:             self.active_tasks[task_id] = new_constraints
    619:             logger.info(f"Updated constraints for task {task_id}")


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\resources\constraint_manager.py:619:26
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    616:         """Update constraints for active task."""
    617:         if task_id in self.active_tasks:
    618:             self.active_tasks[task_id] = new_constraints
>>> 619:             logger.info(f"Updated constraints for task {task_id}")
    620:
    621:     def register_violation_callback(self, callback: Callable[[str, ConstraintViolation], None]) -> None:
    622:         """Register violation callback."""


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (9 calls)
File: packages\core\legacy\resources\constraint_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (11 calls)
File: packages\core\legacy\resources\constraint_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'violations' methods (11 calls)
File: packages\core\legacy\resources\constraint_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (54 total)
File: packages\core\legacy\resources\constraint_manager.py:65:38
Recommendation: Replace magic numbers with named constants or enums
Code context:
     62:     storage_warning_gb: float = 2.0
     63:
     64:     # Time-based constraints
>>>  65:     max_execution_time_minutes: int = 60
     66:     max_idle_time_minutes: int = 5
     67:
     68:     # Device-specific constraints


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (54 total)
File: packages\core\legacy\resources\constraint_manager.py:66:33
Recommendation: Replace magic numbers with named constants or enums
Code context:
     63:
     64:     # Time-based constraints
     65:     max_execution_time_minutes: int = 60
>>>  66:     max_idle_time_minutes: int = 5
     67:
     68:     # Device-specific constraints
     69:     require_charging: bool = False


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (54 total)
File: packages\core\legacy\resources\constraint_manager.py:169:56
Recommendation: Replace magic numbers with named constants or enums
Code context:
    166:         profile = self.device_profiler.profile
    167:
    168:         # Calculate memory constraints (conservative)
>>> 169:         total_memory_mb = int(profile.total_memory_gb * 1024)
    170:         max_memory = min(
    171:             total_memory_mb // 2,  # Max 50% of total memory
    172:             profile.max_evolution_memory_mb or (total_memory_mb // 2),


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (54 total)
File: packages\core\legacy\resources\constraint_manager.py:176:55
Recommendation: Replace magic numbers with named constants or enums
Code context:
    173:         )
    174:
    175:         # CPU constraints
>>> 176:         max_cpu = profile.max_evolution_cpu_percent or 70.0
    177:
    178:         # Battery constraints (if applicable)
    179:         min_battery = None


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (54 total)
File: packages\core\legacy\resources\constraint_manager.py:182:26
Recommendation: Replace magic numbers with named constants or enums
Code context:
    179:         min_battery = None
    180:         battery_warning = None
    181:         if profile.device_type in [DeviceType.PHONE, DeviceType.TABLET]:
>>> 182:             min_battery = 15.0 if not profile.battery_optimization else 25.0
    183:             battery_warning = 20.0 if not profile.battery_optimization else 30.0
    184:
    185:         # Thermal constraints


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\resources\resource_monitor.py:223:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    220:
    221:
    222: def get_monitor_instance():
>>> 223:     """Get or create monitor instance."""
    224:     global _monitor_instance
    225:     if _monitor_instance is None:
    226:         _monitor_instance = ResourceMonitor()


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (10 calls)
File: packages\core\legacy\resources\resource_monitor.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (30 total)
File: packages\core\legacy\resources\resource_monitor.py:31:48
Recommendation: Replace magic numbers with named constants or enums
Code context:
     28:     def get_cpu_usage(self) -> float:
     29:         """Get current CPU usage percentage."""
     30:         if psutil:
>>>  31:             value = psutil.cpu_percent(interval=0.1)
     32:         else:  # Fallback to load average
     33:             try:
     34:                 load, _, _ = os.getloadavg()


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (30 total)
File: packages\core\legacy\resources\resource_monitor.py:39:35
Recommendation: Replace magic numbers with named constants or enums
Code context:
     36:             except Exception:  # pragma: no cover
     37:                 value = 0.0
     38:         self.cpu_history.append(value)
>>>  39:         if len(self.cpu_history) > 60:
     40:             self.cpu_history.pop(0)
     41:         return value
     42:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (30 total)
File: packages\core\legacy\resources\resource_monitor.py:58:70
Recommendation: Replace magic numbers with named constants or enums
Code context:
     55:                     for line in fh:
     56:                         if ":" in line:
     57:                             key, val = line.split(":", 1)
>>>  58:                             info[key] = int(val.strip().split()[0]) * 1024
     59:                 total = info.get("MemTotal", 0)
     60:                 available = info.get("MemAvailable", info.get("MemFree", 0))
     61:                 used = total - available


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (30 total)
File: packages\core\legacy\resources\resource_monitor.py:67:33
Recommendation: Replace magic numbers with named constants or enums
Code context:
     64:                 total = available = used = 0
     65:                 percent = 0.0
     66:         return {
>>>  67:             "total_gb": total / (1024**3),
     68:             "available_gb": available / (1024**3),
     69:             "used_gb": used / (1024**3),
     70:             "percent": percent,


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (30 total)
File: packages\core\legacy\resources\resource_monitor.py:67:39
Recommendation: Replace magic numbers with named constants or enums
Code context:
     64:                 total = available = used = 0
     65:                 percent = 0.0
     66:         return {
>>>  67:             "total_gb": total / (1024**3),
     68:             "available_gb": available / (1024**3),
     69:             "used_gb": used / (1024**3),
     70:             "percent": percent,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\digital_twin_encryption.py:35:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     32:     """Secure encryption for Digital Twin sensitive data fields."""
     33:
     34:     def __init__(self, encryption_key: str | None = None) -> None:
>>>  35:         """Initialize encryption with CODEX-compliant configuration.
     36:
     37:         Args:
     38:             encryption_key: Base64-encoded 32-byte key from environment


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\digital_twin_encryption.py:66:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     63:         )
     64:
     65:     def _validate_and_derive_key(self, base64_key: str) -> bytes:
>>>  66:         """Validate and derive Fernet key from base64 encoded key.
     67:
     68:         Args:
     69:             base64_key: Base64-encoded 32-byte key


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\digital_twin_encryption.py:147:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    144:             raise DigitalTwinEncryptionError(msg)
    145:
    146:     def decrypt_sensitive_field(self, encrypted_data: bytes, field_name: str = "") -> Any:
>>> 147:         """Decrypt sensitive field value from database.
    148:
    149:         Args:
    150:             encrypted_data: Encrypted bytes from database


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\digital_twin_encryption.py:208:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    205:             raise ComplianceViolationError(msg)
    206:
    207:     def hash_user_id(self, user_id: str) -> str:
>>> 208:         """Create privacy-compliant hash of user ID.
    209:
    210:         Args:
    211:             user_id: Original user identifier


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\digital_twin_encryption.py:224:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    221:         return hash_obj.hexdigest()
    222:
    223:     def check_data_retention_compliance(self, created_at: datetime) -> dict[str, Any]:
>>> 224:         """Check if data meets retention policy requirements.
    225:
    226:         Args:
    227:             created_at: When the data was created


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\digital_twin_encryption.py:248:48
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    245:         # GDPR right to be forgotten
    246:         if self.gdpr_compliant and age_days > self.profile_ttl_days:
    247:             status["requires_deletion"] = True
>>> 248:             status["compliance_actions"].append("GDPR_DELETE_EXPIRED_DATA")
    249:
    250:         # COPPA special handling for minors
    251:         if self.coppa_compliant and age_days > 180:  # 6 months for COPPA


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\digital_twin_encryption.py:261:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    258:         return status
    259:
    260:     def create_audit_log_entry(self, action: str, field_name: str, user_id_hash: str) -> dict[str, Any]:
>>> 261:         """Create audit log entry for compliance tracking.
    262:
    263:         Args:
    264:             action: Action performed (encrypt, decrypt, access, delete)


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'os' methods (8 calls)
File: packages\core\legacy\security\digital_twin_encryption.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

HARDCODED_PATH: Hardcoded path or URL detected
File: packages\core\legacy\security\http_security_validator.py:64:57
Recommendation: Use configuration files, environment variables, or path utilities
Code context:
     61:
     62:         if isinstance(value, dict):
     63:             validate_config_dict_for_production(value, current_path)
>>>  64:         elif isinstance(value, str) and value.startswith("http://"):
     65:             validate_url_for_production(value, f"config key '{current_path}'")
     66:         elif isinstance(value, list):
     67:             for i, item in enumerate(value):


HARDCODED_PATH: Hardcoded path or URL detected
File: packages\core\legacy\security\http_security_validator.py:68:61
Recommendation: Use configuration files, environment variables, or path utilities
Code context:
     65:             validate_url_for_production(value, f"config key '{current_path}'")
     66:         elif isinstance(value, list):
     67:             for i, item in enumerate(value):
>>>  68:                 if isinstance(item, str) and item.startswith("http://"):
     69:                     validate_url_for_production(item, f"config key '{current_path}[{i}]'")
     70:                 elif isinstance(item, dict):
     71:                     validate_config_dict_for_production(item, f"{current_path}[{i}]")


HARDCODED_PATH: Hardcoded path or URL detected
File: packages\core\legacy\security\http_security_validator.py:85:19
Recommendation: Use configuration files, environment variables, or path utilities
Code context:
     82:         List of found HTTP URLs
     83:     """
     84:     # Pattern to find HTTP URLs in strings
>>>  85:     http_pattern = r'"http://[^"]*"|\'http://[^\']*\'|`http://[^`]*`'
     86:     matches = re.findall(http_pattern, source_code)
     87:
     88:     # Clean up the quotes


HARDCODED_PATH: Hardcoded path or URL detected
File: packages\core\legacy\security\http_security_validator.py:122:38
Recommendation: Use configuration files, environment variables, or path utilities
Code context:
    119:     violations = []
    120:     for var_name in env_vars_to_check:
    121:         value = os.getenv(var_name)
>>> 122:         if value and value.startswith("http://"):
    123:             violations.append(f"{var_name}={value}")
    124:
    125:     if violations:


HARDCODED_PATH: Hardcoded path or URL detected
File: packages\core\legacy\security\http_security_validator.py:143:59
Recommendation: Use configuration files, environment variables, or path utilities
Code context:
    140:         if os.getenv("AIVILLAGE_ENV") == "production":
    141:             # Check all string arguments for HTTP URLs
    142:             for arg in args:
>>> 143:                 if isinstance(arg, str) and arg.startswith("http://"):
    144:                     validate_url_for_production(arg, f"function {func.__name__}")
    145:
    146:             # Check keyword arguments for HTTP URLs


HARDCODED_PATH: Hardcoded path or URL detected
File: packages\core\legacy\security\http_security_validator.py:148:63
Recommendation: Use configuration files, environment variables, or path utilities
Code context:
    145:
    146:             # Check keyword arguments for HTTP URLs
    147:             for key, value in kwargs.items():
>>> 148:                 if isinstance(value, str) and value.startswith("http://"):
    149:                     validate_url_for_production(value, f"function {func.__name__} parameter '{key}'")
    150:
    151:         return func(*args, **kwargs)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\p2p_mtls_config.py:232:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    229:         logger.info(f"Generated P2P node certificate: {self.node_cert_path}")
    230:
    231:     def create_ssl_context_server(self) -> ssl.SSLContext:
>>> 232:         """Create SSL context for server-side P2P connections."""
    233:         context = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)
    234:
    235:         # TLS 1.3 only for maximum security


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\p2p_mtls_config.py:261:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    258:         return context
    259:
    260:     def create_ssl_context_client(self) -> ssl.SSLContext:
>>> 261:         """Create SSL context for client-side P2P connections."""
    262:         context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH)
    263:
    264:         # TLS 1.3 only for maximum security


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\p2p_mtls_config.py:397:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    394:
    395:
    396: def create_p2p_mtls_config(node_id: str, cert_dir: str | None = None) -> P2PMTLSConfig:
>>> 397:     """Create mTLS configuration for P2P node.
    398:
    399:     Args:
    400:         node_id: Unique node identifier


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (8 calls)
File: packages\core\legacy\security\p2p_mtls_config.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'x509' methods (34 calls)
File: packages\core\legacy\security\p2p_mtls_config.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'datetime' methods (7 calls)
File: packages\core\legacy\security\p2p_mtls_config.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'f' methods (9 calls)
File: packages\core\legacy\security\p2p_mtls_config.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'context' methods (6 calls)
File: packages\core\legacy\security\p2p_mtls_config.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (11 total)
File: packages\core\legacy\security\p2p_mtls_config.py:65:28
Recommendation: Replace magic numbers with named constants or enums
Code context:
     62:         """Generate Certificate Authority for P2P network."""
     63:         # Generate CA private key
     64:         ca_private_key = rsa.generate_private_key(
>>>  65:             public_exponent=65537,
     66:             key_size=4096,  # Stronger key for CA
     67:         )
     68:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (11 total)
File: packages\core\legacy\security\p2p_mtls_config.py:66:21
Recommendation: Replace magic numbers with named constants or enums
Code context:
     63:         # Generate CA private key
     64:         ca_private_key = rsa.generate_private_key(
     65:             public_exponent=65537,
>>>  66:             key_size=4096,  # Stronger key for CA
     67:         )
     68:
     69:         # Generate CA certificate


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (11 total)
File: packages\core\legacy\security\p2p_mtls_config.py:88:64
Recommendation: Replace magic numbers with named constants or enums
Code context:
     85:             .public_key(ca_private_key.public_key())
     86:             .serial_number(x509.random_serial_number())
     87:             .not_valid_before(datetime.utcnow())
>>>  88:             .not_valid_after(datetime.utcnow() + timedelta(days=3650))  # 10 years for CA
     89:             .add_extension(
     90:                 x509.BasicConstraints(ca=True, path_length=0),
     91:                 critical=True,


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (11 total)
File: packages\core\legacy\security\p2p_mtls_config.py:132:35
Recommendation: Replace magic numbers with named constants or enums
Code context:
    129:             f.write(ca_certificate.public_bytes(serialization.Encoding.PEM))
    130:
    131:         # Set restrictive permissions
>>> 132:         os.chmod(self.ca_key_path, 0o600)
    133:         os.chmod(self.ca_cert_path, 0o644)
    134:
    135:         logger.info(f"Generated P2P CA certificate: {self.ca_cert_path}")


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (11 total)
File: packages\core\legacy\security\p2p_mtls_config.py:133:36
Recommendation: Replace magic numbers with named constants or enums
Code context:
    130:
    131:         # Set restrictive permissions
    132:         os.chmod(self.ca_key_path, 0o600)
>>> 133:         os.chmod(self.ca_cert_path, 0o644)
    134:
    135:         logger.info(f"Generated P2P CA certificate: {self.ca_cert_path}")
    136:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\rbac_system.py:133:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    130:         with self._get_connection() as conn:
    131:             # Roles table
    132:             conn.execute(
>>> 133:                 """
    134:                 CREATE TABLE IF NOT EXISTS roles (
    135:                     id INTEGER PRIMARY KEY AUTOINCREMENT,
    136:                     name TEXT UNIQUE NOT NULL,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\rbac_system.py:149:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    146:
    147:             # Permissions table
    148:             conn.execute(
>>> 149:                 """
    150:                 CREATE TABLE IF NOT EXISTS permissions (
    151:                     id INTEGER PRIMARY KEY AUTOINCREMENT,
    152:                     name TEXT UNIQUE NOT NULL,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\rbac_system.py:164:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    161:
    162:             # Role-Permission assignments
    163:             conn.execute(
>>> 164:                 """
    165:                 CREATE TABLE IF NOT EXISTS role_permissions (
    166:                     id INTEGER PRIMARY KEY AUTOINCREMENT,
    167:                     role_name TEXT NOT NULL,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\rbac_system.py:185:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    182:
    183:             # Users table
    184:             conn.execute(
>>> 185:                 """
    186:                 CREATE TABLE IF NOT EXISTS users (
    187:                     id INTEGER PRIMARY KEY AUTOINCREMENT,
    188:                     user_id TEXT UNIQUE NOT NULL,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\rbac_system.py:215:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    212:
    213:             # User-Role assignments
    214:             conn.execute(
>>> 215:                 """
    216:                 CREATE TABLE IF NOT EXISTS user_roles (
    217:                     id INTEGER PRIMARY KEY AUTOINCREMENT,
    218:                     user_id TEXT NOT NULL,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\rbac_system.py:236:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    233:
    234:             # Access log
    235:             conn.execute(
>>> 236:                 """
    237:                 CREATE TABLE IF NOT EXISTS access_log (
    238:                     id INTEGER PRIMARY KEY AUTOINCREMENT,
    239:                     timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\rbac_system.py:255:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    252:
    253:             # Create indexes
    254:             indexes = [
>>> 255:                 "CREATE INDEX IF NOT EXISTS idx_role_permissions_role ON role_permissions (role_name)",
    256:                 "CREATE INDEX IF NOT EXISTS idx_role_permissions_permission ON role_permissions (permission_name)",
    257:                 "CREATE INDEX IF NOT EXISTS idx_user_roles_user ON user_roles (user_id)",
    258:                 "CREATE INDEX IF NOT EXISTS idx_user_roles_role ON user_roles (role_name)",


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\rbac_system.py:256:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    253:             # Create indexes
    254:             indexes = [
    255:                 "CREATE INDEX IF NOT EXISTS idx_role_permissions_role ON role_permissions (role_name)",
>>> 256:                 "CREATE INDEX IF NOT EXISTS idx_role_permissions_permission ON role_permissions (permission_name)",
    257:                 "CREATE INDEX IF NOT EXISTS idx_user_roles_user ON user_roles (user_id)",
    258:                 "CREATE INDEX IF NOT EXISTS idx_user_roles_role ON user_roles (role_name)",
    259:                 "CREATE INDEX IF NOT EXISTS idx_access_log_user ON access_log (user_id)",


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\rbac_system.py:257:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    254:             indexes = [
    255:                 "CREATE INDEX IF NOT EXISTS idx_role_permissions_role ON role_permissions (role_name)",
    256:                 "CREATE INDEX IF NOT EXISTS idx_role_permissions_permission ON role_permissions (permission_name)",
>>> 257:                 "CREATE INDEX IF NOT EXISTS idx_user_roles_user ON user_roles (user_id)",
    258:                 "CREATE INDEX IF NOT EXISTS idx_user_roles_role ON user_roles (role_name)",
    259:                 "CREATE INDEX IF NOT EXISTS idx_access_log_user ON access_log (user_id)",
    260:                 "CREATE INDEX IF NOT EXISTS idx_access_log_timestamp ON access_log (timestamp)",


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\rbac_system.py:258:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    255:                 "CREATE INDEX IF NOT EXISTS idx_role_permissions_role ON role_permissions (role_name)",
    256:                 "CREATE INDEX IF NOT EXISTS idx_role_permissions_permission ON role_permissions (permission_name)",
    257:                 "CREATE INDEX IF NOT EXISTS idx_user_roles_user ON user_roles (user_id)",
>>> 258:                 "CREATE INDEX IF NOT EXISTS idx_user_roles_role ON user_roles (role_name)",
    259:                 "CREATE INDEX IF NOT EXISTS idx_access_log_user ON access_log (user_id)",
    260:                 "CREATE INDEX IF NOT EXISTS idx_access_log_timestamp ON access_log (timestamp)",
    261:                 "CREATE INDEX IF NOT EXISTS idx_users_username ON users (username)",


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\rbac_system.py:259:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    256:                 "CREATE INDEX IF NOT EXISTS idx_role_permissions_permission ON role_permissions (permission_name)",
    257:                 "CREATE INDEX IF NOT EXISTS idx_user_roles_user ON user_roles (user_id)",
    258:                 "CREATE INDEX IF NOT EXISTS idx_user_roles_role ON user_roles (role_name)",
>>> 259:                 "CREATE INDEX IF NOT EXISTS idx_access_log_user ON access_log (user_id)",
    260:                 "CREATE INDEX IF NOT EXISTS idx_access_log_timestamp ON access_log (timestamp)",
    261:                 "CREATE INDEX IF NOT EXISTS idx_users_username ON users (username)",
    262:                 "CREATE INDEX IF NOT EXISTS idx_users_email ON users (email)",


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\rbac_system.py:260:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    257:                 "CREATE INDEX IF NOT EXISTS idx_user_roles_user ON user_roles (user_id)",
    258:                 "CREATE INDEX IF NOT EXISTS idx_user_roles_role ON user_roles (role_name)",
    259:                 "CREATE INDEX IF NOT EXISTS idx_access_log_user ON access_log (user_id)",
>>> 260:                 "CREATE INDEX IF NOT EXISTS idx_access_log_timestamp ON access_log (timestamp)",
    261:                 "CREATE INDEX IF NOT EXISTS idx_users_username ON users (username)",
    262:                 "CREATE INDEX IF NOT EXISTS idx_users_email ON users (email)",
    263:             ]


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\rbac_system.py:261:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    258:                 "CREATE INDEX IF NOT EXISTS idx_user_roles_role ON user_roles (role_name)",
    259:                 "CREATE INDEX IF NOT EXISTS idx_access_log_user ON access_log (user_id)",
    260:                 "CREATE INDEX IF NOT EXISTS idx_access_log_timestamp ON access_log (timestamp)",
>>> 261:                 "CREATE INDEX IF NOT EXISTS idx_users_username ON users (username)",
    262:                 "CREATE INDEX IF NOT EXISTS idx_users_email ON users (email)",
    263:             ]
    264:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\rbac_system.py:262:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    259:                 "CREATE INDEX IF NOT EXISTS idx_access_log_user ON access_log (user_id)",
    260:                 "CREATE INDEX IF NOT EXISTS idx_access_log_timestamp ON access_log (timestamp)",
    261:                 "CREATE INDEX IF NOT EXISTS idx_users_username ON users (username)",
>>> 262:                 "CREATE INDEX IF NOT EXISTS idx_users_email ON users (email)",
    263:             ]
    264:
    265:             for index_sql in indexes:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\rbac_system.py:409:20
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    406:             # Insert roles
    407:             for role, config in role_configs.items():
    408:                 conn.execute(
>>> 409:                     """
    410:                     INSERT OR IGNORE INTO roles (name, display_name, description, parent_role, is_system_role)
    411:                     VALUES (?, ?, ?, ?, 1)
    412:                 """,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\rbac_system.py:425:20
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    422:             for permission in Permission:
    423:                 resource, action = permission.value.split(":")
    424:                 conn.execute(
>>> 425:                     """
    426:                     INSERT OR IGNORE INTO permissions (name, display_name, description, resource, action)
    427:                     VALUES (?, ?, ?, ?, ?)
    428:                 """,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\rbac_system.py:442:24
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    439:             for role, config in role_configs.items():
    440:                 for permission in config["permissions"]:
    441:                     conn.execute(
>>> 442:                         """
    443:                         INSERT OR IGNORE INTO role_permissions (role_name, permission_name, granted_by)
    444:                         VALUES (?, ?, 'SYSTEM_INIT')
    445:                     """,


LONG_PARAMETER_LIST: Function 'create_user' has 8 parameters (>5)
File: packages\core\legacy\security\rbac_system.py:449:4
Recommendation: Use parameter objects, data classes, or keyword-only arguments
Code context:
    446:                         (role.value, permission.value),
    447:                     )
    448:
>>> 449:     def create_user(
    450:         self,
    451:         user_id: str,
    452:         username: str,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\rbac_system.py:459:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    456:         roles: list[Role] | None = None,
    457:         **kwargs,
    458:     ) -> bool:
>>> 459:         """Create new user with roles.
    460:
    461:         Args:
    462:             user_id: Unique user identifier


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\rbac_system.py:477:20
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    474:             try:
    475:                 # Create user
    476:                 conn.execute(
>>> 477:                     """
    478:                     INSERT INTO users (
    479:                         user_id, username, email, password_hash, password_salt,
    480:                         requires_coppa_consent, gdpr_consent, data_retention_expires


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\rbac_system.py:504:35
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    501:                 return True
    502:
    503:             except sqlite3.IntegrityError as e:
>>> 504:                 logger.exception(f"Failed to create user {username}: {e}")
    505:                 return False
    506:
    507:     def assign_role_to_user(


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\rbac_system.py:528:20
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    525:         with self._get_connection() as conn:
    526:             try:
    527:                 conn.execute(
>>> 528:                     """
    529:                     INSERT OR REPLACE INTO user_roles (user_id, role_name, assigned_by, expires_at)
    530:                     VALUES (?, ?, ?, ?)
    531:                 """,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\rbac_system.py:543:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    540:                 return False
    541:
    542:     def revoke_role_from_user(self, user_id: str, role: Role) -> bool:
>>> 543:         """Revoke role from user.
    544:
    545:         Args:
    546:             user_id: User identifier


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\rbac_system.py:554:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    551:         """
    552:         with self._get_connection() as conn:
    553:             conn.execute(
>>> 554:                 """
    555:                 DELETE FROM user_roles WHERE user_id = ? AND role_name = ?
    556:             """,
    557:                 (user_id, role.value),


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\rbac_system.py:574:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    571:         """
    572:         with self._get_connection() as conn:
    573:             cursor = conn.execute(
>>> 574:                 """
    575:                 SELECT role_name FROM user_roles
    576:                 WHERE user_id = ?
    577:                 AND (expires_at IS NULL OR expires_at > CURRENT_TIMESTAMP)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\rbac_system.py:622:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    619:         """
    620:         with self._get_connection() as conn:
    621:             cursor = conn.execute(
>>> 622:                 """
    623:                 SELECT permission_name FROM role_permissions
    624:                 WHERE role_name = ?
    625:                 AND (expires_at IS NULL OR expires_at > CURRENT_TIMESTAMP)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\rbac_system.py:634:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    631:             return {Permission(name) for name in permission_names if name in [p.value for p in Permission]}
    632:
    633:     def _get_inherited_permissions(self, role: Role) -> set[Permission]:
>>> 634:         """Get permissions inherited from parent roles.
    635:
    636:         Args:
    637:             role: Role to check


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\rbac_system.py:647:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    644:         with self._get_connection() as conn:
    645:             # Find parent role
    646:             cursor = conn.execute(
>>> 647:                 """
    648:                 SELECT parent_role FROM roles WHERE name = ?
    649:             """,
    650:                 (role.value,),


LONG_PARAMETER_LIST: Function '_log_access' has 9 parameters (>5)
File: packages\core\legacy\security\rbac_system.py:703:4
Recommendation: Use parameter objects, data classes, or keyword-only arguments
Code context:
    700:             msg = f"User {user_id} does not have permission {permission.value}"
    701:             raise AccessDeniedException(msg)
    702:
>>> 703:     def _log_access(
    704:         self,
    705:         user_id: str,
    706:         action: str,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\rbac_system.py:728:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    725:         """
    726:         with self._get_connection() as conn:
    727:             conn.execute(
>>> 728:                 """
    729:                 INSERT INTO access_log (
    730:                     user_id, action, resource, permission_required,
    731:                     access_granted, denial_reason, ip_address, user_agent, session_id


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\rbac_system.py:760:20
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    757:         with self._get_connection() as conn:
    758:             if user_id:
    759:                 cursor = conn.execute(
>>> 760:                     """
    761:                     SELECT * FROM access_log WHERE user_id = ?
    762:                     ORDER BY timestamp DESC LIMIT ?
    763:                 """,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\rbac_system.py:768:20
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    765:                 )
    766:             else:
    767:                 cursor = conn.execute(
>>> 768:                     """
    769:                     SELECT * FROM access_log
    770:                     ORDER BY timestamp DESC LIMIT ?
    771:                 """,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\rbac_system.py:787:34
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    784:             stats = {}
    785:
    786:             # User statistics
>>> 787:             cursor = conn.execute("SELECT COUNT(*) FROM users")
    788:             stats["total_users"] = cursor.fetchone()[0]
    789:
    790:             cursor = conn.execute("SELECT COUNT(*) FROM users WHERE is_active = 1")


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\rbac_system.py:790:34
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    787:             cursor = conn.execute("SELECT COUNT(*) FROM users")
    788:             stats["total_users"] = cursor.fetchone()[0]
    789:
>>> 790:             cursor = conn.execute("SELECT COUNT(*) FROM users WHERE is_active = 1")
    791:             stats["active_users"] = cursor.fetchone()[0]
    792:
    793:             # Role statistics


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\rbac_system.py:794:34
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    791:             stats["active_users"] = cursor.fetchone()[0]
    792:
    793:             # Role statistics
>>> 794:             cursor = conn.execute("SELECT COUNT(*) FROM roles")
    795:             stats["total_roles"] = cursor.fetchone()[0]
    796:
    797:             cursor = conn.execute("SELECT COUNT(*) FROM permissions")


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\rbac_system.py:797:34
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    794:             cursor = conn.execute("SELECT COUNT(*) FROM roles")
    795:             stats["total_roles"] = cursor.fetchone()[0]
    796:
>>> 797:             cursor = conn.execute("SELECT COUNT(*) FROM permissions")
    798:             stats["total_permissions"] = cursor.fetchone()[0]
    799:
    800:             # Assignment statistics


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\rbac_system.py:801:34
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    798:             stats["total_permissions"] = cursor.fetchone()[0]
    799:
    800:             # Assignment statistics
>>> 801:             cursor = conn.execute("SELECT COUNT(*) FROM user_roles")
    802:             stats["role_assignments"] = cursor.fetchone()[0]
    803:
    804:             cursor = conn.execute("SELECT COUNT(*) FROM role_permissions")


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\rbac_system.py:804:34
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    801:             cursor = conn.execute("SELECT COUNT(*) FROM user_roles")
    802:             stats["role_assignments"] = cursor.fetchone()[0]
    803:
>>> 804:             cursor = conn.execute("SELECT COUNT(*) FROM role_permissions")
    805:             stats["permission_assignments"] = cursor.fetchone()[0]
    806:
    807:             # Access log statistics


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\rbac_system.py:808:34
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    805:             stats["permission_assignments"] = cursor.fetchone()[0]
    806:
    807:             # Access log statistics
>>> 808:             cursor = conn.execute("SELECT COUNT(*) FROM access_log")
    809:             stats["total_access_attempts"] = cursor.fetchone()[0]
    810:
    811:             cursor = conn.execute(


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\rbac_system.py:812:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    809:             stats["total_access_attempts"] = cursor.fetchone()[0]
    810:
    811:             cursor = conn.execute(
>>> 812:                 """
    813:                 SELECT COUNT(*) FROM access_log
    814:                 WHERE access_granted = 0 AND timestamp > datetime('now', '-24 hours')
    815:             """


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\rbac_system.py:821:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    818:
    819:             # Most active users
    820:             cursor = conn.execute(
>>> 821:                 """
    822:                 SELECT user_id, COUNT(*) as access_count
    823:                 FROM access_log
    824:                 WHERE timestamp > datetime('now', '-7 days')


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (22 calls)
File: packages\core\legacy\security\rbac_system.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (6 calls)
File: packages\core\legacy\security\rbac_system.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'conn' methods (32 calls)
File: packages\core\legacy\security\rbac_system.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'cursor' methods (13 calls)
File: packages\core\legacy\security\rbac_system.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'rbac' methods (6 calls)
File: packages\core\legacy\security\rbac_system.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

SEQUENTIAL_COUPLING: Sequential coupling detected: Function '__init__' is part of a sequence-dependent API
File: packages\core\legacy\security\rbac_system.py:94:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
     91: class RBACSystem:
     92:     """Role-Based Access Control system."""
     93:
>>>  94:     def __init__(self, db_path: str | None = None) -> None:
     95:         """Initialize RBAC system.
     96:
     97:         Args:


SEQUENTIAL_COUPLING: Sequential coupling detected: Function '_init_database' is part of a sequence-dependent API
File: packages\core\legacy\security\rbac_system.py:128:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    125:         finally:
    126:             conn.close()
    127:
>>> 128:     def _init_database(self) -> None:
    129:         """Initialize RBAC database schema."""
    130:         with self._get_connection() as conn:
    131:             # Roles table


SEQUENTIAL_COUPLING: Sequential coupling detected: Function '_init_default_roles' is part of a sequence-dependent API
File: packages\core\legacy\security\rbac_system.py:268:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    265:             for index_sql in indexes:
    266:                 conn.execute(index_sql)
    267:
>>> 268:     def _init_default_roles(self) -> None:
    269:         """Initialize default roles and permissions."""
    270:         # Define default role hierarchy and permissions
    271:         role_configs = {


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\secure_api_server.py:116:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    113:         roles: list[str] | None = None,
    114:         permissions: list[str] | None = None,
    115:     ) -> str:
>>> 116:         """Create JWT access token."""
    117:         now = datetime.utcnow()
    118:         payload = {
    119:             "user_id": user_id,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\secure_api_server.py:131:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    128:         return jwt.encode(payload, self.secret_key, algorithm=self.algorithm)
    129:
    130:     def create_refresh_token(self, user_id: str) -> str:
>>> 131:         """Create JWT refresh token."""
    132:         now = datetime.utcnow()
    133:         payload = {
    134:             "user_id": user_id,


HARDCODED_PATH: Hardcoded path or URL detected
File: packages\core\legacy\security\secure_api_server.py:303:58
Recommendation: Use configuration files, environment variables, or path utilities
Code context:
    300:
    301:         # CORS settings
    302:         self.cors_enabled = os.getenv("API_CORS_ENABLED", "true").lower() == "true"
>>> 303:         self.cors_origins = os.getenv("API_CORS_ORIGINS", "https://localhost:3000").split(",")
    304:
    305:         # Apps
    306:         self.apps = {}


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\secure_api_server.py:312:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    309:         self._create_apps()
    310:
    311:     def _create_apps(self) -> None:
>>> 312:         """Create aiohttp applications for each service."""
    313:         for service in self.ports:
    314:             app = web.Application(
    315:                 middlewares=[


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\secure_api_server.py:674:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    671:             raise web.HTTPInternalServerError(text=json.dumps({"error": "Failed to retrieve profile"}))
    672:
    673:     async def _create_profile(self, request: web_request.Request) -> web.Response:
>>> 674:         """Create learning profile."""
    675:         user_id = request.get("user", {}).get("user_id")
    676:
    677:         if not user_id:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\secure_api_server.py:697:28
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    694:             profile_id = self.profile_db.create_profile(user_id, validated_data)
    695:
    696:             return web.json_response(
>>> 697:                 {"message": "Profile created successfully", "profile_id": profile_id},
    698:                 status=201,
    699:             )
    700:         except (ValueError, json.JSONDecodeError):


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\secure_api_server.py:703:31
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    700:         except (ValueError, json.JSONDecodeError):
    701:             raise web.HTTPBadRequest(text=json.dumps({"error": "Invalid JSON"}))
    702:         except Exception as e:
>>> 703:             logger.exception(f"Failed to create profile: {e}")
    704:             raise web.HTTPInternalServerError(text=json.dumps({"error": "Failed to create profile"}))
    705:
    706:     async def _update_profile(self, request: web_request.Request) -> web.Response:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\secure_api_server.py:704:72
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    701:             raise web.HTTPBadRequest(text=json.dumps({"error": "Invalid JSON"}))
    702:         except Exception as e:
    703:             logger.exception(f"Failed to create profile: {e}")
>>> 704:             raise web.HTTPInternalServerError(text=json.dumps({"error": "Failed to create profile"}))
    705:
    706:     async def _update_profile(self, request: web_request.Request) -> web.Response:
    707:         """Update learning profile."""


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\secure_api_server.py:707:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    704:             raise web.HTTPInternalServerError(text=json.dumps({"error": "Failed to create profile"}))
    705:
    706:     async def _update_profile(self, request: web_request.Request) -> web.Response:
>>> 707:         """Update learning profile."""
    708:         profile_id = request.match_info["profile_id"]
    709:         user_id = request.get("user", {}).get("user_id")
    710:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\secure_api_server.py:727:31
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    724:         except (ValueError, json.JSONDecodeError):
    725:             raise web.HTTPBadRequest(text=json.dumps({"error": "Invalid JSON"}))
    726:         except Exception as e:
>>> 727:             logger.exception(f"Failed to update profile {profile_id}: {e}")
    728:             raise web.HTTPInternalServerError(text=json.dumps({"error": "Failed to update profile"}))
    729:
    730:     async def _delete_profile(self, request: web_request.Request) -> web.Response:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\secure_api_server.py:728:72
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    725:             raise web.HTTPBadRequest(text=json.dumps({"error": "Invalid JSON"}))
    726:         except Exception as e:
    727:             logger.exception(f"Failed to update profile {profile_id}: {e}")
>>> 728:             raise web.HTTPInternalServerError(text=json.dumps({"error": "Failed to update profile"}))
    729:
    730:     async def _delete_profile(self, request: web_request.Request) -> web.Response:
    731:         """Delete learning profile."""


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\secure_api_server.py:731:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    728:             raise web.HTTPInternalServerError(text=json.dumps({"error": "Failed to update profile"}))
    729:
    730:     async def _delete_profile(self, request: web_request.Request) -> web.Response:
>>> 731:         """Delete learning profile."""
    732:         profile_id = request.match_info["profile_id"]
    733:         user_id = request.get("user", {}).get("user_id")
    734:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\secure_api_server.py:747:31
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    744:
    745:             return web.json_response({"profile_id": profile_id, "status": "deleted", "gdpr_compliant": True})
    746:         except Exception as e:
>>> 747:             logger.exception(f"Failed to delete profile {profile_id}: {e}")
    748:             raise web.HTTPInternalServerError(text=json.dumps({"error": "Failed to delete profile"}))
    749:
    750:     async def _export_profile_data(self, request: web_request.Request) -> web.Response:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\secure_api_server.py:748:72
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    745:             return web.json_response({"profile_id": profile_id, "status": "deleted", "gdpr_compliant": True})
    746:         except Exception as e:
    747:             logger.exception(f"Failed to delete profile {profile_id}: {e}")
>>> 748:             raise web.HTTPInternalServerError(text=json.dumps({"error": "Failed to delete profile"}))
    749:
    750:     async def _export_profile_data(self, request: web_request.Request) -> web.Response:
    751:         """Export profile data for GDPR compliance."""


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\secure_api_server.py:801:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    798:         return web.json_response({"message": "Document added"}, status=201)
    799:
    800:     async def _get_document(self, request: web_request.Request) -> web.Response:
>>> 801:         """Get document from RAG index."""
    802:         doc_id = request.match_info["doc_id"]
    803:         return web.json_response({"doc_id": doc_id, "content": "placeholder"})
    804:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\secure_api_server.py:806:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    803:         return web.json_response({"doc_id": doc_id, "content": "placeholder"})
    804:
    805:     def _create_ssl_context(self) -> ssl.SSLContext:
>>> 806:         """Create SSL context for TLS 1.3."""
    807:         context = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)
    808:
    809:         # TLS 1.3 configuration


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'time' methods (9 calls)
File: packages\core\legacy\security\secure_api_server.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'os' methods (10 calls)
File: packages\core\legacy\security\secure_api_server.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'datetime' methods (6 calls)
File: packages\core\legacy\security\secure_api_server.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'rules' methods (9 calls)
File: packages\core\legacy\security\secure_api_server.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'web' methods (48 calls)
File: packages\core\legacy\security\secure_api_server.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'json' methods (30 calls)
File: packages\core\legacy\security\secure_api_server.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'request' methods (10 calls)
File: packages\core\legacy\security\secure_api_server.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (11 calls)
File: packages\core\legacy\security\secure_api_server.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'x509' methods (11 calls)
File: packages\core\legacy\security\secure_api_server.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (35 total)
File: packages\core\legacy\security\secure_api_server.py:57:43
Recommendation: Replace magic numbers with named constants or enums
Code context:
     54: class RateLimiter:
     55:     """In-memory rate limiter with sliding window."""
     56:
>>>  57:     def __init__(self, max_requests: int = 60, window_seconds: int = 60) -> None:
     58:         self.max_requests = max_requests
     59:         self.window_seconds = window_seconds
     60:         self.requests = {}  # client_id -> list of timestamps


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (35 total)
File: packages\core\legacy\security\secure_api_server.py:57:69
Recommendation: Replace magic numbers with named constants or enums
Code context:
     54: class RateLimiter:
     55:     """In-memory rate limiter with sliding window."""
     56:
>>>  57:     def __init__(self, max_requests: int = 60, window_seconds: int = 60) -> None:
     58:         self.max_requests = max_requests
     59:         self.window_seconds = window_seconds
     60:         self.requests = {}  # client_id -> list of timestamps


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (35 total)
File: packages\core\legacy\security\secure_api_server.py:101:93
Recommendation: Replace magic numbers with named constants or enums
Code context:
     98:     """JWT token authentication and management."""
     99:
    100:     def __init__(self, secret_key: str | None = None) -> None:
>>> 101:         self.secret_key = secret_key or os.getenv("API_SECRET_KEY") or secrets.token_urlsafe(32)
    102:         self.algorithm = "HS256"
    103:         self.token_expiry_hours = int(os.getenv("API_JWT_EXPIRY_HOURS", "24"))
    104:         self.refresh_expiry_days = int(os.getenv("API_REFRESH_TOKEN_EXPIRY_DAYS", "30"))


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (35 total)
File: packages\core\legacy\security\secure_api_server.py:106:34
Recommendation: Replace magic numbers with named constants or enums
Code context:
    103:         self.token_expiry_hours = int(os.getenv("API_JWT_EXPIRY_HOURS", "24"))
    104:         self.refresh_expiry_days = int(os.getenv("API_REFRESH_TOKEN_EXPIRY_DAYS", "30"))
    105:
>>> 106:         if len(self.secret_key) < 32:
    107:             msg = "API_SECRET_KEY must be at least 32 characters long"
    108:             raise SecurityError(msg)
    109:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (35 total)
File: packages\core\legacy\security\secure_api_server.py:125:41
Recommendation: Replace magic numbers with named constants or enums
Code context:
    122:             "iat": now,
    123:             "exp": now + timedelta(hours=self.token_expiry_hours),
    124:             "type": "access_token",
>>> 125:             "jti": secrets.token_urlsafe(16),  # JWT ID for revocation
    126:         }
    127:
    128:         return jwt.encode(payload, self.secret_key, algorithm=self.algorithm)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\secure_digital_twin_db.py:78:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     75:         with self.get_connection() as conn:
     76:             # Learning profiles with encrypted sensitive data
     77:             conn.execute(
>>>  78:                 """
     79:                 CREATE TABLE IF NOT EXISTS learning_profiles (
     80:                     id INTEGER PRIMARY KEY AUTOINCREMENT,
     81:                     profile_id TEXT UNIQUE NOT NULL,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\secure_digital_twin_db.py:112:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    109:
    110:             # Learning sessions with privacy protection
    111:             conn.execute(
>>> 112:                 """
    113:                 CREATE TABLE IF NOT EXISTS learning_sessions (
    114:                     id INTEGER PRIMARY KEY AUTOINCREMENT,
    115:                     session_id TEXT UNIQUE NOT NULL,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\secure_digital_twin_db.py:149:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    146:
    147:             # Knowledge states with domain protection
    148:             conn.execute(
>>> 149:                 """
    150:                 CREATE TABLE IF NOT EXISTS knowledge_states (
    151:                     id INTEGER PRIMARY KEY AUTOINCREMENT,
    152:                     profile_id TEXT NOT NULL,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\secure_digital_twin_db.py:178:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    175:
    176:             # Compliance audit log
    177:             conn.execute(
>>> 178:                 """
    179:                 CREATE TABLE IF NOT EXISTS compliance_audit_log (
    180:                     id INTEGER PRIMARY KEY AUTOINCREMENT,
    181:                     timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\secure_digital_twin_db.py:210:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    207:
    208:             # Data retention tracking
    209:             conn.execute(
>>> 210:                 """
    211:                 CREATE TABLE IF NOT EXISTS data_retention_tracking (
    212:                     id INTEGER PRIMARY KEY AUTOINCREMENT,
    213:                     profile_id TEXT NOT NULL,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\secure_digital_twin_db.py:238:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    235:
    236:             # Create indexes for performance
    237:             indexes = [
>>> 238:                 "CREATE INDEX IF NOT EXISTS idx_profiles_user_hash ON learning_profiles (user_id_hash)",
    239:                 "CREATE INDEX IF NOT EXISTS idx_profiles_expires ON learning_profiles (ttl_expires_at)",
    240:                 "CREATE INDEX IF NOT EXISTS idx_profiles_updated ON learning_profiles (updated_at)",
    241:                 "CREATE INDEX IF NOT EXISTS idx_sessions_profile ON learning_sessions (profile_id)",


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\secure_digital_twin_db.py:239:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    236:             # Create indexes for performance
    237:             indexes = [
    238:                 "CREATE INDEX IF NOT EXISTS idx_profiles_user_hash ON learning_profiles (user_id_hash)",
>>> 239:                 "CREATE INDEX IF NOT EXISTS idx_profiles_expires ON learning_profiles (ttl_expires_at)",
    240:                 "CREATE INDEX IF NOT EXISTS idx_profiles_updated ON learning_profiles (updated_at)",
    241:                 "CREATE INDEX IF NOT EXISTS idx_sessions_profile ON learning_sessions (profile_id)",
    242:                 "CREATE INDEX IF NOT EXISTS idx_sessions_start ON learning_sessions (start_time)",


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\secure_digital_twin_db.py:240:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    237:             indexes = [
    238:                 "CREATE INDEX IF NOT EXISTS idx_profiles_user_hash ON learning_profiles (user_id_hash)",
    239:                 "CREATE INDEX IF NOT EXISTS idx_profiles_expires ON learning_profiles (ttl_expires_at)",
>>> 240:                 "CREATE INDEX IF NOT EXISTS idx_profiles_updated ON learning_profiles (updated_at)",
    241:                 "CREATE INDEX IF NOT EXISTS idx_sessions_profile ON learning_sessions (profile_id)",
    242:                 "CREATE INDEX IF NOT EXISTS idx_sessions_start ON learning_sessions (start_time)",
    243:                 "CREATE INDEX IF NOT EXISTS idx_knowledge_profile ON knowledge_states (profile_id)",


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\secure_digital_twin_db.py:241:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    238:                 "CREATE INDEX IF NOT EXISTS idx_profiles_user_hash ON learning_profiles (user_id_hash)",
    239:                 "CREATE INDEX IF NOT EXISTS idx_profiles_expires ON learning_profiles (ttl_expires_at)",
    240:                 "CREATE INDEX IF NOT EXISTS idx_profiles_updated ON learning_profiles (updated_at)",
>>> 241:                 "CREATE INDEX IF NOT EXISTS idx_sessions_profile ON learning_sessions (profile_id)",
    242:                 "CREATE INDEX IF NOT EXISTS idx_sessions_start ON learning_sessions (start_time)",
    243:                 "CREATE INDEX IF NOT EXISTS idx_knowledge_profile ON knowledge_states (profile_id)",
    244:                 "CREATE INDEX IF NOT EXISTS idx_knowledge_domain ON knowledge_states (knowledge_domain)",


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\secure_digital_twin_db.py:242:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    239:                 "CREATE INDEX IF NOT EXISTS idx_profiles_expires ON learning_profiles (ttl_expires_at)",
    240:                 "CREATE INDEX IF NOT EXISTS idx_profiles_updated ON learning_profiles (updated_at)",
    241:                 "CREATE INDEX IF NOT EXISTS idx_sessions_profile ON learning_sessions (profile_id)",
>>> 242:                 "CREATE INDEX IF NOT EXISTS idx_sessions_start ON learning_sessions (start_time)",
    243:                 "CREATE INDEX IF NOT EXISTS idx_knowledge_profile ON knowledge_states (profile_id)",
    244:                 "CREATE INDEX IF NOT EXISTS idx_knowledge_domain ON knowledge_states (knowledge_domain)",
    245:                 "CREATE INDEX IF NOT EXISTS idx_audit_timestamp ON compliance_audit_log (timestamp)",


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\secure_digital_twin_db.py:243:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    240:                 "CREATE INDEX IF NOT EXISTS idx_profiles_updated ON learning_profiles (updated_at)",
    241:                 "CREATE INDEX IF NOT EXISTS idx_sessions_profile ON learning_sessions (profile_id)",
    242:                 "CREATE INDEX IF NOT EXISTS idx_sessions_start ON learning_sessions (start_time)",
>>> 243:                 "CREATE INDEX IF NOT EXISTS idx_knowledge_profile ON knowledge_states (profile_id)",
    244:                 "CREATE INDEX IF NOT EXISTS idx_knowledge_domain ON knowledge_states (knowledge_domain)",
    245:                 "CREATE INDEX IF NOT EXISTS idx_audit_timestamp ON compliance_audit_log (timestamp)",
    246:                 "CREATE INDEX IF NOT EXISTS idx_audit_profile ON compliance_audit_log (profile_id)",


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\secure_digital_twin_db.py:244:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    241:                 "CREATE INDEX IF NOT EXISTS idx_sessions_profile ON learning_sessions (profile_id)",
    242:                 "CREATE INDEX IF NOT EXISTS idx_sessions_start ON learning_sessions (start_time)",
    243:                 "CREATE INDEX IF NOT EXISTS idx_knowledge_profile ON knowledge_states (profile_id)",
>>> 244:                 "CREATE INDEX IF NOT EXISTS idx_knowledge_domain ON knowledge_states (knowledge_domain)",
    245:                 "CREATE INDEX IF NOT EXISTS idx_audit_timestamp ON compliance_audit_log (timestamp)",
    246:                 "CREATE INDEX IF NOT EXISTS idx_audit_profile ON compliance_audit_log (profile_id)",
    247:                 "CREATE INDEX IF NOT EXISTS idx_retention_scheduled ON data_retention_tracking (scheduled_deletion_at)",


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\secure_digital_twin_db.py:245:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    242:                 "CREATE INDEX IF NOT EXISTS idx_sessions_start ON learning_sessions (start_time)",
    243:                 "CREATE INDEX IF NOT EXISTS idx_knowledge_profile ON knowledge_states (profile_id)",
    244:                 "CREATE INDEX IF NOT EXISTS idx_knowledge_domain ON knowledge_states (knowledge_domain)",
>>> 245:                 "CREATE INDEX IF NOT EXISTS idx_audit_timestamp ON compliance_audit_log (timestamp)",
    246:                 "CREATE INDEX IF NOT EXISTS idx_audit_profile ON compliance_audit_log (profile_id)",
    247:                 "CREATE INDEX IF NOT EXISTS idx_retention_scheduled ON data_retention_tracking (scheduled_deletion_at)",
    248:             ]


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\secure_digital_twin_db.py:246:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    243:                 "CREATE INDEX IF NOT EXISTS idx_knowledge_profile ON knowledge_states (profile_id)",
    244:                 "CREATE INDEX IF NOT EXISTS idx_knowledge_domain ON knowledge_states (knowledge_domain)",
    245:                 "CREATE INDEX IF NOT EXISTS idx_audit_timestamp ON compliance_audit_log (timestamp)",
>>> 246:                 "CREATE INDEX IF NOT EXISTS idx_audit_profile ON compliance_audit_log (profile_id)",
    247:                 "CREATE INDEX IF NOT EXISTS idx_retention_scheduled ON data_retention_tracking (scheduled_deletion_at)",
    248:             ]
    249:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\secure_digital_twin_db.py:247:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    244:                 "CREATE INDEX IF NOT EXISTS idx_knowledge_domain ON knowledge_states (knowledge_domain)",
    245:                 "CREATE INDEX IF NOT EXISTS idx_audit_timestamp ON compliance_audit_log (timestamp)",
    246:                 "CREATE INDEX IF NOT EXISTS idx_audit_profile ON compliance_audit_log (profile_id)",
>>> 247:                 "CREATE INDEX IF NOT EXISTS idx_retention_scheduled ON data_retention_tracking (scheduled_deletion_at)",
    248:             ]
    249:
    250:             for index_sql in indexes:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\secure_digital_twin_db.py:257:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    254:             logger.info("Database schema initialized successfully")
    255:
    256:     def create_learning_profile(self, profile_data: dict[str, Any]) -> str:
>>> 257:         """Create new learning profile with encryption.
    258:
    259:         Args:
    260:             profile_data: Profile data including sensitive fields


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\secure_digital_twin_db.py:302:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    299:
    300:             # Insert profile
    301:             conn.execute(
>>> 302:                 """
    303:                 INSERT INTO learning_profiles (
    304:                     profile_id, user_id_hash, preferred_difficulty,
    305:                     learning_style_encrypted, knowledge_domains_encrypted,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\secure_digital_twin_db.py:325:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    322:
    323:             # Create retention tracking record
    324:             conn.execute(
>>> 325:                 """
    326:                 INSERT INTO data_retention_tracking (
    327:                     profile_id, created_at, scheduled_deletion_at, retention_policy
    328:                 ) VALUES (?, ?, ?, ?)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\secure_digital_twin_db.py:355:26
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    352:             )
    353:
    354:             conn.execute("COMMIT")
>>> 355:             logger.info(f"Created encrypted learning profile: {profile_id}")
    356:             return profile_id
    357:
    358:     def get_learning_profile(self, profile_id: str, decrypt: bool = True) -> dict[str, Any] | None:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\secure_digital_twin_db.py:370:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    367:         """
    368:         with self.get_connection() as conn:
    369:             cursor = conn.execute(
>>> 370:                 """
    371:                 SELECT * FROM learning_profiles WHERE profile_id = ?
    372:             """,
    373:                 (profile_id,),


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\secure_digital_twin_db.py:384:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    381:
    382:             # Update access tracking
    383:             conn.execute(
>>> 384:                 """
    385:                 UPDATE learning_profiles
    386:                 SET last_accessed = CURRENT_TIMESTAMP, access_count = access_count + 1
    387:                 WHERE profile_id = ?


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\secure_digital_twin_db.py:435:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    432:             return profile
    433:
    434:     def update_learning_profile(self, profile_id: str, updates: dict[str, Any]) -> bool:
>>> 435:         """Update learning profile with encryption.
    436:
    437:         Args:
    438:             profile_id: Profile to update


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\secure_digital_twin_db.py:479:31
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    476:                 return True  # Nothing to update
    477:
    478:             # Add updated timestamp
>>> 479:             set_clauses.append("updated_at = CURRENT_TIMESTAMP")
    480:             values.append(profile_id)
    481:
    482:             # Execute update


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\secure_digital_twin_db.py:484:20
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    481:
    482:             # Execute update
    483:             conn.execute(
>>> 484:                 f"""
    485:                 UPDATE learning_profiles
    486:                 SET {", ".join(set_clauses)}
    487:                 WHERE profile_id = ?


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\secure_digital_twin_db.py:486:44
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    483:             conn.execute(
    484:                 f"""
    485:                 UPDATE learning_profiles
>>> 486:                 SET {", ".join(set_clauses)}
    487:                 WHERE profile_id = ?
    488:             """,
    489:                 values,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\secure_digital_twin_db.py:508:26
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    505:             )
    506:
    507:             conn.execute("COMMIT")
>>> 508:             logger.info(f"Updated encrypted learning profile: {profile_id}")
    509:             return True
    510:
    511:     def delete_learning_profile(self, profile_id: str, reason: str = "user_request") -> bool:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\secure_digital_twin_db.py:512:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    509:             return True
    510:
    511:     def delete_learning_profile(self, profile_id: str, reason: str = "user_request") -> bool:
>>> 512:         """Delete learning profile with GDPR compliance.
    513:
    514:         Args:
    515:             profile_id: Profile to delete


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\secure_digital_twin_db.py:524:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    521:         with self.get_connection() as conn:
    522:             # Get profile for audit logging
    523:             cursor = conn.execute(
>>> 524:                 """
    525:                 SELECT user_id_hash FROM learning_profiles WHERE profile_id = ?
    526:             """,
    527:                 (profile_id,),


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\secure_digital_twin_db.py:536:25
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    533:             user_id_hash = row[0]
    534:
    535:             # Delete profile (cascades to sessions and knowledge states)
>>> 536:             conn.execute("DELETE FROM learning_profiles WHERE profile_id = ?", (profile_id,))
    537:
    538:             # Update retention tracking
    539:             conn.execute(


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\secure_digital_twin_db.py:540:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    537:
    538:             # Update retention tracking
    539:             conn.execute(
>>> 540:                 """
    541:                 DELETE FROM data_retention_tracking WHERE profile_id = ?
    542:             """,
    543:                 (profile_id,),


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\secure_digital_twin_db.py:563:26
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    560:             )
    561:
    562:             conn.execute("COMMIT")
>>> 563:             logger.info(f"Deleted learning profile with GDPR compliance: {profile_id}")
    564:             return True
    565:
    566:     def _check_compliance_access(self, profile: dict[str, Any]) -> dict[str, Any]:


LONG_PARAMETER_LIST: Function '_log_compliance_audit' has 8 parameters (>5)
File: packages\core\legacy\security\secure_digital_twin_db.py:606:4
Recommendation: Use parameter objects, data classes, or keyword-only arguments
Code context:
    603:
    604:         return {"access_allowed": True, "reason": "Compliance checks passed"}
    605:
>>> 606:     def _log_compliance_audit(
    607:         self,
    608:         conn,
    609:         action: str,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\secure_digital_twin_db.py:628:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    625:             additional_data: Extra context as JSON
    626:         """
    627:         conn.execute(
>>> 628:             """
    629:             INSERT INTO compliance_audit_log (
    630:                 action, profile_id, user_id_hash, field_name,
    631:                 compliance_type, compliance_status, session_id, additional_data


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\secure_digital_twin_db.py:654:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    651:         """
    652:         with self.get_connection() as conn:
    653:             cursor = conn.execute(
>>> 654:                 """
    655:                 SELECT profile_id, user_id_hash, ttl_expires_at, compliance_flags
    656:                 FROM learning_profiles
    657:                 WHERE ttl_expires_at < CURRENT_TIMESTAMP


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\secure_digital_twin_db.py:677:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    674:             return expired
    675:
    676:     def cleanup_expired_data(self) -> int:
>>> 677:         """Clean up expired profiles per retention policy.
    678:
    679:         Returns:
    680:             Number of profiles deleted


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\secure_digital_twin_db.py:705:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    702:         with self.get_connection() as conn:
    703:             # Get all profiles for user
    704:             cursor = conn.execute(
>>> 705:                 """
    706:                 SELECT * FROM learning_profiles WHERE user_id_hash = ?
    707:             """,
    708:                 (user_id_hash,),


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\secure_digital_twin_db.py:721:20
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    718:             sessions = []
    719:             for profile in profiles:
    720:                 session_cursor = conn.execute(
>>> 721:                     """
    722:                     SELECT * FROM learning_sessions WHERE profile_id = ?
    723:                 """,
    724:                     (profile["profile_id"],),


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\secure_digital_twin_db.py:732:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    729:
    730:             # Get audit log
    731:             audit_cursor = conn.execute(
>>> 732:                 """
    733:                 SELECT * FROM compliance_audit_log
    734:                 WHERE user_id_hash = ?
    735:                 ORDER BY timestamp DESC


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\secure_digital_twin_db.py:786:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    783:
    784:             # Profile statistics
    785:             cursor = conn.execute(
>>> 786:                 """
    787:                 SELECT
    788:                     COUNT(*) as total_profiles,
    789:                     COUNT(CASE WHEN ttl_expires_at > CURRENT_TIMESTAMP THEN 1 END) as active_profiles,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\secure_digital_twin_db.py:800:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    797:
    798:             # Compliance audit statistics
    799:             cursor = conn.execute(
>>> 800:                 """
    801:                 SELECT
    802:                     compliance_type,
    803:                     COUNT(*) as audit_entries,


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (19 calls)
File: packages\core\legacy\security\secure_digital_twin_db.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (7 calls)
File: packages\core\legacy\security\secure_digital_twin_db.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'conn' methods (35 calls)
File: packages\core\legacy\security\secure_digital_twin_db.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'json' methods (8 calls)
File: packages\core\legacy\security\secure_digital_twin_db.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

SEQUENTIAL_COUPLING: Sequential coupling detected: Function '__init__' is part of a sequence-dependent API
File: packages\core\legacy\security\secure_digital_twin_db.py:25:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
     22: class SecureDigitalTwinDB:
     23:     """Secure database operations for Digital Twin with encryption and compliance."""
     24:
>>>  25:     def __init__(self, db_path: str | None = None) -> None:
     26:         """Initialize secure Digital Twin database.
     27:
     28:         Args:


SEQUENTIAL_COUPLING: Sequential coupling detected: Function 'init_database' is part of a sequence-dependent API
File: packages\core\legacy\security\secure_digital_twin_db.py:73:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
     70:         finally:
     71:             conn.close()
     72:
>>>  73:     def init_database(self) -> None:
     74:         """Initialize database schema with encryption and compliance features."""
     75:         with self.get_connection() as conn:
     76:             # Learning profiles with encrypted sensitive data


SEQUENTIAL_COUPLING: Sequential coupling detected: Function 'cleanup_expired_data' is part of a sequence-dependent API
File: packages\core\legacy\security\secure_digital_twin_db.py:676:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    673:
    674:             return expired
    675:
>>> 676:     def cleanup_expired_data(self) -> int:
    677:         """Clean up expired profiles per retention policy.
    678:
    679:         Returns:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\secure_file_upload.py:539:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    536:         return filename
    537:
    538:     def get_safe_upload_path(self, base_dir: str, filename: str, create_subdirs: bool = True) -> Path:
>>> 539:         """Get safe path for file upload.
    540:
    541:         Args:
    542:             base_dir: Base upload directory


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (13 calls)
File: packages\core\legacy\security\secure_file_upload.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (7 calls)
File: packages\core\legacy\security\secure_file_upload.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (11 total)
File: packages\core\legacy\security\secure_file_upload.py:43:67
Recommendation: Replace magic numbers with named constants or enums
Code context:
     40:         self.config = config or {}
     41:
     42:         # File size limits (in bytes)
>>>  43:         self.max_file_size = self.config.get("max_file_size", 10 * 1024 * 1024)  # 10MB
     44:         self.max_total_size = self.config.get("max_total_size", 100 * 1024 * 1024)  # 100MB
     45:
     46:         # Allowed file types and extensions


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (11 total)
File: packages\core\legacy\security\secure_file_upload.py:43:74
Recommendation: Replace magic numbers with named constants or enums
Code context:
     40:         self.config = config or {}
     41:
     42:         # File size limits (in bytes)
>>>  43:         self.max_file_size = self.config.get("max_file_size", 10 * 1024 * 1024)  # 10MB
     44:         self.max_total_size = self.config.get("max_total_size", 100 * 1024 * 1024)  # 100MB
     45:
     46:         # Allowed file types and extensions


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (11 total)
File: packages\core\legacy\security\secure_file_upload.py:44:70
Recommendation: Replace magic numbers with named constants or enums
Code context:
     41:
     42:         # File size limits (in bytes)
     43:         self.max_file_size = self.config.get("max_file_size", 10 * 1024 * 1024)  # 10MB
>>>  44:         self.max_total_size = self.config.get("max_total_size", 100 * 1024 * 1024)  # 100MB
     45:
     46:         # Allowed file types and extensions
     47:         self.allowed_extensions = set(


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (11 total)
File: packages\core\legacy\security\secure_file_upload.py:44:77
Recommendation: Replace magic numbers with named constants or enums
Code context:
     41:
     42:         # File size limits (in bytes)
     43:         self.max_file_size = self.config.get("max_file_size", 10 * 1024 * 1024)  # 10MB
>>>  44:         self.max_total_size = self.config.get("max_total_size", 100 * 1024 * 1024)  # 100MB
     45:
     46:         # Allowed file types and extensions
     47:         self.allowed_extensions = set(


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (11 total)
File: packages\core\legacy\security\secure_file_upload.py:323:24
Recommendation: Replace magic numbers with named constants or enums
Code context:
    320:             result["errors"].append("Filename contains null bytes")
    321:
    322:         # Check for control characters
>>> 323:         if any(ord(c) < 32 for c in filename if c not in "\t\n\r"):
    324:             result["errors"].append("Filename contains control characters")
    325:
    326:         # Check filename length


LONG_PARAMETER_LIST: Function 'create_secure_redis_client' has 7 parameters (>5)
File: packages\core\legacy\security\secure_redis_client.py:27:0
Recommendation: Use parameter objects, data classes, or keyword-only arguments
Code context:
     24:     """Raised when Redis security validation fails."""
     25:
     26:
>>>  27: def create_secure_redis_client(
     28:     redis_url: str,
     29:     ssl_required: bool | None = None,
     30:     ssl_cert_reqs: str = "required",


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\secure_redis_client.py:36:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     33:     ssl_keyfile: str | None = None,
     34:     **kwargs,
     35: ) -> object | None:
>>>  36:     """Create a secure Redis client with TLS validation.
     37:
     38:     Args:
     39:         redis_url: Redis connection URL


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\secure_redis_client.py:203:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    200:
    201:
    202: def create_production_redis_pool(redis_url: str, **kwargs) -> object | None:
>>> 203:     """Create a production-ready Redis connection pool with security settings.
    204:
    205:     Args:
    206:         redis_url: Redis connection URL


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\secure_serializer.py:227:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    224:         return convert_item(obj)
    225:
    226:     def _restore_data(self, data: dict[str, Any]) -> Any:
>>> 227:         """Restore object from serializable dictionary with type metadata."""
    228:         if not isinstance(data, dict) or "__type__" not in data:
    229:             return data
    230:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\secure_serializer.py:337:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    334:             raise SerializationError(f"Serialization failed: {e}") from e
    335:
    336:     def loads(self, data: bytes, schema: dict[str, type] | None = None) -> Any:
>>> 337:         """
    338:         Deserialize object from secure byte format.
    339:
    340:         Args:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'data' methods (7 calls)
File: packages\core\legacy\security\secure_serializer.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (15 calls)
File: packages\core\legacy\security\secure_serializer.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (8 calls)
File: packages\core\legacy\security\secure_serializer.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

HARDCODED_PATH: Hardcoded path or URL detected
File: packages\core\legacy\security\security_gates.py:107:34
Recommendation: Use configuration files, environment variables, or path utilities
Code context:
    104:             project_root / "src" / "core",
    105:         ]
    106:
>>> 107:         http_pattern = re.compile(r'http://[^\s\'"]+', re.IGNORECASE)
    108:
    109:         for src_dir in src_dirs:
    110:             if not src_dir.exists():


HARDCODED_PATH: Hardcoded path or URL detected
File: packages\core\legacy\security\security_gates.py:155:23
Recommendation: Use configuration files, environment variables, or path utilities
Code context:
    152:                     with open(config_file) as f:
    153:                         content = f.read()
    154:
>>> 155:                     if "http://" in content and "localhost" not in content:
    156:                         issues.append(
    157:                             SecurityIssue(
    158:                                 severity="HIGH",


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\security_gates.py:203:13
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    200:         # Patterns to detect unsafe pickle usage
    201:         unsafe_patterns = [
    202:             (r"import\s+pickle", "Direct pickle import"),
>>> 203:             (r"from\s+pickle\s+import", "Pickle function import"),
    204:             (r"pickle\.loads?\(", "Unsafe pickle load/loads call"),
    205:             (r"pickle\.dumps?\(", "Direct pickle dump/dumps call"),
    206:             (r"cPickle", "Legacy cPickle usage"),


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\security_gates.py:245:51
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    242:                                     category="UNSAFE_SERIALIZATION",
    243:                                     description=f"{description} found at line {line_num}",
    244:                                     location=f"{py_file.relative_to(project_root)}:{line_num}",
>>> 245:                                     recommendation="Replace with SecureSerializer from core.security.secure_serializer",
    246:                                     cve_refs=["CVE-2022-42969", "CWE-502"],
    247:                                 )
    248:                             )


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\security_gates.py:295:35
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    292:                     category="DEPENDENCY_MANAGEMENT",
    293:                     description="No dependency files found",
    294:                     location="project root",
>>> 295:                     recommendation="Create requirements.txt or pyproject.toml",
    296:                 )
    297:             )
    298:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'time' methods (8 calls)
File: packages\core\legacy\security\security_gates.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'Path' methods (6 calls)
File: packages\core\legacy\security\security_gates.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'src_dir' methods (6 calls)
File: packages\core\legacy\security\security_gates.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'match' methods (6 calls)
File: packages\core\legacy\security\security_gates.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'issues' methods (7 calls)
File: packages\core\legacy\security\security_gates.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

SEQUENTIAL_COUPLING: Sequential coupling detected: Function '__init__' is part of a sequence-dependent API
File: packages\core\legacy\security\security_gates.py:460:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    457: class SecurityGateRunner:
    458:     """Manages and executes security gates."""
    459:
>>> 460:     def __init__(self, security_level: SecurityLevel = SecurityLevel.PRODUCTION):
    461:         self.security_level = security_level
    462:         self.gates = []
    463:         self.reports = []


SEQUENTIAL_COUPLING: Sequential coupling detected: Function 'should_run' is part of a sequence-dependent API
File: packages\core\legacy\security\security_gates.py:84:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
     81:         """Validate security requirements."""
     82:         pass
     83:
>>>  84:     def should_run(self, context: dict[str, Any]) -> bool:
     85:         """Check if gate should run in current context."""
     86:         return self.enabled
     87:


SEQUENTIAL_COUPLING: Sequential coupling detected: Function 'run_all_gates' is part of a sequence-dependent API
File: packages\core\legacy\security\security_gates.py:475:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    472:         """Register a security gate."""
    473:         self.gates.append(gate)
    474:
>>> 475:     def run_all_gates(self, context: dict[str, Any] = None) -> dict[str, Any]:
    476:         """Run all registered security gates."""
    477:         if context is None:
    478:             context = {"project_root": Path.cwd()}


SEQUENTIAL_COUPLING: Sequential coupling detected: Function 'run_security_gates' is part of a sequence-dependent API
File: packages\core\legacy\security\security_gates.py:560:0
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    557:
    558:
    559: # Convenience functions
>>> 560: def run_security_gates(
    561:     project_root: Path = None, security_level: SecurityLevel = SecurityLevel.PRODUCTION
    562: ) -> dict[str, Any]:
    563:     """Run all security gates for a project."""


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\__init__.py:43:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     40:     "secure_loads",
     41:     # Secure Redis
     42:     "SecureRedisError",
>>>  43:     "create_secure_redis_client",
     44:     "validate_redis_url_security",
     45:     "get_production_redis_config",
     46:     "create_production_redis_pool",


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\security\__init__.py:46:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     43:     "create_secure_redis_client",
     44:     "validate_redis_url_security",
     45:     "get_production_redis_config",
>>>  46:     "create_production_redis_pool",
     47: ]


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\testing\coverage_harness.py:294:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    291:         return (covered_lines / total_lines * 100) if total_lines > 0 else 0.0
    292:
    293:     def identify_coverage_gaps(self, metrics: dict[str, CoverageMetrics]) -> list[CoverageTarget]:
>>> 294:         """Identify key coverage gaps and create improvement targets."""
    295:         gaps = []
    296:
    297:         # Priority 1: Critical components below 30%


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\testing\coverage_harness.py:514:41
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    511: Generated by Coverage Harness to address coverage gap.
    512:
    513: Current coverage: {gap.current_percent:.1f}%
>>> 514: Target coverage: {gap.target_percent:.1f}%
    515: """
    516:
    517: import pytest


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (7 calls)
File: packages\core\legacy\testing\coverage_harness.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (6 calls)
File: packages\core\legacy\testing\coverage_harness.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'f' methods (8 calls)
File: packages\core\legacy\testing\coverage_harness.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

SEQUENTIAL_COUPLING: Sequential coupling detected: Function '__init__' is part of a sequence-dependent API
File: packages\core\legacy\testing\coverage_harness.py:335:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    332: class CoverageHarness:
    333:     """Main coverage harness for achieving 30%+ coverage target."""
    334:
>>> 335:     def __init__(self, project_root: Path, target_coverage: float = 30.0):
    336:         self.project_root = project_root
    337:         self.target_coverage = target_coverage
    338:         self.analyzer = CoverageAnalyzer(project_root)


SEQUENTIAL_COUPLING: Sequential coupling detected: Function '_run_existing_tests' is part of a sequence-dependent API
File: packages\core\legacy\testing\coverage_harness.py:150:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    147:
    148:         return coverage_metrics
    149:
>>> 150:     def _run_existing_tests(self):
    151:         """Run existing test suite to gather coverage data."""
    152:         test_commands = [
    153:             "python -m pytest tests/ --tb=short -q",


SEQUENTIAL_COUPLING: Sequential coupling detected: Function '_setup_coverage_monitoring' is part of a sequence-dependent API
File: packages\core\legacy\testing\coverage_harness.py:562:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    559:     assert True
    560: '''
    561:
>>> 562:     def _setup_coverage_monitoring(self) -> dict[str, Any]:
    563:         """Set up ongoing coverage monitoring."""
    564:
    565:         # Create coverage configuration


SEQUENTIAL_COUPLING: Sequential coupling detected: Function 'run_coverage_campaign' is part of a sequence-dependent API
File: packages\core\legacy\testing\coverage_harness.py:609:0
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    606:
    607:
    608: # Convenience functions
>>> 609: def run_coverage_campaign(project_root: Path = None, target: float = 30.0) -> dict[str, Any]:
    610:     """Run complete coverage improvement campaign."""
    611:     if project_root is None:
    612:         project_root = Path.cwd()


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (57 total)
File: packages\core\legacy\testing\coverage_harness.py:164:28
Recommendation: Replace magic numbers with named constants or enums
Code context:
    161:                     cwd=self.project_root,
    162:                     capture_output=True,
    163:                     text=True,
>>> 164:                     timeout=60,
    165:                 )
    166:                 if result.returncode == 0:
    167:                     print(f"  Ran tests: {cmd}")


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (57 total)
File: packages\core\legacy\testing\coverage_harness.py:236:43
Recommendation: Replace magic numbers with named constants or enums
Code context:
    233:             metrics.integration_points_covered = covered_integration
    234:
    235:             # Calculate complexity and risk scores
>>> 236:             metrics.complexity_score = min(5.0, total_functions / 10.0)
    237:             metrics.risk_score = max(0.0, 1.0 - function_coverage_ratio)
    238:
    239:             # Set priority based on component importance


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (57 total)
File: packages\core\legacy\testing\coverage_harness.py:242:67
Recommendation: Replace magic numbers with named constants or enums
Code context:
    239:             # Set priority based on component importance
    240:             component_path = str(file_path)
    241:             if any(critical in component_path for critical in self.critical_components):
>>> 242:                 metrics.priority = 1 if metrics.coverage_percent < 30 else 2
    243:             else:
    244:                 metrics.priority = 3 if metrics.coverage_percent < 20 else 4
    245:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (57 total)
File: packages\core\legacy\testing\coverage_harness.py:244:67
Recommendation: Replace magic numbers with named constants or enums
Code context:
    241:             if any(critical in component_path for critical in self.critical_components):
    242:                 metrics.priority = 1 if metrics.coverage_percent < 30 else 2
    243:             else:
>>> 244:                 metrics.priority = 3 if metrics.coverage_percent < 20 else 4
    245:
    246:         except Exception as e:
    247:             logger.warning(f"Error enhancing metrics for {file_path}: {e}")


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (57 total)
File: packages\core\legacy\testing\coverage_harness.py:244:35
Recommendation: Replace magic numbers with named constants or enums
Code context:
    241:             if any(critical in component_path for critical in self.critical_components):
    242:                 metrics.priority = 1 if metrics.coverage_percent < 30 else 2
    243:             else:
>>> 244:                 metrics.priority = 3 if metrics.coverage_percent < 20 else 4
    245:
    246:         except Exception as e:
    247:             logger.warning(f"Error enhancing metrics for {file_path}: {e}")


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\transport\navigator_mobile_integration.py:1:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
>>>   1: """
      2: Navigator Policy + Mobile Resource Manager Integration - Prompt 3
      3:
      4: This module wires together the Navigator's transport selection with the Mobile


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\transport\navigator_mobile_integration.py:94:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     91:
     92:
     93: class ConstraintType(Enum):
>>>  94:     """Types of device constraints affecting transport selection."""
     95:
     96:     BATTERY_LOW = "battery_low"
     97:     BATTERY_CRITICAL = "battery_critical"


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\transport\navigator_mobile_integration.py:109:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    106:
    107: @dataclass
    108: class TransportConstraints:
>>> 109:     """Device constraints that affect transport selection."""
    110:
    111:     battery_level: int | None = None  # Percentage
    112:     cpu_temp: float | None = None  # Celsius


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\transport\navigator_mobile_integration.py:131:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    128:
    129:
    130: class MobileResourceNavigator:
>>> 131:     """
    132:     Navigator that integrates Mobile Resource Manager constraints into routing decisions.
    133:
    134:     This creates the integration between transport selection and device constraints,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\transport\navigator_mobile_integration.py:173:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    170:         message_size_bytes: int,
    171:         priority: TransportPriority = TransportPriority.NORMAL,
    172:     ) -> MobileAwareRoutingDecision:
>>> 173:         """
    174:         Make routing decision considering both transport availability and device constraints.
    175:
    176:         This is the core integration method that combines Navigator transport selection


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\transport\navigator_mobile_integration.py:247:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    244:         )
    245:
    246:     async def _evaluate_device_constraints(self) -> TransportConstraints:
>>> 247:         """Evaluate current device constraints that affect transport selection."""
    248:         constraints = TransportConstraints()
    249:         active_constraints = []
    250:


HARDCODED_PATH: Hardcoded path or URL detected
File: packages\core\legacy\transport\navigator_mobile_integration.py:343:27
Recommendation: Use configuration files, environment variables, or path utilities
Code context:
    340:         candidates.append(
    341:             TransportCandidate(
    342:                 transport_type="betanet",
>>> 343:                 endpoint=f"https://{target}:8443",
    344:                 priority=betanet_priority,
    345:                 estimated_latency_ms=80.0,
    346:                 reliability_score=betanet_reliability,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\transport\navigator_mobile_integration.py:531:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    528: async def create_mobile_aware_navigator(
    529:     scion_config: Any | None = None, enable_resource_management: bool = True
    530: ) -> MobileResourceNavigator:
>>> 531:     """Factory function to create integrated mobile-aware navigator."""
    532:     base_navigator = None
    533:     resource_manager = None
    534:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\legacy\transport\navigator_mobile_integration.py:557:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    554:
    555:     navigator = MobileResourceNavigator(base_navigator=base_navigator, resource_manager=resource_manager)
    556:
>>> 557:     logger.info("Mobile-aware navigator created successfully")
    558:     return navigator
    559:
    560:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (14 calls)
File: packages\core\legacy\transport\navigator_mobile_integration.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (11 calls)
File: packages\core\legacy\transport\navigator_mobile_integration.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'active_constraints' methods (7 calls)
File: packages\core\legacy\transport\navigator_mobile_integration.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (53 total)
File: packages\core\legacy\transport\navigator_mobile_integration.py:52:17
Recommendation: Replace magic numbers with named constants or enums
Code context:
     49:     class TransportPriority(Enum):
     50:         CRITICAL = 1
     51:         HIGH = 2
>>>  52:         NORMAL = 3
     53:         LOW = 4
     54:         FALLBACK = 5
     55:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (53 total)
File: packages\core\legacy\transport\navigator_mobile_integration.py:53:14
Recommendation: Replace magic numbers with named constants or enums
Code context:
     50:         CRITICAL = 1
     51:         HIGH = 2
     52:         NORMAL = 3
>>>  53:         LOW = 4
     54:         FALLBACK = 5
     55:
     56:     @dataclass


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (53 total)
File: packages\core\legacy\transport\navigator_mobile_integration.py:54:19
Recommendation: Replace magic numbers with named constants or enums
Code context:
     51:         HIGH = 2
     52:         NORMAL = 3
     53:         LOW = 4
>>>  54:         FALLBACK = 5
     55:
     56:     @dataclass
     57:     class TransportCandidate:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (53 total)
File: packages\core\legacy\transport\navigator_mobile_integration.py:151:32
Recommendation: Replace magic numbers with named constants or enums
Code context:
    148:         # Transport efficiency profiles (power consumption estimates)
    149:         self.transport_efficiency = {
    150:             "bitchat": {
>>> 151:                 "power_factor": 0.3,
    152:                 "data_efficiency": 0.9,
    153:             },  # Low power, high compression
    154:             "betanet": {


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (53 total)
File: packages\core\legacy\transport\navigator_mobile_integration.py:152:35
Recommendation: Replace magic numbers with named constants or enums
Code context:
    149:         self.transport_efficiency = {
    150:             "bitchat": {
    151:                 "power_factor": 0.3,
>>> 152:                 "data_efficiency": 0.9,
    153:             },  # Low power, high compression
    154:             "betanet": {
    155:                 "power_factor": 0.7,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\tools\benchmarks\__init__.py:1:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
>>>   1: """AIVillage Tools - Benchmarks.
      2:
      3: Benchmark suites moved from root/benchmarks/:
      4: - Performance benchmarks


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\tools\bitchat\kpi_tracker.py:97:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     94:
     95:         # Message metrics table
     96:         cursor.execute(
>>>  97:             """
     98:             CREATE TABLE IF NOT EXISTS message_metrics (
     99:                 message_id TEXT PRIMARY KEY,
    100:                 timestamp REAL,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\tools\bitchat\kpi_tracker.py:116:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    113:
    114:         # Peer metrics table
    115:         cursor.execute(
>>> 116:             """
    117:             CREATE TABLE IF NOT EXISTS peer_metrics (
    118:                 peer_id TEXT PRIMARY KEY,
    119:                 platform TEXT,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\tools\bitchat\kpi_tracker.py:134:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    131:
    132:         # Network snapshots table
    133:         cursor.execute(
>>> 134:             """
    135:             CREATE TABLE IF NOT EXISTS network_snapshots (
    136:                 id INTEGER PRIMARY KEY AUTOINCREMENT,
    137:                 timestamp REAL,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\tools\bitchat\kpi_tracker.py:157:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    154:         """Record message transmission metrics"""
    155:         cursor = self.conn.cursor()
    156:         cursor.execute(
>>> 157:             """
    158:             INSERT OR REPLACE INTO message_metrics
    159:             VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    160:         """,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\tools\bitchat\kpi_tracker.py:178:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    175:         self.conn.commit()
    176:
    177:     def update_peer(self, peer: PeerMetrics):
>>> 178:         """Update peer connectivity metrics"""
    179:         cursor = self.conn.cursor()
    180:         cursor.execute(
    181:             """


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\tools\bitchat\kpi_tracker.py:181:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    178:         """Update peer connectivity metrics"""
    179:         cursor = self.conn.cursor()
    180:         cursor.execute(
>>> 181:             """
    182:             INSERT OR REPLACE INTO peer_metrics
    183:             VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    184:         """,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\tools\bitchat\kpi_tracker.py:206:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    203:         cutoff = time.time() - (window_minutes * 60)
    204:
    205:         cursor.execute(
>>> 206:             """
    207:             SELECT COUNT(*) as total,
    208:                    SUM(CASE WHEN status = 'delivered' THEN 1 ELSE 0 END) as delivered
    209:             FROM message_metrics


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\tools\bitchat\kpi_tracker.py:226:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    223:         cutoff = time.time() - (window_minutes * 60)
    224:
    225:         cursor.execute(
>>> 226:             """
    227:             SELECT AVG(latency_ms) as avg_latency
    228:             FROM message_metrics
    229:             WHERE timestamp > ? AND latency_ms IS NOT NULL


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\tools\bitchat\kpi_tracker.py:243:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    240:         cutoff = time.time() - timeout_seconds
    241:
    242:         cursor.execute(
>>> 243:             """
    244:             SELECT COUNT(*) as active_count
    245:             FROM peer_metrics
    246:             WHERE last_seen > ? AND is_active = 1


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\tools\bitchat\kpi_tracker.py:263:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    260:         # Estimate based on average connections per peer
    261:         cursor = self.conn.cursor()
    262:         cursor.execute(
>>> 263:             """
    264:             SELECT AVG(messages_sent + messages_received) as avg_messages
    265:             FROM peer_metrics
    266:             WHERE is_active = 1


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\tools\bitchat\kpi_tracker.py:296:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    293:         # Store snapshot
    294:         cursor = self.conn.cursor()
    295:         cursor.execute(
>>> 296:             """
    297:             INSERT INTO network_snapshots
    298:             VALUES (NULL, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    299:         """,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\tools\bitchat\kpi_tracker.py:320:23
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    317:     def _get_total_peer_count(self) -> int:
    318:         """Get total number of known peers"""
    319:         cursor = self.conn.cursor()
>>> 320:         cursor.execute("SELECT COUNT(*) as total FROM peer_metrics")
    321:         row = cursor.fetchone()
    322:         return row["total"] if row else 0
    323:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\tools\bitchat\kpi_tracker.py:330:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    327:         cutoff = time.time() - 60
    328:
    329:         cursor.execute(
>>> 330:             """
    331:             SELECT COUNT(*) as count
    332:             FROM message_metrics
    333:             WHERE timestamp > ?


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\tools\bitchat\kpi_tracker.py:347:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    344:         cutoff = time.time() - 300  # 5 minutes
    345:
    346:         cursor.execute(
>>> 347:             """
    348:             SELECT COUNT(*) as total,
    349:                    SUM(CASE WHEN status IN ('stored', 'forwarded') THEN 1 ELSE 0 END) as sf_count
    350:             FROM message_metrics


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\tools\bitchat\kpi_tracker.py:367:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    364:         cutoff = time.time() - 300
    365:
    366:         cursor.execute(
>>> 367:             """
    368:             SELECT AVG(hop_count) as avg_hops
    369:             FROM message_metrics
    370:             WHERE timestamp > ? AND status = 'delivered'


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\tools\bitchat\kpi_tracker.py:379:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    376:         return row["avg_hops"] if row and row["avg_hops"] else 0.0
    377:
    378:     def _estimate_battery_impact(self) -> float | None:
>>> 379:         """Estimate battery impact from peer reports"""
    380:         cursor = self.conn.cursor()
    381:
    382:         cursor.execute(


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\tools\bitchat\kpi_tracker.py:383:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    380:         cursor = self.conn.cursor()
    381:
    382:         cursor.execute(
>>> 383:             """
    384:             SELECT AVG(battery_level) as avg_battery
    385:             FROM peer_metrics
    386:             WHERE is_active = 1 AND battery_level IS NOT NULL


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\tools\bitchat\kpi_tracker.py:400:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    397:         # Get historical data for trends
    398:         cursor = self.conn.cursor()
    399:         cursor.execute(
>>> 400:             """
    401:             SELECT * FROM network_snapshots
    402:             ORDER BY timestamp DESC
    403:             LIMIT 100


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (15 calls)
File: packages\core\tools\bitchat\kpi_tracker.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'cursor' methods (26 calls)
File: packages\core\tools\bitchat\kpi_tracker.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'time' methods (10 calls)
File: packages\core\tools\bitchat\kpi_tracker.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'random' methods (21 calls)
File: packages\core\tools\bitchat\kpi_tracker.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'tracker' methods (6 calls)
File: packages\core\tools\bitchat\kpi_tracker.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (38 total)
File: packages\core\tools\bitchat\kpi_tracker.py:200:60
Recommendation: Replace magic numbers with named constants or enums
Code context:
    197:         )
    198:         self.conn.commit()
    199:
>>> 200:     def calculate_delivery_rate(self, window_minutes: int = 5) -> float:
    201:         """Calculate message delivery success rate"""
    202:         cursor = self.conn.cursor()
    203:         cutoff = time.time() - (window_minutes * 60)


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (38 total)
File: packages\core\tools\bitchat\kpi_tracker.py:203:49
Recommendation: Replace magic numbers with named constants or enums
Code context:
    200:     def calculate_delivery_rate(self, window_minutes: int = 5) -> float:
    201:         """Calculate message delivery success rate"""
    202:         cursor = self.conn.cursor()
>>> 203:         cutoff = time.time() - (window_minutes * 60)
    204:
    205:         cursor.execute(
    206:             """


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (38 total)
File: packages\core\tools\bitchat\kpi_tracker.py:220:58
Recommendation: Replace magic numbers with named constants or enums
Code context:
    217:             return row["delivered"] / row["total"]
    218:         return 0.0
    219:
>>> 220:     def calculate_avg_latency(self, window_minutes: int = 5) -> float:
    221:         """Calculate average message latency"""
    222:         cursor = self.conn.cursor()
    223:         cutoff = time.time() - (window_minutes * 60)


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (38 total)
File: packages\core\tools\bitchat\kpi_tracker.py:223:49
Recommendation: Replace magic numbers with named constants or enums
Code context:
    220:     def calculate_avg_latency(self, window_minutes: int = 5) -> float:
    221:         """Calculate average message latency"""
    222:         cursor = self.conn.cursor()
>>> 223:         cutoff = time.time() - (window_minutes * 60)
    224:
    225:         cursor.execute(
    226:             """


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (38 total)
File: packages\core\tools\bitchat\kpi_tracker.py:237:59
Recommendation: Replace magic numbers with named constants or enums
Code context:
    234:         row = cursor.fetchone()
    235:         return row["avg_latency"] if row and row["avg_latency"] else 0.0
    236:
>>> 237:     def get_active_peer_count(self, timeout_seconds: int = 60) -> int:
    238:         """Get count of currently active peers"""
    239:         cursor = self.conn.cursor()
    240:         cutoff = time.time() - timeout_seconds


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\tools\linting\lint.py:506:59
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    503:     """Main entry point for the unified linting system."""
    504:     parser = argparse.ArgumentParser(description="AIVillage Unified Linting System")
    505:     parser.add_argument("path", nargs="?", default=".", help="Path to lint (default: current directory)")
>>> 506:     parser.add_argument("--fix", action="store_true", help="Apply fixes where possible")
    507:     parser.add_argument("--config", help="Path to custom configuration file")
    508:     parser.add_argument(
    509:         "--output",


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'time' methods (17 calls)
File: packages\core\tools\linting\lint.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (12 calls)
File: packages\core\tools\linting\lint.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'subprocess' methods (10 calls)
File: packages\core\tools\linting\lint.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'cmd' methods (14 calls)
File: packages\core\tools\linting\lint.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'lines' methods (15 calls)
File: packages\core\tools\linting\lint.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'parser' methods (8 calls)
File: packages\core\tools\linting\lint.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

SEQUENTIAL_COUPLING: Sequential coupling detected: Function '__init__' is part of a sequence-dependent API
File: packages\core\tools\linting\lint.py:20:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
     17: class LintingOrchestrator:
     18:     """Unified linting system for AIVillage project."""
     19:
>>>  20:     def __init__(self, config_path: str | None = None):
     21:         self.project_root = Path.cwd()
     22:         self.results = {}
     23:         self.start_time = time.time()


SEQUENTIAL_COUPLING: Sequential coupling detected: Function 'run_ruff' is part of a sequence-dependent API
File: packages\core\tools\linting\lint.py:164:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    161:
    162:         return sorted(python_files)
    163:
>>> 164:     def run_ruff(self, files: list[Path] = None, fix: bool = False) -> dict[str, Any]:
    165:         """Run Ruff linting."""
    166:         if not self.available_tools.get("ruff", False):
    167:             return {"status": "skipped", "reason": "ruff not available"}


SEQUENTIAL_COUPLING: Sequential coupling detected: Function 'run_black' is part of a sequence-dependent API
File: packages\core\tools\linting\lint.py:210:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    207:         except Exception as e:
    208:             return {"status": "error", "error": str(e)}
    209:
>>> 210:     def run_black(self, files: list[Path] = None, check_only: bool = True) -> dict[str, Any]:
    211:         """Run Black formatter."""
    212:         if not self.available_tools.get("black", False):
    213:             return {"status": "skipped", "reason": "black not available"}


SEQUENTIAL_COUPLING: Sequential coupling detected: Function 'run_isort' is part of a sequence-dependent API
File: packages\core\tools\linting\lint.py:257:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    254:         except Exception as e:
    255:             return {"status": "error", "error": str(e)}
    256:
>>> 257:     def run_isort(self, files: list[Path] = None, check_only: bool = True) -> dict[str, Any]:
    258:         """Run isort import sorting."""
    259:         if not self.available_tools.get("isort", False):
    260:             return {"status": "skipped", "reason": "isort not available"}


SEQUENTIAL_COUPLING: Sequential coupling detected: Function 'run_mypy' is part of a sequence-dependent API
File: packages\core\tools\linting\lint.py:295:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    292:         except Exception as e:
    293:             return {"status": "error", "error": str(e)}
    294:
>>> 295:     def run_mypy(self, files: list[Path] = None) -> dict[str, Any]:
    296:         """Run mypy type checking."""
    297:         if not self.available_tools.get("mypy", False):
    298:             return {"status": "skipped", "reason": "mypy not available"}


SEQUENTIAL_COUPLING: Sequential coupling detected: Function 'run_flake8' is part of a sequence-dependent API
File: packages\core\tools\linting\lint.py:331:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    328:         except Exception as e:
    329:             return {"status": "error", "error": str(e)}
    330:
>>> 331:     def run_flake8(self, files: list[Path] = None) -> dict[str, Any]:
    332:         """Run flake8 linting."""
    333:         if not self.available_tools.get("flake8", False):
    334:             return {"status": "skipped", "reason": "flake8 not available"}


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\tools\p2p\hw_probe.py:135:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    132:             powershell_cmd = [
    133:                 "powershell",
    134:                 "-Command",
>>> 135:                 "Get-PnpDevice -Class Bluetooth -Status OK | Select-Object FriendlyName, Status",
    136:             ]
    137:
    138:             result = await self._run_command_timeout(powershell_cmd, timeout=5)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\tools\p2p\hw_probe.py:149:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    146:             service_cmd = [
    147:                 "powershell",
    148:                 "-Command",
>>> 149:                 'Get-Service -Name "bthserv" | Select-Object Status',
    150:             ]
    151:
    152:             service_result = await self._run_command_timeout(service_cmd, timeout=3)


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'platform' methods (11 calls)
File: packages\core\tools\p2p\hw_probe.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (25 calls)
File: packages\core\tools\p2p\hw_probe.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (20 calls)
File: packages\core\tools\p2p\hw_probe.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'result' methods (9 calls)
File: packages\core\tools\p2p\hw_probe.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'line' methods (10 calls)
File: packages\core\tools\p2p\hw_probe.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (21 total)
File: packages\core\tools\p2p\hw_probe.py:113:76
Recommendation: Replace magic numbers with named constants or enums
Code context:
    110:         """Linux-specific Bluetooth detection"""
    111:         try:
    112:             # Check for Bluetooth adapters via hciconfig
>>> 113:             result = await self._run_command_timeout(["hciconfig"], timeout=3)
    114:             if result and "hci" in result.lower():
    115:                 self.results["bluetooth"]["adapter_present"] = True
    116:                 self.results["bluetooth"]["details"]["hciconfig"] = result[:200]


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (21 total)
File: packages\core\tools\p2p\hw_probe.py:116:76
Recommendation: Replace magic numbers with named constants or enums
Code context:
    113:             result = await self._run_command_timeout(["hciconfig"], timeout=3)
    114:             if result and "hci" in result.lower():
    115:                 self.results["bluetooth"]["adapter_present"] = True
>>> 116:                 self.results["bluetooth"]["details"]["hciconfig"] = result[:200]
    117:             else:
    118:                 self.results["bluetooth"]["adapter_present"] = False
    119:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (21 total)
File: packages\core\tools\p2p\hw_probe.py:138:77
Recommendation: Replace magic numbers with named constants or enums
Code context:
    135:                 "Get-PnpDevice -Class Bluetooth -Status OK | Select-Object FriendlyName, Status",
    136:             ]
    137:
>>> 138:             result = await self._run_command_timeout(powershell_cmd, timeout=5)
    139:             if result and "bluetooth" in result.lower():
    140:                 self.results["bluetooth"]["adapter_present"] = True
    141:                 self.results["bluetooth"]["details"]["adapters"] = result[:300]


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (21 total)
File: packages\core\tools\p2p\hw_probe.py:141:75
Recommendation: Replace magic numbers with named constants or enums
Code context:
    138:             result = await self._run_command_timeout(powershell_cmd, timeout=5)
    139:             if result and "bluetooth" in result.lower():
    140:                 self.results["bluetooth"]["adapter_present"] = True
>>> 141:                 self.results["bluetooth"]["details"]["adapters"] = result[:300]
    142:             else:
    143:                 self.results["bluetooth"]["adapter_present"] = False
    144:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (21 total)
File: packages\core\tools\p2p\hw_probe.py:152:82
Recommendation: Replace magic numbers with named constants or enums
Code context:
    149:                 'Get-Service -Name "bthserv" | Select-Object Status',
    150:             ]
    151:
>>> 152:             service_result = await self._run_command_timeout(service_cmd, timeout=3)
    153:             if service_result:
    154:                 self.results["bluetooth"]["details"]["service_status"] = service_result.strip()
    155:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\tools\scripts\demonstrate_cleanup.py:19:10
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     16:     print("   - Root level: 50+ report/summary files")
     17:     print("   - docs/: 80+ scattered markdown files")
     18:     print("   - Hidden dirs: .claude_cleanup/, .cleanup_analysis/, etc.")
>>>  19:     print("   - Duplicates: README_backup.md, README_updated.md, etc.\n")
     20:
     21:     # Step 2: Show new structure created
     22:     print("2. NEW STRUCTURE CREATED:")


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\tools\scripts\demonstrate_cleanup.py:22:10
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     19:     print("   - Duplicates: README_backup.md, README_updated.md, etc.\n")
     20:
     21:     # Step 2: Show new structure created
>>>  22:     print("2. NEW STRUCTURE CREATED:")
     23:     dirs_created = [
     24:         "docs/architecture/",
     25:         "docs/guides/",


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\tools\scripts\demonstrate_cleanup.py:90:10
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     87:     print("   🗂️  Organize ~80 docs/ files into categories")
     88:     print("   🗑️  Remove 5+ duplicate README variants")
     89:     print("   🧹 Clean 5 hidden directories")
>>>  90:     print("   🔗 Update cross-references and links\n")
     91:
     92:     # Step 6: Show benefits
     93:     print("6. BENEFITS ACHIEVED:")


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\tools\scripts\demonstrate_cleanup.py:95:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     92:     # Step 6: Show benefits
     93:     print("6. BENEFITS ACHIEVED:")
     94:     benefits = [
>>>  95:         "Reduced from 218+ scattered files to organized hierarchy",
     96:         "Clear navigation with categorical structure",
     97:         "Historical documentation preserved in archive",
     98:         "Improved discoverability and maintainability",


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\tools\scripts\demonstrate_cleanup.py:108:10
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    105:
    106:     print("7. EXECUTION STATUS:")
    107:     print("   ✅ Structure design complete")
>>> 108:     print("   ✅ Master index created")
    109:     print("   ✅ Directory READMEs created")
    110:     print("   ✅ Categorization strategy defined")
    111:     print("   ⏳ File moves pending (use cleanup_documentation.py)")


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\tools\scripts\demonstrate_cleanup.py:109:10
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    106:     print("7. EXECUTION STATUS:")
    107:     print("   ✅ Structure design complete")
    108:     print("   ✅ Master index created")
>>> 109:     print("   ✅ Directory READMEs created")
    110:     print("   ✅ Categorization strategy defined")
    111:     print("   ⏳ File moves pending (use cleanup_documentation.py)")
    112:     print("   ⏳ Duplicate removal pending")


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\tools\scripts\deploy_production.py:57:33
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     54:                     user_config = json.load(f)
     55:                 default_config.update(user_config)
     56:             except Exception as e:
>>>  57:                 logger.warning(f"Failed to load config from {config_file}: {e}")
     58:
     59:         return default_config
     60:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\tools\scripts\deploy_production.py:141:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    138:         return True
    139:
    140:     def create_namespace(self) -> bool:
>>> 141:         """Create Kubernetes namespace if it doesn't exist."""
    142:         logger.info(f"📦 Ensuring namespace {self.config['namespace']} exists...")
    143:
    144:         # Check if namespace exists


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\tools\scripts\deploy_production.py:151:31
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    148:             # Create namespace
    149:             returncode, _, _ = self.run_command(["kubectl", "create", "namespace", self.config["namespace"]])
    150:             if returncode != 0:
>>> 151:                 logger.error(f"Failed to create namespace {self.config['namespace']}")
    152:                 return False
    153:             logger.info(f"✅ Created namespace: {self.config['namespace']}")
    154:         else:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\tools\scripts\deploy_production.py:153:26
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    150:             if returncode != 0:
    151:                 logger.error(f"Failed to create namespace {self.config['namespace']}")
    152:                 return False
>>> 153:             logger.info(f"✅ Created namespace: {self.config['namespace']}")
    154:         else:
    155:             logger.info(f"✅ Namespace {self.config['namespace']} already exists")
    156:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (25 calls)
File: packages\core\tools\scripts\deploy_production.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'json' methods (6 calls)
File: packages\core\tools\scripts\deploy_production.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (42 calls)
File: packages\core\tools\scripts\deploy_production.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

SEQUENTIAL_COUPLING: Sequential coupling detected: Function '__init__' is part of a sequence-dependent API
File: packages\core\tools\scripts\deploy_production.py:25:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
     22: class ProductionDeployer:
     23:     """Production deployment orchestrator."""
     24:
>>>  25:     def __init__(self, environment: str, project_root: Path | None = None) -> None:
     26:         self.environment = environment
     27:         self.project_root = project_root or Path.cwd()
     28:         self.deploy_dir = self.project_root / "deploy"


SEQUENTIAL_COUPLING: Sequential coupling detected: Function 'run_command' is part of a sequence-dependent API
File: packages\core\tools\scripts\deploy_production.py:61:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
     58:
     59:         return default_config
     60:
>>>  61:     def run_command(self, cmd: list[str], check: bool = True, timeout: int = 300) -> tuple[int, str, str]:
     62:         """Run a command with error handling."""
     63:         logger.info(f"Running: {' '.join(cmd)}")
     64:         try:


SEQUENTIAL_COUPLING: Sequential coupling detected: Function 'run_health_checks' is part of a sequence-dependent API
File: packages\core\tools\scripts\deploy_production.py:254:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    251:         logger.error(f"Deployment not ready after {timeout} seconds")
    252:         return False
    253:
>>> 254:     def run_health_checks(self) -> bool:
    255:         """Run comprehensive health checks."""
    256:         logger.info("🔍 Running health checks...")
    257:


SEQUENTIAL_COUPLING: Sequential coupling detected: Function 'cleanup_old_resources' is part of a sequence-dependent API
File: packages\core\tools\scripts\deploy_production.py:313:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    310:         logger.info("✅ Rollback completed")
    311:         return True
    312:
>>> 313:     def cleanup_old_resources(self) -> bool:
    314:         """Clean up old deployment resources."""
    315:         logger.info("🧹 Cleaning up old resources...")
    316:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\tools\scripts\setup_dev_env.py:95:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     92:         return True
     93:
     94:     def setup_directories(self) -> bool:
>>>  95:         """Create necessary directory structure."""
     96:         logger.info("Setting up directory structure...")
     97:
     98:         directories = [


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\tools\scripts\setup_dev_env.py:116:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    113:         return True
    114:
    115:     def create_env_file(self) -> bool:
>>> 116:         """Create .env file if it doesn't exist."""
    117:         env_file = self.project_root / ".env"
    118:         if env_file.exists():
    119:             logger.info(".env file already exists")


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\tools\scripts\setup_dev_env.py:145:20
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    142: """
    143:
    144:         env_file.write_text(env_content)
>>> 145:         logger.info("Created .env file - please update with your API keys")
    146:         return True
    147:
    148:     def validate_setup(self) -> bool:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\tools\scripts\setup_dev_env.py:203:20
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    200:
    201:         logger.info("✅ Development environment setup complete!")
    202:         logger.info("Next steps:")
>>> 203:         logger.info("1. Update .env file with your API keys")
    204:         logger.info("2. Run 'make test' to verify everything works")
    205:         logger.info("3. Run 'make dev-up' to start development services")
    206:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (31 calls)
File: packages\core\tools\scripts\setup_dev_env.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (9 calls)
File: packages\core\tools\scripts\setup_dev_env.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

SEQUENTIAL_COUPLING: Sequential coupling detected: Function '__init__' is part of a sequence-dependent API
File: packages\core\tools\scripts\setup_dev_env.py:20:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
     17: class DevEnvironmentSetup:
     18:     """Development environment setup and validation."""
     19:
>>>  20:     def __init__(self, project_root: Path | None = None) -> None:
     21:         self.project_root = project_root or Path.cwd()
     22:         self.requirements_files = [
     23:             "requirements.txt",


SEQUENTIAL_COUPLING: Sequential coupling detected: Function 'run_command' is part of a sequence-dependent API
File: packages\core\tools\scripts\setup_dev_env.py:28:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
     25:             "pyproject.toml",
     26:         ]
     27:
>>>  28:     def run_command(self, cmd: list[str], check: bool = True) -> tuple[int, str, str]:
     29:         """Run a command and return (returncode, stdout, stderr)."""
     30:         logger.info(f"Running: {' '.join(cmd)}")
     31:         try:


SEQUENTIAL_COUPLING: Sequential coupling detected: Function 'setup_directories' is part of a sequence-dependent API
File: packages\core\tools\scripts\setup_dev_env.py:94:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
     91:
     92:         return True
     93:
>>>  94:     def setup_directories(self) -> bool:
     95:         """Create necessary directory structure."""
     96:         logger.info("Setting up directory structure...")
     97:


SEQUENTIAL_COUPLING: Sequential coupling detected: Function 'validate_setup' is part of a sequence-dependent API
File: packages\core\tools\scripts\setup_dev_env.py:148:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    145:         logger.info("Created .env file - please update with your API keys")
    146:         return True
    147:
>>> 148:     def validate_setup(self) -> bool:
    149:         """Validate the complete setup."""
    150:         logger.info("Validating setup...")
    151:


SEQUENTIAL_COUPLING: Sequential coupling detected: Function 'run_setup' is part of a sequence-dependent API
File: packages\core\tools\scripts\setup_dev_env.py:180:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    177:
    178:         return True
    179:
>>> 180:     def run_setup(self, skip_deps: bool = False, skip_validation: bool = False) -> bool:
    181:         """Run the complete setup process."""
    182:         logger.info("Starting development environment setup...")
    183:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\tools\scripts\__init__.py:1:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
>>>   1: """AIVillage Tools - Scripts.
      2:
      3: Development and utility scripts moved from root/scripts/:
      4: - Performance monitoring


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\tools\security\test_security_standalone.py:370:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    367:     """Test database security configurations."""
    368:
    369:     def create_secure_connection(self, db_path: str):
>>> 370:         """Create secure SQLite connection with proper settings."""
    371:         conn = sqlite3.connect(db_path, timeout=30.0, isolation_level=None)
    372:
    373:         # Security and performance settings


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\tools\security\test_security_standalone.py:388:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    385:
    386:             # Create test table
    387:             conn.execute(
>>> 388:                 """
    389:                 CREATE TABLE users (
    390:                     id INTEGER PRIMARY KEY,
    391:                     username TEXT NOT NULL,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\tools\security\test_security_standalone.py:400:25
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    397:             # Test parameterized insert (safe)
    398:             username = "test_user"
    399:             email = "test@example.com"
>>> 400:             conn.execute("INSERT INTO users (username, email) VALUES (?, ?)", (username, email))
    401:
    402:             # Test parameterized select (safe)
    403:             cursor = conn.execute("SELECT * FROM users WHERE username = ?", (username,))


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\tools\security\test_security_standalone.py:403:34
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    400:             conn.execute("INSERT INTO users (username, email) VALUES (?, ?)", (username, email))
    401:
    402:             # Test parameterized select (safe)
>>> 403:             cursor = conn.execute("SELECT * FROM users WHERE username = ?", (username,))
    404:             result = cursor.fetchone()
    405:
    406:             self.assertIsNotNone(result)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\tools\security\test_security_standalone.py:420:25
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    417:         try:
    418:             # Create database
    419:             conn = self.create_secure_connection(db_path)
>>> 420:             conn.execute("CREATE TABLE test (id INTEGER)")
    421:             conn.close()
    422:
    423:             # Check file exists


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (76 calls)
File: packages\core\tools\security\test_security_standalone.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'field_rules' methods (6 calls)
File: packages\core\tools\security\test_security_standalone.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'conn' methods (10 calls)
File: packages\core\tools\security\test_security_standalone.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (45 total)
File: packages\core\tools\security\test_security_standalone.py:19:27
Recommendation: Replace magic numbers with named constants or enums
Code context:
     16: # Test the encryption key generation
     17: def generate_encryption_key() -> str:
     18:     """Generate a new 32-byte base64-encoded encryption key."""
>>>  19:     key_bytes = os.urandom(32)
     20:     return base64.b64encode(key_bytes).decode("utf-8")
     21:
     22:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (45 total)
File: packages\core\tools\security\test_security_standalone.py:35:39
Recommendation: Replace magic numbers with named constants or enums
Code context:
     32:
     33:         # Decoded key should be exactly 32 bytes
     34:         decoded = base64.b64decode(key)
>>>  35:         self.assertEqual(len(decoded), 32)
     36:
     37:         # Two generated keys should be different
     38:         key2 = generate_encryption_key()


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (45 total)
File: packages\core\tools\security\test_security_standalone.py:47:43
Recommendation: Replace magic numbers with named constants or enums
Code context:
     44:         valid_key = generate_encryption_key()
     45:         try:
     46:             decoded = base64.b64decode(valid_key)
>>>  47:             self.assertEqual(len(decoded), 32)
     48:             validation_passed = True
     49:         except Exception:
     50:             validation_passed = False


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (45 total)
File: packages\core\tools\security\test_security_standalone.py:58:48
Recommendation: Replace magic numbers with named constants or enums
Code context:
     55:         invalid_key = base64.b64encode(b"short").decode("utf-8")
     56:         try:
     57:             decoded = base64.b64decode(invalid_key)
>>>  58:             validation_passed = len(decoded) == 32
     59:         except Exception:
     60:             validation_passed = False
     61:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (45 total)
File: packages\core\tools\security\test_security_standalone.py:70:26
Recommendation: Replace magic numbers with named constants or enums
Code context:
     67:
     68:     def hash_password(self, password: str):
     69:         """Hash password with salt using PBKDF2."""
>>>  70:         salt = os.urandom(32)
     71:         password_hash = hashlib.pbkdf2_hmac("sha256", password.encode("utf-8"), salt, 100000)
     72:         return salt.hex(), password_hash.hex()
     73:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\tools\security\verify_p2p_security.py:564:31
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    561:             {
    562:                 "level": "high",
    563:                 "title": "Coordinated Attack Pattern",
>>> 564:                 "description": "Multiple attack types detected from different peers",
    565:             }
    566:         )
    567:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (42 total)
File: packages\core\tools\security\verify_p2p_security.py:19:23
Recommendation: Replace magic numbers with named constants or enums
Code context:
     16:
     17: def print_header(title: str):
     18:     """Print formatted header."""
>>>  19:     print("\n" + "=" * 60)
     20:     print(title.center(60))
     21:     print("=" * 60)
     22:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (42 total)
File: packages\core\tools\security\verify_p2p_security.py:20:23
Recommendation: Replace magic numbers with named constants or enums
Code context:
     17: def print_header(title: str):
     18:     """Print formatted header."""
     19:     print("\n" + "=" * 60)
>>>  20:     print(title.center(60))
     21:     print("=" * 60)
     22:
     23:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (42 total)
File: packages\core\tools\security\verify_p2p_security.py:21:16
Recommendation: Replace magic numbers with named constants or enums
Code context:
     18:     """Print formatted header."""
     19:     print("\n" + "=" * 60)
     20:     print(title.center(60))
>>>  21:     print("=" * 60)
     22:
     23:
     24: def verify_security_configuration():


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (42 total)
File: packages\core\tools\security\verify_p2p_security.py:88:41
Recommendation: Replace magic numbers with named constants or enums
Code context:
     85:     print_header("MESSAGE ENCRYPTION & MAC TESTING")
     86:
     87:     # Generate test encryption key
>>>  88:     encryption_key = secrets.token_bytes(32)
     89:     print(f"[OK] Generated 256-bit encryption key: {len(encryption_key)} bytes")
     90:
     91:     # Test payloads of different sizes


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (42 total)
File: packages\core\tools\security\verify_p2p_security.py:94:58
Recommendation: Replace magic numbers with named constants or enums
Code context:
     91:     # Test payloads of different sizes
     92:     test_payloads = [
     93:         b"small_message",
>>>  94:         b"medium_length_message_for_testing_encryption" * 5,
     95:         b"large_message_payload_" * 50,
     96:         secrets.token_bytes(10000),  # Large random payload
     97:     ]


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\tools\utlsgen\calibrate_fingerprint.py:2:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
      1: #!/usr/bin/env python3
>>>   2: """
      3: uTLS Fingerprint Calibrator for Betanet HTX
      4:
      5: Captures TLS fingerprints from origin servers and generates templates


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\tools\utlsgen\calibrate_fingerprint.py:74:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     71:
     72:
     73: class TLSCalibrator:
>>>  74:     """Calibrates TLS fingerprints from target origins."""
     75:
     76:     def __init__(self):
     77:         self.fingerprints: dict[str, TLSFingerprint] = {}


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\tools\utlsgen\calibrate_fingerprint.py:81:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     78:         self.templates: dict[str, dict] = {}
     79:
     80:     async def capture_fingerprint(self, host: str, port: int = 443) -> TLSFingerprint:
>>>  81:         """Capture TLS fingerprint from target host."""
     82:         logger.info(f"Capturing TLS fingerprint from {host}:{port}")
     83:
     84:         # Create SSL context that captures handshake details


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\tools\utlsgen\calibrate_fingerprint.py:82:22
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     79:
     80:     async def capture_fingerprint(self, host: str, port: int = 443) -> TLSFingerprint:
     81:         """Capture TLS fingerprint from target host."""
>>>  82:         logger.info(f"Capturing TLS fingerprint from {host}:{port}")
     83:
     84:         # Create SSL context that captures handshake details
     85:         context = ssl.create_default_context()


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (6 calls)
File: packages\core\tools\utlsgen\calibrate_fingerprint.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'calibrator' methods (6 calls)
File: packages\core\tools\utlsgen\calibrate_fingerprint.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (145 total)
File: packages\core\tools\utlsgen\calibrate_fingerprint.py:65:113
Recommendation: Replace magic numbers with named constants or enums
Code context:
     62:         alpn = "h2" if "h2" in self.alpn_protocols else "h1"
     63:
     64:         # Create hash of ciphers and extensions
>>>  65:         cipher_hash = hashlib.sha256(",".join(str(c) for c in sorted(self.cipher_suites)).encode()).hexdigest()[:12]
     66:
     67:         ext_hash = hashlib.sha256(",".join(str(e) for e in sorted(self.extensions)).encode()).hexdigest()[:12]
     68:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (145 total)
File: packages\core\tools\utlsgen\calibrate_fingerprint.py:67:107
Recommendation: Replace magic numbers with named constants or enums
Code context:
     64:         # Create hash of ciphers and extensions
     65:         cipher_hash = hashlib.sha256(",".join(str(c) for c in sorted(self.cipher_suites)).encode()).hexdigest()[:12]
     66:
>>>  67:         ext_hash = hashlib.sha256(",".join(str(e) for e in sorted(self.extensions)).encode()).hexdigest()[:12]
     68:
     69:         ja4_string = f"t{tls_str}{sni}{num_ciphers}{num_ext}{alpn}_{cipher_hash}_{ext_hash}"
     70:         return ja4_string


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (145 total)
File: packages\core\tools\utlsgen\calibrate_fingerprint.py:80:63
Recommendation: Replace magic numbers with named constants or enums
Code context:
     77:         self.fingerprints: dict[str, TLSFingerprint] = {}
     78:         self.templates: dict[str, dict] = {}
     79:
>>>  80:     async def capture_fingerprint(self, host: str, port: int = 443) -> TLSFingerprint:
     81:         """Capture TLS fingerprint from target host."""
     82:         logger.info(f"Capturing TLS fingerprint from {host}:{port}")
     83:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (145 total)
File: packages\core\tools\utlsgen\calibrate_fingerprint.py:116:24
Recommendation: Replace magic numbers with named constants or enums
Code context:
    113:             ja3_hash="",
    114:             ja4_string="",
    115:             ja4_hash="",
>>> 116:             tls_version=0x0303 if "1.2" in version else 0x0304,  # TLS 1.2 or 1.3
    117:             cipher_suites=[
    118:                 0x1301,
    119:                 0x1302,


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (145 total)
File: packages\core\tools\utlsgen\calibrate_fingerprint.py:116:56
Recommendation: Replace magic numbers with named constants or enums
Code context:
    113:             ja3_hash="",
    114:             ja4_string="",
    115:             ja4_hash="",
>>> 116:             tls_version=0x0303 if "1.2" in version else 0x0304,  # TLS 1.2 or 1.3
    117:             cipher_suites=[
    118:                 0x1301,
    119:                 0x1302,


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (15 total)
File: packages\core\training\config\training_config.py:17:30
Recommendation: Replace magic numbers with named constants or enums
Code context:
     14: class TokenizerConfig:
     15:     """Configuration for tokenizer setup."""
     16:
>>>  17:     DEFAULT_VOCAB_SIZE: int = 32000
     18:     TOKENIZER_PATH: str = "artifacts/tokenizer/hrrm_bpe_32k.json"
     19:
     20:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (15 total)
File: packages\core\training\config\training_config.py:26:27
Recommendation: Replace magic numbers with named constants or enums
Code context:
     23:     """Configuration for training data generation."""
     24:
     25:     BATCH_SIZE: int = 2
>>>  26:     SEQUENCE_LENGTH: int = 64
     27:     NUM_BATCHES: int = 20
     28:     MAX_TOKEN_VALUE: int = 1000
     29:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (15 total)
File: packages\core\training\config\training_config.py:27:23
Recommendation: Replace magic numbers with named constants or enums
Code context:
     24:
     25:     BATCH_SIZE: int = 2
     26:     SEQUENCE_LENGTH: int = 64
>>>  27:     NUM_BATCHES: int = 20
     28:     MAX_TOKEN_VALUE: int = 1000
     29:
     30:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (15 total)
File: packages\core\training\config\training_config.py:35:19
Recommendation: Replace magic numbers with named constants or enums
Code context:
     32: class ModelConfig:
     33:     """Base configuration for model parameters."""
     34:
>>>  35:     D_MODEL: int = 256
     36:     N_LAYERS: int = 8
     37:     N_HEAD: int = 8
     38:     MAX_H: int = 2


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (15 total)
File: packages\core\training\config\training_config.py:36:20
Recommendation: Replace magic numbers with named constants or enums
Code context:
     33:     """Base configuration for model parameters."""
     34:
     35:     D_MODEL: int = 256
>>>  36:     N_LAYERS: int = 8
     37:     N_HEAD: int = 8
     38:     MAX_H: int = 2
     39:     INNER_T: int = 2


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\training\data\data_generator.py:1:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
>>>   1: """
      2: Training Data Generation
      3:
      4: Focused module for generating synthetic training data.


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\training\models\model_factory.py:49:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     46:         self._config = config
     47:
     48:     def create_planner_model(self) -> tuple[ModelProtocol, torch.optim.Optimizer]:
>>>  49:         """
     50:         Create HRMPlanner model with optimizer.
     51:
     52:         Returns:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\training\models\model_factory.py:82:24
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     79:                 lr=self._config.training.LEARNING_RATE
     80:             )
     81:
>>>  82:             logger.info("HRMPlanner model created successfully")
     83:             return model, optimizer
     84:
     85:         except ImportError as e:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\training\models\model_factory.py:89:27
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     86:             logger.error(f"Failed to import HRMPlanner: {e}")
     87:             raise
     88:         except Exception as e:
>>>  89:             logger.error(f"Failed to create HRMPlanner: {e}")
     90:             raise
     91:
     92:     def create_reasoner_model(self) -> tuple[ModelProtocol, torch.optim.Optimizer]:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\training\models\model_factory.py:93:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     90:             raise
     91:
     92:     def create_reasoner_model(self) -> tuple[ModelProtocol, torch.optim.Optimizer]:
>>>  93:         """
     94:         Create HRMReasoner model with optimizer.
     95:
     96:         Returns:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\training\models\model_factory.py:121:24
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    118:                 lr=self._config.training.LEARNING_RATE
    119:             )
    120:
>>> 121:             logger.info("HRMReasoner model created successfully")
    122:             return model, optimizer
    123:
    124:         except ImportError as e:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\training\models\model_factory.py:128:27
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    125:             logger.error(f"Failed to import HRMReasoner: {e}")
    126:             raise
    127:         except Exception as e:
>>> 128:             logger.error(f"Failed to create HRMReasoner: {e}")
    129:             raise
    130:
    131:     def create_memory_model(self) -> tuple[ModelProtocol, torch.optim.Optimizer]:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\training\models\model_factory.py:132:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    129:             raise
    130:
    131:     def create_memory_model(self) -> tuple[ModelProtocol, torch.optim.Optimizer]:
>>> 132:         """
    133:         Create MemoryAsContextTiny model with optimizer.
    134:
    135:         Returns:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\training\models\model_factory.py:164:24
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    161:                 lr=self._config.training.LEARNING_RATE
    162:             )
    163:
>>> 164:             logger.info("MemoryAsContextTiny model created successfully")
    165:             return model, optimizer
    166:
    167:         except ImportError as e:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\training\models\model_factory.py:171:27
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    168:             logger.error(f"Failed to import MemoryAsContextTiny: {e}")
    169:             raise
    170:         except Exception as e:
>>> 171:             logger.error(f"Failed to create MemoryAsContextTiny: {e}")
    172:             raise
    173:
    174:     def get_device(self) -> torch.device:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (14 calls)
File: packages\core\training\models\model_factory.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (20 calls)
File: packages\core\training\scripts\download_benchmarks.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (19 calls)
File: packages\core\training\scripts\download_training_datasets.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (7 calls)
File: packages\core\training\scripts\download_training_datasets.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'training_data' methods (8 calls)
File: packages\core\training\scripts\download_training_datasets.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'item' methods (45 calls)
File: packages\core\training\scripts\download_training_datasets.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'examples' methods (10 calls)
File: packages\core\training\scripts\download_training_datasets.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'choices' methods (8 calls)
File: packages\core\training\scripts\download_training_datasets.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

SEQUENTIAL_COUPLING: Sequential coupling detected: Function 'process_for_training' is part of a sequence-dependent API
File: packages\core\training\scripts\download_training_datasets.py:122:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    119:             logger.error(f"Failed to download {dataset_name}: {e}")
    120:             return None
    121:
>>> 122:     def process_for_training(self, enhancement_type: str, datasets: list[dict[str, Any]]) -> dict[str, list[str]]:
    123:         """Process datasets into HRRM-specific training format."""
    124:         config = self.datasets[enhancement_type]
    125:         model_target = config["model_target"]


SEQUENTIAL_COUPLING: Sequential coupling detected: Function '_process_for_reasoner' is part of a sequence-dependent API
File: packages\core\training\scripts\download_training_datasets.py:148:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    145:
    146:         return {model_target: training_data}
    147:
>>> 148:     def _process_for_reasoner(self, dataset, name: str) -> list[str]:
    149:         """Process datasets for reasoner enhancement (GSM8K, ARC, MATH format)."""
    150:         examples = []
    151:


SEQUENTIAL_COUPLING: Sequential coupling detected: Function '_process_for_planner' is part of a sequence-dependent API
File: packages\core\training\scripts\download_training_datasets.py:185:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    182:
    183:         return examples
    184:
>>> 185:     def _process_for_planner(self, dataset, name: str) -> list[str]:
    186:         """Process datasets for planner enhancement (code planning format)."""
    187:         examples = []
    188:


SEQUENTIAL_COUPLING: Sequential coupling detected: Function '_process_for_memory' is part of a sequence-dependent API
File: packages\core\training\scripts\download_training_datasets.py:217:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    214:
    215:         return examples
    216:
>>> 217:     def _process_for_memory(self, dataset, name: str) -> list[str]:
    218:         """Process datasets for memory enhancement (contextual knowledge format)."""
    219:         examples = []
    220:


SEQUENTIAL_COUPLING: Sequential coupling detected: Function '_process_code_dataset' is part of a sequence-dependent API
File: packages\core\training\scripts\download_training_datasets.py:271:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    268:
    269:         return examples
    270:
>>> 271:     def _process_code_dataset(self, dataset, name: str) -> dict[str, list[str]]:
    272:         """Process code datasets for HRRM training."""
    273:         data = {"planner": [], "reasoner": [], "memory": []}
    274:


SEQUENTIAL_COUPLING: Sequential coupling detected: Function '_process_math_dataset' is part of a sequence-dependent API
File: packages\core\training\scripts\download_training_datasets.py:303:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    300:
    301:         return data
    302:
>>> 303:     def _process_math_dataset(self, dataset, name: str) -> dict[str, list[str]]:
    304:         """Process math datasets for HRRM training."""
    305:         data = {"planner": [], "reasoner": [], "memory": []}
    306:


SEQUENTIAL_COUPLING: Sequential coupling detected: Function '_process_multilingual_dataset' is part of a sequence-dependent API
File: packages\core\training\scripts\download_training_datasets.py:334:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    331:
    332:         return data
    333:
>>> 334:     def _process_multilingual_dataset(self, dataset, name: str) -> dict[str, list[str]]:
    335:         """Process multilingual datasets for HRRM training."""
    336:         data = {"planner": [], "reasoner": [], "memory": []}
    337:


SEQUENTIAL_COUPLING: Sequential coupling detected: Function '_process_structured_dataset' is part of a sequence-dependent API
File: packages\core\training\scripts\download_training_datasets.py:369:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    366:
    367:         return data
    368:
>>> 369:     def _process_structured_dataset(self, dataset, name: str) -> dict[str, list[str]]:
    370:         """Process structured reasoning datasets for HRRM training."""
    371:         data = {"planner": [], "reasoner": [], "memory": []}
    372:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (24 total)
File: packages\core\training\scripts\download_training_datasets.py:52:65
Recommendation: Replace magic numbers with named constants or enums
Code context:
     49:                 "model_target": "reasoner",
     50:                 "extends_config": "reasoner_sft_gsm_arc.yaml",
     51:                 "sources": [
>>>  52:                     {"name": "gsm8k", "split": "train", "limit": 7500},  # Expand existing GSM8K
     53:                     {
     54:                         "name": "ai2_arc",
     55:                         "split": "train",


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (24 total)
File: packages\core\training\scripts\download_training_datasets.py:57:33
Recommendation: Replace magic numbers with named constants or enums
Code context:
     54:                         "name": "ai2_arc",
     55:                         "split": "train",
     56:                         "subset": "ARC-Challenge",
>>>  57:                         "limit": 1176,
     58:                     },  # Full training set
     59:                     {"name": "ai2_arc", "split": "train", "subset": "ARC-Easy", "limit": 2251},  # Full training set
     60:                     {"name": "competition_math", "split": "train", "limit": 7500},  # Add advanced math


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (24 total)
File: packages\core\training\scripts\download_training_datasets.py:59:89
Recommendation: Replace magic numbers with named constants or enums
Code context:
     56:                         "subset": "ARC-Challenge",
     57:                         "limit": 1176,
     58:                     },  # Full training set
>>>  59:                     {"name": "ai2_arc", "split": "train", "subset": "ARC-Easy", "limit": 2251},  # Full training set
     60:                     {"name": "competition_math", "split": "train", "limit": 7500},  # Add advanced math
     61:                 ],
     62:                 "description": "Enhanced mathematical and scientific reasoning",


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (24 total)
File: packages\core\training\scripts\download_training_datasets.py:60:76
Recommendation: Replace magic numbers with named constants or enums
Code context:
     57:                         "limit": 1176,
     58:                     },  # Full training set
     59:                     {"name": "ai2_arc", "split": "train", "subset": "ARC-Easy", "limit": 2251},  # Full training set
>>>  60:                     {"name": "competition_math", "split": "train", "limit": 7500},  # Add advanced math
     61:                 ],
     62:                 "description": "Enhanced mathematical and scientific reasoning",
     63:             },


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (24 total)
File: packages\core\training\scripts\download_training_datasets.py:71:73
Recommendation: Replace magic numbers with named constants or enums
Code context:
     68:                 "extends_config": "planner_pretrain.yaml",
     69:                 "sources": [
     70:                     {"name": "openai_humaneval", "split": "test", "limit": None},  # All 164 examples
>>>  71:                     {"name": "code_contests", "split": "train", "limit": 5000},  # Code planning tasks
     72:                     {"name": "apps", "split": "train", "limit": 3000},  # Programming problems
     73:                 ],
     74:                 "description": "Code planning and algorithmic thinking",


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\training\scripts\enhanced_hrrm_training.py:120:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    117:         return MockTokenizer()
    118:
    119:     def _create_synthetic_data(self, batch_size: int = 8, seq_len: int = 256, num_batches: int = 100):
>>> 120:         """Create synthetic pretraining data."""
    121:         data = []
    122:         for _ in range(num_batches):
    123:             batch = torch.randint(1, min(1000, self.tokenizer.vocab_size - 1), (batch_size, seq_len))


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\training\scripts\enhanced_hrrm_training.py:135:30
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    132:             # Load reasoner enhancement data
    133:             data_path = self.dataset_dir / "reasoner_enhancement" / "reasoner_training_data.jsonl"
    134:             if data_path.exists():
>>> 135:                 logger.info(f"Loading reasoner benchmark data from {data_path}")
    136:                 with open(data_path, encoding="utf-8") as f:
    137:                     for line in f:
    138:                         item = json.loads(line.strip())


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\training\scripts\enhanced_hrrm_training.py:146:30
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    143:             # Load planner enhancement data
    144:             data_path = self.dataset_dir / "planner_enhancement" / "planner_training_data.jsonl"
    145:             if data_path.exists():
>>> 146:                 logger.info(f"Loading planner benchmark data from {data_path}")
    147:                 with open(data_path, encoding="utf-8") as f:
    148:                     for line in f:
    149:                         item = json.loads(line.strip())


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\training\scripts\enhanced_hrrm_training.py:157:30
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    154:             # For memory, we'll use some of the reasoner data as contextual knowledge
    155:             reasoner_data_path = self.dataset_dir / "reasoner_enhancement" / "reasoner_training_data.jsonl"
    156:             if reasoner_data_path.exists():
>>> 157:                 logger.info(f"Loading memory benchmark data from {reasoner_data_path}")
    158:                 with open(reasoner_data_path, encoding="utf-8") as f:
    159:                     count = 0
    160:                     for line in f:


LONG_PARAMETER_LIST: Function '_train_phase' has 7 parameters (>5)
File: packages\core\training\scripts\enhanced_hrrm_training.py:200:4
Recommendation: Use parameter objects, data classes, or keyword-only arguments
Code context:
    197:         logger.info(f"Created {len(batches)} benchmark batches")
    198:         return batches
    199:
>>> 200:     def _train_phase(self, model, optimizer, data, model_name: str, phase_name: str, epochs: int = 3):
    201:         """Train model for one phase."""
    202:         model.train()
    203:         model.to(self.device)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\training\scripts\enhanced_hrrm_training.py:492:42
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    489:                     "memory": {
    490:                         "final_loss": memory_loss,
    491:                         "path": memory_path,
>>> 492:                         "benchmark_data": "Contextual knowledge from reasoning tasks",
    493:                         "format": "Memory-augmented contextual processing",
    494:                     },
    495:                 },


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (45 calls)
File: packages\core\training\scripts\enhanced_hrrm_training.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (23 calls)
File: packages\core\training\scripts\enhanced_hrrm_training.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'config_base' methods (30 calls)
File: packages\core\training\scripts\enhanced_hrrm_training.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'optim' methods (6 calls)
File: packages\core\training\scripts\enhanced_hrrm_training.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

SEQUENTIAL_COUPLING: Sequential coupling detected: Function '__init__' is part of a sequence-dependent API
File: packages\core\training\scripts\enhanced_hrrm_training.py:33:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
     30: class EnhancedHRRMTrainer:
     31:     """Enhanced HRRM trainer that combines synthetic pretraining with benchmark fine-tuning."""
     32:
>>>  33:     def __init__(
     34:         self,
     35:         config_dir: str = "configs/hrrm",
     36:         dataset_dir: str = "packages/core/training/datasets",


SEQUENTIAL_COUPLING: Sequential coupling detected: Function '_init_tokenizer' is part of a sequence-dependent API
File: packages\core\training\scripts\enhanced_hrrm_training.py:94:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
     91:         logger.info(f"Loaded configs for: {list(configs.keys())}")
     92:         return configs
     93:
>>>  94:     def _init_tokenizer(self):
     95:         """Initialize tokenizer."""
     96:
     97:         # Create a simple mock tokenizer for now


SEQUENTIAL_COUPLING: Sequential coupling detected: Function 'run_enhanced_training' is part of a sequence-dependent API
File: packages\core\training\scripts\enhanced_hrrm_training.py:451:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    448:         model_path = self._save_model(memory, memory_config, "memory", finetune_loss)
    449:         return model_path, finetune_loss
    450:
>>> 451:     def run_enhanced_training(self):
    452:         """Run the complete enhanced training pipeline."""
    453:         logger.info("=" * 80)
    454:         logger.info("ENHANCED HRRM TRAINING PIPELINE - COMBINING PRETRAINING + BENCHMARKS")


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (77 total)
File: packages\core\training\scripts\enhanced_hrrm_training.py:78:30
Recommendation: Replace magic numbers with named constants or enums
Code context:
     75:         else:
     76:             # Use default memory config
     77:             configs["memory"] = {
>>>  78:                 "vocab_size": 32000,
     79:                 "d_model": 512,
     80:                 "n_layers": 16,
     81:                 "n_head": 8,


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (77 total)
File: packages\core\training\scripts\enhanced_hrrm_training.py:79:27
Recommendation: Replace magic numbers with named constants or enums
Code context:
     76:             # Use default memory config
     77:             configs["memory"] = {
     78:                 "vocab_size": 32000,
>>>  79:                 "d_model": 512,
     80:                 "n_layers": 16,
     81:                 "n_head": 8,
     82:                 "max_seq_len": 2048,


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (77 total)
File: packages\core\training\scripts\enhanced_hrrm_training.py:80:28
Recommendation: Replace magic numbers with named constants or enums
Code context:
     77:             configs["memory"] = {
     78:                 "vocab_size": 32000,
     79:                 "d_model": 512,
>>>  80:                 "n_layers": 16,
     81:                 "n_head": 8,
     82:                 "max_seq_len": 2048,
     83:                 "mem_dim": 128,


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (77 total)
File: packages\core\training\scripts\enhanced_hrrm_training.py:81:26
Recommendation: Replace magic numbers with named constants or enums
Code context:
     78:                 "vocab_size": 32000,
     79:                 "d_model": 512,
     80:                 "n_layers": 16,
>>>  81:                 "n_head": 8,
     82:                 "max_seq_len": 2048,
     83:                 "mem_dim": 128,
     84:                 "mem_tokens": 32,


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (77 total)
File: packages\core\training\scripts\enhanced_hrrm_training.py:82:31
Recommendation: Replace magic numbers with named constants or enums
Code context:
     79:                 "d_model": 512,
     80:                 "n_layers": 16,
     81:                 "n_head": 8,
>>>  82:                 "max_seq_len": 2048,
     83:                 "mem_dim": 128,
     84:                 "mem_tokens": 32,
     85:                 "mem_slots": 64,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\training\scripts\simple_train_hrrm.py:39:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     36:         self._config = config
     37:
     38:     def create_tokenizer(self) -> MockTokenizer:
>>>  39:         """
     40:         Create tokenizer instance.
     41:
     42:         Returns:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\training\scripts\simple_train_hrrm.py:139:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    136:         )
    137:
    138:     async def _train_single_model(self, model_name: str, model_creator_func, checkpoint_dir) -> None:
>>> 139:         """
    140:         Train a single model using the training engine.
    141:
    142:         Args:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (20 calls)
File: packages\core\training\scripts\simple_train_hrrm.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (9 calls)
File: packages\core\training\scripts\simple_train_hrrm.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\training\scripts\simple_train_hrrm_original.py:26:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     23:
     24:
     25: def create_synthetic_data(tokenizer, batch_size=8, seq_len=256, num_batches=100):
>>>  26:     """Create synthetic training data."""
     27:     data = []
     28:     for _ in range(num_batches):
     29:         # Create random token sequences


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (24 calls)
File: packages\core\training\scripts\simple_train_hrrm_original.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (33 total)
File: packages\core\training\scripts\simple_train_hrrm_original.py:25:48
Recommendation: Replace magic numbers with named constants or enums
Code context:
     22: logger = logging.getLogger(__name__)
     23:
     24:
>>>  25: def create_synthetic_data(tokenizer, batch_size=8, seq_len=256, num_batches=100):
     26:     """Create synthetic training data."""
     27:     data = []
     28:     for _ in range(num_batches):


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (33 total)
File: packages\core\training\scripts\simple_train_hrrm_original.py:25:59
Recommendation: Replace magic numbers with named constants or enums
Code context:
     22: logger = logging.getLogger(__name__)
     23:
     24:
>>>  25: def create_synthetic_data(tokenizer, batch_size=8, seq_len=256, num_batches=100):
     26:     """Create synthetic training data."""
     27:     data = []
     28:     for _ in range(num_batches):


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (33 total)
File: packages\core\training\scripts\simple_train_hrrm_original.py:35:59
Recommendation: Replace magic numbers with named constants or enums
Code context:
     32:     return data
     33:
     34:
>>>  35: def train_model(model, optimizer, data, model_name, epochs=3):
     36:     """Simple training loop."""
     37:     model.train()
     38:     device = torch.device("cuda" if torch.cuda.is_available() else "cpu")


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (33 total)
File: packages\core\training\scripts\simple_train_hrrm_original.py:134:25
Recommendation: Replace magic numbers with named constants or enums
Code context:
    131:
    132:         # Create a simple mock tokenizer for now
    133:         class MockTokenizer:
>>> 134:             vocab_size = 32000
    135:
    136:         tokenizer = MockTokenizer()
    137:     else:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (33 total)
File: packages\core\training\scripts\simple_train_hrrm_original.py:141:25
Recommendation: Replace magic numbers with named constants or enums
Code context:
    138:         logger.info("Creating mock tokenizer")
    139:
    140:         class MockTokenizer:
>>> 141:             vocab_size = 32000
    142:
    143:         tokenizer = MockTokenizer()
    144:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\training\scripts\train_50m_hrrm.py:57:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     54:
     55:
     56: def create_50m_config(model_type, vocab_size):
>>>  57:     """Create configurations for 50M parameter models."""
     58:
     59:     if model_type == "planner":
     60:         # Try different combinations to hit ~50M parameters


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\training\scripts\train_50m_hrrm.py:317:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    314:
    315:
    316: def create_dataloader(input_ids_list, batch_size=4):
>>> 317:     """Create DataLoader from tokenized sequences."""
    318:     # Pad sequences to same length
    319:     max_len = max(len(seq) for seq in input_ids_list)
    320:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\training\scripts\train_50m_hrrm.py:479:65
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    476: ## Model Details
    477:
    478: - **Model Type**: {model_name}
>>> 479: - **Parameters**: ~{sum(p.numel() for p in model.parameters()):,}
    480: - **Architecture**: Hierarchical Recurrent Memory with two-timescale dynamics
    481: - **Training**: Synthetic data + benchmark datasets (GSM8K, ARC, HumanEval)
    482:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\training\scripts\train_50m_hrrm.py:488:54
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    485: ```python
    486: from transformers import AutoModel, AutoConfig
    487:
>>> 488: config = AutoConfig.from_pretrained("./{save_dir.name}")
    489: model = AutoModel.from_pretrained("./{save_dir.name}")
    490:
    491: # Generate with the model


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (50 calls)
File: packages\core\training\scripts\train_50m_hrrm.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'model' methods (8 calls)
File: packages\core\training\scripts\train_50m_hrrm.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (96 total)
File: packages\core\training\scripts\train_50m_hrrm.py:49:23
Recommendation: Replace magic numbers with named constants or enums
Code context:
     46:     # Per layer parameters (attention + MLP)
     47:     # Attention: 4 * d_model^2 (Q, K, V, O projections)
     48:     # MLP: 4 * d_model^2 (up and down projections, typical 4x expansion)
>>>  49:     per_layer_params = 4 * d_model * d_model + 4 * d_model * d_model
     50:
     51:     # Total parameters
     52:     total_params = embedding_params + (n_layers * per_layer_params)


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (96 total)
File: packages\core\training\scripts\train_50m_hrrm.py:49:47
Recommendation: Replace magic numbers with named constants or enums
Code context:
     46:     # Per layer parameters (attention + MLP)
     47:     # Attention: 4 * d_model^2 (Q, K, V, O projections)
     48:     # MLP: 4 * d_model^2 (up and down projections, typical 4x expansion)
>>>  49:     per_layer_params = 4 * d_model * d_model + 4 * d_model * d_model
     50:
     51:     # Total parameters
     52:     total_params = embedding_params + (n_layers * per_layer_params)


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (96 total)
File: packages\core\training\scripts\train_50m_hrrm.py:62:13
Recommendation: Replace magic numbers with named constants or enums
Code context:
     59:     if model_type == "planner":
     60:         # Try different combinations to hit ~50M parameters
     61:         configs_to_try = [
>>>  62:             (512, 12),  # d_model=512, n_layers=12
     63:             (640, 10),  # d_model=640, n_layers=10
     64:             (448, 14),  # d_model=448, n_layers=14
     65:             (576, 11),  # d_model=576, n_layers=11


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (96 total)
File: packages\core\training\scripts\train_50m_hrrm.py:62:18
Recommendation: Replace magic numbers with named constants or enums
Code context:
     59:     if model_type == "planner":
     60:         # Try different combinations to hit ~50M parameters
     61:         configs_to_try = [
>>>  62:             (512, 12),  # d_model=512, n_layers=12
     63:             (640, 10),  # d_model=640, n_layers=10
     64:             (448, 14),  # d_model=448, n_layers=14
     65:             (576, 11),  # d_model=576, n_layers=11


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (96 total)
File: packages\core\training\scripts\train_50m_hrrm.py:63:13
Recommendation: Replace magic numbers with named constants or enums
Code context:
     60:         # Try different combinations to hit ~50M parameters
     61:         configs_to_try = [
     62:             (512, 12),  # d_model=512, n_layers=12
>>>  63:             (640, 10),  # d_model=640, n_layers=10
     64:             (448, 14),  # d_model=448, n_layers=14
     65:             (576, 11),  # d_model=576, n_layers=11
     66:         ]


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\training\trainers\training_engine.py:1:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
>>>   1: """
      2: Training Engine for HRRM Models
      3:
      4: Focused training logic separated from configuration and data handling.


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\training\utils\model_persistence.py:1:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
>>>   1: """
      2: Model Persistence Utilities
      3:
      4: Handles saving and loading of trained models and configurations.


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\training\utils\model_persistence.py:71:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     68:             return False
     69:
     70:     def load_model_state(self, checkpoint_dir: Path) -> dict[str, Any] | None:
>>>  71:         """
     72:         Load model state dict from checkpoint directory.
     73:
     74:         Args:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\training\utils\model_persistence.py:88:26
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     85:                 return None
     86:
     87:             state_dict = torch.load(model_path, map_location="cpu")
>>>  88:             logger.info(f"Loaded model state from {model_path}")
     89:             return state_dict
     90:
     91:         except Exception as e:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\training\utils\model_persistence.py:92:27
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     89:             return state_dict
     90:
     91:         except Exception as e:
>>>  92:             logger.error(f"Failed to load model from {checkpoint_dir}: {e}")
     93:             return None
     94:
     95:     def load_config(self, checkpoint_dir: Path) -> dict[str, Any] | None:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\training\utils\model_persistence.py:96:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     93:             return None
     94:
     95:     def load_config(self, checkpoint_dir: Path) -> dict[str, Any] | None:
>>>  96:         """
     97:         Load configuration from checkpoint directory.
     98:
     99:         Args:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\training\utils\model_persistence.py:115:26
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    112:             with open(config_path, "r") as f:
    113:                 config_dict = json.load(f)
    114:
>>> 115:             logger.info(f"Loaded configuration from {config_path}")
    116:             return config_dict
    117:
    118:         except Exception as e:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\training\utils\model_persistence.py:119:27
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    116:             return config_dict
    117:
    118:         except Exception as e:
>>> 119:             logger.error(f"Failed to load config from {checkpoint_dir}: {e}")
    120:             return None
    121:
    122:     def save_training_summary(self, summary_data: dict[str, Any], summary_path: Path | str) -> bool:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\core\training\utils\model_persistence.py:148:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    145:             return False
    146:
    147:     def _extract_config_dict(self, config: Any) -> dict[str, Any]:
>>> 148:         """
    149:         Extract dictionary representation from configuration object.
    150:
    151:         Args:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (13 calls)
File: packages\core\training\utils\model_persistence.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\bridges\legacy_compatibility.py:1:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
>>>   1: """
      2: Legacy Edge Device Compatibility Bridge
      3:
      4: Provides compatibility layer for migrating from scattered edge device implementations


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\bridges\legacy_compatibility.py:24:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     21:         logger.info("Legacy edge device compatibility bridge initialized")
     22:
     23:     def register_legacy_mapping(self, legacy_path: str, new_path: str):
>>>  24:         """Register mapping from legacy implementation to new unified system"""
     25:         self.legacy_mappings[legacy_path] = new_path
     26:         logger.info(f"Registered legacy mapping: {legacy_path} -> {new_path}")
     27:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\bridges\p2p_integration.py:88:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     85:         return True
     86:
     87:     def _create_device_context(self, device: "EdgeDevice") -> dict[str, Any]:
>>>  88:         """Create P2P device context from edge device capabilities"""
     89:
     90:         caps = device.capabilities
     91:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\bridges\p2p_integration.py:175:30
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    172:         try:
    173:             success = await self.transport_manager.send_message(message)
    174:             if success:
>>> 175:                 logger.info(f"Sent edge message from {from_device_id} to {to_device_id}")
    176:             else:
    177:                 logger.warning(f"Failed to send edge message from {from_device_id} to {to_device_id}")
    178:             return success


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\bridges\p2p_integration.py:177:33
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    174:             if success:
    175:                 logger.info(f"Sent edge message from {from_device_id} to {to_device_id}")
    176:             else:
>>> 177:                 logger.warning(f"Failed to send edge message from {from_device_id} to {to_device_id}")
    178:             return success
    179:         except Exception as e:
    180:             logger.error(f"Error sending edge message: {e}")


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\bridges\p2p_integration.py:186:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    183:     async def broadcast_edge_message(
    184:         self, from_device_id: str, message_type: str, payload: bytes, priority: str = "normal"
    185:     ) -> bool:
>>> 186:         """Broadcast message from edge device to all connected devices"""
    187:
    188:         if not self.p2p_available:
    189:             logger.warning("Cannot broadcast edge message: P2P not available")


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\bridges\p2p_integration.py:214:30
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    211:         try:
    212:             success = await self.transport_manager.send_message(message)
    213:             if success:
>>> 214:                 logger.info(f"Broadcast edge message from {from_device_id}")
    215:             return success
    216:         except Exception as e:
    217:             logger.error(f"Error broadcasting edge message: {e}")


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\bridges\p2p_integration.py:277:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    274:             transport_status = self.transport_manager.get_status()
    275:
    276:             sync_results[device_id] = {
>>> 277:                 "device_context_updated": True,
    278:                 "available_transports": transport_status.get("available_transports", []),
    279:                 "transport_priority": transport_status.get("transport_priority"),
    280:             }


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\bridges\p2p_integration.py:383:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    380:
    381:
    382: def create_edge_p2p_bridge(edge_manager: "EdgeManager") -> EdgeP2PBridge:
>>> 383:     """Factory function to create edge-P2P bridge with proper fallbacks"""
    384:
    385:     if P2P_AVAILABLE:
    386:         try:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\bridges\p2p_integration.py:391:29
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    388:             transport_manager = TransportManager(device_id="edge_bridge", transport_priority=TransportPriority.ADAPTIVE)
    389:             return EdgeP2PBridge(edge_manager, transport_manager)
    390:         except Exception as e:
>>> 391:             logger.warning(f"Failed to create transport manager: {e}")
    392:
    393:     # Fallback bridge without P2P
    394:     return EdgeP2PBridge(edge_manager, None)


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (20 calls)
File: packages\edge\bridges\p2p_integration.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\core\device_registry.py:74:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     71:         return list(self.devices.values())
     72:
     73:     def update_last_seen(self, device_id: str) -> bool:
>>>  74:         """Update device last seen timestamp"""
     75:         if device_id in self.devices:
     76:             self.devices[device_id].last_seen = datetime.now(UTC)
     77:             return True


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\core\edge_manager.py:1:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
>>>   1: """
      2: Unified Edge Manager - Orchestrates all edge device operations
      3:
      4: Consolidates functionality from:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\core\edge_manager.py:511:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    508:                 await asyncio.sleep(10)
    509:
    510:     async def _update_device_state(self, device: "EdgeDevice") -> None:
>>> 511:         """Update device state and capabilities"""
    512:         try:
    513:             # Update capabilities if possible
    514:             if device.device_id == "local":  # Local device


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (18 calls)
File: packages\edge\core\edge_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (15 calls)
File: packages\edge\core\edge_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'datetime' methods (6 calls)
File: packages\edge\core\edge_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'asyncio' methods (7 calls)
File: packages\edge\core\edge_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (55 total)
File: packages\edge\core\edge_manager.py:95:32
Recommendation: Replace magic numbers with named constants or enums
Code context:
     92:     supports_python: bool = True
     93:     supports_containers: bool = False
     94:     supports_background_tasks: bool = True
>>>  95:     max_concurrent_tasks: int = 4
     96:
     97:     # Mobile-specific
     98:     supports_bitchat: bool = False


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (55 total)
File: packages\edge\core\edge_manager.py:114:31
Recommendation: Replace magic numbers with named constants or enums
Code context:
    111:     deployment_type: str  # tutor, agent, inference, training
    112:
    113:     # Resource allocation
>>> 114:     cpu_limit_percent: float = 50.0
    115:     memory_limit_mb: int = 1024
    116:     priority: int = 5  # 1=low, 10=critical
    117:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (55 total)
File: packages\edge\core\edge_manager.py:115:27
Recommendation: Replace magic numbers with named constants or enums
Code context:
    112:
    113:     # Resource allocation
    114:     cpu_limit_percent: float = 50.0
>>> 115:     memory_limit_mb: int = 1024
    116:     priority: int = 5  # 1=low, 10=critical
    117:
    118:     # State tracking


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (55 total)
File: packages\edge\core\edge_manager.py:116:20
Recommendation: Replace magic numbers with named constants or enums
Code context:
    113:     # Resource allocation
    114:     cpu_limit_percent: float = 50.0
    115:     memory_limit_mb: int = 1024
>>> 116:     priority: int = 5  # 1=low, 10=critical
    117:
    118:     # State tracking
    119:     state: str = "pending"


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (55 total)
File: packages\edge\core\edge_manager.py:132:28
Recommendation: Replace magic numbers with named constants or enums
Code context:
    129:     # Mobile optimization
    130:     offline_capable: bool = False
    131:     compressed_size_mb: float = 0.0
>>> 132:     chunk_size_bytes: int = 1024
    133:
    134:
    135: class EdgeManager:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\fog_compute\fog_coordinator.py:1:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
>>>   1: """
      2: Fog Computing Coordinator
      3:
      4: Orchestrates distributed computing across edge devices using idle resources:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\fog_compute\fog_coordinator.py:463:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    460:         logger.info(f"Assigned task {task.task_id} to node {node_id}")
    461:
    462:     async def _monitor_node(self, node: "FogNode") -> None:
>>> 463:         """Monitor a fog node for capacity updates"""
    464:
    465:         while node.node_id in self.nodes:
    466:             try:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\fog_compute\fog_coordinator.py:525:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    522:         logger.info(f"Task {task.task_id} completed with status: {task.status}")
    523:
    524:     def _cleanup_expired_tasks(self) -> None:
>>> 525:         """Remove expired tasks from pending queue"""
    526:
    527:         initial_count = len(self.pending_tasks)
    528:         self.pending_tasks = [t for t in self.pending_tasks if not t.is_expired]


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\fog_compute\fog_coordinator.py:532:52
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    529:
    530:         expired_count = initial_count - len(self.pending_tasks)
    531:         if expired_count > 0:
>>> 532:             logger.warning(f"Removed {expired_count} expired tasks from queue")
    533:
    534:     async def _evaluate_cluster_formation(self) -> None:
    535:         """Evaluate whether to form new fog clusters"""


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\fog_compute\fog_coordinator.py:598:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    595:             cluster.member_nodes &= set(self.nodes.keys())
    596:
    597:     async def _update_statistics(self) -> None:
>>> 598:         """Update fog computing statistics"""
    599:
    600:         # Count battery saves (tasks that would have drained battery but ran on charging nodes)
    601:         battery_saves = 0


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (14 calls)
File: packages\edge\fog_compute\fog_coordinator.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'asyncio' methods (7 calls)
File: packages\edge\fog_compute\fog_coordinator.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (12 calls)
File: packages\edge\fog_compute\fog_coordinator.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (48 total)
File: packages\edge\fog_compute\fog_coordinator.py:43:13
Recommendation: Replace magic numbers with named constants or enums
Code context:
     40:     """Task priority levels"""
     41:
     42:     LOW = 1
>>>  43:     NORMAL = 3
     44:     HIGH = 7
     45:     CRITICAL = 10
     46:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (48 total)
File: packages\edge\fog_compute\fog_coordinator.py:44:11
Recommendation: Replace magic numbers with named constants or enums
Code context:
     41:
     42:     LOW = 1
     43:     NORMAL = 3
>>>  44:     HIGH = 7
     45:     CRITICAL = 10
     46:
     47:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (48 total)
File: packages\edge\fog_compute\fog_coordinator.py:79:32
Recommendation: Replace magic numbers with named constants or enums
Code context:
     76:
     77:     # Network characteristics
     78:     network_bandwidth_mbps: float = 10.0
>>>  79:     network_latency_ms: float = 50.0
     80:
     81:     @property
     82:     def available_cpu_cores(self) -> float:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (48 total)
File: packages\edge\fog_compute\fog_coordinator.py:100:38
Recommendation: Replace magic numbers with named constants or enums
Code context:
     97:         # Adjust for power constraints
     98:         power_factor = 1.0
     99:         if self.battery_powered and self.battery_percent:
>>> 100:             if self.battery_percent < 20:
    101:                 power_factor = 0.2
    102:             elif self.battery_percent < 50:
    103:                 power_factor = 0.6


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (48 total)
File: packages\edge\fog_compute\fog_coordinator.py:101:31
Recommendation: Replace magic numbers with named constants or enums
Code context:
     98:         power_factor = 1.0
     99:         if self.battery_powered and self.battery_percent:
    100:             if self.battery_percent < 20:
>>> 101:                 power_factor = 0.2
    102:             elif self.battery_percent < 50:
    103:                 power_factor = 0.6
    104:             elif self.is_charging:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\mobile\digital_twin_concierge.py:1:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
>>>   1: """
      2: Digital Twin Concierge - On-Device Personal AI Assistant
      3:
      4: This system creates a personalized AI model that lives on the user's device and learns


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\mobile\digital_twin_concierge.py:80:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     77:     surprise_score: float | None = None  # How surprised twin was
     78:
     79:     def anonymize(self) -> dict[str, Any]:
>>>  80:         """Create anonymized version for analysis"""
     81:         return {
     82:             "source": self.source.value,
     83:             "data_type": self.data_type.value,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\mobile\digital_twin_concierge.py:126:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    123:
    124:
    125: class OnDeviceDataCollector:
>>> 126:     """Collects data from various sources on the mobile device"""
    127:
    128:     def __init__(self, data_dir: Path, preferences: UserPreferences):
    129:         self.data_dir = data_dir


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\mobile\digital_twin_concierge.py:143:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    140:             conn.execute("PRAGMA journal_mode=WAL")
    141:
    142:             conn.execute(
>>> 143:                 """
    144:                 CREATE TABLE IF NOT EXISTS data_points (
    145:                     data_id TEXT PRIMARY KEY,
    146:                     source TEXT NOT NULL,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\mobile\digital_twin_concierge.py:161:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    158:             )
    159:
    160:             conn.execute(
>>> 161:                 """
    162:                 CREATE INDEX IF NOT EXISTS idx_timestamp ON data_points(timestamp);
    163:                 CREATE INDEX IF NOT EXISTS idx_source ON data_points(source);
    164:                 CREATE INDEX IF NOT EXISTS idx_surprise ON data_points(surprise_score);


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\mobile\digital_twin_concierge.py:169:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    166:             )
    167:
    168:     async def collect_conversation_data(self) -> list[DataPoint]:
>>> 169:         """Collect conversation data from messages/chat (iOS/Android patterns)"""
    170:         if DataSource.CONVERSATIONS not in self.preferences.enabled_sources:
    171:             return []
    172:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\mobile\digital_twin_concierge.py:288:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    285:         return sample_data
    286:
    287:     async def collect_all_sources(self) -> list[DataPoint]:
>>> 288:         """Collect data from all enabled sources"""
    289:         all_data = []
    290:
    291:         # Collect from each enabled source


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\mobile\digital_twin_concierge.py:313:20
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    310:         with sqlite3.connect(self.db_path) as conn:
    311:             for dp in data_points:
    312:                 conn.execute(
>>> 313:                     """
    314:                     INSERT OR REPLACE INTO data_points
    315:                     (data_id, source, data_type, privacy_level, timestamp, content, context,
    316:                      user_action, twin_prediction, surprise_score)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\mobile\digital_twin_concierge.py:334:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    331:                 )
    332:
    333:     def cleanup_old_data(self):
>>> 334:         """Delete data older than retention period"""
    335:         cutoff_time = datetime.now() - timedelta(hours=self.preferences.max_data_retention_hours)
    336:
    337:         with sqlite3.connect(self.db_path) as conn:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\mobile\digital_twin_concierge.py:339:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    336:
    337:         with sqlite3.connect(self.db_path) as conn:
    338:             result = conn.execute(
>>> 339:                 """
    340:                 DELETE FROM data_points
    341:                 WHERE timestamp < ?
    342:             """,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\mobile\digital_twin_concierge.py:520:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    517:         return base_prediction
    518:
    519:     def _build_context_query(self, context: dict[str, Any]) -> str:
>>> 520:         """Build a query string from context for Mini-RAG lookup"""
    521:         query_parts = []
    522:
    523:         if "conversation" in context:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\mobile\digital_twin_concierge.py:535:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    532:         return " ".join(query_parts) if query_parts else "user patterns"
    533:
    534:     async def run_learning_cycle(self, device_profile: MobileDeviceProfile) -> LearningCycle:
>>> 535:         """Run a complete learning cycle: collect data, predict, evaluate, learn, and update knowledge"""
    536:         cycle_id = f"cycle_{int(time.time())}"
    537:         cycle = LearningCycle(cycle_id=cycle_id, start_time=datetime.now())
    538:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\mobile\digital_twin_concierge.py:546:24
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    543:                 return cycle
    544:
    545:             # 1. Collect new data from all sources
>>> 546:             logger.info("Collecting data from enabled sources...")
    547:             data_points = await self.data_collector.collect_all_sources()
    548:             cycle.data_points_count = len(data_points)
    549:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\mobile\digital_twin_concierge.py:628:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    625:             return "unknown"
    626:
    627:     async def _update_model_patterns(self, data_points: list[DataPoint]):
>>> 628:         """Update internal model patterns based on learning"""
    629:         # Simplified pattern learning for demo
    630:         # In production this would update neural network weights
    631:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\mobile\digital_twin_concierge.py:644:22
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    641:                     self.user_patterns[source_key][pattern_key] = 0
    642:                 self.user_patterns[source_key][pattern_key] += 1
    643:
>>> 644:         logger.info(f"Updated model patterns: {len(self.user_patterns)} sources")
    645:
    646:     async def _update_mini_rag_knowledge(self, data_points: list[DataPoint]):
    647:         """Update Mini-RAG system with learned patterns and insights"""


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\mobile\digital_twin_concierge.py:647:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    644:         logger.info(f"Updated model patterns: {len(self.user_patterns)} sources")
    645:
    646:     async def _update_mini_rag_knowledge(self, data_points: list[DataPoint]):
>>> 647:         """Update Mini-RAG system with learned patterns and insights"""
    648:         try:
    649:             for dp in data_points:
    650:                 # Only add knowledge from data points with low surprise (good predictions)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\mobile\digital_twin_concierge.py:678:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    675:             logger.error(f"Error updating Mini-RAG knowledge: {e}")
    676:
    677:     def _extract_knowledge_from_datapoint(self, dp: DataPoint) -> str | None:
>>> 678:         """Extract actionable knowledge from a data point"""
    679:         if dp.surprise_score > 0.5:  # High surprise = unreliable pattern
    680:             return None
    681:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\mobile\digital_twin_concierge.py:707:27
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    704:             return None
    705:
    706:         except Exception as e:
>>> 707:             logger.error(f"Error extracting knowledge from datapoint: {e}")
    708:             return None
    709:
    710:     async def _evaluate_knowledge_for_global_elevation(self):


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (13 calls)
File: packages\edge\mobile\digital_twin_concierge.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'conn' methods (6 calls)
File: packages\edge\mobile\digital_twin_concierge.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'time' methods (7 calls)
File: packages\edge\mobile\digital_twin_concierge.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'datetime' methods (11 calls)
File: packages\edge\mobile\digital_twin_concierge.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (20 calls)
File: packages\edge\mobile\digital_twin_concierge.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

SEQUENTIAL_COUPLING: Sequential coupling detected: Function '__init__' is part of a sequence-dependent API
File: packages\edge\mobile\digital_twin_concierge.py:430:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    427: class DigitalTwinConcierge:
    428:     """Main Digital Twin Concierge system"""
    429:
>>> 430:     def __init__(
    431:         self, data_dir: Path, preferences: UserPreferences, distributed_rag: DistributedRAGCoordinator | None = None
    432:     ):
    433:         self.data_dir = data_dir


SEQUENTIAL_COUPLING: Sequential coupling detected: Function '_setup_database' is part of a sequence-dependent API
File: packages\edge\mobile\digital_twin_concierge.py:134:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    131:         self.db_path = data_dir / "twin_data.db"
    132:         self._setup_database()
    133:
>>> 134:     def _setup_database(self):
    135:         """Initialize SQLite database for local data storage"""
    136:         self.db_path.parent.mkdir(parents=True, exist_ok=True)
    137:


SEQUENTIAL_COUPLING: Sequential coupling detected: Function 'cleanup_old_data' is part of a sequence-dependent API
File: packages\edge\mobile\digital_twin_concierge.py:333:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    330:                     ),
    331:                 )
    332:
>>> 333:     def cleanup_old_data(self):
    334:         """Delete data older than retention period"""
    335:         cutoff_time = datetime.now() - timedelta(hours=self.preferences.max_data_retention_hours)
    336:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (71 total)
File: packages\edge\mobile\digital_twin_concierge.py:85:88
Recommendation: Replace magic numbers with named constants or enums
Code context:
     82:             "source": self.source.value,
     83:             "data_type": self.data_type.value,
     84:             "privacy_level": self.privacy_level.value,
>>>  85:             "timestamp_hash": hashlib.sha256(str(self.timestamp).encode()).hexdigest()[:8],
     86:             "surprise_score": self.surprise_score,
     87:             "context_keys": list(self.context.keys()),
     88:         }


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (71 total)
File: packages\edge\mobile\digital_twin_concierge.py:111:36
Recommendation: Replace magic numbers with named constants or enums
Code context:
    108:
    109:     # Data collection consent
    110:     enabled_sources: set[DataSource] = field(default_factory=set)
>>> 111:     max_data_retention_hours: int = 24  # Delete after 24 hours
    112:     privacy_mode: str = "balanced"  # minimal, balanced, comprehensive
    113:
    114:     # Learning preferences


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (71 total)
File: packages\edge\mobile\digital_twin_concierge.py:117:32
Recommendation: Replace magic numbers with named constants or enums
Code context:
    114:     # Learning preferences
    115:     learning_enabled: bool = True
    116:     suggestion_frequency: str = "moderate"  # minimal, moderate, frequent
>>> 117:     surprise_threshold: float = 0.3  # Only learn from surprising events
    118:
    119:     # Security settings
    120:     require_biometric: bool = False


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (71 total)
File: packages\edge\mobile\digital_twin_concierge.py:183:57
Recommendation: Replace magic numbers with named constants or enums
Code context:
    180:                 privacy_level=PrivacyLevel.PERSONAL,
    181:                 timestamp=datetime.now(),
    182:                 content={
>>> 183:                     "text_length": np.random.randint(10, 200),
    184:                     "contains_question": np.random.choice([True, False]),
    185:                     "sentiment": np.random.choice(["positive", "neutral", "negative"]),
    186:                     "time_of_day": datetime.now().hour,


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (71 total)
File: packages\edge\mobile\digital_twin_concierge.py:192:63
Recommendation: Replace magic numbers with named constants or enums
Code context:
    189:                 context={
    190:                     "app": "messages",
    191:                     "contact_frequency": "daily",
>>> 192:                     "response_time_seconds": np.random.randint(5, 300),
    193:                 },
    194:             )
    195:             for i in range(np.random.randint(0, 5))  # 0-5 recent conversations


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\mobile\mini_rag_system.py:71:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     68:     anonymization_level: float = 0.0  # How much anonymization was applied
     69:
     70:     def anonymize_for_global_sharing(self) -> dict[str, Any]:
>>>  71:         """Create anonymized version for global RAG contribution"""
     72:
     73:         # Remove personal identifiers
     74:         anonymized_content = self._remove_personal_identifiers(self.content)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\mobile\mini_rag_system.py:199:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    196:
    197:             # Knowledge pieces table
    198:             conn.execute(
>>> 199:                 """
    200:                 CREATE TABLE IF NOT EXISTS knowledge_pieces (
    201:                     knowledge_id TEXT PRIMARY KEY,
    202:                     content TEXT NOT NULL,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\mobile\mini_rag_system.py:222:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    219:
    220:             # Global contributions tracking
    221:             conn.execute(
>>> 222:                 """
    223:                 CREATE TABLE IF NOT EXISTS global_contributions (
    224:                     contribution_id TEXT PRIMARY KEY,
    225:                     original_knowledge_id TEXT,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\mobile\mini_rag_system.py:235:25
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    232:             )
    233:
    234:             # Indexes for search performance
>>> 235:             conn.execute("CREATE INDEX IF NOT EXISTS idx_relevance ON knowledge_pieces(relevance)")
    236:             conn.execute("CREATE INDEX IF NOT EXISTS idx_source ON knowledge_pieces(source)")
    237:             conn.execute("CREATE INDEX IF NOT EXISTS idx_privacy_level ON knowledge_pieces(privacy_level)")
    238:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\mobile\mini_rag_system.py:236:25
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    233:
    234:             # Indexes for search performance
    235:             conn.execute("CREATE INDEX IF NOT EXISTS idx_relevance ON knowledge_pieces(relevance)")
>>> 236:             conn.execute("CREATE INDEX IF NOT EXISTS idx_source ON knowledge_pieces(source)")
    237:             conn.execute("CREATE INDEX IF NOT EXISTS idx_privacy_level ON knowledge_pieces(privacy_level)")
    238:
    239:     def _load_existing_knowledge(self):


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\mobile\mini_rag_system.py:237:25
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    234:             # Indexes for search performance
    235:             conn.execute("CREATE INDEX IF NOT EXISTS idx_relevance ON knowledge_pieces(relevance)")
    236:             conn.execute("CREATE INDEX IF NOT EXISTS idx_source ON knowledge_pieces(source)")
>>> 237:             conn.execute("CREATE INDEX IF NOT EXISTS idx_privacy_level ON knowledge_pieces(privacy_level)")
    238:
    239:     def _load_existing_knowledge(self):
    240:         """Load existing knowledge from database"""


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\mobile\mini_rag_system.py:240:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    237:             conn.execute("CREATE INDEX IF NOT EXISTS idx_privacy_level ON knowledge_pieces(privacy_level)")
    238:
    239:     def _load_existing_knowledge(self):
>>> 240:         """Load existing knowledge from database"""
    241:         with sqlite3.connect(self.db_path) as conn:
    242:             cursor = conn.execute(
    243:                 """


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\mobile\mini_rag_system.py:243:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    240:         """Load existing knowledge from database"""
    241:         with sqlite3.connect(self.db_path) as conn:
    242:             cursor = conn.execute(
>>> 243:                 """
    244:                 SELECT knowledge_id, content, source, privacy_level, relevance,
    245:                        embedding, keywords, context, confidence_score, usage_frequency,
    246:                        last_accessed, created_at, contributed_to_global,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\mobile\mini_rag_system.py:501:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    498:         return dot_product / (norm_a * norm_b)
    499:
    500:     def _extract_keywords(self, content: str) -> list[str]:
>>> 501:         """Extract keywords from content"""
    502:         import re
    503:
    504:         # Simple keyword extraction


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\mobile\mini_rag_system.py:524:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    521:
    522:         with sqlite3.connect(self.db_path) as conn:
    523:             conn.execute(
>>> 524:                 """
    525:                 INSERT OR REPLACE INTO knowledge_pieces
    526:                 (knowledge_id, content, source, privacy_level, relevance, embedding,
    527:                  keywords, context, confidence_score, usage_frequency, last_accessed,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\mobile\mini_rag_system.py:580:29
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    577:             del self.knowledge_base[knowledge_id]
    578:
    579:             with sqlite3.connect(self.db_path) as conn:
>>> 580:                 conn.execute("DELETE FROM knowledge_pieces WHERE knowledge_id = ?", (knowledge_id,))
    581:
    582:         logger.info(f"Cleaned up {len(to_remove)} old knowledge pieces")
    583:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (15 calls)
File: packages\edge\mobile\mini_rag_system.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 're' methods (6 calls)
File: packages\edge\mobile\mini_rag_system.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'datetime' methods (6 calls)
File: packages\edge\mobile\mini_rag_system.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (6 calls)
File: packages\edge\mobile\mini_rag_system.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'conn' methods (9 calls)
File: packages\edge\mobile\mini_rag_system.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'rag' methods (7 calls)
File: packages\edge\mobile\mini_rag_system.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\mobile\resource_manager.py:1:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
>>>   1: """
      2: Mobile Resource Manager - Battery/Thermal-Aware Resource Optimization
      3:
      4: Consolidates mobile optimization functionality from:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\mobile\resource_manager.py:36:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     33:
     34:
     35: class TransportPreference(Enum):
>>>  36:     """Transport selection preferences based on constraints"""
     37:
     38:     BITCHAT_ONLY = "bitchat_only"
     39:     BITCHAT_PREFERRED = "bitchat_preferred"


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\mobile\resource_manager.py:165:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    162:
    163:
    164: class MobileResourceManager:
>>> 165:     """
    166:     Battery/thermal-aware resource manager for mobile optimization
    167:
    168:     Core Features:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\mobile\resource_manager.py:233:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    230:         logger.info(f"Environment simulation config: {active_vars}")
    231:
    232:     def create_device_profile_from_env(self, device_id: str = "test_device") -> MobileDeviceProfile:
>>> 233:         """Create MobileDeviceProfile from environment variables for testing"""
    234:
    235:         # Default values
    236:         profile = MobileDeviceProfile(


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\mobile\resource_manager.py:333:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    330:         return profile
    331:
    332:     async def optimize_for_device(self, profile: MobileDeviceProfile | None = None) -> ResourceOptimization:
>>> 333:         """
    334:         Main optimization entry point
    335:
    336:         Args:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (11 calls)
File: packages\edge\mobile\resource_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (8 calls)
File: packages\edge\mobile\resource_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'os' methods (19 calls)
File: packages\edge\mobile\resource_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'policies' methods (9 calls)
File: packages\edge\mobile\resource_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (97 total)
File: packages\edge\mobile\resource_manager.py:83:23
Recommendation: Replace magic numbers with named constants or enums
Code context:
     80:
     81:     # Battery thresholds
     82:     battery_critical: int = 10  # %
>>>  83:     battery_low: int = 20  # %
     84:     battery_conservative: int = 40  # %
     85:
     86:     # Thermal thresholds (Celsius)


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (97 total)
File: packages\edge\mobile\resource_manager.py:84:32
Recommendation: Replace magic numbers with named constants or enums
Code context:
     81:     # Battery thresholds
     82:     battery_critical: int = 10  # %
     83:     battery_low: int = 20  # %
>>>  84:     battery_conservative: int = 40  # %
     85:
     86:     # Thermal thresholds (Celsius)
     87:     thermal_normal: float = 35.0


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (97 total)
File: packages\edge\mobile\resource_manager.py:87:28
Recommendation: Replace magic numbers with named constants or enums
Code context:
     84:     battery_conservative: int = 40  # %
     85:
     86:     # Thermal thresholds (Celsius)
>>>  87:     thermal_normal: float = 35.0
     88:     thermal_warm: float = 45.0
     89:     thermal_hot: float = 55.0
     90:     thermal_critical: float = 65.0


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (97 total)
File: packages\edge\mobile\resource_manager.py:88:26
Recommendation: Replace magic numbers with named constants or enums
Code context:
     85:
     86:     # Thermal thresholds (Celsius)
     87:     thermal_normal: float = 35.0
>>>  88:     thermal_warm: float = 45.0
     89:     thermal_hot: float = 55.0
     90:     thermal_critical: float = 65.0
     91:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (97 total)
File: packages\edge\mobile\resource_manager.py:89:25
Recommendation: Replace magic numbers with named constants or enums
Code context:
     86:     # Thermal thresholds (Celsius)
     87:     thermal_normal: float = 35.0
     88:     thermal_warm: float = 45.0
>>>  89:     thermal_hot: float = 55.0
     90:     thermal_critical: float = 65.0
     91:
     92:     # Memory thresholds for chunk sizing


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\digital_twin\guard.py:1:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
>>>   1: """Safety guard for the digital twin runtime.
      2:
      3: The guard evaluates user messages and decides whether an action is allowed,
      4: requires confirmation (``ask``) or must be denied.  Decisions are based on a


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\digital_twin\guard.py:32:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     29:
     30:
     31: def risk_gate(message: dict[str, Any], risk: float | None = None) -> Literal["allow", "ask", "deny"]:
>>>  32:     """Evaluate ``message`` and return the guard decision.
     33:
     34:     Parameters
     35:     ----------


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\digital_twin\runner.py:1:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
>>>   1: """Minimal chat runner for the digital twin.
      2:
      3: The runner exposes a :func:`chat` generator that first consults the safety
      4: guard before emitting any tokens from a local language model adapter.  The


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\federated_learning\federated_coordinator.py:41:28
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     38:     """Status of federated training round."""
     39:
     40:     INITIALIZING = "initializing"
>>>  41:     PARTICIPANT_SELECTION = "participant_selection"
     42:     MODEL_DISTRIBUTION = "model_distribution"
     43:     LOCAL_TRAINING = "local_training"
     44:     GRADIENT_COLLECTION = "gradient_collection"


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\federated_learning\federated_coordinator.py:208:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    205:     async def _handle_capability_announcement(
    206:         self, message: P2PMessage, writer: asyncio.StreamWriter | None = None
    207:     ) -> None:
>>> 208:         """Handle federated learning capability announcements from peers."""
    209:         device_id = message.sender_id
    210:         if device_id not in self.available_participants:
    211:             cap_data = message.payload.get("capabilities", {})


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\federated_learning\federated_coordinator.py:223:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    220:     async def _handle_gradient_collection_request(
    221:         self, message: P2PMessage, writer: asyncio.StreamWriter | None = None
    222:     ) -> None:
>>> 223:         """Respond to gradient collection requests from coordinator."""
    224:         participant = self.available_participants.get(self.p2p_node.node_id)
    225:         if not participant or not participant.gradients:
    226:             return


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\federated_learning\federated_coordinator.py:487:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    484:             raise
    485:
    486:     async def _select_participants_for_round(self, training_round: FederatedTrainingRound) -> list[TrainingParticipant]:
>>> 487:         """Select participants for training round."""
    488:         logger.info("Selecting participants for training round")
    489:
    490:         # Calculate target number of participants


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\federated_learning\federated_coordinator.py:488:20
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    485:
    486:     async def _select_participants_for_round(self, training_round: FederatedTrainingRound) -> list[TrainingParticipant]:
    487:         """Select participants for training round."""
>>> 488:         logger.info("Selecting participants for training round")
    489:
    490:         # Calculate target number of participants
    491:         available_count = len(self.available_participants)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\federated_learning\federated_coordinator.py:586:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    583:     async def _invite_participant(
    584:         self, participant: TrainingParticipant, training_round: FederatedTrainingRound
    585:     ) -> bool:
>>> 586:         """Invite participant to join training round."""
    587:         invitation = {
    588:             "type": "FL_TRAINING_INVITATION",
    589:             "round_id": training_round.round_id,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\federated_learning\federated_coordinator.py:711:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    708:             participant.status = ParticipantStatus.FAILED
    709:
    710:     def _create_local_model_copy(self) -> nn.Module:
>>> 711:         """Create copy of global model for local training."""
    712:         # For now, return reference to global model
    713:         # In real implementation, this would create a proper deep copy
    714:         return self.global_model


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\federated_learning\federated_coordinator.py:818:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    815:         logger.info(f"Training completed: {len(completed_participants)} participants")
    816:
    817:     async def _collect_gradients(self, training_round: FederatedTrainingRound) -> None:
>>> 818:         """Collect gradients from all participants."""
    819:         logger.info("Collecting gradients from participants")
    820:
    821:         collection_message = {


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\federated_learning\federated_coordinator.py:819:20
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    816:
    817:     async def _collect_gradients(self, training_round: FederatedTrainingRound) -> None:
    818:         """Collect gradients from all participants."""
>>> 819:         logger.info("Collecting gradients from participants")
    820:
    821:         collection_message = {
    822:             "type": "FL_GRADIENT_COLLECTION",


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\federated_learning\federated_coordinator.py:836:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    833:         await self._wait_for_gradient_collection(training_round)
    834:
    835:     async def _wait_for_gradient_collection(self, training_round: FederatedTrainingRound) -> None:
>>> 836:         """Wait for gradient collection from participants."""
    837:         timeout = time.time() + self.config.communication_timeout_seconds
    838:
    839:         while time.time() < timeout:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\federated_learning\federated_coordinator.py:851:22
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    848:
    849:         participants_with_gradients = sum(1 for p in training_round.participants if p.gradients is not None)
    850:
>>> 851:         logger.info(f"Collected gradients from {participants_with_gradients} participants")
    852:
    853:     async def _aggregate_gradients(self, training_round: FederatedTrainingRound) -> None:
    854:         """Aggregate gradients using secure aggregation."""


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\federated_learning\federated_coordinator.py:957:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    954:         return aggregated_gradients
    955:
    956:     async def _update_global_model(self, training_round: FederatedTrainingRound) -> None:
>>> 957:         """Update global model with aggregated gradients."""
    958:         logger.info("Updating global model")
    959:
    960:         if not training_round.aggregated_gradients:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\federated_learning\federated_coordinator.py:972:20
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    969:         # Update training round with new model state
    970:         training_round.global_model_state = self.global_model.state_dict()
    971:
>>> 972:         logger.info("Global model updated successfully")
    973:
    974:     async def _evaluate_round_results(self, training_round: FederatedTrainingRound) -> None:
    975:         """Evaluate results of training round."""


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\federated_learning\federated_coordinator.py:1013:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1010:         return random.uniform(0.1, 0.5)  # Mock loss value
    1011:
    1012:     def _update_contribution_scores(self, training_round: FederatedTrainingRound) -> None:
>>> 1013:         """Update participant contribution scores based on round performance."""
    1014:         for participant in training_round.participants:
    1015:             if participant.status == ParticipantStatus.COMPLETED:
    1016:                 # Positive contribution


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\federated_learning\federated_coordinator.py:1029:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1026:                 participant.participation_history.pop(0)
    1027:
    1028:     def _update_fl_statistics(self, training_round: FederatedTrainingRound) -> None:
>>> 1029:         """Update federated learning statistics."""
    1030:         self.fl_stats["rounds_completed"] += 1
    1031:         self.fl_stats["avg_round_time"] = (
    1032:             self.fl_stats["avg_round_time"] + training_round.metrics["round_duration"]


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\federated_learning\federated_coordinator.py:1138:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1135:         return aggregation_results
    1136:
    1137:     def _create_participant_clusters(self) -> dict[str, list[TrainingParticipant]]:
>>> 1138:         """Create participant clusters for hierarchical aggregation."""
    1139:         participants = list(self.available_participants.values())
    1140:         clusters = {}
    1141:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (41 calls)
File: packages\edge\legacy_src\federated_learning\federated_coordinator.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (32 calls)
File: packages\edge\legacy_src\federated_learning\federated_coordinator.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'torch' methods (7 calls)
File: packages\edge\legacy_src\federated_learning\federated_coordinator.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'time' methods (10 calls)
File: packages\edge\legacy_src\federated_learning\federated_coordinator.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

SEQUENTIAL_COUPLING: Sequential coupling detected: Function '__init__' is part of a sequence-dependent API
File: packages\edge\legacy_src\federated_learning\federated_coordinator.py:721:12
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    718:
    719:         # Simulate local dataset
    720:         class MockDataset(Dataset):
>>> 721:             def __init__(self, size=100) -> None:
    722:                 self.size = size
    723:
    724:             def __len__(self) -> int:


SEQUENTIAL_COUPLING: Sequential coupling detected: Function '_calculate_initial_contribution_score' is part of a sequence-dependent API
File: packages\edge\legacy_src\federated_learning\federated_coordinator.py:332:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    329:         # Evolution capacity (proxy for network stability and compute)
    330:         return not capabilities.evolution_capacity < min_resources["network_stability"]
    331:
>>> 332:     def _calculate_initial_contribution_score(self, capabilities: PeerCapabilities) -> float:
    333:         """Calculate initial contribution score for participant."""
    334:         score = 0.0
    335:


SEQUENTIAL_COUPLING: Sequential coupling detected: Function '_initialize_privacy_budgets' is part of a sequence-dependent API
File: packages\edge\legacy_src\federated_learning\federated_coordinator.py:358:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    355:
    356:         return max(0.1, min(1.0, score))
    357:
>>> 358:     def _initialize_privacy_budgets(self) -> None:
    359:         """Initialize privacy budgets for all participants."""
    360:         initial_budget = 10.0  # Total privacy budget
    361:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (48 total)
File: packages\edge\legacy_src\federated_learning\federated_coordinator.py:72:32
Recommendation: Replace magic numbers with named constants or enums
Code context:
     69:     local_data_size: int = 0
     70:     training_quality_score: float = 0.0
     71:     participation_history: list[bool] = field(default_factory=list)
>>>  72:     contribution_score: float = 0.5
     73:     privacy_budget_remaining: float = 1.0
     74:     status: ParticipantStatus = ParticipantStatus.INVITED
     75:     round_metrics: dict[str, float] = field(default_factory=dict)


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (48 total)
File: packages\edge\legacy_src\federated_learning\federated_coordinator.py:92:28
Recommendation: Replace magic numbers with named constants or enums
Code context:
     89:     start_time: float = field(default_factory=time.time)
     90:     end_time: float | None = None
     91:     target_participants: int = 10
>>>  92:     min_participants: int = 3
     93:     training_config: dict[str, Any] = field(default_factory=dict)
     94:     privacy_config: dict[str, Any] = field(default_factory=dict)
     95:     metrics: dict[str, float] = field(default_factory=dict)


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (48 total)
File: packages\edge\legacy_src\federated_learning\federated_coordinator.py:103:38
Recommendation: Replace magic numbers with named constants or enums
Code context:
    100:     """Configuration for federated learning system."""
    101:
    102:     # Participant selection
>>> 103:     min_participants_per_round: int = 3
    104:     max_participants_per_round: int = 20
    105:     participation_fraction: float = 0.3  # 30% of available devices
    106:     min_data_samples: int = 10


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (48 total)
File: packages\edge\legacy_src\federated_learning\federated_coordinator.py:104:38
Recommendation: Replace magic numbers with named constants or enums
Code context:
    101:
    102:     # Participant selection
    103:     min_participants_per_round: int = 3
>>> 104:     max_participants_per_round: int = 20
    105:     participation_fraction: float = 0.3  # 30% of available devices
    106:     min_data_samples: int = 10
    107:     min_device_resources: dict[str, float] = field(


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (48 total)
File: packages\edge\legacy_src\federated_learning\federated_coordinator.py:105:36
Recommendation: Replace magic numbers with named constants or enums
Code context:
    102:     # Participant selection
    103:     min_participants_per_round: int = 3
    104:     max_participants_per_round: int = 20
>>> 105:     participation_fraction: float = 0.3  # 30% of available devices
    106:     min_data_samples: int = 10
    107:     min_device_resources: dict[str, float] = field(
    108:         default_factory=lambda: {


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\federated_learning\test_fl_coordinator.py:2:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
      1: #!/usr/bin/env python3
>>>   2: """Test Distributed Federated Learning coordinator functionality.
      3:
      4: This script simulates a basic participant selection flow of the
      5: ``DistributedFederatedLearning`` class. It provides command line flags for


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\federated_learning\test_fl_coordinator.py:91:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     88:
     89:
     90: async def run_test(participants: int, dp_check: bool, efficiency: bool) -> dict[str, Any]:
>>>  91:     """Execute participant selection and return metrics."""
     92:     config = FederatedLearningConfig(
     93:         min_participants_per_round=1,
     94:         max_participants_per_round=participants,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\federated_learning\test_fl_coordinator.py:125:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    122:
    123:     result = {
    124:         "requested_participants": participants,
>>> 125:         "selected_participants": len(selected),
    126:         "selection_success": len(selected) >= 1,
    127:     }
    128:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\federated_learning\test_fl_coordinator.py:160:13
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    157:     parser.add_argument(
    158:         "--efficiency",
    159:         action="store_true",
>>> 160:         help="report runtime metrics for the selection phase",
    161:     )
    162:     parser.add_argument(
    163:         "--output",


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (11 total)
File: packages\edge\legacy_src\federated_learning\test_privacy_preservation.py:27:57
Recommendation: Replace magic numbers with named constants or enums
Code context:
     24: import torch
     25:
     26: if __package__ is None or __package__ == "":
>>>  27:     sys.path.append(str(Path(__file__).resolve().parents[3]))
     28:
     29:
     30: def _stub_module(name: str, **attrs: object) -> None:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (11 total)
File: packages\edge\legacy_src\federated_learning\test_privacy_preservation.py:69:22
Recommendation: Replace magic numbers with named constants or enums
Code context:
     66:     def __post_init__(self) -> None:
     67:         self.local_capabilities = PeerCapabilities(
     68:             device_id=self.node_id,
>>>  69:             cpu_cores=4,
     70:             ram_mb=4096,
     71:             battery_percent=100,
     72:             trust_score=0.9,


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (11 total)
File: packages\edge\legacy_src\federated_learning\test_privacy_preservation.py:70:19
Recommendation: Replace magic numbers with named constants or enums
Code context:
     67:         self.local_capabilities = PeerCapabilities(
     68:             device_id=self.node_id,
     69:             cpu_cores=4,
>>>  70:             ram_mb=4096,
     71:             battery_percent=100,
     72:             trust_score=0.9,
     73:             latency_ms=10,


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (11 total)
File: packages\edge\legacy_src\federated_learning\test_privacy_preservation.py:72:24
Recommendation: Replace magic numbers with named constants or enums
Code context:
     69:             cpu_cores=4,
     70:             ram_mb=4096,
     71:             battery_percent=100,
>>>  72:             trust_score=0.9,
     73:             latency_ms=10,
     74:             evolution_capacity=1.0,
     75:         )


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (11 total)
File: packages\edge\legacy_src\federated_learning\test_privacy_preservation.py:96:22
Recommendation: Replace magic numbers with named constants or enums
Code context:
     93:     for i in range(participants):
     94:         cap = PeerCapabilities(
     95:             device_id=f"device_{i}",
>>>  96:             cpu_cores=4,
     97:             ram_mb=4096,
     98:             battery_percent=90,
     99:             trust_score=0.9,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\twin_runtime\compressed_loader.py:6:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
      3:
      4:
      5: class CompressedModelLoader:
>>>   6:     """Reconstruct a model from multi-stage compressed weights."""
      7:
      8:     def __init__(self, model_cls, compressed_path: str, config: CompressionConfig | None = None) -> None:
      9:         self.model = model_cls()


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\twin_runtime\guard.py:27:13
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     24:             (r"delete\s+from", "sql_delete"),
     25:             (r"drop\s+table", "sql_drop"),
     26:             (r"insert\s+into", "sql_insert"),
>>>  27:             (r"select\s+.*from.*where\s+1=1", "sql_always_true"),
     28:             (r"<script.*?>", "script_tag"),
     29:             (r";\s*shutdown", "command_shutdown"),
     30:             (r"eval\(", "eval_call"),


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\twin_runtime\guard.py:146:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    143:
    144:
    145: def get_gate_instance():
>>> 146:     """Get or create gate instance."""
    147:     global _gate_instance
    148:     if _gate_instance is None:
    149:         _gate_instance = SecurityRiskGate()


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (6 calls)
File: packages\edge\legacy_src\twin_runtime\guard.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (14 total)
File: packages\edge\legacy_src\twin_runtime\guard.py:17:34
Recommendation: Replace magic numbers with named constants or enums
Code context:
     14:
     15:     def __init__(self) -> None:
     16:         # Risk thresholds
>>>  17:         self.low_risk_threshold = 0.3
     18:         self.high_risk_threshold = 0.8
     19:
     20:         # Dangerous patterns with names for logging


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (14 total)
File: packages\edge\legacy_src\twin_runtime\guard.py:18:35
Recommendation: Replace magic numbers with named constants or enums
Code context:
     15:     def __init__(self) -> None:
     16:         # Risk thresholds
     17:         self.low_risk_threshold = 0.3
>>>  18:         self.high_risk_threshold = 0.8
     19:
     20:         # Dangerous patterns with names for logging
     21:         self.dangerous_patterns: list[tuple[str, str]] = [


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (14 total)
File: packages\edge\legacy_src\twin_runtime\guard.py:98:23
Recommendation: Replace magic numbers with named constants or enums
Code context:
     95:
     96:         # Type-based risk
     97:         type_risks = {
>>>  98:             "command": 0.5,
     99:             "code": 0.4,
    100:             "file": 0.3,
    101:             "text": 0.1,


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (14 total)
File: packages\edge\legacy_src\twin_runtime\guard.py:99:20
Recommendation: Replace magic numbers with named constants or enums
Code context:
     96:         # Type-based risk
     97:         type_risks = {
     98:             "command": 0.5,
>>>  99:             "code": 0.4,
    100:             "file": 0.3,
    101:             "text": 0.1,
    102:             "query": 0.1,


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (14 total)
File: packages\edge\legacy_src\twin_runtime\guard.py:100:20
Recommendation: Replace magic numbers with named constants or enums
Code context:
     97:         type_risks = {
     98:             "command": 0.5,
     99:             "code": 0.4,
>>> 100:             "file": 0.3,
    101:             "text": 0.1,
    102:             "query": 0.1,
    103:         }


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\twin_runtime\runner.py:20:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     17:
     18:
     19: class TwinRuntimeChat:
>>>  20:     """Core chat functionality for digital twin interaction
     21:     Uses compressed models from our pipeline.
     22:     """
     23:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\twin_runtime\runner.py:60:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     57:             self._create_fallback_model()
     58:
     59:     def _create_fallback_model(self) -> None:
>>>  60:         """Create minimal working model."""
     61:         if nn is None:
     62:             logger.warning("Torch not available; cannot create fallback model")
     63:             self.model = None


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\twin_runtime\runner.py:62:27
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     59:     def _create_fallback_model(self) -> None:
     60:         """Create minimal working model."""
     61:         if nn is None:
>>>  62:             logger.warning("Torch not available; cannot create fallback model")
     63:             self.model = None
     64:             return
     65:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\twin_runtime\runner.py:191:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    188:
    189:
    190: def get_chat_instance():
>>> 191:     """Get or create chat instance."""
    192:     global _chat_instance
    193:     if _chat_instance is None:
    194:         _chat_instance = TwinRuntimeChat()


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (13 calls)
File: packages\edge\legacy_src\twin_runtime\runner.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (7 calls)
File: packages\edge\legacy_src\twin_runtime\runner.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'torch' methods (8 calls)
File: packages\edge\legacy_src\twin_runtime\runner.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\digital_twin\api\service.py:59:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     56:
     57:
     58: class MobileSyncRequest(BaseModel):
>>>  59:     """Base64 encoded payload from the mobile client."""
     60:
     61:     data: str
     62:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\digital_twin\api\service.py:82:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     79:
     80: @app.post("/twin/create")
     81: async def create_twin(user_id: str, profile: UserProfile) -> dict[str, Any]:
>>>  82:     """Create a new Digital Twin for a user."""
     83:     twin = DigitalTwin()
     84:     twin.students[user_id] = LearningProfile(**profile.dict())
     85:     service.twins[user_id] = twin


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'app' methods (7 calls)
File: packages\edge\legacy_src\digital_twin\api\service.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'service' methods (6 calls)
File: packages\edge\legacy_src\digital_twin\api\service.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'twin' methods (9 calls)
File: packages\edge\legacy_src\digital_twin\api\service.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\digital_twin\core\digital_twin.py:63:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     60:         self.shadow_simulator = ShadowSimulator()
     61:
     62:     def update_profile(self, profile: LearningProfile) -> None:
>>>  63:         """Add or update a learner profile."""
     64:         self.students[profile.student_id] = profile
     65:
     66:     def get_preferences(self, student_id: str) -> dict[str, Any]:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\digital_twin\core\profile_manager.py:9:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
      6:
      7:
      8: class ProfileManager:
>>>   9:     """Create and retrieve simple user profiles."""
     10:
     11:     def __init__(self) -> None:
     12:         self.profiles: dict[str, dict[str, Any]] = {}


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\digital_twin\core\profile_manager.py:15:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     12:         self.profiles: dict[str, dict[str, Any]] = {}
     13:
     14:     def create_profile(self, user_id: str) -> None:
>>>  15:         """Create an empty profile for ``user_id``."""
     16:         self.profiles[user_id] = {}
     17:
     18:     def get_profile(self, user_id: str) -> dict[str, Any] | None:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\digital_twin\engine\personalized_tutor.py:430:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    427:         target_concepts: list[str],
    428:         mode: TutoringMode,
    429:     ) -> TutoringStrategy:
>>> 430:         """Select optimal tutoring strategy for student."""
    431:         age = student_profile["age"]
    432:         learning_style = student_profile["learning_style"]
    433:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\digital_twin\engine\personalized_tutor.py:496:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    493:         student_profile: dict[str, Any],
    494:         strategy: TutoringStrategy,
    495:     ) -> list[LearningObjective]:
>>> 496:         """Create specific learning objectives for the session."""
    497:         objectives = []
    498:         knowledge_states = student_profile.get("knowledge_states", {})
    499:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\digital_twin\engine\personalized_tutor.py:584:25
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    581:                 "sports": "We'll use sports examples to make math come alive!",
    582:                 "art": "We'll explore the mathematical patterns in art and creativity!",
    583:                 "science": "We'll discover how math helps us understand the world around us!",
>>> 584:                 "music": "We'll see how math creates the rhythms and patterns in music!",
    585:                 "cooking": "We'll use cooking and baking to practice our math skills!",
    586:             }
    587:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\digital_twin\engine\personalized_tutor.py:736:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    733:         return analysis
    734:
    735:     def _update_engagement_score(self, session: TutoringSession, analysis: dict[str, Any]) -> float:
>>> 736:         """Update engagement score based on response analysis."""
    737:         current_engagement = session.engagement_score
    738:         learning_rate = 0.2
    739:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\digital_twin\engine\personalized_tutor.py:776:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    773:         return max(0.0, min(1.0, new_engagement))
    774:
    775:     def _update_learning_progress(self, session: TutoringSession, analysis: dict[str, Any]) -> float:
>>> 776:         """Update learning progress based on response analysis."""
    777:         current_progress = session.learning_progress
    778:
    779:         # Progress based on correctness


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\digital_twin\engine\personalized_tutor.py:889:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    886:         analysis: dict[str, Any],
    887:         session: TutoringSession,
    888:     ) -> InteractionType:
>>> 889:         """Select appropriate interaction type."""
    890:         # Get strategy interaction patterns
    891:         patterns = strategy.interaction_patterns
    892:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\digital_twin\engine\personalized_tutor.py:1137:29
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1134:             await parent_progress_tracker.update_student_progress(session.student_id, session_data)
    1135:
    1136:         except Exception as e:
>>> 1137:             logger.warning(f"Could not update parent tracker: {e}")
    1138:
    1139:         logger.info(f"Completed tutoring session {session_id} - Outcome: {session.session_outcome}")
    1140:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\digital_twin\engine\personalized_tutor.py:1174:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1171:         return recommendations
    1172:
    1173:     async def _update_student_adaptations(self, session: TutoringSession) -> None:
>>> 1174:         """Update student-specific adaptations based on session results."""
    1175:         student_id = session.student_id
    1176:         strategy_id = session.tutor_engine_id
    1177:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\digital_twin\engine\personalized_tutor.py:1213:22
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1210:             # This is simplified - would analyze actual response quality
    1211:             adaptations["preferred_interaction_types"][interaction_type].append(0.7)
    1212:
>>> 1213:         logger.info(f"Updated adaptations for student {student_id[:8]}")
    1214:
    1215:     def get_tutor_analytics(self) -> dict[str, Any]:
    1216:         """Get comprehensive tutoring analytics."""


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (21 calls)
File: packages\edge\legacy_src\digital_twin\engine\personalized_tutor.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (12 calls)
File: packages\edge\legacy_src\digital_twin\engine\personalized_tutor.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'datetime' methods (11 calls)
File: packages\edge\legacy_src\digital_twin\engine\personalized_tutor.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'random' methods (8 calls)
File: packages\edge\legacy_src\digital_twin\engine\personalized_tutor.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'analysis' methods (15 calls)
File: packages\edge\legacy_src\digital_twin\engine\personalized_tutor.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'recommendations' methods (11 calls)
File: packages\edge\legacy_src\digital_twin\engine\personalized_tutor.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (148 total)
File: packages\edge\legacy_src\digital_twin\engine\personalized_tutor.py:106:30
Recommendation: Replace magic numbers with named constants or enums
Code context:
    103:
    104:         # Real-time adaptation engine
    105:         self.adaptation_thresholds = {
>>> 106:             "low_engagement": 0.3,
    107:             "high_frustration": 0.7,
    108:             "mastery_achieved": 0.8,
    109:             "boredom_detected": 0.2,


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (148 total)
File: packages\edge\legacy_src\digital_twin\engine\personalized_tutor.py:107:32
Recommendation: Replace magic numbers with named constants or enums
Code context:
    104:         # Real-time adaptation engine
    105:         self.adaptation_thresholds = {
    106:             "low_engagement": 0.3,
>>> 107:             "high_frustration": 0.7,
    108:             "mastery_achieved": 0.8,
    109:             "boredom_detected": 0.2,
    110:             "confusion_detected": 0.6,


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (148 total)
File: packages\edge\legacy_src\digital_twin\engine\personalized_tutor.py:108:32
Recommendation: Replace magic numbers with named constants or enums
Code context:
    105:         self.adaptation_thresholds = {
    106:             "low_engagement": 0.3,
    107:             "high_frustration": 0.7,
>>> 108:             "mastery_achieved": 0.8,
    109:             "boredom_detected": 0.2,
    110:             "confusion_detected": 0.6,
    111:         }


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (148 total)
File: packages\edge\legacy_src\digital_twin\engine\personalized_tutor.py:109:32
Recommendation: Replace magic numbers with named constants or enums
Code context:
    106:             "low_engagement": 0.3,
    107:             "high_frustration": 0.7,
    108:             "mastery_achieved": 0.8,
>>> 109:             "boredom_detected": 0.2,
    110:             "confusion_detected": 0.6,
    111:         }
    112:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (148 total)
File: packages\edge\legacy_src\digital_twin\engine\personalized_tutor.py:110:34
Recommendation: Replace magic numbers with named constants or enums
Code context:
    107:             "high_frustration": 0.7,
    108:             "mastery_achieved": 0.8,
    109:             "boredom_detected": 0.2,
>>> 110:             "confusion_detected": 0.6,
    111:         }
    112:
    113:         # Content generation templates


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\digital_twin\monitoring\parent_tracker.py:198:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    195:
    196:             # Progress milestones table
    197:             cursor.execute(
>>> 198:                 """
    199:                 CREATE TABLE IF NOT EXISTS progress_milestones (
    200:                     milestone_id TEXT PRIMARY KEY,
    201:                     student_id TEXT NOT NULL,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\digital_twin\monitoring\parent_tracker.py:220:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    217:
    218:             # Learning alerts table
    219:             cursor.execute(
>>> 220:                 """
    221:                 CREATE TABLE IF NOT EXISTS learning_alerts (
    222:                     alert_id TEXT PRIMARY KEY,
    223:                     student_id TEXT NOT NULL,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\digital_twin\monitoring\parent_tracker.py:241:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    238:
    239:             # Weekly reports table
    240:             cursor.execute(
>>> 241:                 """
    242:                 CREATE TABLE IF NOT EXISTS weekly_reports (
    243:                     report_id TEXT PRIMARY KEY,
    244:                     student_id TEXT NOT NULL,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\digital_twin\monitoring\parent_tracker.py:255:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    252:
    253:             # Parent insights table
    254:             cursor.execute(
>>> 255:                 """
    256:                 CREATE TABLE IF NOT EXISTS parent_insights (
    257:                     insight_id TEXT PRIMARY KEY,
    258:                     student_id TEXT NOT NULL,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\digital_twin\monitoring\parent_tracker.py:274:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    271:
    272:             # Parent settings table
    273:             cursor.execute(
>>> 274:                 """
    275:                 CREATE TABLE IF NOT EXISTS parent_settings (
    276:                     student_id TEXT PRIMARY KEY,
    277:                     parent_email TEXT,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\digital_twin\monitoring\parent_tracker.py:290:27
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    287:             )
    288:
    289:             # Create indexes
>>> 290:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_milestones_student " "ON progress_milestones(student_id)")
    291:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_alerts_student " "ON learning_alerts(student_id)")
    292:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_reports_student " "ON weekly_reports(student_id)")
    293:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_insights_student " "ON parent_insights(student_id)")


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\digital_twin\monitoring\parent_tracker.py:291:27
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    288:
    289:             # Create indexes
    290:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_milestones_student " "ON progress_milestones(student_id)")
>>> 291:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_alerts_student " "ON learning_alerts(student_id)")
    292:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_reports_student " "ON weekly_reports(student_id)")
    293:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_insights_student " "ON parent_insights(student_id)")
    294:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_alerts_created " "ON learning_alerts(created_at)")


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\digital_twin\monitoring\parent_tracker.py:292:27
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    289:             # Create indexes
    290:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_milestones_student " "ON progress_milestones(student_id)")
    291:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_alerts_student " "ON learning_alerts(student_id)")
>>> 292:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_reports_student " "ON weekly_reports(student_id)")
    293:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_insights_student " "ON parent_insights(student_id)")
    294:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_alerts_created " "ON learning_alerts(created_at)")
    295:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\digital_twin\monitoring\parent_tracker.py:293:27
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    290:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_milestones_student " "ON progress_milestones(student_id)")
    291:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_alerts_student " "ON learning_alerts(student_id)")
    292:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_reports_student " "ON weekly_reports(student_id)")
>>> 293:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_insights_student " "ON parent_insights(student_id)")
    294:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_alerts_created " "ON learning_alerts(created_at)")
    295:
    296:             conn.commit()


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\digital_twin\monitoring\parent_tracker.py:294:27
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    291:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_alerts_student " "ON learning_alerts(student_id)")
    292:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_reports_student " "ON weekly_reports(student_id)")
    293:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_insights_student " "ON parent_insights(student_id)")
>>> 294:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_alerts_created " "ON learning_alerts(created_at)")
    295:
    296:             conn.commit()
    297:             conn.close()


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\digital_twin\monitoring\parent_tracker.py:358:34
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    355:             level=AlertLevel.INFO,
    356:             title="Welcome to AI Village Progress Tracking!",
    357:             message=(
>>> 358:                 f"Hi {parent_name}! You'll now receive regular updates about "
    359:                 "your child's learning progress, achievements, and areas where "
    360:                 "they might need support."
    361:             ),


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\digital_twin\monitoring\parent_tracker.py:484:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    481:         return milestones
    482:
    483:     async def update_student_progress(self, student_id: str, session_data: dict[str, Any]) -> None:
>>> 484:         """Update student progress and check for alerts/milestones."""
    485:         try:
    486:             # Update milestone progress
    487:             await self._update_milestone_progress(student_id, session_data)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\digital_twin\monitoring\parent_tracker.py:504:20
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    501:             # Log progress update
    502:             wandb.log(
    503:                 {
>>> 504:                     "parent_tracker/progress_updated": True,
    505:                     "parent_tracker/student_id": student_id,
    506:                     "parent_tracker/session_engagement": (session_data.get("engagement_score", 0)),
    507:                     "parent_tracker/session_accuracy": (session_data.get("accuracy", 0)),


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\digital_twin\monitoring\parent_tracker.py:516:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    513:             logger.exception("Error updating student progress: %s", e)
    514:
    515:     async def _update_milestone_progress(self, student_id: str, session_data: dict[str, Any]) -> None:
>>> 516:         """Update milestone progress based on session data."""
    517:         concepts_practiced = session_data.get("concepts_covered", [])
    518:         accuracy = session_data.get("accuracy", 0.0)
    519:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\digital_twin\monitoring\parent_tracker.py:638:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    635:         return []
    636:
    637:     def _calculate_improvement_trend(self, sessions: list[dict[str, Any]]) -> float:
>>> 638:         """Calculate improvement trend from session data."""
    639:         if len(sessions) < 2:
    640:             return 0.0
    641:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\digital_twin\monitoring\parent_tracker.py:661:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    658:         return slope
    659:
    660:     def _update_learning_velocity(self, student_id: str, session_data: dict[str, Any]) -> None:
>>> 661:         """Update learning velocity tracking."""
    662:         concepts_learned = len(session_data.get("concepts_covered", []))
    663:         session_time = session_data.get("duration_minutes", 0)
    664:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\digital_twin\monitoring\parent_tracker.py:689:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    686:             )
    687:
    688:     def _update_engagement_patterns(self, student_id: str, session_data: dict[str, Any]) -> None:
>>> 689:         """Update engagement pattern analysis."""
    690:         session_start = session_data.get("start_time")
    691:         if session_start:
    692:             try:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\digital_twin\monitoring\parent_tracker.py:807:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    804:         related_concepts: list[str] | None = None,
    805:         expires_hours: int = 168,  # Default 7 days
    806:     ) -> str:
>>> 807:         """Create alert for parents."""
    808:         message_to_hash = f"{student_id}_{title}_{datetime.now().isoformat()}"
    809:         alert_id = f"alert_{hashlib.md5(message_to_hash.encode()).hexdigest()[:12]}"
    810:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\digital_twin\monitoring\parent_tracker.py:839:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    836:         # Log to W&B
    837:         wandb.log(
    838:             {
>>> 839:                 "parent_tracker/alert_created": True,
    840:                 "parent_tracker/alert_type": alert_type,
    841:                 "parent_tracker/alert_level": level.value,
    842:                 "parent_tracker/action_required": action_required,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\digital_twin\monitoring\parent_tracker.py:847:20
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    844:             }
    845:         )
    846:
>>> 847:         logger.info("Created %s alert for student %s: %s", level.value, student_id[:8], title)
    848:
    849:         return alert_id
    850:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\digital_twin\monitoring\parent_tracker.py:952:13
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    949:                     '''
    950:                 if alert.suggested_actions
    951:                 else ""
>>> 952:             }
    953:
    954:                     <div style="text-align: center; margin: 30px 0;">
    955:                         <a href="#" style="background-color: #3498db; color: white; \


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\digital_twin\monitoring\parent_tracker.py:1266:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1263:             self.parent_alerts[student_id] = active_alerts
    1264:
    1265:     async def _update_progress_trends(self) -> None:
>>> 1266:         """Update long-term progress trends."""
    1267:         for student_id in self.parent_settings:
    1268:             # Update various trend analyses
    1269:             self._calculate_learning_trends(student_id)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\digital_twin\monitoring\parent_tracker.py:1291:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1288:             cursor = conn.cursor()
    1289:
    1290:             cursor.execute(
>>> 1291:                 """
    1292:                 INSERT OR REPLACE INTO progress_milestones
    1293:                 VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    1294:             """,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\digital_twin\monitoring\parent_tracker.py:1326:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1323:             cursor = conn.cursor()
    1324:
    1325:             cursor.execute(
>>> 1326:                 """
    1327:                 INSERT INTO learning_alerts VALUES
    1328:                 (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    1329:                 """,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\digital_twin\monitoring\parent_tracker.py:1360:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1357:             cursor = conn.cursor()
    1358:
    1359:             cursor.execute(
>>> 1360:                 """
    1361:                 INSERT INTO weekly_reports VALUES (?, ?, ?, ?, ?, ?)
    1362:             """,
    1363:                 (


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\digital_twin\monitoring\parent_tracker.py:1386:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1383:             cursor = conn.cursor()
    1384:
    1385:             cursor.execute(
>>> 1386:                 """
    1387:                 INSERT INTO parent_insights VALUES
    1388:                 (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    1389:                 """,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\digital_twin\monitoring\parent_tracker.py:1418:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1415:             cursor = conn.cursor()
    1416:
    1417:             cursor.execute(
>>> 1418:                 """
    1419:                 INSERT OR REPLACE INTO parent_settings VALUES
    1420:                 (?, ?, ?, ?, ?, ?, ?, ?, ?)
    1421:                 """,


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (39 calls)
File: packages\edge\legacy_src\digital_twin\monitoring\parent_tracker.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (24 calls)
File: packages\edge\legacy_src\digital_twin\monitoring\parent_tracker.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'sqlite3' methods (6 calls)
File: packages\edge\legacy_src\digital_twin\monitoring\parent_tracker.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'conn' methods (18 calls)
File: packages\edge\legacy_src\digital_twin\monitoring\parent_tracker.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'cursor' methods (15 calls)
File: packages\edge\legacy_src\digital_twin\monitoring\parent_tracker.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'datetime' methods (32 calls)
File: packages\edge\legacy_src\digital_twin\monitoring\parent_tracker.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'session_data' methods (12 calls)
File: packages\edge\legacy_src\digital_twin\monitoring\parent_tracker.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'np' methods (12 calls)
File: packages\edge\legacy_src\digital_twin\monitoring\parent_tracker.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 's' methods (9 calls)
File: packages\edge\legacy_src\digital_twin\monitoring\parent_tracker.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'recommendations' methods (6 calls)
File: packages\edge\legacy_src\digital_twin\monitoring\parent_tracker.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'json' methods (7 calls)
File: packages\edge\legacy_src\digital_twin\monitoring\parent_tracker.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

SEQUENTIAL_COUPLING: Sequential coupling detected: Function '__init__' is part of a sequence-dependent API
File: packages\edge\legacy_src\digital_twin\monitoring\parent_tracker.py:120:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    117: class ParentProgressTracker:
    118:     """Comprehensive progress tracking and parent communication system."""
    119:
>>> 120:     def __init__(self, project_name: str = "aivillage-parent-tracker") -> None:
    121:         """Initialize ParentProgressTracker."""
    122:         self.project_name = project_name
    123:         self.student_progress = {}  # student_id -> progress data


SEQUENTIAL_COUPLING: Sequential coupling detected: Function 'initialize_wandb_tracking' is part of a sequence-dependent API
File: packages\edge\legacy_src\digital_twin\monitoring\parent_tracker.py:161:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    158:
    159:         logger.info("Parent Progress Tracker initialized")
    160:
>>> 161:     def initialize_wandb_tracking(self) -> None:
    162:         """Initialize W&B tracking for parent monitoring."""
    163:         try:
    164:             wandb.init(


SEQUENTIAL_COUPLING: Sequential coupling detected: Function 'init_database' is part of a sequence-dependent API
File: packages\edge\legacy_src\digital_twin\monitoring\parent_tracker.py:190:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    187:         except Exception as e:
    188:             logger.exception("Failed to initialize W&B tracking: %s", e)
    189:
>>> 190:     def init_database(self) -> None:
    191:         """Initialize database for parent tracking data."""
    192:         try:
    193:             conn = sqlite3.connect(self.db_path)


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (76 total)
File: packages\edge\legacy_src\digital_twin\monitoring\parent_tracker.py:141:25
Recommendation: Replace magic numbers with named constants or enums
Code context:
    138:         # Communication channels
    139:         self.email_config = {
    140:             "smtp_server": "smtp.gmail.com",
>>> 141:             "smtp_port": 587,
    142:             "username": "",  # Would be configured
    143:             "password": "",  # Would be configured securely
    144:         }


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (76 total)
File: packages\edge\legacy_src\digital_twin\monitoring\parent_tracker.py:322:36
Recommendation: Replace magic numbers with named constants or enums
Code context:
    319:                 "celebration_alerts": True,
    320:                 "study_reminders": False,
    321:                 "alert_quiet_hours": {"start": "22:00", "end": "07:00"},
>>> 322:                 "max_daily_alerts": 5,
    323:             }
    324:
    325:         parent_settings = {


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (76 total)
File: packages\edge\legacy_src\digital_twin\monitoring\parent_tracker.py:378:84
Recommendation: Replace magic numbers with named constants or enums
Code context:
    375:             }
    376:         )
    377:
>>> 378:         logger.info("Registered parent %s for student %s", parent_name, student_id[:8])
    379:
    380:         return True
    381:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (76 total)
File: packages\edge\legacy_src\digital_twin\monitoring\parent_tracker.py:402:32
Recommendation: Replace magic numbers with named constants or enums
Code context:
    399:                 logger.info(
    400:                     "Initialized %d milestones for student %s",
    401:                     len(milestones),
>>> 402:                     student_id[:8],
    403:                 )
    404:
    405:         except Exception as e:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (76 total)
File: packages\edge\legacy_src\digital_twin\monitoring\parent_tracker.py:415:61
Recommendation: Replace magic numbers with named constants or enums
Code context:
    412:         # Grade-specific mathematical milestones
    413:         if grade_level <= 2:
    414:             milestone_concepts = [
>>> 415:                 ("counting", "Count to 100 with confidence", 0.8, "critical"),
    416:                 ("addition", "Add single-digit numbers fluently", 0.8, "critical"),
    417:                 (
    418:                     "subtraction",


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\digital_twin\security\preference_vault.py:1:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
>>>   1: """Encrypted preference loader for the digital twin.
      2:
      3: This module provides a tiny preference vault used by the twin runtime.  It
      4: loads a single encrypted JSON file from the user's home directory and decrypts


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\digital_twin\security\preference_vault.py:26:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     23:
     24:
     25: class PreferenceVault:
>>>  26:     """Load encrypted user preferences.
     27:
     28:     Parameters are intentionally minimal; the vault only knows how to locate a
     29:     single encrypted JSON file and decrypt it with a key from the environment.


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\digital_twin\security\secure_preference_vault.py:240:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    237:
    238:             # Preferences table
    239:             cursor.execute(
>>> 240:                 """
    241:                 CREATE TABLE IF NOT EXISTS secure_preferences (
    242:                     preference_id TEXT PRIMARY KEY,
    243:                     student_id TEXT NOT NULL,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\digital_twin\security\secure_preference_vault.py:260:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    257:
    258:             # Access tokens table
    259:             cursor.execute(
>>> 260:                 """
    261:                 CREATE TABLE IF NOT EXISTS access_tokens (
    262:                     token_id TEXT PRIMARY KEY,
    263:                     student_id TEXT NOT NULL,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\digital_twin\security\secure_preference_vault.py:276:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    273:
    274:             # Audit logs table
    275:             cursor.execute(
>>> 276:                 """
    277:                 CREATE TABLE IF NOT EXISTS vault_audit_logs (
    278:                     log_id TEXT PRIMARY KEY,
    279:                     student_id TEXT NOT NULL,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\digital_twin\security\secure_preference_vault.py:294:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    291:
    292:             # Security events table
    293:             cursor.execute(
>>> 294:                 """
    295:                 CREATE TABLE IF NOT EXISTS security_events (
    296:                     event_id TEXT PRIMARY KEY,
    297:                     event_type TEXT NOT NULL,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\digital_twin\security\secure_preference_vault.py:310:27
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    307:             )
    308:
    309:             # Create indexes for performance
>>> 310:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_prefs_student ON secure_preferences(student_id)")
    311:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_tokens_student ON access_tokens(student_id)")
    312:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_audit_student ON vault_audit_logs(student_id)")
    313:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_audit_timestamp ON vault_audit_logs(timestamp)")


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\digital_twin\security\secure_preference_vault.py:311:27
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    308:
    309:             # Create indexes for performance
    310:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_prefs_student ON secure_preferences(student_id)")
>>> 311:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_tokens_student ON access_tokens(student_id)")
    312:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_audit_student ON vault_audit_logs(student_id)")
    313:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_audit_timestamp ON vault_audit_logs(timestamp)")
    314:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\digital_twin\security\secure_preference_vault.py:312:27
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    309:             # Create indexes for performance
    310:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_prefs_student ON secure_preferences(student_id)")
    311:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_tokens_student ON access_tokens(student_id)")
>>> 312:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_audit_student ON vault_audit_logs(student_id)")
    313:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_audit_timestamp ON vault_audit_logs(timestamp)")
    314:
    315:             conn.commit()


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\digital_twin\security\secure_preference_vault.py:313:27
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    310:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_prefs_student ON secure_preferences(student_id)")
    311:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_tokens_student ON access_tokens(student_id)")
    312:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_audit_student ON vault_audit_logs(student_id)")
>>> 313:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_audit_timestamp ON vault_audit_logs(timestamp)")
    314:
    315:             conn.commit()
    316:             conn.close()


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\digital_twin\security\secure_preference_vault.py:560:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    557:         new_value: Any,
    558:         accessor_token: str | None = None,
    559:     ) -> bool:
>>> 560:         """Update existing preference with access control."""
    561:         # Validate access
    562:         if not await self._validate_access(student_id, "write", accessor_token):
    563:             await self._log_security_event("unauthorized_update_attempt", student_id, accessor_token)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\digital_twin\security\secure_preference_vault.py:563:43
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    560:         """Update existing preference with access control."""
    561:         # Validate access
    562:         if not await self._validate_access(student_id, "write", accessor_token):
>>> 563:             await self._log_security_event("unauthorized_update_attempt", student_id, accessor_token)
    564:             msg = "Unauthorized access to preference vault"
    565:             raise PermissionError(msg)
    566:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\digital_twin\security\secure_preference_vault.py:617:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    614:             )
    615:
    616:             logger.info(
>>> 617:                 "Updated preference %s for student %s",
    618:                 preference_id[:8],
    619:                 student_id[:8],
    620:             )


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\digital_twin\security\secure_preference_vault.py:624:29
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    621:             return True
    622:
    623:         except Exception as e:
>>> 624:             logger.exception("Failed to update preference: %s", e)
    625:             return False
    626:
    627:     async def delete_preference(self, student_id: str, preference_id: str, accessor_token: str | None = None) -> bool:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\digital_twin\security\secure_preference_vault.py:628:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    625:             return False
    626:
    627:     async def delete_preference(self, student_id: str, preference_id: str, accessor_token: str | None = None) -> bool:
>>> 628:         """Delete preference with access control."""
    629:         # Validate access
    630:         if not await self._validate_access(student_id, "delete", accessor_token):
    631:             await self._log_security_event("unauthorized_delete_attempt", student_id, accessor_token)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\digital_twin\security\secure_preference_vault.py:631:43
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    628:         """Delete preference with access control."""
    629:         # Validate access
    630:         if not await self._validate_access(student_id, "delete", accessor_token):
>>> 631:             await self._log_security_event("unauthorized_delete_attempt", student_id, accessor_token)
    632:             msg = "Unauthorized access to preference vault"
    633:             raise PermissionError(msg)
    634:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\digital_twin\security\secure_preference_vault.py:654:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    651:             conn = sqlite3.connect(str(self.db_path))
    652:             cursor = conn.cursor()
    653:             cursor.execute(
>>> 654:                 "DELETE FROM secure_preferences WHERE preference_id = ?",
    655:                 (preference_id,),
    656:             )
    657:             conn.commit()


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\digital_twin\security\secure_preference_vault.py:671:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    668:             )
    669:
    670:             logger.info(
>>> 671:                 "Deleted preference %s for student %s",
    672:                 preference_id[:8],
    673:                 student_id[:8],
    674:             )


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\digital_twin\security\secure_preference_vault.py:678:29
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    675:             return True
    676:
    677:         except Exception as e:
>>> 678:             logger.exception("Failed to delete preference: %s", e)
    679:             return False
    680:
    681:     async def create_access_token(


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\digital_twin\security\secure_preference_vault.py:688:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    685:         issuer: str,
    686:         expiry_hours: int = 24,
    687:     ) -> str:
>>> 688:         """Create secure access token."""
    689:         token_id = self._generate_secure_id()
    690:
    691:         expires_at = (datetime.now(UTC) + timedelta(hours=expiry_hours)).isoformat()


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\digital_twin\security\secure_preference_vault.py:723:20
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    720:             },
    721:         )
    722:
>>> 723:         logger.info("Created access token %s for student %s", token_id[:8], student_id[:8])
    724:
    725:         return token_id
    726:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\digital_twin\security\secure_preference_vault.py:848:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    845:         details: dict[str, Any],
    846:         ip_address: str | None = None,
    847:     ) -> None:
>>> 848:         """Create audit log entry."""
    849:         log_id = self._generate_secure_id()
    850:
    851:         audit_log = VaultAuditLog(


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\digital_twin\security\secure_preference_vault.py:910:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    907:             cursor = conn.cursor()
    908:
    909:             cursor.execute(
>>> 910:                 """
    911:                 INSERT OR REPLACE INTO secure_preferences
    912:                 (preference_id, student_id, category, key_name, encrypted_data, value_type,
    913:                  sensitivity_level, access_permissions, created_at, last_modified, expiry_date, checksum)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\digital_twin\security\secure_preference_vault.py:953:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    950:             cursor = conn.cursor()
    951:
    952:             cursor.execute(
>>> 953:                 """
    954:                 INSERT OR REPLACE INTO access_tokens
    955:                 (token_id, student_id, encrypted_permissions, issued_at, expires_at, issuer, revoked, checksum)
    956:                 VALUES (?, ?, ?, ?, ?, ?, ?, ?)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\digital_twin\security\secure_preference_vault.py:991:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    988:             cursor = conn.cursor()
    989:
    990:             cursor.execute(
>>> 991:                 """
    992:                 INSERT INTO vault_audit_logs
    993:                 (log_id, student_id, action, preference_id, accessor, timestamp, ip_address, success, encrypted_details, checksum)
    994:                 VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (46 calls)
File: packages\edge\legacy_src\digital_twin\security\secure_preference_vault.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (31 calls)
File: packages\edge\legacy_src\digital_twin\security\secure_preference_vault.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'f' methods (6 calls)
File: packages\edge\legacy_src\digital_twin\security\secure_preference_vault.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'conn' methods (15 calls)
File: packages\edge\legacy_src\digital_twin\security\secure_preference_vault.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'cursor' methods (12 calls)
File: packages\edge\legacy_src\digital_twin\security\secure_preference_vault.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'json' methods (10 calls)
File: packages\edge\legacy_src\digital_twin\security\secure_preference_vault.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'padding' methods (6 calls)
File: packages\edge\legacy_src\digital_twin\security\secure_preference_vault.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'hashes' methods (6 calls)
File: packages\edge\legacy_src\digital_twin\security\secure_preference_vault.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'datetime' methods (23 calls)
File: packages\edge\legacy_src\digital_twin\security\secure_preference_vault.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

SEQUENTIAL_COUPLING: Sequential coupling detected: Function '__init__' is part of a sequence-dependent API
File: packages\edge\legacy_src\digital_twin\security\secure_preference_vault.py:75:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
     72: class SecurePreferenceVault:
     73:     """Ultra-secure preference storage with military-grade encryption."""
     74:
>>>  75:     def __init__(self, project_name: str = "aivillage-security") -> None:
     76:         self.project_name = project_name
     77:         self.vault_path = Path("vault")
     78:         self.vault_path.mkdir(exist_ok=True)


SEQUENTIAL_COUPLING: Sequential coupling detected: Function 'initialize_wandb_tracking' is part of a sequence-dependent API
File: packages\edge\legacy_src\digital_twin\security\secure_preference_vault.py:129:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    126:
    127:         logger.info("Secure Preference Vault initialized with military-grade encryption")
    128:
>>> 129:     def initialize_wandb_tracking(self) -> None:
    130:         """Initialize W&B tracking with privacy protection."""
    131:         try:
    132:             wandb.init(


SEQUENTIAL_COUPLING: Sequential coupling detected: Function 'init_secure_database' is part of a sequence-dependent API
File: packages\edge\legacy_src\digital_twin\security\secure_preference_vault.py:231:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    228:
    229:         return private_key, public_key
    230:
>>> 231:     def init_secure_database(self) -> None:
    232:         """Initialize encrypted SQLite database."""
    233:         try:
    234:             # Enable encryption at database level (if supported)


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (29 total)
File: packages\edge\legacy_src\digital_twin\security\secure_preference_vault.py:94:35
Recommendation: Replace magic numbers with named constants or enums
Code context:
     91:
     92:         # Security settings
     93:         self.security_config = {
>>>  94:             "max_failed_attempts": 3,
     95:             "lockout_duration_minutes": 15,
     96:             "token_expiry_hours": 24,
     97:             "audit_retention_days": 90,


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (29 total)
File: packages\edge\legacy_src\digital_twin\security\secure_preference_vault.py:95:40
Recommendation: Replace magic numbers with named constants or enums
Code context:
     92:         # Security settings
     93:         self.security_config = {
     94:             "max_failed_attempts": 3,
>>>  95:             "lockout_duration_minutes": 15,
     96:             "token_expiry_hours": 24,
     97:             "audit_retention_days": 90,
     98:             "encryption_rotation_days": 30,


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (29 total)
File: packages\edge\legacy_src\digital_twin\security\secure_preference_vault.py:96:34
Recommendation: Replace magic numbers with named constants or enums
Code context:
     93:         self.security_config = {
     94:             "max_failed_attempts": 3,
     95:             "lockout_duration_minutes": 15,
>>>  96:             "token_expiry_hours": 24,
     97:             "audit_retention_days": 90,
     98:             "encryption_rotation_days": 30,
     99:             "require_2fa_for_sensitive": True,


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (29 total)
File: packages\edge\legacy_src\digital_twin\security\secure_preference_vault.py:97:36
Recommendation: Replace magic numbers with named constants or enums
Code context:
     94:             "max_failed_attempts": 3,
     95:             "lockout_duration_minutes": 15,
     96:             "token_expiry_hours": 24,
>>>  97:             "audit_retention_days": 90,
     98:             "encryption_rotation_days": 30,
     99:             "require_2fa_for_sensitive": True,
    100:             "data_at_rest_encryption": True,


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (29 total)
File: packages\edge\legacy_src\digital_twin\security\secure_preference_vault.py:98:40
Recommendation: Replace magic numbers with named constants or enums
Code context:
     95:             "lockout_duration_minutes": 15,
     96:             "token_expiry_hours": 24,
     97:             "audit_retention_days": 90,
>>>  98:             "encryption_rotation_days": 30,
     99:             "require_2fa_for_sensitive": True,
    100:             "data_at_rest_encryption": True,
    101:             "zero_knowledge_proof": True,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\digital_twin\security\shield_validator.py:199:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    196:
    197:             # Validation results table
    198:             cursor.execute(
>>> 199:                 """
    200:                 CREATE TABLE IF NOT EXISTS validation_results (
    201:                     validation_id TEXT PRIMARY KEY,
    202:                     content_hash TEXT NOT NULL,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\digital_twin\security\shield_validator.py:220:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    217:
    218:             # Validation rules table
    219:             cursor.execute(
>>> 220:                 """
    221:                 CREATE TABLE IF NOT EXISTS validation_rules (
    222:                     rule_id TEXT PRIMARY KEY,
    223:                     category TEXT NOT NULL,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\digital_twin\security\shield_validator.py:236:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    233:
    234:             # Shield metrics table
    235:             cursor.execute(
>>> 236:                 """
    237:                 CREATE TABLE IF NOT EXISTS shield_metrics (
    238:                     metric_date TEXT PRIMARY KEY,
    239:                     total_validations INTEGER,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\digital_twin\security\shield_validator.py:249:27
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    246:             )
    247:
    248:             # Create indexes
>>> 249:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_validation_student ON validation_results(student_id)")
    250:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_validation_timestamp ON validation_results(timestamp)")
    251:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_validation_passed ON validation_results(passed)")
    252:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\digital_twin\security\shield_validator.py:250:27
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    247:
    248:             # Create indexes
    249:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_validation_student ON validation_results(student_id)")
>>> 250:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_validation_timestamp ON validation_results(timestamp)")
    251:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_validation_passed ON validation_results(passed)")
    252:
    253:             conn.commit()


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\digital_twin\security\shield_validator.py:251:27
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    248:             # Create indexes
    249:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_validation_student ON validation_results(student_id)")
    250:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_validation_timestamp ON validation_results(timestamp)")
>>> 251:             cursor.execute("CREATE INDEX IF NOT EXISTS idx_validation_passed ON validation_results(passed)")
    252:
    253:             conn.commit()
    254:             conn.close()


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\digital_twin\security\shield_validator.py:333:24
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    330:                 category=ValidationCategory.PRIVACY,
    331:                 severity=ValidationSeverity.CRITICAL,
    332:                 description="Detect personal information requests",
>>> 333:                 pattern=r"(what.*your.*(name|address|phone|email|school))|(tell.*me.*(where.*live|your.*address))",
    334:                 keywords=[
    335:                     "full name",
    336:                     "home address",


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\digital_twin\security\shield_validator.py:413:28
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    410:                 rule_id="comp_001",
    411:                 category=ValidationCategory.COMPLIANCE,
    412:                 severity=ValidationSeverity.CRITICAL,
>>> 413:                 description="COPPA compliance - no personal data collection from under 13",
    414:                 age_specific=True,
    415:                 min_age=0,
    416:                 max_age=12,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\digital_twin\security\shield_validator.py:1036:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1033:             cursor = conn.cursor()
    1034:
    1035:             cursor.execute(
>>> 1036:                 """
    1037:                 INSERT INTO validation_results
    1038:                 (validation_id, content_hash, student_id, content_type, timestamp, passed,
    1039:                  violations, warnings, safety_score, educational_value, age_appropriateness,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\digital_twin\security\shield_validator.py:1067:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1064:             logger.exception(f"Failed to save validation result: {e}")
    1065:
    1066:     def _update_metrics(self, result: ValidationResult) -> None:
>>> 1067:         """Update shield metrics."""
    1068:         self.metrics.total_validations += 1
    1069:
    1070:         if not result.passed:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\digital_twin\security\shield_validator.py:1095:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1092:             self.metrics.common_violations[violation.get("rule_id", "unknown")] += 1
    1093:
    1094:     async def process_validation_queue(self) -> None:
>>> 1095:         """Process validation requests from queue."""
    1096:         while True:
    1097:             try:
    1098:                 # Get validation request from queue


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (21 calls)
File: packages\edge\legacy_src\digital_twin\security\shield_validator.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (22 calls)
File: packages\edge\legacy_src\digital_twin\security\shield_validator.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'asyncio' methods (8 calls)
File: packages\edge\legacy_src\digital_twin\security\shield_validator.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'conn' methods (6 calls)
File: packages\edge\legacy_src\digital_twin\security\shield_validator.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'cursor' methods (7 calls)
File: packages\edge\legacy_src\digital_twin\security\shield_validator.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'content' methods (14 calls)
File: packages\edge\legacy_src\digital_twin\security\shield_validator.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'datetime' methods (6 calls)
File: packages\edge\legacy_src\digital_twin\security\shield_validator.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'violations' methods (8 calls)
File: packages\edge\legacy_src\digital_twin\security\shield_validator.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'warnings' methods (10 calls)
File: packages\edge\legacy_src\digital_twin\security\shield_validator.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'np' methods (7 calls)
File: packages\edge\legacy_src\digital_twin\security\shield_validator.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'recommendations' methods (7 calls)
File: packages\edge\legacy_src\digital_twin\security\shield_validator.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

SEQUENTIAL_COUPLING: Sequential coupling detected: Function '__init__' is part of a sequence-dependent API
File: packages\edge\legacy_src\digital_twin\security\shield_validator.py:102:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
     99: class ShieldValidator:
    100:     """Comprehensive AI safety and content validation system."""
    101:
>>> 102:     def __init__(self, project_name: str = "aivillage-shield") -> None:
    103:         self.project_name = project_name
    104:         self.validation_rules = {}
    105:         self.validation_history = []


SEQUENTIAL_COUPLING: Sequential coupling detected: Function 'initialize_wandb_tracking' is part of a sequence-dependent API
File: packages\edge\legacy_src\digital_twin\security\shield_validator.py:164:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    161:             # No event loop available - shield system can be initialized later
    162:             logger.info("No event loop available, shield system can be initialized manually")
    163:
>>> 164:     def initialize_wandb_tracking(self) -> None:
    165:         """Initialize W&B tracking for Shield validation."""
    166:         try:
    167:             wandb.init(


SEQUENTIAL_COUPLING: Sequential coupling detected: Function 'init_database' is part of a sequence-dependent API
File: packages\edge\legacy_src\digital_twin\security\shield_validator.py:191:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    188:         except Exception as e:
    189:             logger.exception(f"Failed to initialize W&B tracking: {e}")
    190:
>>> 191:     def init_database(self) -> None:
    192:         """Initialize database for validation logs."""
    193:         try:
    194:             conn = sqlite3.connect(self.db_path)


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (70 total)
File: packages\edge\legacy_src\digital_twin\security\shield_validator.py:61:19
Recommendation: Replace magic numbers with named constants or enums
Code context:
     58:     ml_classifier: str | None = None  # ML model for validation
     59:     age_specific: bool = False
     60:     min_age: int = 0
>>>  61:     max_age: int = 18
     62:     enabled: bool = True
     63:
     64:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (70 total)
File: packages\edge\legacy_src\digital_twin\security\shield_validator.py:124:16
Recommendation: Replace magic numbers with named constants or enums
Code context:
    121:
    122:         # Age-specific content guidelines
    123:         self.age_guidelines = {
>>> 124:             (0, 5): {
    125:                 "complexity": "very_simple",
    126:                 "topics": ["basic_counting", "colors", "shapes"],
    127:             },


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (70 total)
File: packages\edge\legacy_src\digital_twin\security\shield_validator.py:128:13
Recommendation: Replace magic numbers with named constants or enums
Code context:
    125:                 "complexity": "very_simple",
    126:                 "topics": ["basic_counting", "colors", "shapes"],
    127:             },
>>> 128:             (6, 8): {
    129:                 "complexity": "simple",
    130:                 "topics": ["basic_math", "reading", "nature"],
    131:             },


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (70 total)
File: packages\edge\legacy_src\digital_twin\security\shield_validator.py:128:16
Recommendation: Replace magic numbers with named constants or enums
Code context:
    125:                 "complexity": "very_simple",
    126:                 "topics": ["basic_counting", "colors", "shapes"],
    127:             },
>>> 128:             (6, 8): {
    129:                 "complexity": "simple",
    130:                 "topics": ["basic_math", "reading", "nature"],
    131:             },


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (70 total)
File: packages\edge\legacy_src\digital_twin\security\shield_validator.py:132:13
Recommendation: Replace magic numbers with named constants or enums
Code context:
    129:                 "complexity": "simple",
    130:                 "topics": ["basic_math", "reading", "nature"],
    131:             },
>>> 132:             (9, 11): {
    133:                 "complexity": "moderate",
    134:                 "topics": ["multiplication", "science", "history"],
    135:             },


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\federation\core\federation_manager.py:1:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
>>>   1: """Federation Manager - Builds upon existing dual-path implementation
      2:
      3: Extends the existing BitChat/Betanet dual-path transport to create a full
      4: federated network with device roles, multi-protocol support, and VPN-like


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\federation\core\federation_manager.py:266:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    263:         request_data: dict[str, Any],
    264:         privacy_level: int = PrivacyLevel.PRIVATE,
    265:     ) -> dict[str, Any] | None:
>>> 266:         """Request AI service from federation with privacy guarantees"""
    267:         # Find suitable edge or worker nodes for the service
    268:         suitable_nodes = await self._find_service_providers(service_name)
    269:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\federation\core\federation_manager.py:320:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    317:         return True
    318:
    319:     async def create_privacy_tunnel(self, destination: str, privacy_level: int = PrivacyLevel.ANONYMOUS) -> str | None:
>>> 320:         """Create VPN-like privacy tunnel through federation"""
    321:         if privacy_level < PrivacyLevel.ANONYMOUS:
    322:             return None  # No tunnel needed for lower privacy levels
    323:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\federation\core\federation_manager.py:349:22
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    346:
    347:         self.federation_stats["privacy_tunnels_active"] = len(self.active_tunnels)
    348:
>>> 349:         logger.info(f"Created privacy tunnel {tunnel_id[:8]} with {len(circuit_path)} hops")
    350:         return tunnel_id
    351:
    352:     def get_federation_status(self) -> dict[str, Any]:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\federation\core\federation_manager.py:429:37
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    426:             if reputation is not None:
    427:                 identity.reputation_score = reputation
    428:                 if not 0.0 <= reputation <= 1.0:
>>> 429:                     logger.warning(f"Invalid reputation score from {sender}: {reputation}")
    430:                     return
    431:
    432:             # Verify signature if provided


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\federation\core\federation_manager.py:440:41
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    437:                     message_bytes = json.dumps(msg_copy, sort_keys=True).encode()
    438:                     sig_bytes = bytes.fromhex(signature) if isinstance(signature, str) else signature
    439:                     if not identity.verify_signature(message_bytes, sig_bytes):
>>> 440:                         logger.warning(f"Invalid signature in device announcement from {sender}")
    441:                         return
    442:                 except Exception:
    443:                     logger.warning(f"Error verifying signature in device announcement from {sender}")


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\federation\core\federation_manager.py:443:37
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    440:                         logger.warning(f"Invalid signature in device announcement from {sender}")
    441:                         return
    442:                 except Exception:
>>> 443:                     logger.warning(f"Error verifying signature in device announcement from {sender}")
    444:                     return
    445:
    446:             # Convert capabilities and role


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\federation\core\federation_manager.py:478:26
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    475:             # Register device in registry
    476:             await self.device_registry.register_device(profile)
    477:
>>> 478:             logger.info(f"Device announcement from {sender}: role={profile.role.value}")
    479:
    480:         except Exception as e:
    481:             logger.error(f"Error handling device announcement: {e}")


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\federation\core\federation_manager.py:574:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    571:             logger.debug(f"Beacon coordination: {coordination_type} from {sender}")
    572:
    573:     async def _handle_reputation_update(self, message_data: dict, sender: str):
>>> 574:         """Handle reputation system updates"""
    575:         # Process reputation update with basic verification for now
    576:         # Zero-knowledge proofs would provide stronger privacy guarantees in production
    577:         reputation_score = message_data.get("reputation", 0.0)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\federation\core\federation_manager.py:583:27
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    580:         # Basic verification (would use zk-SNARK proofs in production)
    581:         if 0.0 <= reputation_score <= 1.0 and proof_hash:
    582:             self.peer_reputation[sender] = reputation_score
>>> 583:             logger.debug(f"Updated reputation for {sender}: {reputation_score}")
    584:         else:
    585:             logger.warning(f"Invalid reputation update from {sender}")
    586:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\federation\core\federation_manager.py:585:29
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    582:             self.peer_reputation[sender] = reputation_score
    583:             logger.debug(f"Updated reputation for {sender}: {reputation_score}")
    584:         else:
>>> 585:             logger.warning(f"Invalid reputation update from {sender}")
    586:
    587:     async def _announce_to_federation(self):
    588:         """Announce device presence to federation"""


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\federation\core\federation_manager.py:665:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    662:         return providers[:5]  # Limit to 5 candidates
    663:
    664:     async def _select_optimal_service_node(self, candidates: list[str], privacy_level: int) -> str:
>>> 665:         """Select optimal node for service request"""
    666:         if not candidates:
    667:             return None
    668:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\federation\core\federation_manager.py:774:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    771:         )
    772:
    773:     def _update_federation_stats(self):
>>> 774:         """Update federation statistics"""
    775:         self.federation_stats["total_devices"] = len(self.device_registry.devices)
    776:
    777:     def _get_available_protocols(self) -> list[str]:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\federation\core\federation_manager.py:901:34
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    898:                             self.i2p_destination = part.split("=")[1]
    899:                             break
    900:
>>> 901:                     logger.info(f"I2P destination created: {self.i2p_destination[:32]}...")
    902:                     self.i2p_enabled = True
    903:                 else:
    904:                     raise Exception("Failed to create I2P destination")


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\federation\core\federation_manager.py:904:36
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    901:                     logger.info(f"I2P destination created: {self.i2p_destination[:32]}...")
    902:                     self.i2p_enabled = True
    903:                 else:
>>> 904:                     raise Exception("Failed to create I2P destination")
    905:             else:
    906:                 raise Exception("I2P SAM handshake failed")
    907:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (56 calls)
File: packages\edge\legacy_src\federation\core\federation_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (36 calls)
File: packages\edge\legacy_src\federation\core\federation_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'asyncio' methods (13 calls)
File: packages\edge\legacy_src\federation\core\federation_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'message_data' methods (10 calls)
File: packages\edge\legacy_src\federation\core\federation_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'device_info' methods (18 calls)
File: packages\edge\legacy_src\federation\core\federation_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'writer' methods (6 calls)
File: packages\edge\legacy_src\federation\core\federation_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (26 total)
File: packages\edge\legacy_src\federation\core\federation_manager.py:33:15
Recommendation: Replace magic numbers with named constants or enums
Code context:
     30:     PUBLIC = 0  # Basic TLS encryption only
     31:     PRIVATE = 1  # End-to-end encryption
     32:     ANONYMOUS = 2  # Onion routing through 3+ hops
>>>  33:     PARANOID = 3  # Chained protocols with dummy traffic
     34:
     35:
     36: class FederationManager:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (26 total)
File: packages\edge\legacy_src\federation\core\federation_manager.py:54:63
Recommendation: Replace magic numbers with named constants or enums
Code context:
     51:         enable_tor: bool = False,
     52:         enable_i2p: bool = False,
     53:     ):
>>>  54:         self.device_id = device_id or f"fed_{uuid.uuid4().hex[:12]}"
     55:         self.region = region
     56:
     57:         # Core components (building on existing implementation)


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (26 total)
File: packages\edge\legacy_src\federation\core\federation_manager.py:145:97
Recommendation: Replace magic numbers with named constants or enums
Code context:
    142:                 # Configure for federation priorities
    143:                 if self.federation_role == DeviceRole.BEACON:
    144:                     self.dual_path_transport.navigator.set_routing_priority(RoutingPriority.PERFORMANCE_FIRST)
>>> 145:                 elif self.local_profile.battery_percent and self.local_profile.battery_percent < 30:
    146:                     self.dual_path_transport.navigator.set_routing_priority(RoutingPriority.OFFLINE_FIRST)
    147:
    148:             # Start dual-path transport


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (26 total)
File: packages\edge\legacy_src\federation\core\federation_manager.py:248:84
Recommendation: Replace magic numbers with named constants or enums
Code context:
    245:
    246:         return success
    247:
>>> 248:     async def _wait_for_correlated_response(self, request_id: str, timeout: float = 5.0) -> dict[str, Any] | None:
    249:         """Wait for a response matching the given request ID."""
    250:         future: asyncio.Future = asyncio.get_event_loop().create_future()
    251:         self.pending_responses[request_id] = future


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (26 total)
File: packages\edge\legacy_src\federation\core\federation_manager.py:298:80
Recommendation: Replace magic numbers with named constants or enums
Code context:
    295:
    296:         # Wait for response with correlation tracking
    297:         request_id = service_request["request_id"]
>>> 298:         response = await self._wait_for_correlated_response(request_id, timeout=5.0)
    299:         return response
    300:
    301:     async def contribute_compute_task(self, task_data: dict[str, Any]) -> bool:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\federation\protocols\bitchat_enhanced.py:119:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    116:
    117:     @classmethod
    118:     def from_bytes(cls, data: bytes) -> "BitChatFragment":
>>> 119:         """Deserialize fragment from BLE data"""
    120:         if len(data) < 24:  # Minimum header size
    121:             raise ValueError("Fragment data too short")
    122:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\federation\protocols\bitchat_enhanced.py:316:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    313:
    314:     @classmethod
    315:     def reassemble_from_fragments(cls, fragments: list[BitChatFragment]) -> Optional["EnhancedBitChatMessage"]:
>>> 316:         """Reassemble message from fragments"""
    317:         if not fragments:
    318:             return None
    319:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\federation\protocols\bitchat_enhanced.py:378:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    375:         return False
    376:
    377:     def remove_member(self, device_id: str) -> bool:
>>> 378:         """Remove member from channel"""
    379:         if device_id in self.members:
    380:             self.members.remove(device_id)
    381:             logger.info(f"Removed {device_id} from channel #{self.name}")


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\federation\protocols\bitchat_enhanced.py:515:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    512:         return await self._transmit_enhanced_message(message)
    513:
    514:     async def join_channel(self, channel_name: str) -> bool:
>>> 515:         """Join IRC-style channel"""
    516:         if channel_name in self.joined_channels:
    517:             return True
    518:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\federation\protocols\bitchat_enhanced.py:660:37
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    657:             if peer_keys and "verify_key" in peer_keys:
    658:                 verify_key = nacl.signing.VerifyKey(peer_keys["verify_key"])
    659:                 if not message.verify_signature(verify_key):
>>> 660:                     logger.warning(f"Invalid signature from {message.sender}")
    661:                     return
    662:
    663:         # Decrypt if encrypted


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\federation\protocols\bitchat_enhanced.py:672:23
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    669:         # Decompress if compressed
    670:         message.decompress_payload()
    671:
>>> 672:         logger.debug(f"Processed enhanced data message from {message.sender}")
    673:
    674:     async def _handle_fragment(self, message: EnhancedBitChatMessage):
    675:         """Handle message fragment"""


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\federation\protocols\bitchat_enhanced.py:723:29
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    720:                 )
    721:
    722:         except Exception as e:
>>> 723:             logger.warning(f"Invalid crypto hello from {message.sender}: {e}")
    724:
    725:     async def _handle_channel_join(self, message: EnhancedBitChatMessage):
    726:         """Handle channel join"""


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\federation\protocols\bitchat_enhanced.py:748:23
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    745:
    746:     async def _handle_dummy_traffic(self, message: EnhancedBitChatMessage):
    747:         """Handle dummy traffic (privacy padding)"""
>>> 748:         logger.debug(f"Received dummy traffic from {message.sender}")
    749:
    750:     async def _send_crypto_hello(self):
    751:         """Send hello message with crypto keys"""


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (38 calls)
File: packages\edge\legacy_src\federation\protocols\bitchat_enhanced.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (20 calls)
File: packages\edge\legacy_src\federation\protocols\bitchat_enhanced.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'asyncio' methods (7 calls)
File: packages\edge\legacy_src\federation\protocols\bitchat_enhanced.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'message' methods (8 calls)
File: packages\edge\legacy_src\federation\protocols\bitchat_enhanced.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (43 total)
File: packages\edge\legacy_src\federation\protocols\bitchat_enhanced.py:59:10
Recommendation: Replace magic numbers with named constants or enums
Code context:
     56:
     57:     DATA = 0x01
     58:     FRAGMENT = 0x02
>>>  59:     ACK = 0x03
     60:     HELLO = 0x04
     61:     CHANNEL_JOIN = 0x05
     62:     CHANNEL_LEAVE = 0x06


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (43 total)
File: packages\edge\legacy_src\federation\protocols\bitchat_enhanced.py:60:12
Recommendation: Replace magic numbers with named constants or enums
Code context:
     57:     DATA = 0x01
     58:     FRAGMENT = 0x02
     59:     ACK = 0x03
>>>  60:     HELLO = 0x04
     61:     CHANNEL_JOIN = 0x05
     62:     CHANNEL_LEAVE = 0x06
     63:     CHANNEL_MSG = 0x07


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (43 total)
File: packages\edge\legacy_src\federation\protocols\bitchat_enhanced.py:61:19
Recommendation: Replace magic numbers with named constants or enums
Code context:
     58:     FRAGMENT = 0x02
     59:     ACK = 0x03
     60:     HELLO = 0x04
>>>  61:     CHANNEL_JOIN = 0x05
     62:     CHANNEL_LEAVE = 0x06
     63:     CHANNEL_MSG = 0x07
     64:     DUMMY = 0x08


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (43 total)
File: packages\edge\legacy_src\federation\protocols\bitchat_enhanced.py:62:20
Recommendation: Replace magic numbers with named constants or enums
Code context:
     59:     ACK = 0x03
     60:     HELLO = 0x04
     61:     CHANNEL_JOIN = 0x05
>>>  62:     CHANNEL_LEAVE = 0x06
     63:     CHANNEL_MSG = 0x07
     64:     DUMMY = 0x08
     65:     KEY_EXCHANGE = 0x09


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (43 total)
File: packages\edge\legacy_src\federation\protocols\bitchat_enhanced.py:63:18
Recommendation: Replace magic numbers with named constants or enums
Code context:
     60:     HELLO = 0x04
     61:     CHANNEL_JOIN = 0x05
     62:     CHANNEL_LEAVE = 0x06
>>>  63:     CHANNEL_MSG = 0x07
     64:     DUMMY = 0x08
     65:     KEY_EXCHANGE = 0x09
     66:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\federation\protocols\enhanced_bitchat.py:120:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    117:
    118:     @classmethod
    119:     def from_bytes(cls, data: bytes) -> "BitChatFragment":
>>> 120:         """Deserialize fragment from bytes"""
    121:         header = struct.unpack("!16sHHI", data[:24])
    122:         fragment_id = header[0].rstrip(b"\x00").decode()
    123:         return cls(


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\federation\protocols\enhanced_bitchat.py:330:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    327:
    328:     @classmethod
    329:     def reassemble_from_fragments(cls, fragments: list[BitChatFragment]) -> Optional["BitChatMessage"]:
>>> 330:         """Reassemble message from fragments"""
    331:         if not fragments:
    332:             return None
    333:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\federation\protocols\enhanced_bitchat.py:387:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    384:
    385:     @classmethod
    386:     def from_dict(cls, data: dict[str, Any]) -> "BitChatMessage":
>>> 387:         """Deserialize message from dictionary"""
    388:         msg = cls(
    389:             id=data["id"],
    390:             sender=data.get("sender", ""),


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\federation\protocols\enhanced_bitchat.py:429:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    426:         return False
    427:
    428:     def remove_member(self, device_id: str) -> bool:
>>> 429:         """Remove member from channel"""
    430:         if device_id in self.members:
    431:             self.members.remove(device_id)
    432:             logger.info(f"Removed {device_id} from channel {self.name}")


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\federation\protocols\enhanced_bitchat.py:607:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    604:         return await self._transmit_message(message)
    605:
    606:     async def join_channel(self, channel_name: str) -> bool:
>>> 607:         """Join IRC-style channel"""
    608:         if channel_name in self.joined_channels:
    609:             return True
    610:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\federation\protocols\enhanced_bitchat.py:784:23
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    781:
    782:     async def _handle_data_message(self, message: BitChatMessage):
    783:         """Handle regular data message"""
>>> 784:         logger.debug(f"Received data message from {message.sender}")
    785:         # Decrypt if encrypted
    786:         if message.encrypted and self.enable_crypto:
    787:             peer_info = self.discovered_peers.get(message.sender)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\federation\protocols\enhanced_bitchat.py:834:33
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    831:                 self.active_connections.add(peer_id)
    832:                 logger.info(f"Discovered peer: {peer_id}")
    833:             except Exception as e:
>>> 834:                 logger.warning(f"Invalid hello message from {peer_id}: {e}")
    835:
    836:     async def _handle_channel_join(self, message: BitChatMessage):
    837:         """Handle channel join"""


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'time' methods (10 calls)
File: packages\edge\legacy_src\federation\protocols\enhanced_bitchat.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (53 calls)
File: packages\edge\legacy_src\federation\protocols\enhanced_bitchat.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (27 calls)
File: packages\edge\legacy_src\federation\protocols\enhanced_bitchat.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'data' methods (14 calls)
File: packages\edge\legacy_src\federation\protocols\enhanced_bitchat.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'asyncio' methods (16 calls)
File: packages\edge\legacy_src\federation\protocols\enhanced_bitchat.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'message' methods (7 calls)
File: packages\edge\legacy_src\federation\protocols\enhanced_bitchat.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (63 total)
File: packages\edge\legacy_src\federation\protocols\enhanced_bitchat.py:56:10
Recommendation: Replace magic numbers with named constants or enums
Code context:
     53:
     54:     DATA = 0x01  # User data message
     55:     FRAGMENT = 0x02  # Message fragment
>>>  56:     ACK = 0x03  # Acknowledgment
     57:     HELLO = 0x04  # Peer discovery
     58:     CHANNEL_JOIN = 0x05  # Join channel
     59:     CHANNEL_LEAVE = 0x06  # Leave channel


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (63 total)
File: packages\edge\legacy_src\federation\protocols\enhanced_bitchat.py:57:12
Recommendation: Replace magic numbers with named constants or enums
Code context:
     54:     DATA = 0x01  # User data message
     55:     FRAGMENT = 0x02  # Message fragment
     56:     ACK = 0x03  # Acknowledgment
>>>  57:     HELLO = 0x04  # Peer discovery
     58:     CHANNEL_JOIN = 0x05  # Join channel
     59:     CHANNEL_LEAVE = 0x06  # Leave channel
     60:     CHANNEL_MSG = 0x07  # Channel message


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (63 total)
File: packages\edge\legacy_src\federation\protocols\enhanced_bitchat.py:58:19
Recommendation: Replace magic numbers with named constants or enums
Code context:
     55:     FRAGMENT = 0x02  # Message fragment
     56:     ACK = 0x03  # Acknowledgment
     57:     HELLO = 0x04  # Peer discovery
>>>  58:     CHANNEL_JOIN = 0x05  # Join channel
     59:     CHANNEL_LEAVE = 0x06  # Leave channel
     60:     CHANNEL_MSG = 0x07  # Channel message
     61:     DUMMY = 0x08  # Dummy traffic


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (63 total)
File: packages\edge\legacy_src\federation\protocols\enhanced_bitchat.py:59:20
Recommendation: Replace magic numbers with named constants or enums
Code context:
     56:     ACK = 0x03  # Acknowledgment
     57:     HELLO = 0x04  # Peer discovery
     58:     CHANNEL_JOIN = 0x05  # Join channel
>>>  59:     CHANNEL_LEAVE = 0x06  # Leave channel
     60:     CHANNEL_MSG = 0x07  # Channel message
     61:     DUMMY = 0x08  # Dummy traffic
     62:     KEY_EXCHANGE = 0x09  # Cryptographic key exchange


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (63 total)
File: packages\edge\legacy_src\federation\protocols\enhanced_bitchat.py:60:18
Recommendation: Replace magic numbers with named constants or enums
Code context:
     57:     HELLO = 0x04  # Peer discovery
     58:     CHANNEL_JOIN = 0x05  # Join channel
     59:     CHANNEL_LEAVE = 0x06  # Leave channel
>>>  60:     CHANNEL_MSG = 0x07  # Channel message
     61:     DUMMY = 0x08  # Dummy traffic
     62:     KEY_EXCHANGE = 0x09  # Cryptographic key exchange
     63:


HARDCODED_PATH: Hardcoded path or URL detected
File: packages\edge\legacy_src\federation\protocols\tor_transport.py:74:17
Recommendation: Use configuration files, environment variables, or path utilities
Code context:
     71:     created_at: float
     72:
     73:     def get_onion_url(self) -> str:
>>>  74:         return f"http://{self.onion_address}:{self.port}"
     75:
     76:
     77: class TorTransport:


LONG_PARAMETER_LIST: Function '__init__' has 6 parameters (>5)
File: packages\edge\legacy_src\federation\protocols\tor_transport.py:80:4
Recommendation: Use parameter objects, data classes, or keyword-only arguments
Code context:
     77: class TorTransport:
     78:     """Tor transport for anonymous communication"""
     79:
>>>  80:     def __init__(
     81:         self,
     82:         socks_port: int = 9050,
     83:         control_port: int = 9051,


HARDCODED_PATH: Hardcoded path or URL detected
File: packages\edge\legacy_src\federation\protocols\tor_transport.py:220:20
Recommendation: Use configuration files, environment variables, or path utilities
Code context:
    217:             }
    218:
    219:             # Send via Tor SOCKS proxy
>>> 220:             url = f"http://{recipient_onion}:{self.hidden_service_port}/message"
    221:
    222:             async with self.client_session.post(
    223:                 url, json=message, timeout=aiohttp.ClientTimeout(total=timeout)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\federation\protocols\tor_transport.py:237:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    234:             return False
    235:
    236:     async def create_circuit(self, purpose: str = "general", min_hops: int | None = None) -> str | None:
>>> 237:         """Create new Tor circuit with specified parameters"""
    238:         if not self.tor_controller:
    239:             return None
    240:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\federation\protocols\tor_transport.py:351:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    348:             return False
    349:
    350:     async def _create_hidden_service(self) -> bool:
>>> 351:         """Create Tor hidden service"""
    352:         try:
    353:             # Create hidden service directory
    354:             hs_dir = os.path.join(self.data_directory, "hidden_service")


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\federation\protocols\tor_transport.py:375:26
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    372:                 created_at=time.time(),
    373:             )
    374:
>>> 375:             logger.info(f"Created hidden service: {onion_address}")
    376:             return True
    377:
    378:         except Exception as e:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\federation\protocols\tor_transport.py:379:27
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    376:             return True
    377:
    378:         except Exception as e:
>>> 379:             logger.error(f"Failed to create hidden service: {e}")
    380:             return False
    381:
    382:     async def _start_http_server(self) -> bool:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\federation\protocols\tor_transport.py:408:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    405:             return False
    406:
    407:     async def _create_client_session(self):
>>> 408:         """Create HTTP client session with Tor SOCKS proxy"""
    409:         # SOCKS proxy configuration
    410:         connector = aiohttp.TCPConnector(
    411:             use_dns_cache=False,  # Important for Tor


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\federation\protocols\tor_transport.py:422:22
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    419:         )
    420:
    421:         # Configure SOCKS proxy (simplified - would need proper SOCKS implementation)
>>> 422:         logger.info(f"Created client session with Tor SOCKS proxy on port {self.socks_port}")
    423:
    424:     async def _handle_http_message(self, request: web.Request) -> web.Response:
    425:         """Handle incoming HTTP message"""


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\federation\protocols\tor_transport.py:433:27
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    430:             self.stats["messages_received"] += 1
    431:             sender_onion = message.get("sender", "unknown")
    432:
>>> 433:             logger.debug(f"Received message from {sender_onion[:16]}...")
    434:
    435:             # Route to appropriate handler
    436:             payload = message.get("payload", {})


HARDCODED_PATH: Hardcoded path or URL detected
File: packages\edge\legacy_src\federation\protocols\tor_transport.py:522:37
Recommendation: Use configuration files, environment variables, or path utilities
Code context:
    519:         return {
    520:             "UseBridges": "1",
    521:             "Bridge": self.bridges,
>>> 522:             "ClientTransportPlugin": "obfs4 exec /usr/bin/obfs4proxy",
    523:         }
    524:
    525:     async def fetch_bridges_from_bridgedb(self) -> list[str]:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\federation\protocols\tor_transport.py:526:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    523:         }
    524:
    525:     async def fetch_bridges_from_bridgedb(self) -> list[str]:
>>> 526:         """Fetch bridges from Tor BridgeDB (placeholder)"""
    527:         # In practice, would fetch from https://bridges.torproject.org/
    528:         logger.info("Fetching bridges from BridgeDB...")
    529:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\edge\legacy_src\federation\protocols\tor_transport.py:528:20
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    525:     async def fetch_bridges_from_bridgedb(self) -> list[str]:
    526:         """Fetch bridges from Tor BridgeDB (placeholder)"""
    527:         # In practice, would fetch from https://bridges.torproject.org/
>>> 528:         logger.info("Fetching bridges from BridgeDB...")
    529:
    530:         # Return some example bridge lines
    531:         return [


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (33 calls)
File: packages\edge\legacy_src\federation\protocols\tor_transport.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (14 calls)
File: packages\edge\legacy_src\federation\protocols\tor_transport.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'web' methods (7 calls)
File: packages\edge\legacy_src\federation\protocols\tor_transport.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (18 total)
File: packages\edge\legacy_src\federation\protocols\tor_transport.py:82:26
Recommendation: Replace magic numbers with named constants or enums
Code context:
     79:
     80:     def __init__(
     81:         self,
>>>  82:         socks_port: int = 9050,
     83:         control_port: int = 9051,
     84:         hidden_service_port: int = 80,
     85:         target_port: int = 8080,


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (18 total)
File: packages\edge\legacy_src\federation\protocols\tor_transport.py:83:28
Recommendation: Replace magic numbers with named constants or enums
Code context:
     80:     def __init__(
     81:         self,
     82:         socks_port: int = 9050,
>>>  83:         control_port: int = 9051,
     84:         hidden_service_port: int = 80,
     85:         target_port: int = 8080,
     86:         data_directory: str | None = None,


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (18 total)
File: packages\edge\legacy_src\federation\protocols\tor_transport.py:84:35
Recommendation: Replace magic numbers with named constants or enums
Code context:
     81:         self,
     82:         socks_port: int = 9050,
     83:         control_port: int = 9051,
>>>  84:         hidden_service_port: int = 80,
     85:         target_port: int = 8080,
     86:         data_directory: str | None = None,
     87:     ):


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (18 total)
File: packages\edge\legacy_src\federation\protocols\tor_transport.py:85:27
Recommendation: Replace magic numbers with named constants or enums
Code context:
     82:         socks_port: int = 9050,
     83:         control_port: int = 9051,
     84:         hidden_service_port: int = 80,
>>>  85:         target_port: int = 8080,
     86:         data_directory: str | None = None,
     87:     ):
     88:         self.socks_port = socks_port


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (18 total)
File: packages\edge\legacy_src\federation\protocols\tor_transport.py:107:32
Recommendation: Replace magic numbers with named constants or enums
Code context:
    104:
    105:         # Circuit management
    106:         self.circuits: dict[str, TorCircuit] = {}
>>> 107:         self.min_circuit_hops = 3
    108:
    109:         # Message handling
    110:         self.message_handlers: dict[str, Any] = {}


HARDCODED_PATH: Hardcoded path or URL detected
File: packages\execution\security\sandbox_isolation.py:358:36
Recommendation: Use configuration files, environment variables, or path utilities
Code context:
    355:                 [
    356:                     FilesystemMount("/bin", str(self.workdir / "bin"), readonly=True),
    357:                     FilesystemMount("/lib", str(self.workdir / "lib"), readonly=True),
>>> 358:                     FilesystemMount("/usr/lib", str(self.workdir / "lib"), readonly=True),
    359:                 ]
    360:             )
    361:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\execution\security\sandbox_isolation.py:641:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    638:         namespace: str = "default",
    639:         resource_limits: ResourceLimits | None = None,
    640:     ) -> str:
>>> 641:         """Create a new secure sandbox"""
    642:
    643:         self.sandbox_counter += 1
    644:         sandbox_id = f"sandbox_{self.sandbox_counter:06d}_{uuid4().hex[:8]}"


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\execution\security\sandbox_isolation.py:753:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    750:     namespace: str = "default",
    751:     **resource_kwargs,
    752: ) -> str:
>>> 753:     """Convenience function to create secure sandbox"""
    754:
    755:     resource_limits = None
    756:     if resource_kwargs:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (14 calls)
File: packages\execution\security\sandbox_isolation.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (21 calls)
File: packages\execution\security\sandbox_isolation.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'time' methods (6 calls)
File: packages\execution\security\sandbox_isolation.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (18 total)
File: packages\execution\security\sandbox_isolation.py:76:21
Recommendation: Replace magic numbers with named constants or enums
Code context:
     73:     cpu_quota_percent: int = 100
     74:
     75:     # Memory limits
>>>  76:     memory_mb: int = 512
     77:     swap_mb: int = 0
     78:
     79:     # Disk limits


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (18 total)
File: packages\execution\security\sandbox_isolation.py:81:27
Recommendation: Replace magic numbers with named constants or enums
Code context:
     78:
     79:     # Disk limits
     80:     disk_read_iops: int = 1000
>>>  81:     disk_write_iops: int = 500
     82:     disk_quota_mb: int = 100
     83:
     84:     # Network limits


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (18 total)
File: packages\execution\security\sandbox_isolation.py:86:31
Recommendation: Replace magic numbers with named constants or enums
Code context:
     83:
     84:     # Network limits
     85:     network_ingress_kbps: int = 1000
>>>  86:     network_egress_kbps: int = 500
     87:
     88:     # Time limits
     89:     max_execution_time_s: int = 300


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (18 total)
File: packages\execution\security\sandbox_isolation.py:89:32
Recommendation: Replace magic numbers with named constants or enums
Code context:
     86:     network_egress_kbps: int = 500
     87:
     88:     # Time limits
>>>  89:     max_execution_time_s: int = 300
     90:
     91:     # File descriptor limits
     92:     max_open_files: int = 64


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (18 total)
File: packages\execution\security\sandbox_isolation.py:92:26
Recommendation: Replace magic numbers with named constants or enums
Code context:
     89:     max_execution_time_s: int = 300
     90:
     91:     # File descriptor limits
>>>  92:     max_open_files: int = 64
     93:     max_processes: int = 1
     94:
     95:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\bridges\betanet_integration.py:414:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    411:
    412: # Factory function for easy integration
    413: def create_betanet_transport(privacy_mode: str = "balanced") -> BetaNetFogTransport:
>>> 414:     """
    415:     Factory function to create BetaNet transport for fog compute
    416:
    417:     Args:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (14 calls)
File: packages\fog\bridges\betanet_integration.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'time' methods (9 calls)
File: packages\fog\bridges\betanet_integration.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

SEQUENTIAL_COUPLING: Sequential coupling detected: Function '__init__' is part of a sequence-dependent API
File: packages\fog\bridges\betanet_integration.py:327:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    324:     to leverage BetaNet's capabilities without directly depending on the bounty code.
    325:     """
    326:
>>> 327:     def __init__(self):
    328:         self.transport = None
    329:         self.node_id = None
    330:         self.active_jobs: Dict[str, Dict[str, Any]] = {}


SEQUENTIAL_COUPLING: Sequential coupling detected: Function '_init_betanet_components' is part of a sequence-dependent API
File: packages\fog\bridges\betanet_integration.py:100:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
     97:         else:
     98:             self._init_fallback_components()
     99:
>>> 100:     def _init_betanet_components(self):
    101:         """Initialize BetaNet components when available"""
    102:         try:
    103:             # Initialize covert channels


SEQUENTIAL_COUPLING: Sequential coupling detected: Function '_init_fallback_components' is part of a sequence-dependent API
File: packages\fog\bridges\betanet_integration.py:130:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    127:             logger.error(f"Failed to initialize BetaNet components: {e}")
    128:             self._init_fallback_components()
    129:
>>> 130:     def _init_fallback_components(self):
    131:         """Initialize fallback components when BetaNet is not available"""
    132:         self.fallback_transport = FallbackTransport()
    133:         logger.warning("Using fallback transport - BetaNet integration not available")


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\bridges\__init__.py:29:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     26: __all__ = [
     27:     "BetaNetFogTransport",
     28:     "FogComputeBetaNetService",
>>>  29:     "create_betanet_transport",
     30:     "is_betanet_available",
     31:     "get_betanet_capabilities",
     32: ]


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\edge\aivillage_integration.py:365:31
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    362:             try:
    363:                 await self.edge_manager.update_device_status(self.device_name, EdgeState.DEGRADED)
    364:             except Exception as e:
>>> 365:                 logger.error(f"Failed to update edge manager: {e}")
    366:
    367:     async def _on_capacity_changed(self, capability: EdgeCapability):
    368:         """Handle capacity changes"""


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\edge\aivillage_integration.py:385:31
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    382:                     },
    383:                 )
    384:             except Exception as e:
>>> 385:                 logger.error(f"Failed to update fog coordinator: {e}")
    386:
    387:     # Public interface methods
    388:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\edge\aivillage_integration.py:448:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    445: async def create_integrated_edge_node(
    446:     device_name: str, operator_namespace: str, fog_gateway_url: str = "", **kwargs
    447: ) -> AIVillageEdgeIntegration:
>>> 448:     """
    449:     Create an integrated edge node that works with existing AIVillage infrastructure
    450:
    451:     Args:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (23 calls)
File: packages\fog\edge\aivillage_integration.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (9 calls)
File: packages\fog\edge\aivillage_integration.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\edge\beacon.py:131:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    128:
    129:     @classmethod
    130:     def from_dict(cls, data: dict[str, Any]) -> "EdgeCapability":
>>> 131:         """Create from dictionary"""
    132:         # Convert lists back to sets
    133:         if "supported_runtimes" in data:
    134:             data["supported_runtimes"] = set(data["supported_runtimes"])


LONG_PARAMETER_LIST: Function '__init__' has 7 parameters (>5)
File: packages\fog\edge\beacon.py:150:4
Recommendation: Use parameter objects, data classes, or keyword-only arguments
Code context:
    147:     Acts as the sensory layer that feeds information to the autonomic control layer.
    148:     """
    149:
>>> 150:     def __init__(
    151:         self,
    152:         device_name: str,
    153:         operator_namespace: str,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\edge\beacon.py:308:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    305:         )
    306:
    307:     async def _update_utilization(self):
>>> 308:         """Update current resource utilization"""
    309:
    310:         # CPU utilization
    311:         self.capability.cpu_usage_percent = psutil.cpu_percent(interval=1.0)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\edge\beacon.py:347:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    344:         self.capability.last_seen = datetime.now(UTC)
    345:
    346:     async def _update_marketplace_pricing(self):
>>> 347:         """Update marketplace pricing based on current device conditions"""
    348:
    349:         # Base pricing rates
    350:         base_spot_rate = 0.10  # Base spot rate per CPU-hour


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\edge\beacon.py:453:14
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    450:     def _log_pricing_update(self):
    451:         """Log current pricing information"""
    452:         logger.info(
>>> 453:             f"Marketplace pricing update: "
    454:             f"spot=${self.capability.spot_price_per_cpu_hour:.4f}/cpu-hour, "
    455:             f"on-demand=${self.capability.on_demand_price_per_cpu_hour:.4f}/cpu-hour, "
    456:             f"tier={self.capability.pricing_tier}, "


LONG_PARAMETER_LIST: Function 'estimate_job_cost' has 6 parameters (>5)
File: packages\fog\edge\beacon.py:492:4
Recommendation: Use parameter objects, data classes, or keyword-only arguments
Code context:
    489:             "endpoint": self.capability.endpoint,
    490:         }
    491:
>>> 492:     def estimate_job_cost(
    493:         self, cpu_cores: float, memory_gb: float, disk_gb: float, duration_hours: float, bid_type: str = "spot"
    494:     ) -> float:
    495:         """Estimate cost for job execution on this device"""


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\edge\beacon.py:626:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    623:         pass
    624:
    625:     async def _advertise_to_gateways(self):
>>> 626:         """Send capability update to known fog gateways"""
    627:
    628:         for gateway_endpoint in self.fog_gateways:
    629:             try:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\edge\beacon.py:816:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    813:         return list(self.discovered_peers.values())
    814:
    815:     def update_job_count(self, active_jobs: int):
>>> 816:         """Update active job count"""
    817:         self.capability.active_jobs = active_jobs
    818:
    819:     def set_max_concurrent_jobs(self, max_jobs: int):


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (17 calls)
File: packages\fog\edge\beacon.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (21 calls)
File: packages\fog\edge\beacon.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'asyncio' methods (10 calls)
File: packages\fog\edge\beacon.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'psutil' methods (9 calls)
File: packages\fog\edge\beacon.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (51 total)
File: packages\fog\edge\beacon.py:107:25
Recommendation: Replace magic numbers with named constants or enums
Code context:
    104:     # Quality metrics
    105:     reliability_score: float = 1.0  # Historical reliability 0.0-1.0
    106:     latency_ms: float = 0.0  # Network latency estimate
>>> 107:     trust_score: float = 0.5  # Trust score 0.0-1.0
    108:
    109:     # Marketplace pricing
    110:     spot_price_per_cpu_hour: float = 0.10  # Spot pricing rate


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (51 total)
File: packages\fog\edge\beacon.py:110:37
Recommendation: Replace magic numbers with named constants or enums
Code context:
    107:     trust_score: float = 0.5  # Trust score 0.0-1.0
    108:
    109:     # Marketplace pricing
>>> 110:     spot_price_per_cpu_hour: float = 0.10  # Spot pricing rate
    111:     on_demand_price_per_cpu_hour: float = 0.15  # On-demand pricing rate
    112:     accepts_marketplace_bids: bool = True  # Participates in marketplace
    113:     min_job_duration_minutes: int = 5  # Minimum job duration


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (51 total)
File: packages\fog\edge\beacon.py:111:42
Recommendation: Replace magic numbers with named constants or enums
Code context:
    108:
    109:     # Marketplace pricing
    110:     spot_price_per_cpu_hour: float = 0.10  # Spot pricing rate
>>> 111:     on_demand_price_per_cpu_hour: float = 0.15  # On-demand pricing rate
    112:     accepts_marketplace_bids: bool = True  # Participates in marketplace
    113:     min_job_duration_minutes: int = 5  # Minimum job duration
    114:     max_job_duration_hours: int = 24  # Maximum job duration


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (51 total)
File: packages\fog\edge\beacon.py:113:36
Recommendation: Replace magic numbers with named constants or enums
Code context:
    110:     spot_price_per_cpu_hour: float = 0.10  # Spot pricing rate
    111:     on_demand_price_per_cpu_hour: float = 0.15  # On-demand pricing rate
    112:     accepts_marketplace_bids: bool = True  # Participates in marketplace
>>> 113:     min_job_duration_minutes: int = 5  # Minimum job duration
    114:     max_job_duration_hours: int = 24  # Maximum job duration
    115:     pricing_tier: str = "basic"  # "basic", "standard", "premium"
    116:     min_trust_required: float = 0.0  # Minimum bidder trust required


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (51 total)
File: packages\fog\edge\beacon.py:114:34
Recommendation: Replace magic numbers with named constants or enums
Code context:
    111:     on_demand_price_per_cpu_hour: float = 0.15  # On-demand pricing rate
    112:     accepts_marketplace_bids: bool = True  # Participates in marketplace
    113:     min_job_duration_minutes: int = 5  # Minimum job duration
>>> 114:     max_job_duration_hours: int = 24  # Maximum job duration
    115:     pricing_tier: str = "basic"  # "basic", "standard", "premium"
    116:     min_trust_required: float = 0.0  # Minimum bidder trust required
    117:     cost_per_gb_hour_disk: float = 0.001  # Disk pricing


LONG_PARAMETER_LIST: Function '__init__' has 8 parameters (>5)
File: packages\fog\edge\fabric.py:81:4
Recommendation: Use parameter objects, data classes, or keyword-only arguments
Code context:
     78:     - Communicates with fog gateway via BetaNet
     79:     """
     80:
>>>  81:     def __init__(
     82:         self,
     83:         device_name: str,
     84:         operator_namespace: str,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\edge\fabric.py:501:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    498:     device_type: DeviceType = DeviceType.DESKTOP,
    499:     **kwargs,
    500: ) -> EdgeExecutionNode:
>>> 501:     """
    502:     Create and configure an edge execution node
    503:
    504:     Args:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (23 calls)
File: packages\fog\edge\fabric.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (9 calls)
File: packages\fog\edge\fabric.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'asyncio' methods (7 calls)
File: packages\fog\edge\fabric.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'datetime' methods (6 calls)
File: packages\fog\edge\fabric.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\edge\monitor.py:1:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
>>>   1: """
      2: Resource Monitor for Edge Devices
      3:
      4: Monitors device health, resource utilization, and performance metrics:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (7 calls)
File: packages\fog\edge\monitor.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (12 calls)
File: packages\fog\edge\monitor.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'psutil' methods (15 calls)
File: packages\fog\edge\monitor.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'issues' methods (9 calls)
File: packages\fog\edge\monitor.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (67 total)
File: packages\fog\edge\monitor.py:154:37
Recommendation: Replace magic numbers with named constants or enums
Code context:
    151:     def __init__(
    152:         self,
    153:         device_id: str,
>>> 154:         monitoring_interval: float = 5.0,
    155:         history_retention_hours: int = 24,
    156:         enable_profiling: bool = True,
    157:     ):


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (67 total)
File: packages\fog\edge\monitor.py:155:39
Recommendation: Replace magic numbers with named constants or enums
Code context:
    152:         self,
    153:         device_id: str,
    154:         monitoring_interval: float = 5.0,
>>> 155:         history_retention_hours: int = 24,
    156:         enable_profiling: bool = True,
    157:     ):
    158:         """


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (67 total)
File: packages\fog\edge\monitor.py:175:59
Recommendation: Replace magic numbers with named constants or enums
Code context:
    172:
    173:         # Historical data
    174:         self.snapshots: list[ResourceSnapshot] = []
>>> 175:         self.max_snapshots = int(history_retention_hours * 3600 / monitoring_interval)
    176:
    177:         # Performance profile
    178:         self.performance_profile: PerformanceProfile | None = None


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (67 total)
File: packages\fog\edge\monitor.py:257:36
Recommendation: Replace magic numbers with named constants or enums
Code context:
    254:
    255:             except Exception as e:
    256:                 logger.error(f"Monitoring loop error: {e}")
>>> 257:                 await asyncio.sleep(5.0)
    258:
    259:     async def _collect_snapshot(self) -> ResourceSnapshot:
    260:         """Collect current resource utilization snapshot"""


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (67 total)
File: packages\fog\edge\monitor.py:267:59
Recommendation: Replace magic numbers with named constants or enums
Code context:
    264:
    265:         # CPU metrics
    266:         psutil.cpu_times()
>>> 267:         snapshot.cpu_percent = psutil.cpu_percent(interval=0.1)
    268:         snapshot.cpu_cores_logical = psutil.cpu_count(logical=True)
    269:         snapshot.cpu_cores_physical = psutil.cpu_count(logical=False)
    270:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\edge\runner.py:380:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    377:         }
    378:
    379:     def _create_sandbox(self, execution_id: str, working_dir: str) -> Path:
>>> 380:         """Create isolated sandbox directory"""
    381:
    382:         sandbox_dir = Path(self.temp_dir) / f"wasi_sandbox_{execution_id}"
    383:         sandbox_dir.mkdir(parents=True, exist_ok=True)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\edge\runner.py:707:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    704:         }
    705:
    706:     def _create_vm_dir(self, execution_id: str) -> Path:
>>> 707:         """Create isolated directory for MicroVM"""
    708:
    709:         vm_dir = Path(self.temp_dir) / f"microvm_{execution_id}"
    710:         vm_dir.mkdir(parents=True, exist_ok=True)


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'asyncio' methods (12 calls)
File: packages\fog\edge\runner.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (25 calls)
File: packages\fog\edge\runner.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'datetime' methods (6 calls)
File: packages\fog\edge\runner.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (12 calls)
File: packages\fog\edge\runner.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'parent' methods (6 calls)
File: packages\fog\edge\runner.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'violations' methods (6 calls)
File: packages\fog\edge\runner.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

SEQUENTIAL_COUPLING: Sequential coupling detected: Function '__init__' is part of a sequence-dependent API
File: packages\fog\edge\runner.py:780:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    777:     - Native processes (limited use)
    778:     """
    779:
>>> 780:     def __init__(self, temp_dir: str | None = None):
    781:         """Initialize execution fabric"""
    782:
    783:         self.wasi_runner = WASIRunner(temp_dir=temp_dir)


SEQUENTIAL_COUPLING: Sequential coupling detected: Function '_cleanup_sandbox' is part of a sequence-dependent API
File: packages\fog\edge\runner.py:392:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    389:         logger.debug(f"Created sandbox: {sandbox_dir}")
    390:         return sandbox_dir
    391:
>>> 392:     def _cleanup_sandbox(self, sandbox_dir: Path):
    393:         """Clean up sandbox directory"""
    394:
    395:         try:


SEQUENTIAL_COUPLING: Sequential coupling detected: Function '_cleanup_vm_dir' is part of a sequence-dependent API
File: packages\fog\edge\runner.py:713:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    710:         vm_dir.mkdir(parents=True, exist_ok=True)
    711:         return vm_dir
    712:
>>> 713:     def _cleanup_vm_dir(self, vm_dir: Path):
    714:         """Clean up VM directory"""
    715:
    716:         try:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (21 total)
File: packages\fog\edge\runner.py:58:21
Recommendation: Replace magic numbers with named constants or enums
Code context:
     55:     """Resource limits for execution"""
     56:
     57:     cpu_cores: float = 1.0
>>>  58:     memory_mb: int = 512
     59:     disk_mb: int = 1024
     60:     max_duration_s: int = 300
     61:     network_egress: bool = False


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (21 total)
File: packages\fog\edge\runner.py:59:19
Recommendation: Replace magic numbers with named constants or enums
Code context:
     56:
     57:     cpu_cores: float = 1.0
     58:     memory_mb: int = 512
>>>  59:     disk_mb: int = 1024
     60:     max_duration_s: int = 300
     61:     network_egress: bool = False
     62:     max_files: int = 1000


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (21 total)
File: packages\fog\edge\runner.py:60:26
Recommendation: Replace magic numbers with named constants or enums
Code context:
     57:     cpu_cores: float = 1.0
     58:     memory_mb: int = 512
     59:     disk_mb: int = 1024
>>>  60:     max_duration_s: int = 300
     61:     network_egress: bool = False
     62:     max_files: int = 1000
     63:     max_processes: int = 10


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (21 total)
File: packages\fog\edge\runner.py:105:81
Recommendation: Replace magic numbers with named constants or enums
Code context:
    102:     - Capability-based security
    103:     """
    104:
>>> 105:     def __init__(self, wasmtime_path: str = "wasmtime", default_timeout: float = 300.0, temp_dir: str | None = None):
    106:         """
    107:         Initialize WASI runner
    108:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (21 total)
File: packages\fog\edge\runner.py:214:50
Recommendation: Replace magic numbers with named constants or enums
Code context:
    211:             ]
    212:
    213:             # Add memory limit (in pages, 64KB each)
>>> 214:             memory_pages = (resources.memory_mb * 1024 * 1024) // 65536
    215:             cmd.extend(["--max-memory-size", str(memory_pages)])
    216:
    217:             # Add CPU limit (approximate via timeout)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\edge\__init__.py:36:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     33:     "JobRequest",
     34:     "JobStatus",
     35:     "AIVillageEdgeIntegration",
>>>  36:     "create_integrated_edge_node",
     37: ]


HARDCODED_PATH: Hardcoded path or URL detected
File: packages\fog\examples\aivillage_integration_example.py:33:18
Recommendation: Use configuration files, environment variables, or path utilities
Code context:
     30:
     31:     device_name = "aivillage-edge-001"
     32:     namespace = "aivillage/fog"
>>>  33:     gateway_url = "https://fog-gateway.aivillage.dev"
     34:
     35:     # 1. Create integrated edge node
     36:     print("1. Creating integrated edge node...")


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\examples\aivillage_integration_example.py:43:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     40:             device_name=device_name, operator_namespace=namespace, fog_gateway_url=gateway_url
     41:         )
     42:
>>>  43:         print(f"   ✓ Edge node created: {device_name}")
     44:         print(f"   ✓ Namespace: {namespace}")
     45:         print(f"   ✓ Gateway: {gateway_url}")
     46:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\examples\aivillage_integration_example.py:144:18
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    141:         if integration.p2p_bridge:
    142:             print("   ✓ P2P bridge connected")
    143:             print("   📡 Available transports: BitChat (BLE), BetaNet (HTTP), QUIC")
>>> 144:             print("   🔄 Automatic transport selection based on device state")
    145:             print("   📱 Mobile-optimized routing with battery awareness")
    146:         else:
    147:             print("   ℹ️ P2P bridge not available (using direct fog communication)")


HARDCODED_PATH: Hardcoded path or URL detected
File: packages\fog\examples\aivillage_integration_example.py:238:32
Recommendation: Use configuration files, environment variables, or path utilities
Code context:
    235:             integration = AIVillageEdgeIntegration(
    236:                 device_name=device["name"],
    237:                 operator_namespace="aivillage/fog",
>>> 238:                 fog_gateway_url="https://fog-gateway.aivillage.dev",
    239:             )
    240:
    241:             await integration.initialize()


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\examples\aivillage_integration_example.py:244:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    241:             await integration.initialize()
    242:             integrations.append(integration)
    243:
>>> 244:         print(f"   ✓ Fog network created with {len(integrations)} devices")
    245:
    246:         # Show network topology
    247:         print("\n2. Fog network topology:")


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'integration' methods (8 calls)
File: packages\fog\examples\aivillage_integration_example.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'capabilities' methods (12 calls)
File: packages\fog\examples\aivillage_integration_example.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\examples\betanet_fog_example.py:27:10
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     24:     )
     25: except ImportError:
     26:     print("Error: Could not import BetaNet fog integration")
>>>  27:     print("Make sure you're running from the AIVillage root directory")
     28:     exit(1)
     29:
     30: # Set up logging


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\examples\betanet_fog_example.py:164:17
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    161:     test_cases = [
    162:         ("low", "routine_maintenance_job"),
    163:         ("normal", "standard_inference_job"),
>>> 164:         ("high", "urgent_security_update"),
    165:     ]
    166:
    167:     for priority, job_description in test_cases:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\examples\betanet_fog_example.py:189:14
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    186:
    187:     # Check if we're in the right directory
    188:     if not Path("packages/fog/bridges/betanet_integration.py").exists():
>>> 189:         print("❌ Error: Run this script from the AIVillage root directory")
    190:         return
    191:
    192:     try:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'result' methods (6 calls)
File: packages\fog\examples\betanet_fog_example.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\examples\edge_integration_example.py:1:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
>>>   1: """
      2: Example: Edge Device Integration
      3:
      4: Demonstrates the complete edge device integration including:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\examples\edge_integration_example.py:31:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     28:
     29:
     30: async def create_sample_wasm_module() -> bytes:
>>>  31:     """Create a simple WASM module for testing"""
     32:
     33:     # This is a simple "Hello World" WASM module compiled from:
     34:     # ```c


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\examples\edge_integration_example.py:51:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     48:
     49:
     50: async def edge_device_simulation():
>>>  51:     """Simulate an edge device joining the fog network and executing jobs"""
     52:
     53:     print("🌫️ Edge Device Fog Integration Demo")
     54:     print("=" * 50)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\examples\edge_integration_example.py:105:14
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    102:     # Set up beacon callbacks
    103:     async def on_capability_changed(capability):
    104:         print(
>>> 105:             f"   📡 Capability updated: {capability.cpu_cores} cores, "
    106:             f"{capability.memory_mb}MB, power: {capability.power_profile}"
    107:         )
    108:


HARDCODED_PATH: Hardcoded path or URL detected
File: packages\fog\examples\edge_integration_example.py:112:23
Recommendation: Use configuration files, environment variables, or path utilities
Code context:
    109:     beacon.on_capability_changed = on_capability_changed
    110:
    111:     # Add mock fog gateway
>>> 112:     beacon.add_gateway("https://fog-gateway.aivillage.dev")
    113:
    114:     await beacon.start()
    115:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'monitor' methods (9 calls)
File: packages\fog\examples\edge_integration_example.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'beacon' methods (7 calls)
File: packages\fog\examples\edge_integration_example.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (20 total)
File: packages\fog\examples\edge_integration_example.py:54:16
Recommendation: Replace magic numbers with named constants or enums
Code context:
     51:     """Simulate an edge device joining the fog network and executing jobs"""
     52:
     53:     print("🌫️ Edge Device Fog Integration Demo")
>>>  54:     print("=" * 50)
     55:
     56:     device_name = "dev-laptop-001"
     57:     namespace = "aivillage/edge"


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (20 total)
File: packages\fog\examples\edge_integration_example.py:81:24
Recommendation: Replace magic numbers with named constants or enums
Code context:
     78:     await monitor.start_monitoring()
     79:
     80:     # Give monitor time to collect baseline
>>>  81:     await asyncio.sleep(3)
     82:
     83:     status = monitor.get_current_status()
     84:     print(f"   ✓ Device status: {status['health_status']}")


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (20 total)
File: packages\fog\examples\edge_integration_example.py:141:37
Recommendation: Replace magic numbers with named constants or enums
Code context:
    138:
    139:         # Define job resources
    140:         job_resources = ExecutionResources(
>>> 141:             cpu_cores=1.0, memory_mb=256, disk_mb=100, max_duration_s=30, network_egress=False
    142:         )
    143:
    144:         # Check if device is suitable for this workload


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (20 total)
File: packages\fog\examples\edge_integration_example.py:141:70
Recommendation: Replace magic numbers with named constants or enums
Code context:
    138:
    139:         # Define job resources
    140:         job_resources = ExecutionResources(
>>> 141:             cpu_cores=1.0, memory_mb=256, disk_mb=100, max_duration_s=30, network_egress=False
    142:         )
    143:
    144:         # Check if device is suitable for this workload


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (20 total)
File: packages\fog\examples\edge_integration_example.py:145:91
Recommendation: Replace magic numbers with named constants or enums
Code context:
    142:         )
    143:
    144:         # Check if device is suitable for this workload
>>> 145:         suitable, issues = monitor.is_suitable_for_workload(cpu_requirement=1.0, memory_mb=256, duration_s=30)
    146:
    147:         if suitable:
    148:             print("   ✓ Device suitable for workload")


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\examples\gateway_integration.py:35:10
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     32:
     33:     print("✅ Fog computing APIs integrated:")
     34:     print("  - POST /v1/fog/jobs - Submit fog jobs")
>>>  35:     print("  - POST /v1/fog/sandboxes - Create sandboxes")
     36:     print("  - GET /v1/fog/usage - Usage tracking")
     37:     print("  - POST /v1/fog/admin/nodes - Node registration")
     38:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\examples\gateway_integration.py:41:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     38:
     39:
     40: def create_standalone_fog_server() -> FastAPI:
>>>  41:     """
     42:     Create standalone fog server (for development/testing)
     43:
     44:     Returns:


HARDCODED_PATH: Hardcoded path or URL detected
File: packages\fog\examples\gateway_integration.py:68:10
Recommendation: Use configuration files, environment variables, or path utilities
Code context:
     65:     # Create standalone fog server for testing
     66:     app = create_standalone_fog_server()
     67:
>>>  68:     print("🌫️ Starting AIVillage Fog Gateway on http://localhost:8001")
     69:     print("📖 API docs available at http://localhost:8001/docs")
     70:
     71:     uvicorn.run(app, host="0.0.0.0", port=8001)


HARDCODED_PATH: Hardcoded path or URL detected
File: packages\fog\examples\gateway_integration.py:69:10
Recommendation: Use configuration files, environment variables, or path utilities
Code context:
     66:     app = create_standalone_fog_server()
     67:
     68:     print("🌫️ Starting AIVillage Fog Gateway on http://localhost:8001")
>>>  69:     print("📖 API docs available at http://localhost:8001/docs")
     70:
     71:     uvicorn.run(app, host="0.0.0.0", port=8001)


HARDCODED_PATH: Hardcoded path or URL detected
File: packages\fog\examples\sdk_usage_example.py:23:17
Recommendation: Use configuration files, environment variables, or path utilities
Code context:
     20:     """Example: Submit and monitor fog jobs"""
     21:
     22:     async with FogClient(
>>>  23:         base_url="http://localhost:8000", api_key="your-api-key-here", namespace="myorg/dev"
     24:     ) as client:
     25:         print("🚀 Job Submission Example")
     26:         print("=" * 40)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\examples\sdk_usage_example.py:32:34
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     29:         print("1. Submitting a simple Python job...")
     30:         job = await client.submit_job(
     31:             image="python:3.11-alpine",
>>>  32:             args=["python", "-c", "print('Hello from fog!')"],
     33:             resources={"cpu_cores": 1.0, "memory_mb": 512, "max_duration_s": 60},
     34:             labels={"example": "sdk-demo", "type": "hello-world"},
     35:         )


HARDCODED_PATH: Hardcoded path or URL detected
File: packages\fog\examples\sdk_usage_example.py:80:17
Recommendation: Use configuration files, environment variables, or path utilities
Code context:
     77:     """Example: Interactive sandbox management"""
     78:
     79:     async with FogClient(
>>>  80:         base_url="http://localhost:8000", api_key="your-api-key-here", namespace="myorg/dev"
     81:     ) as client:
     82:         print("\n🏗️ Sandbox Management Example")
     83:         print("=" * 40)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\examples\sdk_usage_example.py:94:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     91:             env={"PYTHONPATH": "/workspace", "EDITOR": "nano"},
     92:             network_access=True,  # Allow network for pip installs
     93:         )
>>>  94:         print(f"   ✓ Sandbox created: {sandbox.sandbox_id}")
     95:         print(f"   ✓ Connection URL: {sandbox.connection_url}")
     96:         print(f"   ✓ SSH command: {sandbox.ssh_command}")
     97:


HARDCODED_PATH: Hardcoded path or URL detected
File: packages\fog\examples\sdk_usage_example.py:136:17
Recommendation: Use configuration files, environment variables, or path utilities
Code context:
    133:     """Example: Usage and billing tracking"""
    134:
    135:     async with FogClient(
>>> 136:         base_url="http://localhost:8000", api_key="your-api-key-here", namespace="myorg/dev"
    137:     ) as client:
    138:         print("\n💰 Usage Tracking Example")
    139:         print("=" * 40)


HARDCODED_PATH: Hardcoded path or URL detected
File: packages\fog\examples\sdk_usage_example.py:178:17
Recommendation: Use configuration files, environment variables, or path utilities
Code context:
    175:     """Example: Complete fog computing workflow"""
    176:
    177:     async with FogClient(
>>> 178:         base_url="http://localhost:8000", api_key="your-api-key-here", namespace="myorg/production"
    179:     ) as client:
    180:         print("\n🔄 End-to-End Workflow Example")
    181:         print("=" * 40)


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'client' methods (25 calls)
File: packages\fog\examples\sdk_usage_example.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (21 total)
File: packages\fog\examples\sdk_usage_example.py:26:20
Recommendation: Replace magic numbers with named constants or enums
Code context:
     23:         base_url="http://localhost:8000", api_key="your-api-key-here", namespace="myorg/dev"
     24:     ) as client:
     25:         print("🚀 Job Submission Example")
>>>  26:         print("=" * 40)
     27:
     28:         # Simple job submission
     29:         print("1. Submitting a simple Python job...")


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (21 total)
File: packages\fog\examples\sdk_usage_example.py:33:54
Recommendation: Replace magic numbers with named constants or enums
Code context:
     30:         job = await client.submit_job(
     31:             image="python:3.11-alpine",
     32:             args=["python", "-c", "print('Hello from fog!')"],
>>>  33:             resources={"cpu_cores": 1.0, "memory_mb": 512, "max_duration_s": 60},
     34:             labels={"example": "sdk-demo", "type": "hello-world"},
     35:         )
     36:         print(f"   ✓ Job submitted: {job.job_id}")


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (21 total)
File: packages\fog\examples\sdk_usage_example.py:33:77
Recommendation: Replace magic numbers with named constants or enums
Code context:
     30:         job = await client.submit_job(
     31:             image="python:3.11-alpine",
     32:             args=["python", "-c", "print('Hello from fog!')"],
>>>  33:             resources={"cpu_cores": 1.0, "memory_mb": 512, "max_duration_s": 60},
     34:             labels={"example": "sdk-demo", "type": "hello-world"},
     35:         )
     36:         print(f"   ✓ Job submitted: {job.job_id}")


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (21 total)
File: packages\fog\examples\sdk_usage_example.py:40:63
Recommendation: Replace magic numbers with named constants or enums
Code context:
     37:
     38:         # Wait for completion
     39:         print("2. Waiting for job completion...")
>>>  40:         result = await client.wait_for_job(job.job_id, timeout=120.0)
     41:         print(f"   ✓ Job completed with status: {result.status}")
     42:         print(f"   ✓ Exit code: {result.exit_code}")
     43:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (21 total)
File: packages\fog\examples\sdk_usage_example.py:54:54
Recommendation: Replace magic numbers with named constants or enums
Code context:
     51:             image="alpine:latest",
     52:             args=["sh", "-c", "echo 'Processing data...' && sleep 5 && echo 'Done'"],
     53:             env={"WORKER_ID": "fog-001", "BATCH_SIZE": "100"},
>>>  54:             resources={"cpu_cores": 2.0, "memory_mb": 1024, "max_duration_s": 300},
     55:             priority="A",  # Standard priority with replication
     56:         )
     57:         print(f"   ✓ Data job submitted: {data_job.job_id}")


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\gateway\api\admin.py:1:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
>>>   1: """
      2: Fog Admin API
      3:
      4: Provides REST endpoints for administrative operations:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\gateway\api\admin.py:184:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    181:
    182:
    183: class CapacityUpdate(BaseModel):
>>> 184:     """Node capacity update request"""
    185:
    186:     capabilities: NodeCapabilities
    187:     maintenance_mode: bool = Field(False, description="Put node in maintenance")


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\gateway\api\admin.py:454:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    451:             capacity_update: CapacityUpdate,
    452:             # TODO: Add node operator RBAC dependency
    453:         ) -> NodeStatusResponse:
>>> 454:             """Update node capacity and capabilities"""
    455:
    456:             node = self._nodes.get(node_id)
    457:             if not node:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\gateway\api\admin.py:447:24
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    444:             "/nodes/{node_id}/capacity",
    445:             response_model=NodeStatusResponse,
    446:             summary="Update node capacity",
>>> 447:             description="Update node capabilities and capacity",
    448:         )
    449:         async def update_node_capacity(
    450:             node_id: str,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\gateway\api\admin.py:548:24
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    545:         @self.router.post(
    546:             "/nodes/{node_id}/heartbeat",
    547:             summary="Node heartbeat",
>>> 548:             description="Update node liveness and utilization metrics",
    549:         )
    550:         async def node_heartbeat(
    551:             node_id: str,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\gateway\api\admin.py:732:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    729:         pass
    730:
    731:     async def _drain_node_workloads(self, node: FogNode):
>>> 732:         """Gracefully drain all workloads from node"""
    733:         # TODO: Implement workload draining
    734:         pass
    735:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\gateway\api\admin.py:842:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    839:
    840: # Factory function
    841: def create_admin_api() -> AdminAPI:
>>> 842:     """Create admin API instance"""
    843:     return AdminAPI()


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (15 calls)
File: packages\fog\gateway\api\admin.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'datetime' methods (14 calls)
File: packages\fog\gateway\api\admin.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (9 calls)
File: packages\fog\gateway\api\admin.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (32 total)
File: packages\fog\gateway\api\admin.py:146:30
Recommendation: Replace magic numbers with named constants or enums
Code context:
    143:     @validator("public_key")
    144:     def validate_public_key(cls, v):
    145:         """Validate Ed25519 public key format"""
>>> 146:         if not v or len(v) != 64:  # 32 bytes = 64 hex chars
    147:             raise ValueError("Public key must be 64-character hex string")
    148:         return v
    149:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (32 total)
File: packages\fog\gateway\api\admin.py:388:52
Recommendation: Replace magic numbers with named constants or enums
Code context:
    385:                 # Validate attestation evidence
    386:                 attestation_valid = await self._validate_attestation(node)
    387:                 if not attestation_valid:
>>> 388:                     raise HTTPException(status_code=400, detail="Invalid attestation")
    389:
    390:                 # Calculate initial trust score
    391:                 node.trust_score = self._calculate_trust_score(node)


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (32 total)
File: packages\fog\gateway\api\admin.py:392:82
Recommendation: Replace magic numbers with named constants or enums
Code context:
    389:
    390:                 # Calculate initial trust score
    391:                 node.trust_score = self._calculate_trust_score(node)
>>> 392:                 node.attestation_valid_until = datetime.now(UTC) + timedelta(days=30)
    393:
    394:                 # Verify operator namespace access
    395:                 await self._verify_namespace_access(registration.operator_namespace, current_user)


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (32 total)
File: packages\fog\gateway\api\admin.py:434:35
Recommendation: Replace magic numbers with named constants or enums
Code context:
    431:             # TODO: Verify user has access to node's namespace
    432:
    433:             # Update mock utilization data
>>> 434:             node.cpu_utilization = 35.2
    435:             node.memory_utilization = 45.8
    436:             node.current_jobs = 3
    437:             node.current_sandboxes = 1


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (32 total)
File: packages\fog\gateway\api\admin.py:435:38
Recommendation: Replace magic numbers with named constants or enums
Code context:
    432:
    433:             # Update mock utilization data
    434:             node.cpu_utilization = 35.2
>>> 435:             node.memory_utilization = 45.8
    436:             node.current_jobs = 3
    437:             node.current_sandboxes = 1
    438:             node.last_seen = datetime.now(UTC)


LONG_PARAMETER_LIST: Function 'record_job_start' has 6 parameters (>5)
File: packages\fog\gateway\api\billing.py:168:4
Recommendation: Use parameter objects, data classes, or keyword-only arguments
Code context:
    165:     # Last update timestamp
    166:     last_updated: datetime = field(default_factory=lambda: datetime.now(UTC))
    167:
>>> 168:     def record_job_start(
    169:         self,
    170:         job_id: str,
    171:         cpu_cores: float,


LONG_PARAMETER_LIST: Function 'record_job_completion' has 11 parameters (>5)
File: packages\fog\gateway\api\billing.py:183:4
Recommendation: Use parameter objects, data classes, or keyword-only arguments
Code context:
    180:
    181:         logger.debug(f"Started job {job_id} in namespace {self.namespace}")
    182:
>>> 183:     def record_job_completion(
    184:         self,
    185:         job_id: str,
    186:         cpu_cores: float,


LONG_PARAMETER_LIST: Function '_calculate_job_cost' has 7 parameters (>5)
File: packages\fog\gateway\api\billing.py:275:4
Recommendation: Use parameter objects, data classes, or keyword-only arguments
Code context:
    272:             pricing_tier_breakdown=pricing_tier_breakdown,
    273:         )
    274:
>>> 275:     def _calculate_job_cost(
    276:         self,
    277:         cpu_cores: float,
    278:         memory_gb: float,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\gateway\api\billing.py:329:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    326:         return total_cost
    327:
    328:     def _update_time_based_usage(self, cost: float) -> None:
>>> 329:         """Update hourly/daily/monthly usage tracking"""
    330:
    331:         now = datetime.now(UTC)
    332:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\gateway\api\billing.py:385:26
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    382:
    383:         if namespace not in self.namespace_trackers:
    384:             self.namespace_trackers[namespace] = NamespaceUsageTracker(namespace=namespace)
>>> 385:             logger.info(f"Created usage tracker for namespace: {namespace}")
    386:
    387:         return self.namespace_trackers[namespace]
    388:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'datetime' methods (12 calls)
File: packages\fog\gateway\api\billing.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (12 calls)
File: packages\fog\gateway\api\billing.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'billing_router' methods (6 calls)
File: packages\fog\gateway\api\billing.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (39 total)
File: packages\fog\gateway\api\billing.py:72:37
Recommendation: Replace magic numbers with named constants or enums
Code context:
     69: class PriceQuoteRequest(BaseModel):
     70:     """Request for price quote"""
     71:
>>>  72:     cpu_cores: float = Field(1.0, ge=0.1, le=100.0, description="CPU cores required")
     73:     memory_gb: float = Field(1.0, ge=0.1, le=1000.0, description="Memory GB required")
     74:     disk_gb: float = Field(2.0, ge=0.1, le=10000.0, description="Disk GB required")
     75:     estimated_duration_hours: float = Field(1.0, ge=0.1, le=168.0, description="Estimated duration")


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (39 total)
File: packages\fog\gateway\api\billing.py:73:37
Recommendation: Replace magic numbers with named constants or enums
Code context:
     70:     """Request for price quote"""
     71:
     72:     cpu_cores: float = Field(1.0, ge=0.1, le=100.0, description="CPU cores required")
>>>  73:     memory_gb: float = Field(1.0, ge=0.1, le=1000.0, description="Memory GB required")
     74:     disk_gb: float = Field(2.0, ge=0.1, le=10000.0, description="Disk GB required")
     75:     estimated_duration_hours: float = Field(1.0, ge=0.1, le=168.0, description="Estimated duration")
     76:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (39 total)
File: packages\fog\gateway\api\billing.py:74:35
Recommendation: Replace magic numbers with named constants or enums
Code context:
     71:
     72:     cpu_cores: float = Field(1.0, ge=0.1, le=100.0, description="CPU cores required")
     73:     memory_gb: float = Field(1.0, ge=0.1, le=1000.0, description="Memory GB required")
>>>  74:     disk_gb: float = Field(2.0, ge=0.1, le=10000.0, description="Disk GB required")
     75:     estimated_duration_hours: float = Field(1.0, ge=0.1, le=168.0, description="Estimated duration")
     76:
     77:     bid_type: BidType = Field(BidType.SPOT, description="Bidding type")


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (39 total)
File: packages\fog\gateway\api\billing.py:74:43
Recommendation: Replace magic numbers with named constants or enums
Code context:
     71:
     72:     cpu_cores: float = Field(1.0, ge=0.1, le=100.0, description="CPU cores required")
     73:     memory_gb: float = Field(1.0, ge=0.1, le=1000.0, description="Memory GB required")
>>>  74:     disk_gb: float = Field(2.0, ge=0.1, le=10000.0, description="Disk GB required")
     75:     estimated_duration_hours: float = Field(1.0, ge=0.1, le=168.0, description="Estimated duration")
     76:
     77:     bid_type: BidType = Field(BidType.SPOT, description="Bidding type")


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (39 total)
File: packages\fog\gateway\api\billing.py:75:52
Recommendation: Replace magic numbers with named constants or enums
Code context:
     72:     cpu_cores: float = Field(1.0, ge=0.1, le=100.0, description="CPU cores required")
     73:     memory_gb: float = Field(1.0, ge=0.1, le=1000.0, description="Memory GB required")
     74:     disk_gb: float = Field(2.0, ge=0.1, le=10000.0, description="Disk GB required")
>>>  75:     estimated_duration_hours: float = Field(1.0, ge=0.1, le=168.0, description="Estimated duration")
     76:
     77:     bid_type: BidType = Field(BidType.SPOT, description="Bidding type")
     78:     pricing_tier: PricingTier = Field(PricingTier.BASIC, description="SLA pricing tier")


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\gateway\api\jobs.py:1:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
>>>   1: """
      2: Fog Jobs API
      3:
      4: Provides REST endpoints for fog job management:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\gateway\api\jobs.py:311:69
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    308:             return job.to_response()
    309:
    310:         @self.router.get(
>>> 311:             "/{job_id}/logs", summary="Stream job logs", description="Stream real-time logs from job execution"
    312:         )
    313:         async def get_job_logs(
    314:             job_id: str,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\gateway\api\jobs.py:506:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    503:         await self._schedule_job(job)
    504:
    505:     async def _stream_job_logs(self, job_id: str):
>>> 506:         """Stream job logs from BetaNet transport."""
    507:         try:
    508:             from packages.p2p.betanet.htx_transport import HtxClient
    509:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\gateway\api\jobs.py:548:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    545:
    546: # Factory function
    547: def create_jobs_api() -> JobsAPI:
>>> 548:     """Create jobs API instance"""
    549:     return JobsAPI()


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (7 calls)
File: packages\fog\gateway\api\jobs.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (12 calls)
File: packages\fog\gateway\api\jobs.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (17 total)
File: packages\fog\gateway\api\jobs.py:58:21
Recommendation: Replace magic numbers with named constants or enums
Code context:
     55:     """Resource requirements for fog job"""
     56:
     57:     cpu_cores: float = 1.0
>>>  58:     memory_mb: int = 512
     59:     disk_mb: int = 1024
     60:     max_duration_s: int = 300
     61:     network_egress: bool = False  # Deny egress by default for security


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (17 total)
File: packages\fog\gateway\api\jobs.py:59:19
Recommendation: Replace magic numbers with named constants or enums
Code context:
     56:
     57:     cpu_cores: float = 1.0
     58:     memory_mb: int = 512
>>>  59:     disk_mb: int = 1024
     60:     max_duration_s: int = 300
     61:     network_egress: bool = False  # Deny egress by default for security
     62:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (17 total)
File: packages\fog\gateway\api\jobs.py:60:26
Recommendation: Replace magic numbers with named constants or enums
Code context:
     57:     cpu_cores: float = 1.0
     58:     memory_mb: int = 512
     59:     disk_mb: int = 1024
>>>  60:     max_duration_s: int = 300
     61:     network_egress: bool = False  # Deny egress by default for security
     62:
     63:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (17 total)
File: packages\fog\gateway\api\jobs.py:90:25
Recommendation: Replace magic numbers with named constants or enums
Code context:
     87:     resources: dict[str, Any] = Field(
     88:         default_factory=lambda: {
     89:             "cpu_cores": 1.0,
>>>  90:             "memory_mb": 512,
     91:             "disk_mb": 1024,
     92:             "max_duration_s": 300,
     93:             "network_egress": False,


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (17 total)
File: packages\fog\gateway\api\jobs.py:91:23
Recommendation: Replace magic numbers with named constants or enums
Code context:
     88:         default_factory=lambda: {
     89:             "cpu_cores": 1.0,
     90:             "memory_mb": 512,
>>>  91:             "disk_mb": 1024,
     92:             "max_duration_s": 300,
     93:             "network_egress": False,
     94:         },


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\gateway\api\sandboxes.py:1:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
>>>   1: """
      2: Fog Sandboxes API
      3:
      4: Provides REST endpoints for sandbox management:


HARDCODED_PATH: Hardcoded path or URL detected
File: packages\fog\gateway\api\sandboxes.py:236:43
Recommendation: Use configuration files, environment variables, or path utilities
Code context:
    233:                 sandbox.status = SandboxStatus.ACTIVE
    234:                 sandbox.started_at = datetime.now(UTC)
    235:                 sandbox.assigned_node = "fog-node-1"  # Mock assignment
>>> 236:                 sandbox.connection_url = f"https://sandbox-{sandbox.sandbox_id}.fog.aivillage.dev"
    237:                 sandbox.ssh_port = 2222
    238:
    239:                 logger.info(f"Sandbox {sandbox.sandbox_id} created in namespace {sandbox_spec.namespace}")


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\gateway\api\sandboxes.py:239:58
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    236:                 sandbox.connection_url = f"https://sandbox-{sandbox.sandbox_id}.fog.aivillage.dev"
    237:                 sandbox.ssh_port = 2222
    238:
>>> 239:                 logger.info(f"Sandbox {sandbox.sandbox_id} created in namespace {sandbox_spec.namespace}")
    240:
    241:                 return SandboxResponse(
    242:                     sandbox_id=sandbox.sandbox_id,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\gateway\api\sandboxes.py:250:31
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    247:                 )
    248:
    249:             except Exception as e:
>>> 250:                 logger.error(f"Failed to create sandbox: {e}")
    251:                 raise HTTPException(
    252:                     status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=f"Failed to create sandbox: {str(e)}"
    253:                 )


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\gateway\api\sandboxes.py:252:80
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    249:             except Exception as e:
    250:                 logger.error(f"Failed to create sandbox: {e}")
    251:                 raise HTTPException(
>>> 252:                     status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=f"Failed to create sandbox: {str(e)}"
    253:                 )
    254:
    255:         @self.router.get(


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\gateway\api\sandboxes.py:212:24
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    209:             response_model=SandboxResponse,
    210:             status_code=status.HTTP_201_CREATED,
    211:             summary="Create sandbox",
>>> 212:             description="Create a new interactive sandbox environment",
    213:         )
    214:         async def create_sandbox(
    215:             sandbox_spec: SandboxSpec,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\gateway\api\sandboxes.py:310:79
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    307:
    308:             # Mock command execution
    309:             if exec_request.command == "echo":
>>> 310:                 stdout = " ".join(exec_request.args) if exec_request.args else "Hello from fog sandbox!"
    311:                 exit_code = 0
    312:             elif exec_request.command == "pwd":
    313:                 stdout = sandbox.spec.working_dir if sandbox.spec else "/workspace"


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\gateway\api\sandboxes.py:330:67
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    327:             )
    328:
    329:         @self.router.delete(
>>> 330:             "/{sandbox_id}", summary="Delete sandbox", description="Terminate and delete sandbox environment"
    331:         )
    332:         async def delete_sandbox(
    333:             sandbox_id: str,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\gateway\api\sandboxes.py:388:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    385:
    386: # Factory function
    387: def create_sandbox_api() -> SandboxAPI:
>>> 388:     """Create sandbox API instance"""
    389:     return SandboxAPI()


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\gateway\api\usage.py:1:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
>>>   1: """
      2: Fog Usage API
      3:
      4: Provides REST endpoints for usage tracking and billing:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\gateway\api\usage.py:288:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    285:             # TODO: Add admin RBAC dependency
    286:             # current_user: User = Security(get_current_user, scopes=["fog.admin.quotas"])
    287:         ) -> NamespaceQuota:
>>> 288:             """Update namespace quota (admin operation)"""
    289:
    290:             # TODO: Validate admin permissions
    291:             # TODO: Persist quota changes to database


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\gateway\api\usage.py:296:26
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    293:             # For now, just return the updated quota
    294:             self._mock_quotas[quota_update.namespace] = quota_update
    295:
>>> 296:             logger.info(f"Updated quota for namespace {quota_update.namespace}")
    297:
    298:             return quota_update
    299:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\gateway\api\usage.py:280:20
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    277:         @self.router.post(
    278:             "/quotas",
    279:             response_model=NamespaceQuota,
>>> 280:             summary="Update namespace quota",
    281:             description="Update resource quotas for a namespace (admin only)",
    282:         )
    283:         async def update_quota(


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\gateway\api\usage.py:281:24
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    278:             "/quotas",
    279:             response_model=NamespaceQuota,
    280:             summary="Update namespace quota",
>>> 281:             description="Update resource quotas for a namespace (admin only)",
    282:         )
    283:         async def update_quota(
    284:             quota_update: NamespaceQuota,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\gateway\api\usage.py:339:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    336:
    337: # Factory function
    338: def create_usage_api() -> UsageAPI:
>>> 339:     """Create usage API instance"""
    340:     return UsageAPI()


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (39 total)
File: packages\fog\gateway\api\usage.py:96:36
Recommendation: Replace magic numbers with named constants or enums
Code context:
     93:     currency: str = "USD"
     94:
     95:     # Resource pricing (per unit)
>>>  96:     cpu_second_price: float = Field(0.0001, description="Price per CPU second")
     97:     memory_mb_hour_price: float = Field(0.00001, description="Price per MB-hour")
     98:     disk_mb_hour_price: float = Field(0.000001, description="Price per disk MB-hour")
     99:     network_egress_gb_price: float = Field(0.01, description="Price per GB egress")


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (39 total)
File: packages\fog\gateway\api\usage.py:97:40
Recommendation: Replace magic numbers with named constants or enums
Code context:
     94:
     95:     # Resource pricing (per unit)
     96:     cpu_second_price: float = Field(0.0001, description="Price per CPU second")
>>>  97:     memory_mb_hour_price: float = Field(0.00001, description="Price per MB-hour")
     98:     disk_mb_hour_price: float = Field(0.000001, description="Price per disk MB-hour")
     99:     network_egress_gb_price: float = Field(0.01, description="Price per GB egress")
    100:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (39 total)
File: packages\fog\gateway\api\usage.py:98:38
Recommendation: Replace magic numbers with named constants or enums
Code context:
     95:     # Resource pricing (per unit)
     96:     cpu_second_price: float = Field(0.0001, description="Price per CPU second")
     97:     memory_mb_hour_price: float = Field(0.00001, description="Price per MB-hour")
>>>  98:     disk_mb_hour_price: float = Field(0.000001, description="Price per disk MB-hour")
     99:     network_egress_gb_price: float = Field(0.01, description="Price per GB egress")
    100:
    101:     # Service pricing


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (39 total)
File: packages\fog\gateway\api\usage.py:99:43
Recommendation: Replace magic numbers with named constants or enums
Code context:
     96:     cpu_second_price: float = Field(0.0001, description="Price per CPU second")
     97:     memory_mb_hour_price: float = Field(0.00001, description="Price per MB-hour")
     98:     disk_mb_hour_price: float = Field(0.000001, description="Price per disk MB-hour")
>>>  99:     network_egress_gb_price: float = Field(0.01, description="Price per GB egress")
    100:
    101:     # Service pricing
    102:     job_execution_price: float = Field(0.001, description="Price per job execution")


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (39 total)
File: packages\fog\gateway\api\usage.py:102:39
Recommendation: Replace magic numbers with named constants or enums
Code context:
     99:     network_egress_gb_price: float = Field(0.01, description="Price per GB egress")
    100:
    101:     # Service pricing
>>> 102:     job_execution_price: float = Field(0.001, description="Price per job execution")
    103:     sandbox_hour_price: float = Field(0.10, description="Price per sandbox hour")
    104:
    105:     # Priority multipliers


LONG_PARAMETER_LIST: Function 'record_job_completed' has 6 parameters (>5)
File: packages\fog\gateway\monitoring\metrics.py:176:4
Recommendation: Use parameter objects, data classes, or keyword-only arguments
Code context:
    173:         self._placement_start_times[job_id] = time.time()
    174:         logger.debug(f"Job started: {job_id}, runtime={runtime.value}, namespace={namespace}")
    175:
>>> 176:     def record_job_completed(
    177:         self, job_id: str, namespace: str, sla_class: SLAClass, runtime: RuntimeType, cpu_seconds: float
    178:     ):
    179:         """Record a job completing successfully"""


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\gateway\monitoring\metrics.py:234:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    231:             logger.debug(f"Placement latency: {job_id}, {latency_ms:.2f}ms, class={sla_class.value}")
    232:
    233:     def update_node_trust_score(self, node_id: str, trust_score: float):
>>> 234:         """Update trust score for a fog node"""
    235:         # Clamp trust score to valid range
    236:         trust_score = max(0.0, min(1.0, trust_score))
    237:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\gateway\monitoring\metrics.py:255:23
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    252:             self._node_metrics[node_id].trust_score = trust_score
    253:             self._node_metrics[node_id].last_update = time.time()
    254:
>>> 255:         logger.debug(f"Node trust score updated: {node_id} = {trust_score:.3f}")
    256:
    257:     def update_node_utilization(self, node_id: str, cpu_ratio: float, memory_ratio: float):
    258:         """Update resource utilization for a fog node"""


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\gateway\monitoring\metrics.py:258:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    255:         logger.debug(f"Node trust score updated: {node_id} = {trust_score:.3f}")
    256:
    257:     def update_node_utilization(self, node_id: str, cpu_ratio: float, memory_ratio: float):
>>> 258:         """Update resource utilization for a fog node"""
    259:         self.node_utilization.labels(node=node_id, resource="cpu").set(cpu_ratio)
    260:         self.node_utilization.labels(node=node_id, resource="memory").set(memory_ratio)
    261:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\gateway\monitoring\metrics.py:273:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    270:         logger.warning(f"SLA violation: class={sla_class.value}, type={violation_type}")
    271:
    272:     def update_cluster_capacity(self, cpu_cores: float, memory_gb: float, storage_gb: float):
>>> 273:         """Update total cluster capacity metrics"""
    274:         self.cluster_capacity.labels(resource="cpu_cores").set(cpu_cores)
    275:         self.cluster_capacity.labels(resource="memory_gb").set(memory_gb)
    276:         self.cluster_capacity.labels(resource="storage_gb").set(storage_gb)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\gateway\monitoring\metrics.py:394:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    391:
    392:
    393: def update_node_trust_score(node_id: str, trust_score: float):
>>> 394:     """Convenience function to update node trust scores"""
    395:     get_metrics_collector().update_node_trust_score(node_id, trust_score)
    396:
    397:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (8 calls)
File: packages\fog\gateway\monitoring\metrics.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'time' methods (8 calls)
File: packages\fog\gateway\monitoring\metrics.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'kwargs' methods (7 calls)
File: packages\fog\gateway\monitoring\metrics.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'collector' methods (12 calls)
File: packages\fog\gateway\monitoring\metrics.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

SEQUENTIAL_COUPLING: Sequential coupling detected: Function '__init__' is part of a sequence-dependent API
File: packages\fog\gateway\monitoring\metrics.py:306:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    303: class SLAMetrics:
    304:     """SLA-specific metrics tracking and validation"""
    305:
>>> 306:     def __init__(self, metrics_collector: FogMetricsCollector):
    307:         self.collector = metrics_collector
    308:         self.sla_targets = {
    309:             SLAClass.S: {"placement_latency_ms": 250, "success_rate": 0.999},


SEQUENTIAL_COUPLING: Sequential coupling detected: Function '_init_metrics' is part of a sequence-dependent API
File: packages\fog\gateway\monitoring\metrics.py:87:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
     84:         self._job_queue_counts: dict[str, int] = defaultdict(int)
     85:         self._running_job_counts: dict[RuntimeType, int] = defaultdict(int)
     86:
>>>  87:     def _init_metrics(self):
     88:         """Initialize all Prometheus metrics"""
     89:
     90:         # fog_jobs_queued_total{namespace}


SEQUENTIAL_COUPLING: Sequential coupling detected: Function 'get_running_jobs_by_runtime' is part of a sequence-dependent API
File: packages\fog\gateway\monitoring\metrics.py:290:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    287:         """Get current job queue counts by namespace"""
    288:         return dict(self._job_queue_counts)
    289:
>>> 290:     def get_running_jobs_by_runtime(self) -> dict[RuntimeType, int]:
    291:         """Get current running job counts by runtime"""
    292:         return dict(self._running_job_counts)
    293:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (15 total)
File: packages\fog\gateway\monitoring\metrics.py:108:25
Recommendation: Replace magic numbers with named constants or enums
Code context:
    105:             "fog_placement_latency_ms",
    106:             "Job placement latency in milliseconds by SLA class",
    107:             ["sla_class"],
>>> 108:             buckets=[10, 25, 50, 100, 250, 500, 1000, 2500, 5000, 10000],
    109:             registry=self.registry,
    110:         )
    111:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (15 total)
File: packages\fog\gateway\monitoring\metrics.py:108:29
Recommendation: Replace magic numbers with named constants or enums
Code context:
    105:             "fog_placement_latency_ms",
    106:             "Job placement latency in milliseconds by SLA class",
    107:             ["sla_class"],
>>> 108:             buckets=[10, 25, 50, 100, 250, 500, 1000, 2500, 5000, 10000],
    109:             registry=self.registry,
    110:         )
    111:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (15 total)
File: packages\fog\gateway\monitoring\metrics.py:108:38
Recommendation: Replace magic numbers with named constants or enums
Code context:
    105:             "fog_placement_latency_ms",
    106:             "Job placement latency in milliseconds by SLA class",
    107:             ["sla_class"],
>>> 108:             buckets=[10, 25, 50, 100, 250, 500, 1000, 2500, 5000, 10000],
    109:             registry=self.registry,
    110:         )
    111:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (15 total)
File: packages\fog\gateway\monitoring\metrics.py:108:43
Recommendation: Replace magic numbers with named constants or enums
Code context:
    105:             "fog_placement_latency_ms",
    106:             "Job placement latency in milliseconds by SLA class",
    107:             ["sla_class"],
>>> 108:             buckets=[10, 25, 50, 100, 250, 500, 1000, 2500, 5000, 10000],
    109:             registry=self.registry,
    110:         )
    111:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (15 total)
File: packages\fog\gateway\monitoring\metrics.py:108:54
Recommendation: Replace magic numbers with named constants or enums
Code context:
    105:             "fog_placement_latency_ms",
    106:             "Job placement latency in milliseconds by SLA class",
    107:             ["sla_class"],
>>> 108:             buckets=[10, 25, 50, 100, 250, 500, 1000, 2500, 5000, 10000],
    109:             registry=self.registry,
    110:         )
    111:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\gateway\monitoring\__init__.py:24:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     21:     "get_metrics_collector",
     22:     "record_job_event",
     23:     "record_placement_latency",
>>>  24:     "update_node_trust_score",
     25:     "track_namespace_usage",
     26: ]


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\gateway\scheduler\marketplace.py:261:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    258:         self.price_history: list[tuple[datetime, float]] = []
    259:
    260:     def update_market_conditions(self, total_demand: float, total_supply: float, utilization_rate: float) -> None:
>>> 261:         """Update pricing based on market conditions"""
    262:
    263:         # Demand pressure: more demand = higher prices
    264:         if total_supply > 0:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\gateway\scheduler\marketplace.py:291:14
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    288:         self.price_history = [(ts, price) for ts, price in self.price_history if ts > cutoff]
    289:
    290:         logger.info(
>>> 291:             f"Market pricing updated: spot=${new_spot_price:.4f}/cpu-hour "
    292:             f"(demand={self.demand_multiplier:.2f}, supply={self.supply_multiplier:.2f})"
    293:         )
    294:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\gateway\scheduler\marketplace.py:378:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    375:         pricing_tier: PricingTier = PricingTier.BASIC,
    376:         **kwargs,
    377:     ) -> str:
>>> 378:         """Add resource listing from fog node"""
    379:
    380:         listing_id = f"listing_{uuid4().hex[:8]}"
    381:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\gateway\scheduler\marketplace.py:699:31
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    696:                 self.pricing_engine.update_market_conditions(total_demand, total_supply, utilization_rate)
    697:
    698:             except Exception as e:
>>> 699:                 logger.error(f"Error in pricing update loop: {e}")
    700:                 await asyncio.sleep(300)  # Wait longer on error
    701:
    702:     async def _get_availability_suggestions(


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\gateway\scheduler\marketplace.py:766:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    763: async def get_market_price_quote(
    764:     cpu_cores: float, memory_gb: float, duration_hours: float = 1.0, **kwargs
    765: ) -> dict[str, Any]:
>>> 766:     """Get price quote from marketplace"""
    767:
    768:     engine = await get_marketplace_engine()
    769:     return await engine.get_price_quote(cpu_cores, memory_gb, duration_hours, **kwargs)


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'datetime' methods (9 calls)
File: packages\fog\gateway\scheduler\marketplace.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (7 calls)
File: packages\fog\gateway\scheduler\marketplace.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'listing' methods (6 calls)
File: packages\fog\gateway\scheduler\marketplace.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (13 calls)
File: packages\fog\gateway\scheduler\marketplace.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'asyncio' methods (6 calls)
File: packages\fog\gateway\scheduler\marketplace.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (43 total)
File: packages\fog\gateway\scheduler\marketplace.py:74:25
Recommendation: Replace magic numbers with named constants or enums
Code context:
     71:     pricing_tier: PricingTier = PricingTier.BASIC
     72:
     73:     # Quality metrics
>>>  74:     trust_score: float = 0.5  # 0.0-1.0 trust rating
     75:     reputation_score: float = 0.5  # Based on historical performance
     76:     latency_ms: float = 100.0  # Network latency to gateway
     77:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (43 total)
File: packages\fog\gateway\scheduler\marketplace.py:75:30
Recommendation: Replace magic numbers with named constants or enums
Code context:
     72:
     73:     # Quality metrics
     74:     trust_score: float = 0.5  # 0.0-1.0 trust rating
>>>  75:     reputation_score: float = 0.5  # Based on historical performance
     76:     latency_ms: float = 100.0  # Network latency to gateway
     77:
     78:     # Availability


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (43 total)
File: packages\fog\gateway\scheduler\marketplace.py:80:32
Recommendation: Replace magic numbers with named constants or enums
Code context:
     77:
     78:     # Availability
     79:     available_until: datetime | None = None
>>>  80:     min_duration_minutes: int = 5
     81:     max_duration_hours: int = 24
     82:
     83:     # Constraints


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (43 total)
File: packages\fog\gateway\scheduler\marketplace.py:81:30
Recommendation: Replace magic numbers with named constants or enums
Code context:
     78:     # Availability
     79:     available_until: datetime | None = None
     80:     min_duration_minutes: int = 5
>>>  81:     max_duration_hours: int = 24
     82:
     83:     # Constraints
     84:     min_trust_required: float = 0.0  # Minimum bidder trust required


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (43 total)
File: packages\fog\gateway\scheduler\marketplace.py:107:63
Recommendation: Replace magic numbers with named constants or enums
Code context:
    104:             self.is_available()
    105:             and self.cpu_cores >= cpu_required
    106:             and self.memory_gb >= memory_required
>>> 107:             and duration_hours >= (self.min_duration_minutes / 60.0)
    108:             and duration_hours <= self.max_duration_hours
    109:             and bidder_trust >= self.min_trust_required
    110:         )


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\gateway\scheduler\placement.py:216:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    213:         return at_least_one_better and all_no_worse
    214:
    215:     def copy(self) -> "PlacementSolution":
>>> 216:         """Create a deep copy of the solution"""
    217:         return PlacementSolution(
    218:             assignments=self.assignments.copy(),
    219:             latency_objective=self.latency_objective,


LONG_PARAMETER_LIST: Function '__init__' has 6 parameters (>5)
File: packages\fog\gateway\scheduler\placement.py:239:4
Recommendation: Use parameter objects, data classes, or keyword-only arguments
Code context:
    236:     Pareto-optimal job placements across fog nodes.
    237:     """
    238:
>>> 239:     def __init__(
    240:         self,
    241:         population_size: int = 50,
    242:         max_generations: int = 100,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\gateway\scheduler\placement.py:686:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    683:         return offspring[: self.population_size]
    684:
    685:     def _tournament_selection(self) -> PlacementSolution:
>>> 686:         """Tournament selection for parent choosing"""
    687:
    688:         tournament = random.sample(self.population, min(self.tournament_size, len(self.population)))
    689:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\gateway\scheduler\placement.py:741:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    738:                         solution.assignments[job_id] = random.choice(capable_nodes).node_id
    739:
    740:     def _environmental_selection(self, combined_population: list[PlacementSolution]) -> list[PlacementSolution]:
>>> 741:         """Select best solutions for next generation"""
    742:
    743:         selected = []
    744:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\gateway\scheduler\placement.py:812:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    809:         self.optimization_history.append(stats)
    810:
    811:     def _select_best_solution(self) -> PlacementSolution:
>>> 812:         """Select best solution from final population"""
    813:
    814:         # Get Pareto front (rank 0)
    815:         pareto_front = [s for s in self.population if s.dominance_rank == 0 and s.feasible]


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\gateway\scheduler\placement.py:846:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    843:         return best_solution
    844:
    845:     def _create_empty_solution(self, jobs: list[JobRequest]) -> PlacementSolution:
>>> 846:         """Create empty solution when no placement is possible"""
    847:         solution = PlacementSolution()
    848:         solution.feasible = False
    849:         solution.constraint_violations = ["No capable nodes available"]


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\gateway\scheduler\placement.py:878:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    875:         logger.info(f"Registered fog node: {node.node_id}")
    876:
    877:     async def update_node_status(self, node_id: str, status_update: dict[str, Any]) -> None:
>>> 878:         """Update node status and metrics"""
    879:         if node_id in self.node_registry:
    880:             node = self.node_registry[node_id]
    881:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (24 calls)
File: packages\fog\gateway\scheduler\placement.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'time' methods (10 calls)
File: packages\fog\gateway\scheduler\placement.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (8 calls)
File: packages\fog\gateway\scheduler\placement.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'node' methods (10 calls)
File: packages\fog\gateway\scheduler\placement.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'job' methods (10 calls)
File: packages\fog\gateway\scheduler\placement.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'random' methods (7 calls)
File: packages\fog\gateway\scheduler\placement.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (32 total)
File: packages\fog\gateway\scheduler\placement.py:56:23
Recommendation: Replace magic numbers with named constants or enums
Code context:
     53:     endpoint: str
     54:
     55:     # Resource capacity
>>>  56:     cpu_cores: float = 8.0
     57:     memory_gb: float = 16.0
     58:     disk_gb: float = 100.0
     59:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (32 total)
File: packages\fog\gateway\scheduler\placement.py:57:23
Recommendation: Replace magic numbers with named constants or enums
Code context:
     54:
     55:     # Resource capacity
     56:     cpu_cores: float = 8.0
>>>  57:     memory_gb: float = 16.0
     58:     disk_gb: float = 100.0
     59:
     60:     # Current utilization (0.0-1.0)


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (32 total)
File: packages\fog\gateway\scheduler\placement.py:68:25
Recommendation: Replace magic numbers with named constants or enums
Code context:
     65:     # Performance metrics
     66:     avg_latency_ms: float = 100.0
     67:     success_rate: float = 1.0
>>>  68:     trust_score: float = 0.8
     69:
     70:     # Cost model
     71:     cpu_cost_per_hour: float = 0.10


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (32 total)
File: packages\fog\gateway\scheduler\placement.py:71:31
Recommendation: Replace magic numbers with named constants or enums
Code context:
     68:     trust_score: float = 0.8
     69:
     70:     # Cost model
>>>  71:     cpu_cost_per_hour: float = 0.10
     72:     memory_cost_per_gb_hour: float = 0.05
     73:
     74:     # Network properties


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (32 total)
File: packages\fog\gateway\scheduler\placement.py:72:37
Recommendation: Replace magic numbers with named constants or enums
Code context:
     69:
     70:     # Cost model
     71:     cpu_cost_per_hour: float = 0.10
>>>  72:     memory_cost_per_gb_hour: float = 0.05
     73:
     74:     # Network properties
     75:     region: str = "default"


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\gateway\scheduler\sla_classes.py:179:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    176:         return self.sla_definitions[sla_class]
    177:
    178:     def create_replicated_job(self, job_id: str, sla_class: SLAClass, namespace: str) -> ReplicatedJob:
>>> 179:         """Create a new replicated job with appropriate SLA requirements"""
    180:         requirements = self.get_sla_requirements(sla_class)
    181:
    182:         job = ReplicatedJob(job_id=job_id, sla_class=sla_class, namespace=namespace, requirements=requirements)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\gateway\scheduler\sla_classes.py:287:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    284:         return attestation
    285:
    286:     def _sign_execution(self, replica: JobReplica, result_data: dict[str, Any]) -> str:
>>> 287:         """Create digital signature for job execution (placeholder)"""
    288:         # In production, this would use actual cryptographic signing
    289:         execution_data = {
    290:             "replica_id": replica.replica_id,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\gateway\scheduler\sla_classes.py:407:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    404:
    405: # Convenience functions for integration with scheduler
    406: def create_job_with_sla(job_id: str, sla_class: SLAClass, namespace: str, sla_manager: SLAManager) -> ReplicatedJob:
>>> 407:     """Create a job with appropriate SLA requirements"""
    408:     return sla_manager.create_replicated_job(job_id, sla_class, namespace)
    409:
    410:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (9 calls)
File: packages\fog\gateway\scheduler\sla_classes.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (12 calls)
File: packages\fog\gateway\scheduler\sla_classes.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'time' methods (7 calls)
File: packages\fog\gateway\scheduler\sla_classes.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'job' methods (9 calls)
File: packages\fog\gateway\scheduler\sla_classes.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'sla_manager' methods (11 calls)
File: packages\fog\gateway\scheduler\sla_classes.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

SEQUENTIAL_COUPLING: Sequential coupling detected: Function '__post_init__' is part of a sequence-dependent API
File: packages\fog\gateway\scheduler\sla_classes.py:58:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
     55:     max_resource_ratio: float  # Maximum % of cluster resources
     56:     priority_weight: float  # Higher = more priority
     57:
>>>  58:     def __post_init__(self):
     59:         """Validate SLA requirements consistency"""
     60:         if self.min_replicas < 1:
     61:             raise ValueError("min_replicas must be at least 1")


SEQUENTIAL_COUPLING: Sequential coupling detected: Function '__init__' is part of a sequence-dependent API
File: packages\fog\gateway\scheduler\sla_classes.py:129:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    126:     monitoring for fog computing infrastructure.
    127:     """
    128:
>>> 129:     def __init__(self, metrics_collector: FogMetricsCollector):
    130:         self.metrics_collector = metrics_collector
    131:         self.active_jobs: dict[str, ReplicatedJob] = {}
    132:         self.sla_definitions = self._initialize_sla_definitions()


SEQUENTIAL_COUPLING: Sequential coupling detected: Function '_initialize_sla_definitions' is part of a sequence-dependent API
File: packages\fog\gateway\scheduler\sla_classes.py:139:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    136:
    137:         logger.info("SLA Manager initialized with three-tier system")
    138:
>>> 139:     def _initialize_sla_definitions(self) -> dict[SLAClass, SLARequirements]:
    140:         """Initialize SLA class definitions and requirements"""
    141:         return {
    142:             SLAClass.S: SLARequirements(


SEQUENTIAL_COUPLING: Sequential coupling detected: Function 'cleanup_completed_jobs' is part of a sequence-dependent API
File: packages\fog\gateway\scheduler\sla_classes.py:388:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    385:             "report_timestamp": time.time(),
    386:         }
    387:
>>> 388:     def cleanup_completed_jobs(self, retention_hours: int = 24):
    389:         """Clean up completed jobs older than retention period"""
    390:         cutoff_time = time.time() - (retention_hours * 3600)
    391:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (15 total)
File: packages\fog\gateway\scheduler\sla_classes.py:144:41
Recommendation: Replace magic numbers with named constants or enums
Code context:
    141:         return {
    142:             SLAClass.S: SLARequirements(
    143:                 sla_class=SLAClass.S,
>>> 144:                 max_placement_latency_ms=250,
    145:                 min_success_rate=0.999,
    146:                 replication_strategy=ReplicationStrategy.ACTIVE_ACTIVE,
    147:                 min_replicas=3,


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (15 total)
File: packages\fog\gateway\scheduler\sla_classes.py:145:33
Recommendation: Replace magic numbers with named constants or enums
Code context:
    142:             SLAClass.S: SLARequirements(
    143:                 sla_class=SLAClass.S,
    144:                 max_placement_latency_ms=250,
>>> 145:                 min_success_rate=0.999,
    146:                 replication_strategy=ReplicationStrategy.ACTIVE_ACTIVE,
    147:                 min_replicas=3,
    148:                 requires_attestation=True,


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (15 total)
File: packages\fog\gateway\scheduler\sla_classes.py:147:29
Recommendation: Replace magic numbers with named constants or enums
Code context:
    144:                 max_placement_latency_ms=250,
    145:                 min_success_rate=0.999,
    146:                 replication_strategy=ReplicationStrategy.ACTIVE_ACTIVE,
>>> 147:                 min_replicas=3,
    148:                 requires_attestation=True,
    149:                 max_resource_ratio=0.3,  # Max 30% of cluster
    150:                 priority_weight=3.0,


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (15 total)
File: packages\fog\gateway\scheduler\sla_classes.py:149:35
Recommendation: Replace magic numbers with named constants or enums
Code context:
    146:                 replication_strategy=ReplicationStrategy.ACTIVE_ACTIVE,
    147:                 min_replicas=3,
    148:                 requires_attestation=True,
>>> 149:                 max_resource_ratio=0.3,  # Max 30% of cluster
    150:                 priority_weight=3.0,
    151:             ),
    152:             SLAClass.A: SLARequirements(


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (15 total)
File: packages\fog\gateway\scheduler\sla_classes.py:150:32
Recommendation: Replace magic numbers with named constants or enums
Code context:
    147:                 min_replicas=3,
    148:                 requires_attestation=True,
    149:                 max_resource_ratio=0.3,  # Max 30% of cluster
>>> 150:                 priority_weight=3.0,
    151:             ),
    152:             SLAClass.A: SLARequirements(
    153:                 sla_class=SLAClass.A,


HARDCODED_PATH: Hardcoded path or URL detected
File: packages\fog\gateway\security\policy.py:290:31
Recommendation: Use configuration files, environment variables, or path utilities
Code context:
    287:
    288:         # Audit configuration
    289:         self.audit_enabled = True
>>> 290:         self.audit_file_path = "/var/log/fog/security_audit.log"
    291:
    292:         logger.info(f"Fog Security Policy Engine initialized with level: {policy_level.value}")
    293:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\gateway\security\policy.py:515:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    512:             )
    513:
    514:     async def create_namespace_quota(self, namespace: str, quota_config: dict[str, Any]) -> ResourceQuota:
>>> 515:         """Create or update namespace quota"""
    516:
    517:         quota = ResourceQuota(
    518:             namespace=namespace,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\gateway\security\policy.py:534:20
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    531:             "QUOTA_CREATED",
    532:             namespace=namespace,
    533:             severity="INFO",
>>> 534:             message="Namespace quota created/updated",
    535:             details=quota_config,
    536:         )
    537:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\gateway\security\policy.py:652:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    649:         return self.namespace_quotas.get(namespace)
    650:
    651:     async def _create_default_quotas(self) -> None:
>>> 652:         """Create default namespace quotas"""
    653:
    654:         default_namespaces = ["default", "development", "staging"]
    655:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'datetime' methods (9 calls)
File: packages\fog\gateway\security\policy.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (9 calls)
File: packages\fog\gateway\security\policy.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (22 calls)
File: packages\fog\gateway\security\policy.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'asyncio' methods (6 calls)
File: packages\fog\gateway\security\policy.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'violations' methods (10 calls)
File: packages\fog\gateway\security\policy.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'job_spec' methods (8 calls)
File: packages\fog\gateway\security\policy.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'quota' methods (10 calls)
File: packages\fog\gateway\security\policy.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'quota_config' methods (7 calls)
File: packages\fog\gateway\security\policy.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (24 total)
File: packages\fog\gateway\security\policy.py:68:27
Recommendation: Replace magic numbers with named constants or enums
Code context:
     65:
     66:     # Compute quotas
     67:     max_cpu_cores: float = 10.0
>>>  68:     max_memory_gb: float = 8.0
     69:     max_disk_gb: float = 20.0
     70:     max_gpu_hours: float = 2.0
     71:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (24 total)
File: packages\fog\gateway\security\policy.py:69:25
Recommendation: Replace magic numbers with named constants or enums
Code context:
     66:     # Compute quotas
     67:     max_cpu_cores: float = 10.0
     68:     max_memory_gb: float = 8.0
>>>  69:     max_disk_gb: float = 20.0
     70:     max_gpu_hours: float = 2.0
     71:
     72:     # Job quotas


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (24 total)
File: packages\fog\gateway\security\policy.py:73:31
Recommendation: Replace magic numbers with named constants or enums
Code context:
     70:     max_gpu_hours: float = 2.0
     71:
     72:     # Job quotas
>>>  73:     max_concurrent_jobs: int = 5
     74:     max_daily_jobs: int = 100
     75:     max_job_duration_hours: float = 2.0
     76:     max_job_size_mb: float = 100.0


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (24 total)
File: packages\fog\gateway\security\policy.py:80:27
Recommendation: Replace magic numbers with named constants or enums
Code context:
     77:
     78:     # Network quotas
     79:     max_ingress_gb: float = 1.0
>>>  80:     max_egress_gb: float = 0.5  # Default minimal egress
     81:
     82:     # Cost quotas (in USD)
     83:     max_daily_cost: float = 10.0


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (24 total)
File: packages\fog\gateway\security\policy.py:84:30
Recommendation: Replace magic numbers with named constants or enums
Code context:
     81:
     82:     # Cost quotas (in USD)
     83:     max_daily_cost: float = 10.0
>>>  84:     max_monthly_cost: float = 200.0
     85:
     86:     # Current usage tracking
     87:     current_cpu_cores: float = 0.0


HARDCODED_PATH: Hardcoded path or URL detected
File: packages\fog\sdk\python\connection_manager.py:42:39
Recommendation: Use configuration files, environment variables, or path utilities
Code context:
     39: class ConnectionConfig:
     40:     """Configuration for connection settings."""
     41:
>>>  42:     def __init__(self, base_url: str = "http://localhost:8000", timeout: float = 30.0):
     43:         self.base_url = base_url.rstrip("/")
     44:         self.timeout = aiohttp.ClientTimeout(total=timeout)
     45:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\sdk\python\fog_client.py:1:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
>>>   1: """
      2: Refactored AIVillage Fog Computing Client
      3:
      4: High-level Python client refactored to follow connascence principles.


HARDCODED_PATH: Hardcoded path or URL detected
File: packages\fog\sdk\python\fog_client.py:1:0
Recommendation: Use configuration files, environment variables, or path utilities
Code context:
>>>   1: """
      2: Refactored AIVillage Fog Computing Client
      3:
      4: High-level Python client refactored to follow connascence principles.


HARDCODED_PATH: Hardcoded path or URL detected
File: packages\fog\sdk\python\fog_client.py:62:24
Recommendation: Use configuration files, environment variables, or path utilities
Code context:
     59:
     60:     def __init__(
     61:         self,
>>>  62:         base_url: str = "http://localhost:8000",
     63:         api_key: str | None = None,
     64:         namespace: str | None = None,
     65:         timeout: float = 30.0,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\sdk\python\fog_client.py:178:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    175:         network_access: bool = False,
    176:         namespace: str | None = None,
    177:     ) -> SandboxInfo:
>>> 178:         """Create interactive sandbox environment."""
    179:         self._ensure_initialized()
    180:         return await self._sandbox_handler.create_sandbox(
    181:             image=image,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\sdk\python\fog_client.py:207:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    204:         return await self._sandbox_handler.exec_in_sandbox(sandbox_id, command, args, working_dir, timeout)
    205:
    206:     async def delete_sandbox(self, sandbox_id: str) -> dict[str, str]:
>>> 207:         """Terminate and delete sandbox."""
    208:         self._ensure_initialized()
    209:         return await self._sandbox_handler.delete_sandbox(sandbox_id)
    210:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (30 calls)
File: packages\fog\sdk\python\fog_client.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (19 total)
File: packages\fog\sdk\python\fog_client.py:65:25
Recommendation: Replace magic numbers with named constants or enums
Code context:
     62:         base_url: str = "http://localhost:8000",
     63:         api_key: str | None = None,
     64:         namespace: str | None = None,
>>>  65:         timeout: float = 30.0,
     66:     ):
     67:         """
     68:         Initialize fog client with dependency injection.


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (19 total)
File: packages\fog\sdk\python\fog_client.py:162:63
Recommendation: Replace magic numbers with named constants or enums
Code context:
    159:             namespace=namespace or self._default_namespace, status=status, limit=limit
    160:         )
    161:
>>> 162:     async def wait_for_job(self, job_id: str, timeout: float = 300.0, poll_interval: float = 2.0) -> JobResult:
    163:         """Wait for job completion with polling."""
    164:         self._ensure_initialized()
    165:         return await self._job_handler.wait_for_job(job_id, timeout, poll_interval)


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (19 total)
File: packages\fog\sdk\python\fog_client.py:200:23
Recommendation: Replace magic numbers with named constants or enums
Code context:
    197:         command: str,
    198:         args: list[str] | None = None,
    199:         working_dir: str | None = None,
>>> 200:         timeout: int = 30,
    201:     ) -> dict[str, Any]:
    202:         """Execute command in sandbox."""
    203:         self._ensure_initialized()


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (19 total)
File: packages\fog\sdk\python\fog_client.py:247:33
Recommendation: Replace magic numbers with named constants or enums
Code context:
    244:         disk_gb: float = 2.0,
    245:         bid_type: str = "spot",
    246:         pricing_tier: str = "basic",
>>> 247:         min_trust_score: float = 0.3,
    248:         max_latency_ms: float = 500.0,
    249:     ) -> PriceQuote:
    250:         """Get price quote for resource requirements."""


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (19 total)
File: packages\fog\sdk\python\fog_client.py:248:32
Recommendation: Replace magic numbers with named constants or enums
Code context:
    245:         bid_type: str = "spot",
    246:         pricing_tier: str = "basic",
    247:         min_trust_score: float = 0.3,
>>> 248:         max_latency_ms: float = 500.0,
    249:     ) -> PriceQuote:
    250:         """Get price quote for resource requirements."""
    251:         self._ensure_initialized()


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\sdk\python\fog_client_original.py:1:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
>>>   1: """
      2: AIVillage Fog Computing Client
      3:
      4: High-level Python client for interacting with the AIVillage fog network.


HARDCODED_PATH: Hardcoded path or URL detected
File: packages\fog\sdk\python\fog_client_original.py:1:0
Recommendation: Use configuration files, environment variables, or path utilities
Code context:
>>>   1: """
      2: AIVillage Fog Computing Client
      3:
      4: High-level Python client for interacting with the AIVillage fog network.


HARDCODED_PATH: Hardcoded path or URL detected
File: packages\fog\sdk\python\fog_client_original.py:160:24
Recommendation: Use configuration files, environment variables, or path utilities
Code context:
    157:
    158:     def __init__(
    159:         self,
>>> 160:         base_url: str = "http://localhost:8000",
    161:         api_key: str | None = None,
    162:         namespace: str | None = None,
    163:         timeout: float = 30.0,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\sdk\python\fog_client_original.py:362:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    359:         network_access: bool = False,
    360:         namespace: str | None = None,
    361:     ) -> SandboxInfo:
>>> 362:         """
    363:         Create interactive sandbox environment
    364:
    365:         Args:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\sdk\python\fog_client_original.py:431:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    428:         return await self._request("POST", f"/v1/fog/sandboxes/{sandbox_id}/exec", json_data=exec_spec)
    429:
    430:     async def delete_sandbox(self, sandbox_id: str) -> dict[str, str]:
>>> 431:         """Terminate and delete sandbox"""
    432:         return await self._request("DELETE", f"/v1/fog/sandboxes/{sandbox_id}")
    433:
    434:     async def list_sandboxes(


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\sdk\python\fog_client_original.py:529:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    526:         return await self.wait_for_job(job.job_id, timeout=timeout)
    527:
    528:     async def stream_logs(self, job_id: str, follow: bool = True) -> AsyncGenerator[str, None]:
>>> 529:         """
    530:         Stream job logs (placeholder - WebSocket implementation needed)
    531:
    532:         Args:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'response' methods (26 calls)
File: packages\fog\sdk\python\fog_client_original.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (29 calls)
File: packages\fog\sdk\python\fog_client_original.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (23 total)
File: packages\fog\sdk\python\fog_client_original.py:163:25
Recommendation: Replace magic numbers with named constants or enums
Code context:
    160:         base_url: str = "http://localhost:8000",
    161:         api_key: str | None = None,
    162:         namespace: str | None = None,
>>> 163:         timeout: float = 30.0,
    164:     ):
    165:         """
    166:         Initialize fog client


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (23 total)
File: packages\fog\sdk\python\fog_client_original.py:208:38
Recommendation: Replace magic numbers with named constants or enums
Code context:
    205:         try:
    206:             async with self._session.request(method, url, json=json_data, params=params) as response:
    207:                 # Handle common HTTP errors
>>> 208:                 if response.status == 401:
    209:                     raise AuthenticationError("Invalid API key or unauthorized")
    210:                 elif response.status == 404:
    211:                     if "/jobs/" in path:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (23 total)
File: packages\fog\sdk\python\fog_client_original.py:210:40
Recommendation: Replace magic numbers with named constants or enums
Code context:
    207:                 # Handle common HTTP errors
    208:                 if response.status == 401:
    209:                     raise AuthenticationError("Invalid API key or unauthorized")
>>> 210:                 elif response.status == 404:
    211:                     if "/jobs/" in path:
    212:                         raise JobNotFoundError("Job not found")
    213:                     elif "/sandboxes/" in path:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (23 total)
File: packages\fog\sdk\python\fog_client_original.py:217:40
Recommendation: Replace magic numbers with named constants or enums
Code context:
    214:                         raise SandboxNotFoundError("Sandbox not found")
    215:                     else:
    216:                         raise FogClientError("Resource not found")
>>> 217:                 elif response.status == 429:
    218:                     raise QuotaExceededError("Rate limit or quota exceeded")
    219:                 elif response.status >= 400:
    220:                     error_text = await response.text()


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (23 total)
File: packages\fog\sdk\python\fog_client_original.py:219:40
Recommendation: Replace magic numbers with named constants or enums
Code context:
    216:                         raise FogClientError("Resource not found")
    217:                 elif response.status == 429:
    218:                     raise QuotaExceededError("Rate limit or quota exceeded")
>>> 219:                 elif response.status >= 400:
    220:                     error_text = await response.text()
    221:                     raise FogClientError(f"API error {response.status}: {error_text}")
    222:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\sdk\python\protocol_handlers.py:158:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    155:         network_access: bool = False,
    156:         namespace: str | None = None,
    157:     ) -> SandboxInfo:
>>> 158:         """Create interactive sandbox environment."""
    159:         sandbox_spec = {
    160:             "namespace": namespace,
    161:             "type": sandbox_type,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\fog\sdk\python\protocol_handlers.py:211:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    208:         return await self._http_client.request("POST", f"/v1/fog/sandboxes/{sandbox_id}/exec", json_data=exec_spec)
    209:
    210:     async def delete_sandbox(self, sandbox_id: str) -> dict[str, str]:
>>> 211:         """Terminate and delete sandbox."""
    212:         return await self._http_client.request("DELETE", f"/v1/fog/sandboxes/{sandbox_id}")
    213:
    214:     async def list_sandboxes(


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'response' methods (24 calls)
File: packages\fog\sdk\python\protocol_handlers.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

LONG_PARAMETER_LIST: Function 'simple_train_loop' has 6 parameters (>5)
File: packages\hrrm\common\training_utils.py:18:0
Recommendation: Use parameter objects, data classes, or keyword-only arguments
Code context:
     15:     torch.cuda.manual_seed_all(s)
     16:
     17:
>>>  18: def simple_train_loop(model, loader, max_steps, lr=3e-4, wd=0.1, grad_accum=1):
     19:     acc = Accelerator()
     20:     (model,) = acc.prepare(model)
     21:     opt = torch.optim.AdamW(model.parameters(), lr=lr, weight_decay=wd)


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'nn' methods (7 calls)
File: packages\hrrm\common\transformer_blocks.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'torch' methods (13 calls)
File: packages\hrrm\common\transformer_blocks.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\hrrm\memory\eval_memory.py:87:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     84:
     85:
     86: def evaluate_memory_adaptation(model, num_samples=20):
>>>  87:     """Evaluate online memory adaptation (surprise-based updates)."""
     88:     model.eval()
     89:
     90:     # Track memory changes over time


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\hrrm\memory\eval_memory.py:155:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    152:
    153:
    154: def load_model(checkpoint_path: str):
>>> 155:     """Load model from checkpoint."""
    156:     checkpoint = torch.load(checkpoint_path, map_location="cpu")
    157:     config = checkpoint["config"]
    158:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'model' methods (10 calls)
File: packages\hrrm\memory\eval_memory.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'torch' methods (8 calls)
File: packages\hrrm\memory\eval_memory.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'labels' methods (6 calls)
File: packages\hrrm\memory\eval_memory.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (17 calls)
File: packages\hrrm\memory\eval_memory.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (16 total)
File: packages\hrrm\memory\eval_memory.py:29:43
Recommendation: Replace magic numbers with named constants or enums
Code context:
     26:     total_tokens = 0
     27:
     28:     with torch.no_grad():
>>>  29:         data_iter = text_stream(batch_size=4, seq_len=256, limit_steps=num_samples // 4)
     30:
     31:         for batch in data_iter:
     32:             x_ids = batch["x_ids"]


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (16 total)
File: packages\hrrm\memory\eval_memory.py:29:54
Recommendation: Replace magic numbers with named constants or enums
Code context:
     26:     total_tokens = 0
     27:
     28:     with torch.no_grad():
>>>  29:         data_iter = text_stream(batch_size=4, seq_len=256, limit_steps=num_samples // 4)
     30:
     31:         for batch in data_iter:
     32:             x_ids = batch["x_ids"]


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (16 total)
File: packages\hrrm\memory\eval_memory.py:29:86
Recommendation: Replace magic numbers with named constants or enums
Code context:
     26:     total_tokens = 0
     27:
     28:     with torch.no_grad():
>>>  29:         data_iter = text_stream(batch_size=4, seq_len=256, limit_steps=num_samples // 4)
     30:
     31:         for batch in data_iter:
     32:             x_ids = batch["x_ids"]


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (16 total)
File: packages\hrrm\memory\eval_memory.py:53:49
Recommendation: Replace magic numbers with named constants or enums
Code context:
     50:     return {"perplexity": perplexity, "avg_loss": avg_loss, "total_tokens": total_tokens}
     51:
     52:
>>>  53: def evaluate_memory_retrieval(model, num_samples=50):
     54:     """Evaluate memory retrieval performance."""
     55:     model.eval()
     56:     retrieval_scores = []


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (16 total)
File: packages\hrrm\memory\eval_memory.py:59:43
Recommendation: Replace magic numbers with named constants or enums
Code context:
     56:     retrieval_scores = []
     57:
     58:     with torch.no_grad():
>>>  59:         data_iter = text_stream(batch_size=4, seq_len=256, limit_steps=num_samples // 4)
     60:
     61:         for batch in data_iter:
     62:             x_ids = batch["x_ids"]


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\hrrm\memory\ext_memory.py:10:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
      7:
      8:
      9: class NeuralMemory(nn.Module):
>>>  10:     """
     11:     Persistent key/value memory with online plasticity:
     12:       - surprise gate: g = sigmoid(alpha * surprise)
     13:       - momentum: m_t = beta * m_{t-1} + (1-beta) * grad_like


LONG_PARAMETER_LIST: Function '__init__' has 8 parameters (>5)
File: packages\hrrm\memory\ext_memory.py:18:4
Recommendation: Use parameter objects, data classes, or keyword-only arguments
Code context:
     15:       - update: W <- W + eta * g * m_t
     16:     """
     17:
>>>  18:     def __init__(self, d_key=256, d_val=256, n_slots=1024, alpha=4.0, beta=0.9, eta=1e-2, eta_decay=1e-4):
     19:         super().__init__()
     20:         self.keys = nn.Parameter(torch.randn(n_slots, d_key) * 0.02, requires_grad=False)
     21:         self.vals = nn.Parameter(torch.randn(n_slots, d_val) * 0.02, requires_grad=False)


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'torch' methods (7 calls)
File: packages\hrrm\memory\ext_memory.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\hrrm\memory\model.py:16:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     13:
     14: @dataclass
     15: class MemoryOutput:
>>>  16:     """Output from Memory model."""
     17:
     18:     logits: torch.Tensor
     19:     loss: torch.Tensor | None = None


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\hrrm\memory\model.py:51:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     48:
     49:
     50: class MemoryAsContextTiny(nn.Module):
>>>  51:     """
     52:     Append M learned 'memory tokens' derived from NeuralMemory.read(q) to the input as extra context (MAC).
     53:     """
     54:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'nn' methods (6 calls)
File: packages\hrrm\memory\model.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (6 calls)
File: packages\hrrm\memory\model.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (16 total)
File: packages\hrrm\memory\model.py:26:22
Recommendation: Replace magic numbers with named constants or enums
Code context:
     23: class MemoryConfig:
     24:     """Configuration for Memory model."""
     25:
>>>  26:     vocab_size: int = 32000
     27:     d_model: int = 512
     28:     n_layers: int = 12  # Fewer layers than Planner/Reasoner to stay ~50M
     29:     n_head: int = 8


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (16 total)
File: packages\hrrm\memory\model.py:27:19
Recommendation: Replace magic numbers with named constants or enums
Code context:
     24:     """Configuration for Memory model."""
     25:
     26:     vocab_size: int = 32000
>>>  27:     d_model: int = 512
     28:     n_layers: int = 12  # Fewer layers than Planner/Reasoner to stay ~50M
     29:     n_head: int = 8
     30:     d_ff: int = 2048  # Feed-forward dimension


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (16 total)
File: packages\hrrm\memory\model.py:28:20
Recommendation: Replace magic numbers with named constants or enums
Code context:
     25:
     26:     vocab_size: int = 32000
     27:     d_model: int = 512
>>>  28:     n_layers: int = 12  # Fewer layers than Planner/Reasoner to stay ~50M
     29:     n_head: int = 8
     30:     d_ff: int = 2048  # Feed-forward dimension
     31:     max_seq_len: int = 2048


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (16 total)
File: packages\hrrm\memory\model.py:29:18
Recommendation: Replace magic numbers with named constants or enums
Code context:
     26:     vocab_size: int = 32000
     27:     d_model: int = 512
     28:     n_layers: int = 12  # Fewer layers than Planner/Reasoner to stay ~50M
>>>  29:     n_head: int = 8
     30:     d_ff: int = 2048  # Feed-forward dimension
     31:     max_seq_len: int = 2048
     32:     rope_base: int = 10000


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (16 total)
File: packages\hrrm\memory\model.py:30:16
Recommendation: Replace magic numbers with named constants or enums
Code context:
     27:     d_model: int = 512
     28:     n_layers: int = 12  # Fewer layers than Planner/Reasoner to stay ~50M
     29:     n_head: int = 8
>>>  30:     d_ff: int = 2048  # Feed-forward dimension
     31:     max_seq_len: int = 2048
     32:     rope_base: int = 10000
     33:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\hrrm\memory\train_memory.py:23:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     20:
     21:
     22: class MemoryDataset:
>>>  23:     """Dataset wrapper for memory training with surprise-based updates."""
     24:
     25:     def __init__(self, batch_size=8, seq_len=256, limit_steps=1000):
     26:         self.data_iter = text_stream(batch_size, seq_len, limit_steps)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\hrrm\memory\train_memory.py:42:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     39:
     40:
     41: def load_config(config_path: str) -> MemoryConfig:
>>>  42:     """Load configuration from YAML file."""
     43:     with open(config_path) as f:
     44:         config_dict = yaml.safe_load(f)
     45:     return MemoryConfig(**config_dict)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\hrrm\memory\train_memory.py:49:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     46:
     47:
     48: def train_memory(config: MemoryConfig, max_steps: int = 10000, lr: float = 3e-4):
>>>  49:     """Train Memory model with Titans online updates."""
     50:     set_seed(1337)
     51:
     52:     # Initialize model


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (13 total)
File: packages\hrrm\memory\train_memory.py:25:34
Recommendation: Replace magic numbers with named constants or enums
Code context:
     22: class MemoryDataset:
     23:     """Dataset wrapper for memory training with surprise-based updates."""
     24:
>>>  25:     def __init__(self, batch_size=8, seq_len=256, limit_steps=1000):
     26:         self.data_iter = text_stream(batch_size, seq_len, limit_steps)
     27:
     28:     def __iter__(self):


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (13 total)
File: packages\hrrm\memory\train_memory.py:25:45
Recommendation: Replace magic numbers with named constants or enums
Code context:
     22: class MemoryDataset:
     23:     """Dataset wrapper for memory training with surprise-based updates."""
     24:
>>>  25:     def __init__(self, batch_size=8, seq_len=256, limit_steps=1000):
     26:         self.data_iter = text_stream(batch_size, seq_len, limit_steps)
     27:
     28:     def __iter__(self):


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (13 total)
File: packages\hrrm\memory\train_memory.py:48:56
Recommendation: Replace magic numbers with named constants or enums
Code context:
     45:     return MemoryConfig(**config_dict)
     46:
     47:
>>>  48: def train_memory(config: MemoryConfig, max_steps: int = 10000, lr: float = 3e-4):
     49:     """Train Memory model with Titans online updates."""
     50:     set_seed(1337)
     51:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (13 total)
File: packages\hrrm\memory\train_memory.py:48:75
Recommendation: Replace magic numbers with named constants or enums
Code context:
     45:     return MemoryConfig(**config_dict)
     46:
     47:
>>>  48: def train_memory(config: MemoryConfig, max_steps: int = 10000, lr: float = 3e-4):
     49:     """Train Memory model with Titans online updates."""
     50:     set_seed(1337)
     51:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (13 total)
File: packages\hrrm\memory\train_memory.py:50:13
Recommendation: Replace magic numbers with named constants or enums
Code context:
     47:
     48: def train_memory(config: MemoryConfig, max_steps: int = 10000, lr: float = 3e-4):
     49:     """Train Memory model with Titans online updates."""
>>>  50:     set_seed(1337)
     51:
     52:     # Initialize model
     53:     model = MemoryAsContextTiny(


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\hrrm\planner\eval_planner.py:104:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    101:
    102:
    103: def load_model(checkpoint_path: str):
>>> 104:     """Load model from checkpoint."""
    105:     checkpoint = torch.load(checkpoint_path, map_location="cpu")
    106:     config = checkpoint["config"]
    107:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'torch' methods (7 calls)
File: packages\hrrm\planner\eval_planner.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (12 calls)
File: packages\hrrm\planner\eval_planner.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (16 total)
File: packages\hrrm\planner\eval_planner.py:28:43
Recommendation: Replace magic numbers with named constants or enums
Code context:
     25:     total_tokens = 0
     26:
     27:     with torch.no_grad():
>>>  28:         data_iter = text_stream(batch_size=4, seq_len=256, limit_steps=num_samples // 4)
     29:
     30:         for batch in data_iter:
     31:             x_ids = batch["x_ids"]


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (16 total)
File: packages\hrrm\planner\eval_planner.py:28:54
Recommendation: Replace magic numbers with named constants or enums
Code context:
     25:     total_tokens = 0
     26:
     27:     with torch.no_grad():
>>>  28:         data_iter = text_stream(batch_size=4, seq_len=256, limit_steps=num_samples // 4)
     29:
     30:         for batch in data_iter:
     31:             x_ids = batch["x_ids"]


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (16 total)
File: packages\hrrm\planner\eval_planner.py:28:86
Recommendation: Replace magic numbers with named constants or enums
Code context:
     25:     total_tokens = 0
     26:
     27:     with torch.no_grad():
>>>  28:         data_iter = text_stream(batch_size=4, seq_len=256, limit_steps=num_samples // 4)
     29:
     30:         for batch in data_iter:
     31:             x_ids = batch["x_ids"]


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (16 total)
File: packages\hrrm\planner\eval_planner.py:55:47
Recommendation: Replace magic numbers with named constants or enums
Code context:
     52:     return {"perplexity": perplexity, "avg_loss": avg_loss, "total_tokens": total_tokens}
     53:
     54:
>>>  55: def evaluate_control_tokens(model, num_samples=50):
     56:     """Evaluate control token detection accuracy."""
     57:     model.eval()
     58:     correct = 0


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (16 total)
File: packages\hrrm\planner\eval_planner.py:61:25
Recommendation: Replace magic numbers with named constants or enums
Code context:
     58:     correct = 0
     59:     total = 0
     60:
>>>  61:     control_token_ids = [32001, 32002, 32003, 32004, 32005]  # <PLAN>, <SUBGOAL>, etc.
     62:
     63:     with torch.no_grad():
     64:         data_iter = text_stream(batch_size=4, seq_len=256, limit_steps=num_samples // 4)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\hrrm\planner\model.py:15:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     12:
     13: @dataclass
     14: class PlannerOutput:
>>>  15:     """Output from HRM Planner model."""
     16:
     17:     logits: torch.Tensor
     18:     control_logits: torch.Tensor


LONG_PARAMETER_LIST: Function '__init__' has 6 parameters (>5)
File: packages\hrrm\planner\model.py:65:4
Recommendation: Use parameter objects, data classes, or keyword-only arguments
Code context:
     62:
     63:
     64: class TinyDecoder(nn.Module):
>>>  65:     def __init__(self, vocab, d=512, L=16, h=8, rope_base=10000):
     66:         super().__init__()
     67:         self.tok = nn.Embedding(vocab, d)
     68:         self.blocks = nn.ModuleList([TinyBlock(d, h) for _ in range(L)])


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (10 calls)
File: packages\hrrm\planner\model.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (15 total)
File: packages\hrrm\planner\model.py:26:22
Recommendation: Replace magic numbers with named constants or enums
Code context:
     23: class PlannerConfig:
     24:     """Configuration for HRM Planner model."""
     25:
>>>  26:     vocab_size: int = 32000
     27:     d_model: int = 512
     28:     n_layers: int = 16
     29:     n_head: int = 8


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (15 total)
File: packages\hrrm\planner\model.py:27:19
Recommendation: Replace magic numbers with named constants or enums
Code context:
     24:     """Configuration for HRM Planner model."""
     25:
     26:     vocab_size: int = 32000
>>>  27:     d_model: int = 512
     28:     n_layers: int = 16
     29:     n_head: int = 8
     30:     d_ff: int = 2048


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (15 total)
File: packages\hrrm\planner\model.py:28:20
Recommendation: Replace magic numbers with named constants or enums
Code context:
     25:
     26:     vocab_size: int = 32000
     27:     d_model: int = 512
>>>  28:     n_layers: int = 16
     29:     n_head: int = 8
     30:     d_ff: int = 2048
     31:     max_seq_len: int = 2048


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (15 total)
File: packages\hrrm\planner\model.py:29:18
Recommendation: Replace magic numbers with named constants or enums
Code context:
     26:     vocab_size: int = 32000
     27:     d_model: int = 512
     28:     n_layers: int = 16
>>>  29:     n_head: int = 8
     30:     d_ff: int = 2048
     31:     max_seq_len: int = 2048
     32:     rope_base: int = 10000


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (15 total)
File: packages\hrrm\planner\model.py:30:16
Recommendation: Replace magic numbers with named constants or enums
Code context:
     27:     d_model: int = 512
     28:     n_layers: int = 16
     29:     n_head: int = 8
>>>  30:     d_ff: int = 2048
     31:     max_seq_len: int = 2048
     32:     rope_base: int = 10000
     33:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\hrrm\planner\train_planner.py:43:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     40:
     41:
     42: def load_config(config_path: str) -> PlannerConfig:
>>>  43:     """Load configuration from YAML file."""
     44:     with open(config_path) as f:
     45:         config_dict = yaml.safe_load(f)
     46:     return PlannerConfig(**config_dict)


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (19 total)
File: packages\hrrm\planner\train_planner.py:25:34
Recommendation: Replace magic numbers with named constants or enums
Code context:
     22: class PlannerDataset:
     23:     """Dataset wrapper for planner training with control token supervision."""
     24:
>>>  25:     def __init__(self, batch_size=8, seq_len=256, limit_steps=1000):
     26:         self.data_iter = text_stream(batch_size, seq_len, limit_steps)
     27:         self.control_token_ids = [32001, 32002, 32003, 32004, 32005]  # <PLAN>, <SUBGOAL>, etc.
     28:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (19 total)
File: packages\hrrm\planner\train_planner.py:25:45
Recommendation: Replace magic numbers with named constants or enums
Code context:
     22: class PlannerDataset:
     23:     """Dataset wrapper for planner training with control token supervision."""
     24:
>>>  25:     def __init__(self, batch_size=8, seq_len=256, limit_steps=1000):
     26:         self.data_iter = text_stream(batch_size, seq_len, limit_steps)
     27:         self.control_token_ids = [32001, 32002, 32003, 32004, 32005]  # <PLAN>, <SUBGOAL>, etc.
     28:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (19 total)
File: packages\hrrm\planner\train_planner.py:27:34
Recommendation: Replace magic numbers with named constants or enums
Code context:
     24:
     25:     def __init__(self, batch_size=8, seq_len=256, limit_steps=1000):
     26:         self.data_iter = text_stream(batch_size, seq_len, limit_steps)
>>>  27:         self.control_token_ids = [32001, 32002, 32003, 32004, 32005]  # <PLAN>, <SUBGOAL>, etc.
     28:
     29:     def __iter__(self):
     30:         for batch in self.data_iter:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (19 total)
File: packages\hrrm\planner\train_planner.py:27:41
Recommendation: Replace magic numbers with named constants or enums
Code context:
     24:
     25:     def __init__(self, batch_size=8, seq_len=256, limit_steps=1000):
     26:         self.data_iter = text_stream(batch_size, seq_len, limit_steps)
>>>  27:         self.control_token_ids = [32001, 32002, 32003, 32004, 32005]  # <PLAN>, <SUBGOAL>, etc.
     28:
     29:     def __iter__(self):
     30:         for batch in self.data_iter:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (19 total)
File: packages\hrrm\planner\train_planner.py:27:48
Recommendation: Replace magic numbers with named constants or enums
Code context:
     24:
     25:     def __init__(self, batch_size=8, seq_len=256, limit_steps=1000):
     26:         self.data_iter = text_stream(batch_size, seq_len, limit_steps)
>>>  27:         self.control_token_ids = [32001, 32002, 32003, 32004, 32005]  # <PLAN>, <SUBGOAL>, etc.
     28:
     29:     def __iter__(self):
     30:         for batch in self.data_iter:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\hrrm\reasoner\eval_reasoner.py:152:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    149:
    150:
    151: def load_model(checkpoint_path: str):
>>> 152:     """Load model from checkpoint."""
    153:     checkpoint = torch.load(checkpoint_path, map_location="cpu")
    154:     config = checkpoint["config"]
    155:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'model' methods (6 calls)
File: packages\hrrm\reasoner\eval_reasoner.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'torch' methods (10 calls)
File: packages\hrrm\reasoner\eval_reasoner.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (14 calls)
File: packages\hrrm\reasoner\eval_reasoner.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (17 total)
File: packages\hrrm\reasoner\eval_reasoner.py:28:43
Recommendation: Replace magic numbers with named constants or enums
Code context:
     25:     total_tokens = 0
     26:
     27:     with torch.no_grad():
>>>  28:         data_iter = text_stream(batch_size=4, seq_len=256, limit_steps=num_samples // 4)
     29:
     30:         for batch in data_iter:
     31:             x_ids = batch["x_ids"]


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (17 total)
File: packages\hrrm\reasoner\eval_reasoner.py:28:54
Recommendation: Replace magic numbers with named constants or enums
Code context:
     25:     total_tokens = 0
     26:
     27:     with torch.no_grad():
>>>  28:         data_iter = text_stream(batch_size=4, seq_len=256, limit_steps=num_samples // 4)
     29:
     30:         for batch in data_iter:
     31:             x_ids = batch["x_ids"]


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (17 total)
File: packages\hrrm\reasoner\eval_reasoner.py:28:86
Recommendation: Replace magic numbers with named constants or enums
Code context:
     25:     total_tokens = 0
     26:
     27:     with torch.no_grad():
>>>  28:         data_iter = text_stream(batch_size=4, seq_len=256, limit_steps=num_samples // 4)
     29:
     30:         for batch in data_iter:
     31:             x_ids = batch["x_ids"]


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (17 total)
File: packages\hrrm\reasoner\eval_reasoner.py:55:48
Recommendation: Replace magic numbers with named constants or enums
Code context:
     52:     return {"perplexity": perplexity, "avg_loss": avg_loss, "total_tokens": total_tokens}
     53:
     54:
>>>  55: def evaluate_gsm8k_synthetic(model, num_samples=50):
     56:     """Evaluate on synthetic GSM8K-like problems."""
     57:     model.eval()
     58:     correct = 0


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (17 total)
File: packages\hrrm\reasoner\eval_reasoner.py:79:45
Recommendation: Replace magic numbers with named constants or enums
Code context:
     76:
     77:             # Tokenize problem (simplified)
     78:             # In real implementation, would use proper tokenizer
>>>  79:             prompt_tokens = torch.randint(0, 32000, (1, 64))
     80:             if torch.cuda.is_available():
     81:                 prompt_tokens = prompt_tokens.cuda()
     82:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\hrrm\reasoner\model.py:16:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     13:
     14: @dataclass
     15: class ReasonerOutput:
>>>  16:     """Output from HRM Reasoner model."""
     17:
     18:     logits: torch.Tensor
     19:     thought_logits: torch.Tensor


LONG_PARAMETER_LIST: Function '__init__' has 6 parameters (>5)
File: packages\hrrm\reasoner\model.py:62:4
Recommendation: Use parameter objects, data classes, or keyword-only arguments
Code context:
     59:
     60:
     61: class TinyDecoder(nn.Module):
>>>  62:     def __init__(self, vocab, d=512, L=16, h=8, rope_base=10000):
     63:         super().__init__()
     64:         self.tok = nn.Embedding(vocab, d)
     65:         self.blocks = nn.ModuleList([TinyBlock(d, h) for _ in range(L)])


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (13 calls)
File: packages\hrrm\reasoner\model.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (17 total)
File: packages\hrrm\reasoner\model.py:27:22
Recommendation: Replace magic numbers with named constants or enums
Code context:
     24: class ReasonerConfig:
     25:     """Configuration for HRM Reasoner model."""
     26:
>>>  27:     vocab_size: int = 32000
     28:     d_model: int = 512
     29:     n_layers: int = 16
     30:     n_head: int = 8


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (17 total)
File: packages\hrrm\reasoner\model.py:28:19
Recommendation: Replace magic numbers with named constants or enums
Code context:
     25:     """Configuration for HRM Reasoner model."""
     26:
     27:     vocab_size: int = 32000
>>>  28:     d_model: int = 512
     29:     n_layers: int = 16
     30:     n_head: int = 8
     31:     d_ff: int = 2048


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (17 total)
File: packages\hrrm\reasoner\model.py:29:20
Recommendation: Replace magic numbers with named constants or enums
Code context:
     26:
     27:     vocab_size: int = 32000
     28:     d_model: int = 512
>>>  29:     n_layers: int = 16
     30:     n_head: int = 8
     31:     d_ff: int = 2048
     32:     max_seq_len: int = 2048


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (17 total)
File: packages\hrrm\reasoner\model.py:30:18
Recommendation: Replace magic numbers with named constants or enums
Code context:
     27:     vocab_size: int = 32000
     28:     d_model: int = 512
     29:     n_layers: int = 16
>>>  30:     n_head: int = 8
     31:     d_ff: int = 2048
     32:     max_seq_len: int = 2048
     33:     rope_base: int = 10000


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (17 total)
File: packages\hrrm\reasoner\model.py:31:16
Recommendation: Replace magic numbers with named constants or enums
Code context:
     28:     d_model: int = 512
     29:     n_layers: int = 16
     30:     n_head: int = 8
>>>  31:     d_ff: int = 2048
     32:     max_seq_len: int = 2048
     33:     rope_base: int = 10000
     34:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\hrrm\reasoner\scratchpad.py:45:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     42:         self.thought_gate = nn.Linear(d_model, 1)  # Gating mechanism
     43:
     44:     def forward(self, hidden_states):
>>>  45:         """
     46:         Detect and gate reasoning spans.
     47:
     48:         Args:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\hrrm\reasoner\train_reasoner.py:53:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     50:
     51:
     52: def load_config(config_path: str) -> ReasonerConfig:
>>>  53:     """Load configuration from YAML file."""
     54:     with open(config_path) as f:
     55:         config_dict = yaml.safe_load(f)
     56:     return ReasonerConfig(**config_dict)


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (16 total)
File: packages\hrrm\reasoner\train_reasoner.py:25:34
Recommendation: Replace magic numbers with named constants or enums
Code context:
     22: class ReasonerDataset:
     23:     """Dataset wrapper for reasoner training with thought supervision."""
     24:
>>>  25:     def __init__(self, batch_size=8, seq_len=256, limit_steps=1000):
     26:         self.data_iter = text_stream(batch_size, seq_len, limit_steps)
     27:         self.sot_token_id = 32006  # <SoT>
     28:         self.eot_token_id = 32007  # <EoT>


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (16 total)
File: packages\hrrm\reasoner\train_reasoner.py:25:45
Recommendation: Replace magic numbers with named constants or enums
Code context:
     22: class ReasonerDataset:
     23:     """Dataset wrapper for reasoner training with thought supervision."""
     24:
>>>  25:     def __init__(self, batch_size=8, seq_len=256, limit_steps=1000):
     26:         self.data_iter = text_stream(batch_size, seq_len, limit_steps)
     27:         self.sot_token_id = 32006  # <SoT>
     28:         self.eot_token_id = 32007  # <EoT>


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (16 total)
File: packages\hrrm\reasoner\train_reasoner.py:27:28
Recommendation: Replace magic numbers with named constants or enums
Code context:
     24:
     25:     def __init__(self, batch_size=8, seq_len=256, limit_steps=1000):
     26:         self.data_iter = text_stream(batch_size, seq_len, limit_steps)
>>>  27:         self.sot_token_id = 32006  # <SoT>
     28:         self.eot_token_id = 32007  # <EoT>
     29:
     30:     def __iter__(self):


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (16 total)
File: packages\hrrm\reasoner\train_reasoner.py:28:28
Recommendation: Replace magic numbers with named constants or enums
Code context:
     25:     def __init__(self, batch_size=8, seq_len=256, limit_steps=1000):
     26:         self.data_iter = text_stream(batch_size, seq_len, limit_steps)
     27:         self.sot_token_id = 32006  # <SoT>
>>>  28:         self.eot_token_id = 32007  # <EoT>
     29:
     30:     def __iter__(self):
     31:         for batch in self.data_iter:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (16 total)
File: packages\hrrm\reasoner\train_reasoner.py:59:60
Recommendation: Replace magic numbers with named constants or enums
Code context:
     56:     return ReasonerConfig(**config_dict)
     57:
     58:
>>>  59: def train_reasoner(config: ReasonerConfig, max_steps: int = 10000, lr: float = 3e-4):
     60:     """Train HRM Reasoner model."""
     61:     set_seed(1337)
     62:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\hrrm\scripts\export_hf_format.py:18:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     15:
     16:
     17: def create_hf_config(model_type: str, config: Any, param_count: int) -> dict[str, Any]:
>>>  18:     """Create HuggingFace model configuration."""
     19:
     20:     base_config = {
     21:         "architectures": [f"HRRM{model_type.title()}"],


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\hrrm\scripts\export_hf_format.py:113:22
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    110:
    111: # HRRM {model_type.title()} Model
    112:
>>> 113: This is a {model_type} model from the HRRM (Hierarchical Recurrent Reasoning Memory) family.
    114:
    115: ## Model Details
    116:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\hrrm\scripts\export_hf_format.py:141:22
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    138: - Thought detection and gating mechanisms
    139: """
    140:     elif model_type == "memory":
>>> 141:         model_card += """- Base transformer with Titans test-time learning memory
    142: - Memory-as-Context (MAC) integration pattern
    143: - Surprise-based memory updates with momentum and decay
    144: - Neural memory with {config.mem_slots} slots


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\hrrm\scripts\export_hf_format.py:149:22
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    146:             config=config
    147:         )
    148:
>>> 149:     model_card += f"""
    150: ## Usage
    151:
    152: ```python


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (7 calls)
File: packages\hrrm\scripts\export_hf_format.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\models\hrrm\export_adapters.py:1:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
>>>   1: """
      2: HRRM Export Adapters
      3: Handles model sharding and fog burst operations for HRRM (Hierarchical Retrieval
      4: and Reasoning Model) export adapters. Enables distributed inference and training


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\models\hrrm\export_adapters.py:197:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    194:         strategy: ShardingStrategy,
    195:         shard_configurations: List[Dict[str, Any]]
    196:     ) -> List[ModelShard]:
>>> 197:         """
    198:         Create model shards based on sharding strategy
    199:
    200:         Args:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\models\hrrm\export_adapters.py:269:27
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    266:             return shards
    267:
    268:         except Exception as e:
>>> 269:             logger.error(f"Failed to create model shards: {e}")
    270:             raise
    271:
    272:     def _estimate_model_size(self, model_config: Dict[str, Any]) -> float:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\models\hrrm\export_adapters.py:401:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    398:         model_config: Dict[str, Any],
    399:         node_analysis: Dict[str, Any]
    400:     ) -> List[Dict[str, Any]]:
>>> 401:         """Generate shard configurations for the selected strategy"""
    402:
    403:         configurations = []
    404:         node_count = min(node_analysis["node_count"], 8)  # Limit to 8 shards max


HARDCODED_PATH: Hardcoded path or URL detected
File: packages\models\hrrm\export_adapters.py:541:46
Recommendation: Use configuration files, environment variables, or path utilities
Code context:
    538:     for distributed inference and training operations.
    539:     """
    540:
>>> 541:     def __init__(self, fog_gateway_url: str = "http://localhost:8080"):
    542:         self.fog_gateway_url = fog_gateway_url.rstrip('/')
    543:
    544:         # Task management


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\models\hrrm\export_adapters.py:983:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    980:         task: DistributedInferenceTask,
    981:         shard_results: Dict[str, Any]
    982:     ) -> Dict[str, Any]:
>>> 983:         """Merge results from distributed shard execution"""
    984:
    985:         merger = HRRMResultMerger()
    986:         return await merger.merge_shard_results(


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\models\hrrm\export_adapters.py:994:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    991:
    992:
    993: class HRRMResultMerger:
>>> 994:     """
    995:     Aggregates results from distributed HRRM shard execution
    996:
    997:     Handles different merging strategies based on the sharding approach


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\models\hrrm\export_adapters.py:1007:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1004:         shard_results: Dict[str, Any],
    1005:         strategy: ShardingStrategy
    1006:     ) -> Dict[str, Any]:
>>> 1007:         """
    1008:         Merge results from distributed shard execution
    1009:
    1010:         Args:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\models\hrrm\export_adapters.py:1033:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1030:         shards: List[ModelShard],
    1031:         shard_results: Dict[str, Any]
    1032:     ) -> Dict[str, Any]:
>>> 1033:         """Merge results from pipeline parallel execution"""
    1034:
    1035:         # For pipeline, the final result is from the last stage
    1036:         final_shard = None


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\models\hrrm\export_adapters.py:1069:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1066:         shards: List[ModelShard],
    1067:         shard_results: Dict[str, Any]
    1068:     ) -> Dict[str, Any]:
>>> 1069:         """Merge results from layer-wise parallel execution"""
    1070:
    1071:         # Combine outputs from all layers
    1072:         combined_outputs = {}


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\models\hrrm\export_adapters.py:1123:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1120:         shards: List[ModelShard],
    1121:         shard_results: Dict[str, Any]
    1122:     ) -> Dict[str, Any]:
>>> 1123:         """Merge results from attention head parallel execution"""
    1124:
    1125:         # Combine attention outputs
    1126:         attention_outputs = []


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\models\hrrm\export_adapters.py:1170:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1167:         shards: List[ModelShard],
    1168:         shard_results: Dict[str, Any]
    1169:     ) -> Dict[str, Any]:
>>> 1170:         """Merge results from general parallel execution"""
    1171:
    1172:         # Simple ensemble approach - average results
    1173:         all_outputs = []


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (25 calls)
File: packages\models\hrrm\export_adapters.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'shard_config' methods (11 calls)
File: packages\models\hrrm\export_adapters.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (8 calls)
File: packages\models\hrrm\export_adapters.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'model_config' methods (11 calls)
File: packages\models\hrrm\export_adapters.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'node' methods (8 calls)
File: packages\models\hrrm\export_adapters.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'result' methods (13 calls)
File: packages\models\hrrm\export_adapters.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (61 total)
File: packages\models\hrrm\export_adapters.py:222:55
Recommendation: Replace magic numbers with named constants or enums
Code context:
    219:
    220:             for i, shard_config in enumerate(shard_configurations):
    221:                 shard = ModelShard(
>>> 222:                     shard_id=f"shard_{i}_{uuid4().hex[:8]}",
    223:                     partition_type=ModelPartitionType(shard_config["partition_type"]),
    224:                     strategy=strategy,
    225:                     config=shard_config,


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (61 total)
File: packages\models\hrrm\export_adapters.py:276:54
Recommendation: Replace magic numbers with named constants or enums
Code context:
    273:         """Estimate model size in MB"""
    274:
    275:         # Simple estimation based on parameters
>>> 276:         hidden_size = model_config.get("hidden_size", 768)
    277:         num_layers = model_config.get("num_layers", 12)
    278:         vocab_size = model_config.get("vocab_size", 50000)
    279:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (61 total)
File: packages\models\hrrm\export_adapters.py:277:52
Recommendation: Replace magic numbers with named constants or enums
Code context:
    274:
    275:         # Simple estimation based on parameters
    276:         hidden_size = model_config.get("hidden_size", 768)
>>> 277:         num_layers = model_config.get("num_layers", 12)
    278:         vocab_size = model_config.get("vocab_size", 50000)
    279:
    280:         # Rough parameter count estimation


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (61 total)
File: packages\models\hrrm\export_adapters.py:278:52
Recommendation: Replace magic numbers with named constants or enums
Code context:
    275:         # Simple estimation based on parameters
    276:         hidden_size = model_config.get("hidden_size", 768)
    277:         num_layers = model_config.get("num_layers", 12)
>>> 278:         vocab_size = model_config.get("vocab_size", 50000)
    279:
    280:         # Rough parameter count estimation
    281:         params = (


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (61 total)
File: packages\models\hrrm\export_adapters.py:283:53
Recommendation: Replace magic numbers with named constants or enums
Code context:
    280:         # Rough parameter count estimation
    281:         params = (
    282:             vocab_size * hidden_size +  # Embeddings
>>> 283:             num_layers * hidden_size * hidden_size * 12 +  # Transformer layers
    284:             hidden_size * vocab_size  # Output layer
    285:         )
    286:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\betanet\access_tickets.py:66:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     63:
     64:     @classmethod
     65:     def from_dict(cls, data: dict) -> "AccessTicket":
>>>  66:         """Create ticket from dictionary."""
     67:         signature = None
     68:         if data.get("signature"):
     69:             signature = bytes.fromhex(data["signature"])


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\betanet\access_tickets.py:98:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     95:             self.public_key = secrets.token_bytes(32)
     96:
     97:     def create_ticket(self, service_type: str = "htx", valid_duration: int = 3600) -> AccessTicket:
>>>  98:         """Create a new access ticket."""
     99:         ticket_id = secrets.token_hex(16)
    100:
    101:         ticket = AccessTicket(


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\betanet\access_tickets.py:112:23
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    109:         ticket.signature = self._sign_ticket(ticket)
    110:
    111:         self.tickets[ticket_id] = ticket
>>> 112:         logger.debug(f"Created access ticket: {ticket_id}")
    113:
    114:         return ticket
    115:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\betanet\access_tickets.py:218:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    215:
    216:
    217: def create_ticket_manager(device_id: str) -> TicketManager:
>>> 218:     """Factory function to create ticket manager."""
    219:     return TicketManager(device_id)


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (11 calls)
File: packages\p2p\betanet\access_tickets.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

SEQUENTIAL_COUPLING: Sequential coupling detected: Function '__post_init__' is part of a sequence-dependent API
File: packages\p2p\betanet\access_tickets.py:37:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
     34:     expires_at: float = 0
     35:     signature: bytes | None = None
     36:
>>>  37:     def __post_init__(self):
     38:         if self.created_at == 0:
     39:             self.created_at = time.time()
     40:         if self.expires_at == 0:


SEQUENTIAL_COUPLING: Sequential coupling detected: Function '__init__' is part of a sequence-dependent API
File: packages\p2p\betanet\access_tickets.py:84:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
     81: class TicketManager:
     82:     """Manager for BetaNet access tickets with proper Ed25519 signing."""
     83:
>>>  84:     def __init__(self, device_id: str):
     85:         self.device_id = device_id
     86:         self.tickets: dict[str, AccessTicket] = {}
     87:


SEQUENTIAL_COUPLING: Sequential coupling detected: Function 'cleanup_expired_tickets' is part of a sequence-dependent API
File: packages\p2p\betanet\access_tickets.py:200:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    197:         """Get ticket by ID."""
    198:         return self.tickets.get(ticket_id)
    199:
>>> 200:     def cleanup_expired_tickets(self):
    201:         """Remove expired tickets."""
    202:         expired_tickets = []
    203:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\betanet\htx_transport.py:116:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    113:
    114:     @classmethod
    115:     def decode(cls, data: bytes) -> tuple["HtxFrame", int]:
>>> 116:         """Decode frame from bytes, returning frame and bytes consumed."""
    117:         if len(data) < 3:
    118:             raise ValueError("Frame too short for length header")
    119:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\betanet\htx_transport.py:528:22
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    525:     async def _handle_client(self, reader: asyncio.StreamReader, writer: asyncio.StreamWriter):
    526:         """Handle incoming client connection."""
    527:         client_addr = writer.get_extra_info("peername")
>>> 528:         logger.info(f"HTX client connected from {client_addr}")
    529:
    530:         connection = HtxConnection()
    531:         self.connections[connection.connection_id] = connection


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\betanet\htx_transport.py:576:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    573:
    574: # Factory functions for easy integration
    575: def create_htx_client(**kwargs) -> HtxClient:
>>> 576:     """Factory function to create HTX client."""
    577:     return HtxClient(**kwargs)
    578:
    579:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\betanet\htx_transport.py:581:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    578:
    579:
    580: def create_htx_server(**kwargs) -> HtxServer:
>>> 581:     """Factory function to create HTX server."""
    582:     return HtxServer(**kwargs)


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (12 calls)
File: packages\p2p\betanet\htx_transport.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (30 calls)
File: packages\p2p\betanet\htx_transport.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'asyncio' methods (7 calls)
File: packages\p2p\betanet\htx_transport.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'writer' methods (7 calls)
File: packages\p2p\betanet\htx_transport.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (41 total)
File: packages\p2p\betanet\htx_transport.py:42:17
Recommendation: Replace magic numbers with named constants or enums
Code context:
     39: logger = logging.getLogger(__name__)
     40:
     41: # HTX v1.1 Constants (from Rust implementation)
>>>  42: MAX_FRAME_SIZE = 16_777_215  # 2^24 - 1
     43: MAX_STREAM_ID = 268_435_455  # 2^28 - 1
     44:
     45:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (41 total)
File: packages\p2p\betanet\htx_transport.py:43:16
Recommendation: Replace magic numbers with named constants or enums
Code context:
     40:
     41: # HTX v1.1 Constants (from Rust implementation)
     42: MAX_FRAME_SIZE = 16_777_215  # 2^24 - 1
>>>  43: MAX_STREAM_ID = 268_435_455  # 2^28 - 1
     44:
     45:
     46: class HtxFrameType(IntEnum):


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (41 total)
File: packages\p2p\betanet\htx_transport.py:52:11
Recommendation: Replace magic numbers with named constants or enums
Code context:
     49:     DATA = 0x00
     50:     WINDOW_UPDATE = 0x01
     51:     KEY_UPDATE = 0x02
>>>  52:     PING = 0x03
     53:     PRIORITY = 0x04
     54:     PADDING = 0x05
     55:     ACCESS_TICKET = 0x06


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (41 total)
File: packages\p2p\betanet\htx_transport.py:53:15
Recommendation: Replace magic numbers with named constants or enums
Code context:
     50:     WINDOW_UPDATE = 0x01
     51:     KEY_UPDATE = 0x02
     52:     PING = 0x03
>>>  53:     PRIORITY = 0x04
     54:     PADDING = 0x05
     55:     ACCESS_TICKET = 0x06
     56:     CONTROL = 0x07


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (41 total)
File: packages\p2p\betanet\htx_transport.py:54:14
Recommendation: Replace magic numbers with named constants or enums
Code context:
     51:     KEY_UPDATE = 0x02
     52:     PING = 0x03
     53:     PRIORITY = 0x04
>>>  54:     PADDING = 0x05
     55:     ACCESS_TICKET = 0x06
     56:     CONTROL = 0x07
     57:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\betanet\mixnode_client.py:39:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     36:         return True
     37:
     38:     async def create_circuit(self, hops: int = 3) -> str:
>>>  39:         """Create anonymous circuit through mixnodes."""
     40:         if not self.connected:
     41:             raise RuntimeError("Not connected to mixnodes")
     42:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\betanet\mixnode_client.py:70:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     67:             logger.debug(f"Closed circuit: {circuit_id}")
     68:
     69:     async def disconnect(self):
>>>  70:         """Disconnect from mixnodes."""
     71:         for circuit_id in self.active_circuits.copy():
     72:             await self.close_circuit(circuit_id)
     73:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\betanet\mixnode_client.py:75:20
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     72:             await self.close_circuit(circuit_id)
     73:
     74:         self.connected = False
>>>  75:         logger.info("Disconnected from mixnodes")
     76:
     77:     def get_status(self):
     78:         """Get mixnode client status."""


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (6 calls)
File: packages\p2p\betanet\mixnode_client.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\betanet\noise_protocol.py:44:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     41:
     42:     @classmethod
     43:     def create(cls) -> "NoiseXKHandshake":
>>>  44:         """Create new Noise XK handshake instance with real X25519 keys."""
     45:         if not CRYPTO_AVAILABLE:
     46:             # Fallback for when cryptography not available
     47:             static_private = secrets.token_bytes(32)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\betanet\noise_protocol.py:64:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     61:         )
     62:
     63:     def _derive_keys(self, shared_secret: bytes) -> tuple[bytes, bytes]:
>>>  64:         """Derive encryption/decryption keys from shared secret using HKDF."""
     65:         if CRYPTO_AVAILABLE:
     66:             hkdf = HKDF(
     67:                 algorithm=hashes.SHA256(),


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\betanet\noise_protocol.py:183:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    180:
    181:
    182: def create_noise_handshake() -> NoiseXKHandshake:
>>> 183:     """Factory function to create Noise XK handshake."""
    184:     return NoiseXKHandshake.create()


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (20 total)
File: packages\p2p\betanet\noise_protocol.py:47:49
Recommendation: Replace magic numbers with named constants or enums
Code context:
     44:         """Create new Noise XK handshake instance with real X25519 keys."""
     45:         if not CRYPTO_AVAILABLE:
     46:             # Fallback for when cryptography not available
>>>  47:             static_private = secrets.token_bytes(32)
     48:             static_public = secrets.token_bytes(32)
     49:             return cls(
     50:                 static_private_key=static_private,


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (20 total)
File: packages\p2p\betanet\noise_protocol.py:48:48
Recommendation: Replace magic numbers with named constants or enums
Code context:
     45:         if not CRYPTO_AVAILABLE:
     46:             # Fallback for when cryptography not available
     47:             static_private = secrets.token_bytes(32)
>>>  48:             static_public = secrets.token_bytes(32)
     49:             return cls(
     50:                 static_private_key=static_private,
     51:                 static_public_key=static_public,


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (20 total)
File: packages\p2p\betanet\noise_protocol.py:68:23
Recommendation: Replace magic numbers with named constants or enums
Code context:
     65:         if CRYPTO_AVAILABLE:
     66:             hkdf = HKDF(
     67:                 algorithm=hashes.SHA256(),
>>>  68:                 length=64,  # 32 bytes each for tx/rx keys
     69:                 salt=b"noise_xk_salt",
     70:                 info=b"betanet_htx",
     71:             )


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (20 total)
File: packages\p2p\betanet\noise_protocol.py:73:33
Recommendation: Replace magic numbers with named constants or enums
Code context:
     70:                 info=b"betanet_htx",
     71:             )
     72:             key_material = hkdf.derive(shared_secret)
>>>  73:             return key_material[:32], key_material[32:64]
     74:         else:
     75:             # Fallback key derivation
     76:             combined = hashlib.sha256(shared_secret + b"noise_xk_salt").digest()


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (20 total)
File: packages\p2p\betanet\noise_protocol.py:73:51
Recommendation: Replace magic numbers with named constants or enums
Code context:
     70:                 info=b"betanet_htx",
     71:             )
     72:             key_material = hkdf.derive(shared_secret)
>>>  73:             return key_material[:32], key_material[32:64]
     74:         else:
     75:             # Fallback key derivation
     76:             combined = hashlib.sha256(shared_secret + b"noise_xk_salt").digest()


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\betanet\__init__.py:1:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
>>>   1: """
      2: BetaNet encrypted internet transport implementation.
      3:
      4: Based on the production-ready betanet bounty implementation, providing:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\betanet-bounty\generate_coverage_report.py:2:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
      1: #!/usr/bin/env python3
>>>   2: """
      3: HTX Coverage Analysis Script
      4:
      5: Analyzes the betanet-htx crate test coverage by examining:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\betanet-bounty\generate_coverage_report.py:53:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     50:
     51:
     52: def analyze_test_coverage():
>>>  53:     """Analyze test coverage from betanet-htx crate"""
     54:
     55:     base_path = Path("crates/betanet-htx/src")
     56:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'report' methods (73 calls)
File: packages\p2p\betanet-bounty\generate_coverage_report.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\betanet-bounty\validate_federated.py:201:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    198:
    199:     print("  🔄 Simulating FL round...")
    200:     print("    ✅ Round ID: test-session:1234567890:1")
>>> 201:     print(f"    ✅ Participants selected: {len(participants)}")
    202:
    203:     print("  🎯 Simulating training results...")
    204:     total_examples = 0


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'results' methods (6 calls)
File: packages\p2p\betanet-bounty\validate_federated.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (13 total)
File: packages\p2p\betanet-bounty\validate_federated.py:22:98
Recommendation: Replace magic numbers with named constants or enums
Code context:
     19: def run_command(cmd, cwd=None):
     20:     """Run a command and return success status and output"""
     21:     try:
>>>  22:         result = subprocess.run(cmd, shell=True, cwd=cwd, capture_output=True, text=True, timeout=60)
     23:         return result.returncode == 0, result.stdout, result.stderr
     24:     except subprocess.TimeoutExpired:
     25:         return False, "", "Command timed out"


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (13 total)
File: packages\p2p\betanet-bounty\validate_federated.py:119:35
Recommendation: Replace magic numbers with named constants or enums
Code context:
    116:         return True
    117:     else:
    118:         print("  ❌ Compilation failed")
>>> 119:         print("  STDOUT:", stdout[-500:] if stdout else "None")  # Last 500 chars
    120:         print("  STDERR:", stderr[-500:] if stderr else "None")  # Last 500 chars
    121:         return False
    122:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (13 total)
File: packages\p2p\betanet-bounty\validate_federated.py:120:35
Recommendation: Replace magic numbers with named constants or enums
Code context:
    117:     else:
    118:         print("  ❌ Compilation failed")
    119:         print("  STDOUT:", stdout[-500:] if stdout else "None")  # Last 500 chars
>>> 120:         print("  STDERR:", stderr[-500:] if stderr else "None")  # Last 500 chars
    121:         return False
    122:
    123:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (13 total)
File: packages\p2p\betanet-bounty\validate_federated.py:190:57
Recommendation: Replace magic numbers with named constants or enums
Code context:
    187:     # Simulate the key aspects of our FL workflow
    188:     print("  📱 Creating mock participants...")
    189:     participants = [
>>> 190:         {"id": "mobile-001", "type": "Phone", "battery": 0.85},
    191:         {"id": "mobile-002", "type": "Phone", "battery": 0.67},
    192:         {"id": "tablet-001", "type": "Tablet", "battery": 0.92},
    193:         {"id": "laptop-001", "type": "Laptop", "battery": None},


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (13 total)
File: packages\p2p\betanet-bounty\validate_federated.py:191:57
Recommendation: Replace magic numbers with named constants or enums
Code context:
    188:     print("  📱 Creating mock participants...")
    189:     participants = [
    190:         {"id": "mobile-001", "type": "Phone", "battery": 0.85},
>>> 191:         {"id": "mobile-002", "type": "Phone", "battery": 0.67},
    192:         {"id": "tablet-001", "type": "Tablet", "battery": 0.92},
    193:         {"id": "laptop-001", "type": "Laptop", "battery": None},
    194:     ]


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\bitchat\ble_transport.py:107:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    104:         return not self.is_expired
    105:
    106:     def relay(self, relay_node_id: str) -> "BitChatMessage":
>>> 107:         """Create a relay copy of this message."""
    108:         if not self.can_relay:
    109:             raise ValueError("Cannot relay expired message")
    110:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\bitchat\ble_transport.py:146:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    143:
    144:     @classmethod
    145:     def from_dict(cls, data: dict[str, Any]) -> "BitChatMessage":
>>> 146:         """Deserialize message from BLE data."""
    147:         payload = data.get("payload", "")
    148:         if isinstance(payload, str):
    149:             try:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\bitchat\ble_transport.py:191:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    188:         return (time.time() - self.last_seen) < timeout_seconds
    189:
    190:     def update_activity(self):
>>> 191:         """Update peer activity timestamp."""
    192:         self.last_seen = time.time()
    193:         self.last_message_time = time.time()
    194:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\bitchat\ble_transport.py:671:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    668:             logger.debug(f"Removed inactive peer: {peer_id}")
    669:
    670:     async def _cleanup_message_cache(self):
>>> 671:         """Cleanup old messages from cache."""
    672:         if len(self.message_cache) > self.config["cache_size"]:
    673:             # Keep only recent half of messages (simplified cleanup)
    674:             cache_list = list(self.message_cache)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\bitchat\ble_transport.py:748:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    745:
    746: # Factory function for easy integration
    747: def create_bitchat_transport(device_id: str, **kwargs) -> BitChatTransport:
>>> 748:     """Factory function to create BitChat transport."""
    749:     return BitChatTransport(device_id, **kwargs)


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'data' methods (12 calls)
File: packages\p2p\bitchat\ble_transport.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'time' methods (8 calls)
File: packages\p2p\bitchat\ble_transport.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'kwargs' methods (7 calls)
File: packages\p2p\bitchat\ble_transport.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (42 calls)
File: packages\p2p\bitchat\ble_transport.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (15 calls)
File: packages\p2p\bitchat\ble_transport.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'asyncio' methods (8 calls)
File: packages\p2p\bitchat\ble_transport.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (24 total)
File: packages\p2p\bitchat\ble_transport.py:73:15
Recommendation: Replace magic numbers with named constants or enums
Code context:
     70:     # Routing information
     71:     sender: str = ""
     72:     recipient: str = ""  # Empty string for broadcast
>>>  73:     ttl: int = 7  # Maximum 7 hops for BitChat mesh
     74:     hop_count: int = 0
     75:     route_path: list[str] = field(default_factory=list)
     76:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (24 total)
File: packages\p2p\bitchat\ble_transport.py:81:20
Recommendation: Replace magic numbers with named constants or enums
Code context:
     78:     payload: bytes = b""
     79:
     80:     # Metadata
>>>  81:     priority: int = 5  # 1=low, 10=urgent
     82:     timestamp: float = field(default_factory=time.time)
     83:     compressed: bool = False
     84:     encrypted: bool = False


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (24 total)
File: packages\p2p\bitchat\ble_transport.py:159:32
Recommendation: Replace magic numbers with named constants or enums
Code context:
    156:             message_type=data.get("message_type", "data"),
    157:             sender=data.get("sender", ""),
    158:             recipient=data.get("recipient", ""),
>>> 159:             ttl=data.get("ttl", 7),
    160:             hop_count=data.get("hop_count", 0),
    161:             route_path=data.get("route_path", []),
    162:             payload=payload,


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (24 total)
File: packages\p2p\bitchat\ble_transport.py:163:42
Recommendation: Replace magic numbers with named constants or enums
Code context:
    160:             hop_count=data.get("hop_count", 0),
    161:             route_path=data.get("route_path", []),
    162:             payload=payload,
>>> 163:             priority=data.get("priority", 5),
    164:             timestamp=data.get("timestamp", time.time()),
    165:             compressed=data.get("compressed", False),
    166:             encrypted=data.get("encrypted", False),


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (24 total)
File: packages\p2p\bitchat\ble_transport.py:177:28
Recommendation: Replace magic numbers with named constants or enums
Code context:
    174:     device_id: str
    175:     device_name: str = ""
    176:     last_seen: float = field(default_factory=time.time)
>>> 177:     signal_strength: int = -70  # dBm
    178:     hop_count: int = 1
    179:     capabilities: set[str] = field(default_factory=set)
    180:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\bitchat\mesh_network.py:36:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     33:         return (time.time() - self.last_seen) < timeout
     34:
     35:     def update_activity(self):
>>>  36:         """Update node activity timestamp."""
     37:         self.last_seen = time.time()
     38:
     39:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\bitchat\mesh_network.py:56:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     53:         )
     54:
     55:     def add_node(self, node: MeshNode) -> bool:
>>>  56:         """Add or update a node in the mesh."""
     57:         if node.node_id == self.local_node_id:
     58:             return False  # Don't add ourselves
     59:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\bitchat\mesh_network.py:80:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     77:         return True
     78:
     79:     def remove_node(self, node_id: str):
>>>  80:         """Remove a node from the mesh."""
     81:         if node_id in self.nodes and node_id != self.local_node_id:
     82:             del self.nodes[node_id]
     83:             self._update_routing_table()


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\bitchat\mesh_network.py:114:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    111:             self.remove_node(node_id)
    112:
    113:     def _update_routing_table(self):
>>> 114:         """Update routing table using simplified distance-vector algorithm."""
    115:         # Clear current routing table
    116:         self.routing_table.clear()
    117:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\bitchat\mesh_network.py:181:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    178:
    179:
    180: def create_mesh_network(local_node_id: str) -> MeshNetwork:
>>> 181:     """Factory function to create mesh network."""
    182:     return MeshNetwork(local_node_id)


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (6 calls)
File: packages\p2p\bitchat\mesh_network.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\bounty-tmp\adaptive_navigator.py:1:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
>>>   1: """Adaptive Navigator Integration - RTT/Jitter Driven Path Selection
      2:
      3: Integrates NetworkMetricsCollector with Navigator agent for real-time adaptive routing
      4: based on measured RTT, jitter, and loss metrics. Provides sub-500ms path switching


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\bounty-tmp\adaptive_navigator.py:89:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     86:
     87: @dataclass
     88: class MessageContext:
>>>  89:     """Enhanced message context for path selection"""
     90:
     91:     sender: str = ""
     92:     recipient: str = ""


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\bounty-tmp\adaptive_navigator.py:158:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    155:     async def select_optimal_protocol(
    156:         self, peer_id: str, context: MessageContext, available_protocols: list[str]
    157:     ) -> tuple[str, dict[str, Any]]:
>>> 158:         """Select optimal protocol based on live network conditions"""
    159:         start_time = time.time()
    160:         conditions = self.get_network_conditions(peer_id)
    161:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\bounty-tmp\adaptive_navigator.py:207:27
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    204:         if decision_time_ms > 500:
    205:             logger.warning(f"Path selection took {decision_time_ms:.1f}ms (>500ms target)")
    206:         else:
>>> 207:             logger.debug(f"Path selection completed in {decision_time_ms:.1f}ms")
    208:
    209:         return protocol, metadata
    210:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\bounty-tmp\adaptive_navigator.py:310:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    307:
    308: # Convenience functions for integration
    309: def create_adaptive_navigator(metrics_collector=None):
>>> 310:     """Create AdaptiveNavigator with metrics integration"""
    311:     return AdaptiveNavigator(metrics_collector)
    312:
    313:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\bounty-tmp\adaptive_navigator.py:315:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    312:
    313:
    314: async def test_adaptive_selection():
>>> 315:     """Test adaptive protocol selection with simulated metrics"""
    316:     from ..metrics.net_metrics import NetworkMetricsCollector
    317:
    318:     # Create test setup


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (7 calls)
File: packages\p2p\bounty-tmp\adaptive_navigator.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (9 calls)
File: packages\p2p\bounty-tmp\adaptive_navigator.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (30 total)
File: packages\p2p\bounty-tmp\adaptive_navigator.py:33:34
Recommendation: Replace magic numbers with named constants or enums
Code context:
     30:     """Network conditions enhanced with real metrics"""
     31:
     32:     # Traditional fields
>>>  33:     estimated_latency_ms: float = 200.0
     34:     estimated_bandwidth_kbps: float = 1000.0
     35:     reliability_score: float = 0.9
     36:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (30 total)
File: packages\p2p\bounty-tmp\adaptive_navigator.py:35:31
Recommendation: Replace magic numbers with named constants or enums
Code context:
     32:     # Traditional fields
     33:     estimated_latency_ms: float = 200.0
     34:     estimated_bandwidth_kbps: float = 1000.0
>>>  35:     reliability_score: float = 0.9
     36:
     37:     # Live metrics from NetworkMetricsCollector
     38:     measured_rtt_ms: float | None = None


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (30 total)
File: packages\p2p\bounty-tmp\adaptive_navigator.py:44:30
Recommendation: Replace magic numbers with named constants or enums
Code context:
     41:     quality_score: float | None = None
     42:
     43:     # Adaptive parameters
>>>  44:     optimal_chunk_size: int = 4096
     45:     recommended_protocol: str = "htx"
     46:
     47:     # Measurement metadata


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (30 total)
File: packages\p2p\bounty-tmp\adaptive_navigator.py:72:32
Recommendation: Replace magic numbers with named constants or enums
Code context:
     69:     def needs_path_switch(
     70:         self,
     71:         rtt_threshold_ms: float = 1000,
>>>  72:         loss_threshold: float = 0.2,
     73:         quality_threshold: float = 0.3,
     74:     ) -> bool:
     75:         """Determine if path should be switched based on conditions"""


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (30 total)
File: packages\p2p\bounty-tmp\adaptive_navigator.py:73:35
Recommendation: Replace magic numbers with named constants or enums
Code context:
     70:         self,
     71:         rtt_threshold_ms: float = 1000,
     72:         loss_threshold: float = 0.2,
>>>  73:         quality_threshold: float = 0.3,
     74:     ) -> bool:
     75:         """Determine if path should be switched based on conditions"""
     76:         if not self.is_measurements_fresh():


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\bounty-tmp\test_htx_standalone.py:18:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     15:
     16:
     17: def load_module_direct(name, path):
>>>  18:     """Load a module directly from file path"""
     19:     spec = importlib.util.spec_from_file_location(name, path)
     20:     module = importlib.util.module_from_spec(spec)
     21:     sys.modules[name] = module


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'client' methods (9 calls)
File: packages\p2p\bounty-tmp\test_htx_standalone.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'results' methods (10 calls)
File: packages\p2p\bounty-tmp\test_htx_standalone.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (10 calls)
File: packages\p2p\bounty-tmp\verify_500ms_switching.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'asyncio' methods (6 calls)
File: packages\p2p\bounty-tmp\verify_500ms_switching.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (29 total)
File: packages\p2p\bounty-tmp\verify_500ms_switching.py:35:47
Recommendation: Replace magic numbers with named constants or enums
Code context:
     32:             self.metrics_collector = collector
     33:
     34:         async def select_optimal_protocol(self, peer_id, context, available):
>>>  35:             return "htx", {"decision_time_ms": 50.0}
     36:
     37:     class MessageContext:
     38:         def __init__(self, recipient, payload_size, priority):


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (29 total)
File: packages\p2p\bounty-tmp\verify_500ms_switching.py:63:23
Recommendation: Replace magic numbers with named constants or enums
Code context:
     60:         logger.info("Establishing baseline conditions...")
     61:
     62:         # Simulate good baseline measurements
>>>  63:         for i in range(5):
     64:             if hasattr(self.metrics_collector, "record_message_sent"):
     65:                 seq_id = self.metrics_collector.record_message_sent(self.test_peer, f"baseline_{i}", 1024)
     66:                 # Simulate 60ms RTT


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (29 total)
File: packages\p2p\bounty-tmp\verify_500ms_switching.py:65:101
Recommendation: Replace magic numbers with named constants or enums
Code context:
     62:         # Simulate good baseline measurements
     63:         for i in range(5):
     64:             if hasattr(self.metrics_collector, "record_message_sent"):
>>>  65:                 seq_id = self.metrics_collector.record_message_sent(self.test_peer, f"baseline_{i}", 1024)
     66:                 # Simulate 60ms RTT
     67:                 await asyncio.sleep(0.06)
     68:                 self.metrics_collector.record_message_acked(seq_id, success=True)


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (29 total)
File: packages\p2p\bounty-tmp\verify_500ms_switching.py:67:36
Recommendation: Replace magic numbers with named constants or enums
Code context:
     64:             if hasattr(self.metrics_collector, "record_message_sent"):
     65:                 seq_id = self.metrics_collector.record_message_sent(self.test_peer, f"baseline_{i}", 1024)
     66:                 # Simulate 60ms RTT
>>>  67:                 await asyncio.sleep(0.06)
     68:                 self.metrics_collector.record_message_acked(seq_id, success=True)
     69:
     70:         logger.info("✅ Baseline conditions established (60ms RTT, 0% loss)")


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (29 total)
File: packages\p2p\bounty-tmp\verify_500ms_switching.py:78:27
Recommendation: Replace magic numbers with named constants or enums
Code context:
     75:
     76:         if condition_type == "high_rtt":
     77:             # Simulate high RTT measurements
>>>  78:             for i in range(3):
     79:                 if hasattr(self.metrics_collector, "record_message_sent"):
     80:                     seq_id = self.metrics_collector.record_message_sent(self.test_peer, f"high_rtt_{i}", 1024)
     81:                     # Simulate 800ms RTT (degraded)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\bounty-tmp\verify_htx_integration.py:12:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
      9:
     10:
     11: def load_module_direct(name, path):
>>>  12:     """Load a module directly from file path"""
     13:     spec = importlib.util.spec_from_file_location(name, path)
     14:     module = importlib.util.module_from_spec(spec)
     15:     sys.modules[name] = module


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\bounty-tmp\verify_htx_integration.py:30:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     27:
     28: # 1. Verify HTXLink module loaded
     29: print("\n1. HTXLink Module:")
>>>  30: print(f"   [OK] Module loaded from: {src_path / 'core/p2p/betanet_link.py'}")
     31: print(f"   [OK] HTXLink class available: {hasattr(betanet_link, 'HTXLink')}")
     32: print(f"   [OK] HTXCalibrationMetrics available: {hasattr(betanet_link, 'HTXCalibrationMetrics')}")
     33:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\bounty-tmp\verify_htx_integration.py:59:6
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     56:
     57: # 4. Verify BetanetTransport integration
     58: print("\n4. BetanetTransport Integration:")
>>>  59: print("   [INFO] To use HTXLink, create BetanetTransport with use_htx_link=True")
     60: print("   [INFO] Example: transport = BetanetTransport(use_htx_link=True)")
     61: print("   [INFO] This will use TLS on port 443 instead of JSON on port 4001")
     62:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\bridges\compatibility.py:168:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    165:             return False
    166:
    167:     def get_status(self) -> dict[str, Any]:
>>> 168:         """Get status from legacy transport."""
    169:         status = {
    170:             "available": self.available,
    171:             "transport_type": self.transport_type,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\bridges\compatibility.py:275:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    272:         return self.adapters.get(adapter_id)
    273:
    274:     def get_all_status(self) -> dict[str, dict[str, Any]]:
>>> 275:         """Get status from all legacy adapters."""
    276:         return {adapter_id: adapter.get_status() for adapter_id, adapter in self.adapters.items()}
    277:
    278:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\bridges\compatibility.py:281:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    278:
    279: # Factory functions
    280: def create_legacy_bridge(legacy_path: str, transport_type: str = "unknown") -> LegacyTransportBridge:
>>> 281:     """Factory function to create legacy transport bridge."""
    282:     return LegacyTransportBridge(legacy_path, transport_type)
    283:
    284:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\bridges\compatibility.py:286:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    283:
    284:
    285: def create_adapter_manager() -> LegacyAdapterManager:
>>> 286:     """Factory function to create legacy adapter manager."""
    287:     return LegacyAdapterManager()
    288:
    289:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (15 calls)
File: packages\p2p\bridges\compatibility.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\bridges\rust_ffi.py:54:38
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     51:                     try:
     52:                         self.ffi_lib = ctypes.CDLL(lib_path)
     53:                         self.available = True
>>>  54:                         logger.info(f"Loaded betanet FFI library from: {lib_path}")
     55:                         break
     56:                     except Exception as e:
     57:                         logger.debug(f"Failed to load {lib_path}: {e}")


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\communications\community_hub.py:45:30
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     42:         for project_id, project_data in self.projects.items():
     43:             if task_id in project_data.get("tasks", []):
     44:                 project_data.setdefault("task_data", {})[task_id] = data
>>>  45:                 logger.info(f"Updated data for task {task_id} in project {project_id}")
     46:                 break
     47:
     48:     async def request_collaboration(self, requester_id: str, task_id: str, required_capabilities: list[str]) -> str:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\communications\community_hub.py:52:30
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     49:         for agent_id, agent_data in self.agents.items():
     50:             if agent_id != requester_id and all(cap in agent_data["capabilities"] for cap in required_capabilities):
     51:                 await self.assign_task(task_id, agent_id)
>>>  52:                 logger.info(f"Collaboration request from {requester_id} for task {task_id} assigned to {agent_id}")
     53:                 return agent_id
     54:         logger.warning(f"No suitable agent found for collaboration request from {requester_id} for task {task_id}")
     55:         return ""


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\communications\community_hub.py:54:25
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     51:                 await self.assign_task(task_id, agent_id)
     52:                 logger.info(f"Collaboration request from {requester_id} for task {task_id} assigned to {agent_id}")
     53:                 return agent_id
>>>  54:         logger.warning(f"No suitable agent found for collaboration request from {requester_id} for task {task_id}")
     55:         return ""
     56:
     57:     async def post_research_results(self, task_id: str, results: dict[str, Any]) -> None:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\communications\community_hub.py:70:22
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     67:             raise ValueError(msg)
     68:         self.projects[project_id]["status"] = status
     69:         self.projects[project_id]["progress"] = progress
>>>  70:         logger.info(f"Updated status of project {project_id} to {status} with progress {progress}")
     71:
     72:     async def generate_project_report(self, project_id: str):
     73:         """Generate a summary report for a single project.


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\communications\community_hub.py:105:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    102:         return report
    103:
    104:     async def create_combined_report(self, project_ids: list[str]) -> dict[str, Any]:
>>> 105:         """Create a combined report for multiple projects."""
    106:         combined_report = {"projects": [], "overall_progress": 0.0}
    107:
    108:         progress_sum = 0.0


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\communications\community_hub.py:117:22
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    114:         if project_ids:
    115:             combined_report["overall_progress"] = progress_sum / len(project_ids)
    116:
>>> 117:         logger.info(f"Created combined report for projects: {', '.join(project_ids)}")
    118:         return combined_report


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (10 calls)
File: packages\p2p\communications\community_hub.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'project_data' methods (7 calls)
File: packages\p2p\communications\community_hub.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\communications\credits_api.py:132:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    129:
    130: @app.post("/users", response_model=dict, status_code=201)
    131: async def create_user(request: CreateUserRequest, ledger: CreditsLedger = Depends(get_ledger)):
>>> 132:     """Create a new user with wallet."""
    133:     CREDITS_REQUESTS.labels(endpoint="/users", method="POST").inc()
    134:
    135:     with CREDITS_LATENCY.labels(endpoint="/users").time():


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\communications\credits_api.py:143:27
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    140:                 "username": user.username,
    141:                 "node_id": user.node_id,
    142:                 "created_at": user.created_at,
>>> 143:                 "message": "User created successfully",
    144:             }
    145:         except ValueError as e:
    146:             raise HTTPException(status_code=400, detail=str(e))


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'app' methods (11 calls)
File: packages\p2p\communications\credits_api.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'CREDITS_REQUESTS' methods (6 calls)
File: packages\p2p\communications\credits_api.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'CREDITS_LATENCY' methods (6 calls)
File: packages\p2p\communications\credits_api.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'ledger' methods (7 calls)
File: packages\p2p\communications\credits_api.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (18 total)
File: packages\p2p\communications\credits_api.py:24:42
Recommendation: Replace magic numbers with named constants or enums
Code context:
     21:
     22:
     23: class CreateUserRequest(BaseModel):
>>>  24:     username: str = Field(..., min_length=3, max_length=64, pattern="^[a-zA-Z0-9_-]+$")
     25:     node_id: str | None = Field(None, max_length=128)
     26:
     27:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (18 total)
File: packages\p2p\communications\credits_api.py:24:56
Recommendation: Replace magic numbers with named constants or enums
Code context:
     21:
     22:
     23: class CreateUserRequest(BaseModel):
>>>  24:     username: str = Field(..., min_length=3, max_length=64, pattern="^[a-zA-Z0-9_-]+$")
     25:     node_id: str | None = Field(None, max_length=128)
     26:
     27:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (18 total)
File: packages\p2p\communications\credits_api.py:25:49
Recommendation: Replace magic numbers with named constants or enums
Code context:
     22:
     23: class CreateUserRequest(BaseModel):
     24:     username: str = Field(..., min_length=3, max_length=64, pattern="^[a-zA-Z0-9_-]+$")
>>>  25:     node_id: str | None = Field(None, max_length=128)
     26:
     27:
     28: class TransferRequest(BaseModel):


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (18 total)
File: packages\p2p\communications\credits_api.py:29:47
Recommendation: Replace magic numbers with named constants or enums
Code context:
     26:
     27:
     28: class TransferRequest(BaseModel):
>>>  29:     from_username: str = Field(..., min_length=3, max_length=64)
     30:     to_username: str = Field(..., min_length=3, max_length=64)
     31:     amount: int = Field(..., gt=0, description="Amount in credits (positive integer)")
     32:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (18 total)
File: packages\p2p\communications\credits_api.py:29:61
Recommendation: Replace magic numbers with named constants or enums
Code context:
     26:
     27:
     28: class TransferRequest(BaseModel):
>>>  29:     from_username: str = Field(..., min_length=3, max_length=64)
     30:     to_username: str = Field(..., min_length=3, max_length=64)
     31:     amount: int = Field(..., gt=0, description="Amount in credits (positive integer)")
     32:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\communications\credits_ledger.py:32:21
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     29:     wallet = relationship("Wallet", back_populates="user", uselist=False)
     30:     sent_transactions = relationship(
     31:         "Transaction",
>>>  32:         foreign_keys="Transaction.from_user_id",
     33:         back_populates="from_user",
     34:     )
     35:     received_transactions = relationship("Transaction", foreign_keys="Transaction.to_user_id", back_populates="to_user")


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\communications\credits_ledger.py:79:14
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     76:
     77:     # Constraints
     78:     __table_args__ = (
>>>  79:         Index("idx_transaction_from_user", "from_user_id"),
     80:         Index("idx_transaction_to_user", "to_user_id"),
     81:         Index("idx_transaction_created", "created_at"),
     82:     )


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\communications\credits_ledger.py:81:14
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     78:     __table_args__ = (
     79:         Index("idx_transaction_from_user", "from_user_id"),
     80:         Index("idx_transaction_to_user", "to_user_id"),
>>>  81:         Index("idx_transaction_created", "created_at"),
     82:     )
     83:
     84:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\communications\credits_ledger.py:171:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    168:         self.SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=self.engine)
    169:
    170:     def create_tables(self) -> None:
>>> 171:         """Create all database tables."""
    172:         Base.metadata.create_all(bind=self.engine)
    173:
    174:     def get_session(self) -> Session:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\communications\credits_ledger.py:179:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    176:         return self.SessionLocal()
    177:
    178:     def create_user(self, username: str, node_id: str | None = None) -> User:
>>> 179:         """Create a new user with wallet."""
    180:         with self.get_session() as session:
    181:             try:
    182:                 # Create user


LONG_PARAMETER_LIST: Function 'earn_credits' has 6 parameters (>5)
File: packages\p2p\communications\credits_ledger.py:287:4
Recommendation: Use parameter objects, data classes, or keyword-only arguments
Code context:
    284:                 session.commit()
    285:                 raise
    286:
>>> 287:     def earn_credits(
    288:         self,
    289:         username: str,
    290:         scrape_timestamp: datetime,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\communications\credits_ledger.py:351:65
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    348:
    349:             session.commit()
    350:
>>> 351:             logger.info(f"User {username} earned {credits_earned} credits from metrics")
    352:
    353:             return EarningResponse(
    354:                 id=earning.id,


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'datetime' methods (7 calls)
File: packages\p2p\communications\credits_ledger.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (8 calls)
File: packages\p2p\communications\credits_ledger.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'session' methods (21 calls)
File: packages\p2p\communications\credits_ledger.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\communications\credit_manager.py:15:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     12:
     13: class CreditManager:
     14:     def __init__(self, mnemonic: str) -> None:
>>>  15:         """Create a credit manager bound to a wallet mnemonic."""
     16:         if _BITTENSOR_IMPORT_ERROR is not None:
     17:             msg = (
     18:                 "bittensor-wallet is required to use CreditManager. " "Install it with 'pip install bittensor-wallet'."


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\communications\earn_shells_worker.py:101:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     98:         return metrics
     99:
    100:     def get_active_nodes(self) -> list[str]:
>>> 101:         """Get list of active nodes from Prometheus."""
    102:         try:
    103:             query = "up == 1"
    104:             result = self.query(query)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\communications\earn_shells_worker.py:149:32
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    146:                     json={"username": username, "node_id": node_id},
    147:                 )
    148:                 if create_response.status_code == 201:
>>> 149:                     logger.info("Created user %s with node_id %s", username, node_id)
    150:                     return True
    151:                 logger.error("Failed to create user %s: %s", username, create_response.text)
    152:                 return False


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\communications\earn_shells_worker.py:151:29
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    148:                 if create_response.status_code == 201:
    149:                     logger.info("Created user %s with node_id %s", username, node_id)
    150:                     return True
>>> 151:                 logger.error("Failed to create user %s: %s", username, create_response.text)
    152:                 return False
    153:             logger.error("Failed to check user %s: %s", username, response.text)
    154:             return False


HARDCODED_PATH: Hardcoded path or URL detected
File: packages\p2p\communications\earn_shells_worker.py:259:16
Recommendation: Use configuration files, environment variables, or path utilities
Code context:
    256:     parser = argparse.ArgumentParser(description="Earn Shells Worker")
    257:     parser.add_argument(
    258:         "--prometheus-url",
>>> 259:         default="https://localhost:9090",
    260:         help="Prometheus server URL",
    261:     )
    262:     parser.add_argument("--credits-api-url", default="https://localhost:8002", help="Credits API URL")


HARDCODED_PATH: Hardcoded path or URL detected
File: packages\p2p\communications\earn_shells_worker.py:262:53
Recommendation: Use configuration files, environment variables, or path utilities
Code context:
    259:         default="https://localhost:9090",
    260:         help="Prometheus server URL",
    261:     )
>>> 262:     parser.add_argument("--credits-api-url", default="https://localhost:8002", help="Credits API URL")
    263:     parser.add_argument(
    264:         "--interval",
    265:         type=int,


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (26 calls)
File: packages\p2p\communications\earn_shells_worker.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (8 calls)
File: packages\p2p\communications\earn_shells_worker.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'parser' methods (6 calls)
File: packages\p2p\communications\earn_shells_worker.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

SEQUENTIAL_COUPLING: Sequential coupling detected: Function '__init__' is part of a sequence-dependent API
File: packages\p2p\communications\earn_shells_worker.py:127:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    124: class EarnShellsWorker:
    125:     """Worker that mints credits based on Prometheus metrics."""
    126:
>>> 127:     def __init__(self, prometheus_url: str, credits_api_url: str) -> None:
    128:         self.prometheus_client = PrometheusClient(prometheus_url)
    129:         self.credits_api_url = credits_api_url
    130:         self.config = CreditsConfig()


SEQUENTIAL_COUPLING: Sequential coupling detected: Function 'run_earning_cycle' is part of a sequence-dependent API
File: packages\p2p\communications\earn_shells_worker.py:202:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    199:             logger.exception("Error minting credits for node %s: %s", node_id, e)
    200:             return False
    201:
>>> 202:     def run_earning_cycle(self) -> None:
    203:         """Run a single earning cycle for all active nodes."""
    204:         scrape_timestamp = datetime.now(UTC)
    205:         logger.info("Starting earning cycle at %s", scrape_timestamp)


SEQUENTIAL_COUPLING: Sequential coupling detected: Function 'run_continuous' is part of a sequence-dependent API
File: packages\p2p\communications\earn_shells_worker.py:230:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    227:         except Exception as e:
    228:             logger.exception("Error in earning cycle: %s", e)
    229:
>>> 230:     def run_continuous(self, interval_seconds: int = 300) -> None:
    231:         """Run worker continuously with specified interval."""
    232:         logger.info("Starting continuous earning worker with %ds interval", interval_seconds)
    233:


SEQUENTIAL_COUPLING: Sequential coupling detected: Function 'run_once' is part of a sequence-dependent API
File: packages\p2p\communications\earn_shells_worker.py:247:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    244:                 logger.exception("Unexpected error in continuous worker: %s", e)
    245:                 time.sleep(60)  # Wait 1 minute before retrying
    246:
>>> 247:     def run_once(self) -> None:
    248:         """Run worker once and exit."""
    249:         logger.info("Running single earning cycle...")
    250:         self.run_earning_cycle()


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\communications\message.py:17:29
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     14:     COLLABORATION_REQUEST = "collaboration_request"
     15:     KNOWLEDGE_SHARE = "knowledge_share"
     16:     TASK_RESULT = "task_result"
>>>  17:     JOINT_REASONING_RESULT = "joint_reasoning_result"
     18:     UPDATE = "update"
     19:     COMMAND = "command"
     20:     BULK_UPDATE = "bulk_update"


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\communications\message.py:75:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     72:         )
     73:
     74:     def with_updated_content(self, new_content: dict[str, Any]) -> "Message":
>>>  75:         """Return a new Message with updated content."""
     76:         return Message(
     77:             type=self.type,
     78:             sender=self.sender,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\communications\message_passing_system.py:235:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    232:
    233: # Convenience functions
    234: async def create_message_system(agent_id: str, port: int | None = None) -> MessagePassingSystem:
>>> 235:     """Create and start a message passing system."""
    236:     system = MessagePassingSystem(agent_id, port)
    237:     await system.start()
    238:     return system


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (13 calls)
File: packages\p2p\communications\message_passing_system.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

LONG_PARAMETER_LIST: Function '__init__' has 7 parameters (>5)
File: packages\p2p\communications\protocol.py:31:4
Recommendation: Use parameter objects, data classes, or keyword-only arguments
Code context:
     28:     No more pass statements - real functionality!
     29:     """
     30:
>>>  31:     def __init__(
     32:         self,
     33:         agent_id: str,
     34:         port: int = 8888,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\communications\protocol.py:128:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    125:             return False
    126:
    127:     async def disconnect(self, agent_id: str) -> bool:
>>> 128:         """Actually disconnect from an agent - NOT A STUB!"""
    129:         if agent_id in self.connections:
    130:             try:
    131:                 websocket = self.connections[agent_id]


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\communications\protocol.py:137:35
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    134:                 logger.info(f"Disconnected from {agent_id}")
    135:                 return True
    136:             except Exception as e:
>>> 137:                 logger.exception(f"Error disconnecting from {agent_id}: {e}")
    138:                 # Still remove from connections dict even if close failed
    139:                 if agent_id in self.connections:
    140:                     del self.connections[agent_id]


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\communications\protocol.py:272:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    269:         return encrypted.decode("latin-1")  # WebSocket safe encoding
    270:
    271:     def _decrypt_message(self, agent_id: str, encrypted: str) -> dict:
>>> 272:         """Decrypt message from specific agent."""
    273:         key = self._get_or_create_key(agent_id)
    274:         decrypted = key.decrypt(encrypted.encode("latin-1"))
    275:         return json.loads(decrypted)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\communications\protocol.py:278:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    275:         return json.loads(decrypted)
    276:
    277:     async def _receive_messages(self, agent_id: str, websocket) -> None:
>>> 278:         """Background task to receive messages from an agent."""
    279:         try:
    280:             while agent_id in self.connections:
    281:                 try:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\communications\protocol.py:296:39
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    293:                     asyncio.create_task(self._reconnect(agent_id))
    294:                     break
    295:                 except Exception as e:
>>> 296:                     logger.exception(f"Error receiving from {agent_id}: {e}")
    297:                     asyncio.create_task(self._reconnect(agent_id))
    298:                     break
    299:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\communications\protocol.py:305:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    302:                 del self.connections[agent_id]
    303:
    304:     async def _start_heartbeat(self, agent_id: str, websocket) -> None:
>>> 305:         """Send ping frames periodically and drop on missed pongs."""
    306:         misses = 0
    307:         try:
    308:             while agent_id in self.connections:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\communications\protocol.py:361:30
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    358:         async def handle_connection(websocket) -> None:
    359:             agent_id = None
    360:             try:
>>> 361:                 logger.info(f"New connection attempt from {websocket.remote_address}")
    362:
    363:                 # Wait for handshake
    364:                 handshake_data = await asyncio.wait_for(websocket.recv(), timeout=10.0)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\communications\protocol.py:384:34
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    381:
    382:                     # Store connection
    383:                     self.connections[agent_id] = websocket
>>> 384:                     logger.info(f"Accepted connection from {agent_id}")
    385:
    386:                     asyncio.create_task(self._start_heartbeat(agent_id, websocket))
    387:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\communications\protocol.py:491:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    488:
    489:
    490: def disconnect(agent_id: str) -> bool:
>>> 491:     """Disconnect from agent - ACTUALLY WORKS NOW!"""
    492:     protocol = get_protocol_instance()
    493:     loop = asyncio.get_event_loop()
    494:     if loop.is_running():


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (27 calls)
File: packages\p2p\communications\protocol.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (22 calls)
File: packages\p2p\communications\protocol.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'time' methods (6 calls)
File: packages\p2p\communications\protocol.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'websocket' methods (13 calls)
File: packages\p2p\communications\protocol.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'json' methods (6 calls)
File: packages\p2p\communications\protocol.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'asyncio' methods (20 calls)
File: packages\p2p\communications\protocol.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'loop' methods (6 calls)
File: packages\p2p\communications\protocol.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'protocol' methods (6 calls)
File: packages\p2p\communications\protocol.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

SEQUENTIAL_COUPLING: Sequential coupling detected: Function 'get_connected_agents' is part of a sequence-dependent API
File: packages\p2p\communications\protocol.py:438:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    435:             await self.server.wait_closed()
    436:             logger.info("Communications server stopped")
    437:
>>> 438:     def get_connected_agents(self) -> list[str]:
    439:         """Get list of currently connected agent IDs."""
    440:         return list(self.connections.keys())
    441:


SEQUENTIAL_COUPLING: Sequential coupling detected: Function 'is_connected' is part of a sequence-dependent API
File: packages\p2p\communications\protocol.py:447:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    444:         history = self.message_history.get(agent_id, [])
    445:         return history[-limit:] if history else []
    446:
>>> 447:     def is_connected(self, agent_id: str) -> bool:
    448:         """Check if connected to specific agent."""
    449:         return agent_id in self.connections
    450:


SEQUENTIAL_COUPLING: Sequential coupling detected: Function 'connect' is part of a sequence-dependent API
File: packages\p2p\communications\protocol.py:480:0
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    477:
    478:
    479: # Backward compatible functions - NOW ACTUALLY WORK!
>>> 480: def connect(target_agent_id: str, target_url: str | None = None) -> bool:
    481:     """Connect to another agent using the global protocol instance."""
    482:     protocol = get_protocol_instance()
    483:     loop = asyncio.get_event_loop()


SEQUENTIAL_COUPLING: Sequential coupling detected: Function 'disconnect' is part of a sequence-dependent API
File: packages\p2p\communications\protocol.py:490:0
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    487:     return loop.run_until_complete(protocol.connect(target_agent_id, target_url))
    488:
    489:
>>> 490: def disconnect(agent_id: str) -> bool:
    491:     """Disconnect from agent - ACTUALLY WORKS NOW!"""
    492:     protocol = get_protocol_instance()
    493:     loop = asyncio.get_event_loop()


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (18 total)
File: packages\p2p\communications\protocol.py:36:36
Recommendation: Replace magic numbers with named constants or enums
Code context:
     33:         agent_id: str,
     34:         port: int = 8888,
     35:         *,
>>>  36:         heartbeat_interval: float = 20.0,
     37:         heartbeat_miss_limit: int = 3,
     38:         max_queue: int = 50,
     39:         allow_self_signed: bool | None = None,


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (18 total)
File: packages\p2p\communications\protocol.py:37:36
Recommendation: Replace magic numbers with named constants or enums
Code context:
     34:         port: int = 8888,
     35:         *,
     36:         heartbeat_interval: float = 20.0,
>>>  37:         heartbeat_miss_limit: int = 3,
     38:         max_queue: int = 50,
     39:         allow_self_signed: bool | None = None,
     40:     ) -> None:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (18 total)
File: packages\p2p\communications\protocol.py:38:25
Recommendation: Replace magic numbers with named constants or enums
Code context:
     35:         *,
     36:         heartbeat_interval: float = 20.0,
     37:         heartbeat_miss_limit: int = 3,
>>>  38:         max_queue: int = 50,
     39:         allow_self_signed: bool | None = None,
     40:     ) -> None:
     41:         self.agent_id = agent_id


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (18 total)
File: packages\p2p\communications\protocol.py:34:20
Recommendation: Replace magic numbers with named constants or enums
Code context:
     31:     def __init__(
     32:         self,
     33:         agent_id: str,
>>>  34:         port: int = 8888,
     35:         *,
     36:         heartbeat_interval: float = 20.0,
     37:         heartbeat_miss_limit: int = 3,


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (18 total)
File: packages\p2p\communications\protocol.py:66:30
Recommendation: Replace magic numbers with named constants or enums
Code context:
     63:         if url is None:
     64:             # try port range on localhost
     65:             host = os.getenv("COMM_DEFAULT_HOST", "localhost")
>>>  66:             for port in range(43000, 43101):
     67:                 candidate = f"ws://{host}:{port}/ws"
     68:                 if await self.connect(target_agent_id, candidate):
     69:                     return True


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\communications\service_directory.py:40:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     37:             self._save()
     38:
     39:     def lookup(self, agent_id: str) -> str | None:
>>>  40:         """Return registered URL or default from environment."""
     41:         with self._lock:
     42:             url = self._services.get(agent_id)
     43:         if url:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\communications\service_discovery.py:94:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     91:         return False
     92:
     93:     def heartbeat(self, agent_id: str, service_type: str) -> bool:
>>>  94:         """Update service heartbeat."""
     95:         service_id = f"{agent_id}:{service_type}"
     96:
     97:         if service_id in self.services:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (8 calls)
File: packages\p2p\communications\service_discovery.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'discovery' methods (10 calls)
File: packages\p2p\communications\service_discovery.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'pulp' methods (7 calls)
File: packages\p2p\communications\sharder.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\communications\standard_protocol.py:54:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     51:         self._subscribers[agent_id] = handler
     52:
     53:     def unsubscribe(self, agent_id: str) -> None:
>>>  54:         """Unsubscribe from messages for an agent."""
     55:         if agent_id in self._subscribers:
     56:             del self._subscribers[agent_id]
     57:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'ledger' methods (16 calls)
File: packages\p2p\communications\test_credits_standalone.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'client' methods (8 calls)
File: packages\p2p\communications\test_credits_standalone.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'response' methods (7 calls)
File: packages\p2p\communications\test_credits_standalone.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (30 total)
File: packages\p2p\communications\test_credits_standalone.py:27:27
Recommendation: Replace magic numbers with named constants or enums
Code context:
     24:         # Create test configuration
     25:         config = CreditsConfig()
     26:         config.database_url = f"sqlite:///{db_file.name}"
>>>  27:         config.burn_rate = 0.01
     28:         config.fixed_supply = 1000000
     29:
     30:         # Create ledger


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (30 total)
File: packages\p2p\communications\test_credits_standalone.py:28:30
Recommendation: Replace magic numbers with named constants or enums
Code context:
     25:         config = CreditsConfig()
     26:         config.database_url = f"sqlite:///{db_file.name}"
     27:         config.burn_rate = 0.01
>>>  28:         config.fixed_supply = 1000000
     29:
     30:         # Create ledger
     31:         ledger = CreditsLedger(config)


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (30 total)
File: packages\p2p\communications\test_credits_standalone.py:57:27
Recommendation: Replace magic numbers with named constants or enums
Code context:
     54:         earning = ledger.earn_credits(
     55:             "alice",
     56:             scrape_time,
>>>  57:             uptime_seconds=3600,  # 1 hour
     58:             flops=1000000000,  # 1 GFLOP
     59:             bandwidth_bytes=1000000000,  # 1 GB
     60:         )


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (30 total)
File: packages\p2p\communications\test_credits_standalone.py:58:18
Recommendation: Replace magic numbers with named constants or enums
Code context:
     55:             "alice",
     56:             scrape_time,
     57:             uptime_seconds=3600,  # 1 hour
>>>  58:             flops=1000000000,  # 1 GFLOP
     59:             bandwidth_bytes=1000000000,  # 1 GB
     60:         )
     61:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (30 total)
File: packages\p2p\communications\test_credits_standalone.py:59:28
Recommendation: Replace magic numbers with named constants or enums
Code context:
     56:             scrape_time,
     57:             uptime_seconds=3600,  # 1 hour
     58:             flops=1000000000,  # 1 GFLOP
>>>  59:             bandwidth_bytes=1000000000,  # 1 GB
     60:         )
     61:
     62:         # Expected: (1 hour * 10) + (1 GFLOP * 1000) + (1 GB * 1) = 1011


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\core\message_types.py:18:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     15:
     16:
     17: class MessagePriority(Enum):
>>>  18:     """Message priority levels for transport selection and handling."""
     19:
     20:     CRITICAL = 1  # Emergency/critical system messages
     21:     HIGH = 2  # High priority agent coordination


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\core\message_types.py:160:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    157:
    158:     @classmethod
    159:     def from_dict(cls, data: dict[str, Any]) -> "UnifiedMessage":
>>> 160:         """Create message from dictionary."""
    161:         metadata = MessageMetadata(
    162:             message_id=data["metadata"]["message_id"],
    163:             correlation_id=data["metadata"].get("correlation_id"),


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\core\message_types.py:193:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    190:         )
    191:
    192:     def create_chunk(self, chunk_data: bytes, chunk_index: int) -> "UnifiedMessage":
>>> 193:         """Create a new chunk message from this message."""
    194:         chunk_msg = UnifiedMessage(
    195:             message_type=self.message_type,
    196:             payload=chunk_data,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\core\message_types.py:228:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    225: def create_data_message(
    226:     recipient_id: str, payload: bytes, sender_id: str = "", priority: MessagePriority = MessagePriority.NORMAL, **kwargs
    227: ) -> UnifiedMessage:
>>> 228:     """Factory function to create a data message."""
    229:     metadata = MessageMetadata(sender_id=sender_id, recipient_id=recipient_id, priority=priority, **kwargs)
    230:
    231:     return UnifiedMessage(


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\core\message_types.py:241:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    238: def create_agent_task_message(
    239:     recipient_id: str, task_data: bytes, sender_id: str = "", priority: MessagePriority = MessagePriority.HIGH, **kwargs
    240: ) -> UnifiedMessage:
>>> 241:     """Factory function to create an agent task message."""
    242:     metadata = MessageMetadata(sender_id=sender_id, recipient_id=recipient_id, priority=priority, **kwargs)
    243:
    244:     return UnifiedMessage(


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\core\message_types.py:254:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    251: def create_heartbeat_message(
    252:     sender_id: str, recipient_id: str = "broadcast", priority: MessagePriority = MessagePriority.LOW, **kwargs
    253: ) -> UnifiedMessage:
>>> 254:     """Factory function to create a heartbeat message."""
    255:     metadata = MessageMetadata(
    256:         sender_id=sender_id,
    257:         recipient_id=recipient_id,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\core\transport_manager.py:1:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
>>>   1: """
      2: Unified Transport Manager for P2P Communication
      3:
      4: Coordinates between multiple transport types (BitChat, BetaNet, QUIC) and provides


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\core\transport_manager.py:36:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     33:
     34:
     35: class TransportPriority(Enum):
>>>  36:     """Transport selection strategies."""
     37:
     38:     OFFLINE_FIRST = "offline_first"  # Prefer BitChat, then BetaNet
     39:     PRIVACY_FIRST = "privacy_first"  # Prefer BetaNet, then BitChat


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\core\transport_manager.py:83:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     80:
     81: @dataclass
     82: class DeviceContext:
>>>  83:     """Current device context for transport selection."""
     84:
     85:     # Power management
     86:     battery_level: float | None = None  # 0.0 to 1.0


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\core\transport_manager.py:109:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    106:
    107: @dataclass
    108: class RoutingDecision:
>>> 109:     """Result of transport selection algorithm."""
    110:
    111:     primary_transport: TransportType
    112:     fallback_transports: list[TransportType] = field(default_factory=list)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\core\transport_manager.py:177:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    174:         logger.info(f"Registered {transport_type.value} transport")
    175:
    176:     def update_device_context(self, **context_updates):
>>> 177:         """Update current device context for better routing decisions."""
    178:         for key, value in context_updates.items():
    179:             if hasattr(self.device_context, key):
    180:                 setattr(self.device_context, key, value)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\core\transport_manager.py:182:23
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    179:             if hasattr(self.device_context, key):
    180:                 setattr(self.device_context, key, value)
    181:
>>> 182:         logger.debug(f"Updated device context: {context_updates}")
    183:
    184:     def _calculate_transport_score(self, transport_type: TransportType, message: UnifiedMessage) -> float:
    185:         """


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\core\transport_manager.py:276:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    273:         return score
    274:
    275:     def select_transport(self, message: UnifiedMessage) -> RoutingDecision:
>>> 276:         """Select the best transport for a message based on current conditions."""
    277:
    278:         # Calculate scores for all transports
    279:         transport_scores = {}


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\core\transport_manager.py:506:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    503:         return False
    504:
    505:     async def _start_transport(self, transport_type: TransportType, transport: Any) -> bool:
>>> 506:         """Start individual transport and update capabilities."""
    507:         try:
    508:             result = await transport.start()
    509:             if result and transport_type in self.capabilities:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (27 calls)
File: packages\p2p\core\transport_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (10 calls)
File: packages\p2p\core\transport_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'transport' methods (6 calls)
File: packages\p2p\core\transport_manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (38 total)
File: packages\p2p\core\transport_manager.py:54:28
Recommendation: Replace magic numbers with named constants or enums
Code context:
     51:     supports_broadcast: bool = False
     52:     supports_multicast: bool = False
     53:     supports_unicast: bool = True
>>>  54:     max_message_size: int = 65536
     55:
     56:     # Network characteristics
     57:     is_offline_capable: bool = False


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (38 total)
File: packages\p2p\core\transport_manager.py:104:38
Recommendation: Replace magic numbers with named constants or enums
Code context:
    101:     # Device capabilities
    102:     supports_bluetooth: bool = True
    103:     supports_wifi_direct: bool = False
>>> 104:     max_concurrent_connections: int = 20
    105:
    106:
    107: @dataclass


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (38 total)
File: packages\p2p\core\transport_manager.py:113:22
Recommendation: Replace magic numbers with named constants or enums
Code context:
    110:
    111:     primary_transport: TransportType
    112:     fallback_transports: list[TransportType] = field(default_factory=list)
>>> 113:     chunk_size: int = 16384
    114:     retry_strategy: str = "exponential_backoff"
    115:     timeout_seconds: int = 30
    116:     reasoning: str = ""


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (38 total)
File: packages\p2p\core\transport_manager.py:115:27
Recommendation: Replace magic numbers with named constants or enums
Code context:
    112:     fallback_transports: list[TransportType] = field(default_factory=list)
    113:     chunk_size: int = 16384
    114:     retry_strategy: str = "exponential_backoff"
>>> 115:     timeout_seconds: int = 30
    116:     reasoning: str = ""
    117:
    118:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (38 total)
File: packages\p2p\core\transport_manager.py:158:59
Recommendation: Replace magic numbers with named constants or enums
Code context:
    155:
    156:         # Configuration
    157:         self.config = {
>>> 158:             "max_chunk_size": kwargs.get("max_chunk_size", 16384),
    159:             "chunk_timeout_seconds": kwargs.get("chunk_timeout_seconds", 30),
    160:             "max_retry_attempts": kwargs.get("max_retry_attempts", 3),
    161:             "heartbeat_interval": kwargs.get("heartbeat_interval", 60),


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\legacy_src\navigator_mobile_integration.py:1:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
>>>   1: """
      2: Navigator Policy + Mobile Resource Manager Integration - Prompt 3
      3:
      4: This module wires together the Navigator's transport selection with the Mobile


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\legacy_src\navigator_mobile_integration.py:94:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     91:
     92:
     93: class ConstraintType(Enum):
>>>  94:     """Types of device constraints affecting transport selection."""
     95:
     96:     BATTERY_LOW = "battery_low"
     97:     BATTERY_CRITICAL = "battery_critical"


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\legacy_src\navigator_mobile_integration.py:109:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    106:
    107: @dataclass
    108: class TransportConstraints:
>>> 109:     """Device constraints that affect transport selection."""
    110:
    111:     battery_level: int | None = None  # Percentage
    112:     cpu_temp: float | None = None  # Celsius


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\legacy_src\navigator_mobile_integration.py:131:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    128:
    129:
    130: class MobileResourceNavigator:
>>> 131:     """
    132:     Navigator that integrates Mobile Resource Manager constraints into routing decisions.
    133:
    134:     This creates the integration between transport selection and device constraints,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\legacy_src\navigator_mobile_integration.py:173:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    170:         message_size_bytes: int,
    171:         priority: TransportPriority = TransportPriority.NORMAL,
    172:     ) -> MobileAwareRoutingDecision:
>>> 173:         """
    174:         Make routing decision considering both transport availability and device constraints.
    175:
    176:         This is the core integration method that combines Navigator transport selection


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\legacy_src\navigator_mobile_integration.py:247:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    244:         )
    245:
    246:     async def _evaluate_device_constraints(self) -> TransportConstraints:
>>> 247:         """Evaluate current device constraints that affect transport selection."""
    248:         constraints = TransportConstraints()
    249:         active_constraints = []
    250:


HARDCODED_PATH: Hardcoded path or URL detected
File: packages\p2p\legacy_src\navigator_mobile_integration.py:343:27
Recommendation: Use configuration files, environment variables, or path utilities
Code context:
    340:         candidates.append(
    341:             TransportCandidate(
    342:                 transport_type="betanet",
>>> 343:                 endpoint=f"https://{target}:8443",
    344:                 priority=betanet_priority,
    345:                 estimated_latency_ms=80.0,
    346:                 reliability_score=betanet_reliability,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\legacy_src\navigator_mobile_integration.py:531:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    528: async def create_mobile_aware_navigator(
    529:     scion_config: Any | None = None, enable_resource_management: bool = True
    530: ) -> MobileResourceNavigator:
>>> 531:     """Factory function to create integrated mobile-aware navigator."""
    532:     base_navigator = None
    533:     resource_manager = None
    534:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\legacy_src\navigator_mobile_integration.py:557:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    554:
    555:     navigator = MobileResourceNavigator(base_navigator=base_navigator, resource_manager=resource_manager)
    556:
>>> 557:     logger.info("Mobile-aware navigator created successfully")
    558:     return navigator
    559:
    560:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (14 calls)
File: packages\p2p\legacy_src\navigator_mobile_integration.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (11 calls)
File: packages\p2p\legacy_src\navigator_mobile_integration.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'active_constraints' methods (7 calls)
File: packages\p2p\legacy_src\navigator_mobile_integration.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (53 total)
File: packages\p2p\legacy_src\navigator_mobile_integration.py:52:17
Recommendation: Replace magic numbers with named constants or enums
Code context:
     49:     class TransportPriority(Enum):
     50:         CRITICAL = 1
     51:         HIGH = 2
>>>  52:         NORMAL = 3
     53:         LOW = 4
     54:         FALLBACK = 5
     55:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (53 total)
File: packages\p2p\legacy_src\navigator_mobile_integration.py:53:14
Recommendation: Replace magic numbers with named constants or enums
Code context:
     50:         CRITICAL = 1
     51:         HIGH = 2
     52:         NORMAL = 3
>>>  53:         LOW = 4
     54:         FALLBACK = 5
     55:
     56:     @dataclass


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (53 total)
File: packages\p2p\legacy_src\navigator_mobile_integration.py:54:19
Recommendation: Replace magic numbers with named constants or enums
Code context:
     51:         HIGH = 2
     52:         NORMAL = 3
     53:         LOW = 4
>>>  54:         FALLBACK = 5
     55:
     56:     @dataclass
     57:     class TransportCandidate:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (53 total)
File: packages\p2p\legacy_src\navigator_mobile_integration.py:151:32
Recommendation: Replace magic numbers with named constants or enums
Code context:
    148:         # Transport efficiency profiles (power consumption estimates)
    149:         self.transport_efficiency = {
    150:             "bitchat": {
>>> 151:                 "power_factor": 0.3,
    152:                 "data_efficiency": 0.9,
    153:             },  # Low power, high compression
    154:             "betanet": {


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (53 total)
File: packages\p2p\legacy_src\navigator_mobile_integration.py:152:35
Recommendation: Replace magic numbers with named constants or enums
Code context:
    149:         self.transport_efficiency = {
    150:             "bitchat": {
    151:                 "power_factor": 0.3,
>>> 152:                 "data_efficiency": 0.9,
    153:             },  # Low power, high compression
    154:             "betanet": {
    155:                 "power_factor": 0.7,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\betanet-bounty\python\access_tickets.py:66:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     63:
     64:     @classmethod
     65:     def from_dict(cls, data: dict) -> "AccessTicket":
>>>  66:         """Create ticket from dictionary."""
     67:         signature = None
     68:         if data.get("signature"):
     69:             signature = bytes.fromhex(data["signature"])


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\betanet-bounty\python\access_tickets.py:98:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     95:             self.public_key = secrets.token_bytes(32)
     96:
     97:     def create_ticket(self, service_type: str = "htx", valid_duration: int = 3600) -> AccessTicket:
>>>  98:         """Create a new access ticket."""
     99:         ticket_id = secrets.token_hex(16)
    100:
    101:         ticket = AccessTicket(


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\betanet-bounty\python\access_tickets.py:112:23
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    109:         ticket.signature = self._sign_ticket(ticket)
    110:
    111:         self.tickets[ticket_id] = ticket
>>> 112:         logger.debug(f"Created access ticket: {ticket_id}")
    113:
    114:         return ticket
    115:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\betanet-bounty\python\access_tickets.py:218:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    215:
    216:
    217: def create_ticket_manager(device_id: str) -> TicketManager:
>>> 218:     """Factory function to create ticket manager."""
    219:     return TicketManager(device_id)


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (11 calls)
File: packages\p2p\betanet-bounty\python\access_tickets.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

SEQUENTIAL_COUPLING: Sequential coupling detected: Function '__post_init__' is part of a sequence-dependent API
File: packages\p2p\betanet-bounty\python\access_tickets.py:37:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
     34:     expires_at: float = 0
     35:     signature: bytes | None = None
     36:
>>>  37:     def __post_init__(self):
     38:         if self.created_at == 0:
     39:             self.created_at = time.time()
     40:         if self.expires_at == 0:


SEQUENTIAL_COUPLING: Sequential coupling detected: Function '__init__' is part of a sequence-dependent API
File: packages\p2p\betanet-bounty\python\access_tickets.py:84:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
     81: class TicketManager:
     82:     """Manager for BetaNet access tickets with proper Ed25519 signing."""
     83:
>>>  84:     def __init__(self, device_id: str):
     85:         self.device_id = device_id
     86:         self.tickets: dict[str, AccessTicket] = {}
     87:


SEQUENTIAL_COUPLING: Sequential coupling detected: Function 'cleanup_expired_tickets' is part of a sequence-dependent API
File: packages\p2p\betanet-bounty\python\access_tickets.py:200:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    197:         """Get ticket by ID."""
    198:         return self.tickets.get(ticket_id)
    199:
>>> 200:     def cleanup_expired_tickets(self):
    201:         """Remove expired tickets."""
    202:         expired_tickets = []
    203:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\betanet-bounty\python\covert_channels.py:1:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
>>>   1: """
      2: BetaNet Covert Channels - Consolidated Advanced Transport Features
      3:
      4: Consolidates advanced covert transport capabilities from deprecated BetaNet files:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\betanet-bounty\python\covert_channels.py:193:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    190:         self.fingerprint_cache = {}
    191:
    192:     async def create_channel(self, config: CovertChannelConfig) -> str:
>>> 193:         """Create covert channel of specified type"""
    194:         channel_id = str(uuid.uuid4())
    195:
    196:         if config.channel_type == CovertChannelType.HTTP2_MULTIPLEXED:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\betanet-bounty\python\covert_channels.py:246:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    243:
    244:
    245: class BetaNetMixnetIntegration:
>>> 246:     """Integration with mixnet for enhanced anonymity (from deprecated files)"""
    247:
    248:     def __init__(self, mixnode_endpoints: list[str]):
    249:         self.mixnode_endpoints = mixnode_endpoints


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\betanet-bounty\python\covert_channels.py:253:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    250:         self.routing_circuits = {}
    251:
    252:     async def create_routing_circuit(self, hops: int = 3) -> str:
>>> 253:         """Create multi-hop routing circuit through mixnet"""
    254:         if len(self.mixnode_endpoints) < hops:
    255:             raise ValueError(f"Need at least {hops} mixnodes, only {len(self.mixnode_endpoints)} available")
    256:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\betanet-bounty\python\covert_channels.py:310:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    307:     mixnode_endpoints: list[str] | None = None,
    308:     cover_traffic: bool = False,
    309: ) -> tuple:
>>> 310:     """
    311:     Create advanced BetaNet transport with all consolidated features
    312:
    313:     Returns: (enhanced_client, covert_manager, mixnet_integration)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\betanet-bounty\python\covert_channels.py:317:26
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    314:     """
    315:     # Enhanced HTX client
    316:     if EnhancedHtxClient is None:
>>> 317:         raise ImportError("HTX transport not available - cannot create enhanced client")
    318:     client = EnhancedHtxClient(cover_traffic=cover_traffic)
    319:
    320:     # Covert channel manager


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (8 calls)
File: packages\p2p\betanet-bounty\python\covert_channels.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\betanet-bounty\python\htx_transport.py:144:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    141:
    142:     @classmethod
    143:     def decode(cls, data: bytes) -> tuple["HtxFrame", int]:
>>> 144:         """Decode frame from bytes, returning frame and bytes consumed."""
    145:         if len(data) < 3:
    146:             raise ValueError("Frame too short for length header")
    147:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\betanet-bounty\python\htx_transport.py:556:22
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    553:     async def _handle_client(self, reader: asyncio.StreamReader, writer: asyncio.StreamWriter):
    554:         """Handle incoming client connection."""
    555:         client_addr = writer.get_extra_info("peername")
>>> 556:         logger.info(f"HTX client connected from {client_addr}")
    557:
    558:         connection = HtxConnection()
    559:         self.connections[connection.connection_id] = connection


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\betanet-bounty\python\htx_transport.py:607:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    604:
    605: @dataclass
    606: class ChromeFingerprintTemplate:
>>> 607:     """Chrome fingerprint template with auto-refresh capability (from v2)"""
    608:
    609:     ja3_hash: str
    610:     ja4_hash: str


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\betanet-bounty\python\htx_transport.py:623:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    620:
    621: @dataclass
    622: class OriginFingerprint:
>>> 623:     """Per-origin fingerprint data for precise mimicry (from v2)"""
    624:
    625:     hostname: str
    626:     tls_template: ChromeFingerprintTemplate


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\betanet-bounty\python\htx_transport.py:674:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    671:
    672:
    673: class CovertChannelManager:
>>> 674:     """HTTP/2 and HTTP/3 covert channel manager (from deprecated files)"""
    675:
    676:     def __init__(self):
    677:         self.h2_available = HTTP2_AVAILABLE


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\betanet-bounty\python\htx_transport.py:682:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    679:         self.active_channels = {}
    680:
    681:     async def create_h2_channel(self, target_url: str) -> str:
>>> 682:         """Create HTTP/2 multiplexed covert channel"""
    683:         if not self.h2_available:
    684:             raise RuntimeError("HTTP/2 not available")
    685:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\betanet-bounty\python\htx_transport.py:692:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    689:         return channel_id
    690:
    691:     async def create_h3_channel(self, target_url: str) -> str:
>>> 692:         """Create HTTP/3 QUIC covert channel"""
    693:         if not self.h3_available:
    694:             raise RuntimeError("HTTP/3 not available")
    695:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\betanet-bounty\python\htx_transport.py:704:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    701:
    702: # Factory functions for easy integration
    703: def create_htx_client(**kwargs) -> HtxClient:
>>> 704:     """Factory function to create HTX client."""
    705:     return HtxClient(**kwargs)
    706:
    707:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\betanet-bounty\python\htx_transport.py:709:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    706:
    707:
    708: def create_enhanced_htx_client(**kwargs) -> EnhancedHtxClient:
>>> 709:     """Factory function to create Enhanced HTX client with advanced features."""
    710:     return EnhancedHtxClient(**kwargs)
    711:
    712:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\betanet-bounty\python\htx_transport.py:714:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    711:
    712:
    713: def create_htx_server(**kwargs) -> HtxServer:
>>> 714:     """Factory function to create HTX server."""
    715:     return HtxServer(**kwargs)


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'kwargs' methods (6 calls)
File: packages\p2p\betanet-bounty\python\htx_transport.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (12 calls)
File: packages\p2p\betanet-bounty\python\htx_transport.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'time' methods (6 calls)
File: packages\p2p\betanet-bounty\python\htx_transport.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (31 calls)
File: packages\p2p\betanet-bounty\python\htx_transport.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'asyncio' methods (7 calls)
File: packages\p2p\betanet-bounty\python\htx_transport.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'writer' methods (7 calls)
File: packages\p2p\betanet-bounty\python\htx_transport.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (56 total)
File: packages\p2p\betanet-bounty\python\htx_transport.py:70:17
Recommendation: Replace magic numbers with named constants or enums
Code context:
     67: logger = logging.getLogger(__name__)
     68:
     69: # HTX v1.1 Constants (from Rust implementation)
>>>  70: MAX_FRAME_SIZE = 16_777_215  # 2^24 - 1
     71: MAX_STREAM_ID = 268_435_455  # 2^28 - 1
     72:
     73:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (56 total)
File: packages\p2p\betanet-bounty\python\htx_transport.py:71:16
Recommendation: Replace magic numbers with named constants or enums
Code context:
     68:
     69: # HTX v1.1 Constants (from Rust implementation)
     70: MAX_FRAME_SIZE = 16_777_215  # 2^24 - 1
>>>  71: MAX_STREAM_ID = 268_435_455  # 2^28 - 1
     72:
     73:
     74: class HtxFrameType(IntEnum):


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (56 total)
File: packages\p2p\betanet-bounty\python\htx_transport.py:80:11
Recommendation: Replace magic numbers with named constants or enums
Code context:
     77:     DATA = 0x00
     78:     WINDOW_UPDATE = 0x01
     79:     KEY_UPDATE = 0x02
>>>  80:     PING = 0x03
     81:     PRIORITY = 0x04
     82:     PADDING = 0x05
     83:     ACCESS_TICKET = 0x06


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (56 total)
File: packages\p2p\betanet-bounty\python\htx_transport.py:81:15
Recommendation: Replace magic numbers with named constants or enums
Code context:
     78:     WINDOW_UPDATE = 0x01
     79:     KEY_UPDATE = 0x02
     80:     PING = 0x03
>>>  81:     PRIORITY = 0x04
     82:     PADDING = 0x05
     83:     ACCESS_TICKET = 0x06
     84:     CONTROL = 0x07


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (56 total)
File: packages\p2p\betanet-bounty\python\htx_transport.py:82:14
Recommendation: Replace magic numbers with named constants or enums
Code context:
     79:     KEY_UPDATE = 0x02
     80:     PING = 0x03
     81:     PRIORITY = 0x04
>>>  82:     PADDING = 0x05
     83:     ACCESS_TICKET = 0x06
     84:     CONTROL = 0x07
     85:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\betanet-bounty\python\mixnet_privacy.py:1:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
>>>   1: """
      2: BetaNet Mixnet Privacy Layer - Consolidated v1.1 Implementation
      3:
      4: Consolidates mixnet privacy features from deprecated files:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\betanet-bounty\python\mixnet_privacy.py:27:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     24:
     25:
     26: class PrivacyMode(Enum):
>>>  27:     """BetaNet privacy modes from v1.1 spec"""
     28:
     29:     STRICT = "strict"  # 5+ hops, max diversity, constant padding
     30:     BALANCED = "balanced"  # 3+ hops, good diversity, adaptive padding


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\betanet-bounty\python\mixnet_privacy.py:36:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     33:
     34: @dataclass
     35: class BeaconSetEntry:
>>>  36:     """BeaconSet entry for epoch-based entropy (from deprecated mixnet.py)"""
     37:
     38:     epoch: int
     39:     beacon_id: str


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\betanet-bounty\python\mixnet_privacy.py:77:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     74:
     75:
     76: class VRFSelector:
>>>  77:     """VRF-based hop selection for privacy routing (consolidated)"""
     78:
     79:     def __init__(self, seed_key: bytes | None = None):
     80:         self.seed_key = seed_key or secrets.token_bytes(32)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\betanet-bounty\python\mixnet_privacy.py:101:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     98:     def select_hops(
     99:         self, available_nodes: list[MixHop], privacy_mode: PrivacyMode, target_hops: int | None = None
    100:     ) -> list[MixHop]:
>>> 101:         """Select optimal hops using VRF and privacy constraints"""
    102:
    103:         # Determine hop count based on privacy mode
    104:         if target_hops is None:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\betanet-bounty\python\mixnet_privacy.py:253:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    250:         logger.info(f"Privacy layer initialized: {len(mix_hops)} mixnodes, mode={self.privacy_mode.value}")
    251:
    252:     async def create_private_route(self, target_endpoint: str) -> str:
>>> 253:         """Create privacy-optimized route to target"""
    254:
    255:         # Select hops based on privacy mode
    256:         selected_hops = self.vrf_selector.select_hops(self.available_mixnodes, self.privacy_mode)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\betanet-bounty\python\mixnet_privacy.py:278:14
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    275:         self.active_circuits[route_id] = route
    276:
    277:         logger.info(
>>> 278:             f"Created private route {route_id[:8]}: {len(selected_hops)} hops, "
    279:             f"AS diversity={route.as_diversity}, privacy_score={route.privacy_score:.2f}"
    280:         )
    281:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\betanet-bounty\python\mixnet_privacy.py:412:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    409:
    410:
    411: class ConsolidatedBetaNetMixnet:
>>> 412:     """
    413:     Consolidated BetaNet mixnet implementation combining all advanced features
    414:     from deprecated transport files
    415:     """


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\betanet-bounty\python\mixnet_privacy.py:489:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    486: def create_betanet_mixnet(
    487:     privacy_mode: str = "balanced", mixnode_endpoints: list[str] | None = None
    488: ) -> ConsolidatedBetaNetMixnet:
>>> 489:     """
    490:     Create consolidated BetaNet mixnet with all advanced features
    491:
    492:     Args:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\betanet-bounty\python\mixnet_privacy.py:518:22
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    515:             node_configs.append(config)
    516:
    517:         # Initialize asynchronously (would need to be awaited)
>>> 518:         logger.info(f"Created mixnet config for {len(node_configs)} nodes")
    519:
    520:     return mixnet


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (17 calls)
File: packages\p2p\betanet-bounty\python\mixnet_privacy.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (6 calls)
File: packages\p2p\betanet-bounty\python\mixnet_privacy.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'random' methods (6 calls)
File: packages\p2p\betanet-bounty\python\mixnet_privacy.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'asyncio' methods (8 calls)
File: packages\p2p\betanet-bounty\python\mixnet_privacy.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'node_config' methods (7 calls)
File: packages\p2p\betanet-bounty\python\mixnet_privacy.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (41 total)
File: packages\p2p\betanet-bounty\python\mixnet_privacy.py:80:56
Recommendation: Replace magic numbers with named constants or enums
Code context:
     77:     """VRF-based hop selection for privacy routing (consolidated)"""
     78:
     79:     def __init__(self, seed_key: bytes | None = None):
>>>  80:         self.seed_key = seed_key or secrets.token_bytes(32)
     81:         self.route_history: list[bytes] = []
     82:         self.max_history = 8  # Avoid reusing hop sets within 8 variants
     83:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (41 total)
File: packages\p2p\betanet-bounty\python\mixnet_privacy.py:82:27
Recommendation: Replace magic numbers with named constants or enums
Code context:
     79:     def __init__(self, seed_key: bytes | None = None):
     80:         self.seed_key = seed_key or secrets.token_bytes(32)
     81:         self.route_history: list[bytes] = []
>>>  82:         self.max_history = 8  # Avoid reusing hop sets within 8 variants
     83:
     84:     def generate_vrf_proof(self, input_data: bytes) -> tuple[bytes, bytes]:
     85:         """Generate VRF proof and output"""


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (41 total)
File: packages\p2p\betanet-bounty\python\mixnet_privacy.py:105:46
Recommendation: Replace magic numbers with named constants or enums
Code context:
    102:
    103:         # Determine hop count based on privacy mode
    104:         if target_hops is None:
>>> 105:             hop_counts = {PrivacyMode.STRICT: 5, PrivacyMode.BALANCED: 3, PrivacyMode.PERFORMANCE: 2}
    106:             target_hops = hop_counts[privacy_mode]
    107:
    108:         if len(available_nodes) < target_hops:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (41 total)
File: packages\p2p\betanet-bounty\python\mixnet_privacy.py:105:71
Recommendation: Replace magic numbers with named constants or enums
Code context:
    102:
    103:         # Determine hop count based on privacy mode
    104:         if target_hops is None:
>>> 105:             hop_counts = {PrivacyMode.STRICT: 5, PrivacyMode.BALANCED: 3, PrivacyMode.PERFORMANCE: 2}
    106:             target_hops = hop_counts[privacy_mode]
    107:
    108:         if len(available_nodes) < target_hops:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (41 total)
File: packages\p2p\betanet-bounty\python\mixnet_privacy.py:113:41
Recommendation: Replace magic numbers with named constants or enums
Code context:
    110:             target_hops = len(available_nodes)
    111:
    112:         # Generate VRF output for deterministic selection
>>> 113:         route_seed = secrets.token_bytes(32)
    114:         vrf_proof, vrf_output = self.generate_vrf_proof(route_seed)
    115:
    116:         # Convert VRF output to node selection weights


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\betanet-bounty\python\mixnode_client.py:39:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     36:         return True
     37:
     38:     async def create_circuit(self, hops: int = 3) -> str:
>>>  39:         """Create anonymous circuit through mixnodes."""
     40:         if not self.connected:
     41:             raise RuntimeError("Not connected to mixnodes")
     42:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\betanet-bounty\python\mixnode_client.py:70:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     67:             logger.debug(f"Closed circuit: {circuit_id}")
     68:
     69:     async def disconnect(self):
>>>  70:         """Disconnect from mixnodes."""
     71:         for circuit_id in self.active_circuits.copy():
     72:             await self.close_circuit(circuit_id)
     73:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\betanet-bounty\python\mixnode_client.py:75:20
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     72:             await self.close_circuit(circuit_id)
     73:
     74:         self.connected = False
>>>  75:         logger.info("Disconnected from mixnodes")
     76:
     77:     def get_status(self):
     78:         """Get mixnode client status."""


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (6 calls)
File: packages\p2p\betanet-bounty\python\mixnode_client.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\betanet-bounty\python\mobile_optimization.py:1:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
>>>   1: """
      2: BetaNet Mobile Optimization - Consolidated Mobile Features
      3:
      4: Consolidates mobile-specific BetaNet optimizations from deprecated files:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\betanet-bounty\python\mobile_optimization.py:549:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    546: def create_mobile_optimized_client(
    547:     device_id: str = "mobile_device", data_budget_mb: float | None = None, max_chunk_size: int = 2048
    548: ) -> MobileBetaNetOptimizer:
>>> 549:     """
    550:     Create mobile-optimized BetaNet client with automatic device detection
    551:
    552:     Args:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\betanet-bounty\python\mobile_optimization.py:576:10
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    573:     optimizer = MobileBetaNetOptimizer(device_profile, transport_config)
    574:
    575:     logger.info(
>>> 576:         f"Created mobile-optimized BetaNet client: device={device_id}, "
    577:         f"budget={data_budget_mb}MB, max_chunk={max_chunk_size}"
    578:     )
    579:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'psutil' methods (7 calls)
File: packages\p2p\betanet-bounty\python\mobile_optimization.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'time' methods (7 calls)
File: packages\p2p\betanet-bounty\python\mobile_optimization.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (6 calls)
File: packages\p2p\betanet-bounty\python\mobile_optimization.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (8 calls)
File: packages\p2p\betanet-bounty\python\mobile_optimization.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (49 total)
File: packages\p2p\betanet-bounty\python\mobile_optimization.py:64:86
Recommendation: Replace magic numbers with named constants or enums
Code context:
     61:     device_id: str
     62:     platform: str = field(default_factory=platform.system)
     63:     cpu_cores: int = field(default_factory=lambda: psutil.cpu_count())
>>>  64:     memory_gb: float = field(default_factory=lambda: psutil.virtual_memory().total / (1024**3))
     65:     battery_percent: float = 100.0
     66:     battery_state: BatteryState = BatteryState.FULL
     67:     thermal_state: ThermalState = ThermalState.COOL


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (49 total)
File: packages\p2p\betanet-bounty\python\mobile_optimization.py:64:92
Recommendation: Replace magic numbers with named constants or enums
Code context:
     61:     device_id: str
     62:     platform: str = field(default_factory=platform.system)
     63:     cpu_cores: int = field(default_factory=lambda: psutil.cpu_count())
>>>  64:     memory_gb: float = field(default_factory=lambda: psutil.virtual_memory().total / (1024**3))
     65:     battery_percent: float = 100.0
     66:     battery_state: BatteryState = BatteryState.FULL
     67:     thermal_state: ThermalState = ThermalState.COOL


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (49 total)
File: packages\p2p\betanet-bounty\python\mobile_optimization.py:78:26
Recommendation: Replace magic numbers with named constants or enums
Code context:
     75: class MobileTransportConfig:
     76:     """Configuration optimized for mobile device constraints"""
     77:
>>>  78:     max_chunk_size: int = 1024  # Start conservative for mobile
     79:     min_chunk_size: int = 256  # Minimum viable chunk
     80:     compression_enabled: bool = True  # Always compress on mobile
     81:     encryption_level: str = "standard"  # standard, high, paranoid


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (49 total)
File: packages\p2p\betanet-bounty\python\mobile_optimization.py:79:26
Recommendation: Replace magic numbers with named constants or enums
Code context:
     76:     """Configuration optimized for mobile device constraints"""
     77:
     78:     max_chunk_size: int = 1024  # Start conservative for mobile
>>>  79:     min_chunk_size: int = 256  # Minimum viable chunk
     80:     compression_enabled: bool = True  # Always compress on mobile
     81:     encryption_level: str = "standard"  # standard, high, paranoid
     82:     battery_optimization: bool = True


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (49 total)
File: packages\p2p\betanet-bounty\python\mobile_optimization.py:87:30
Recommendation: Replace magic numbers with named constants or enums
Code context:
     84:     thermal_throttling: bool = True
     85:     adaptive_retry: bool = True
     86:     connection_pooling: bool = True  # Reuse connections
>>>  87:     keepalive_interval: int = 30  # Seconds between keepalives
     88:
     89:
     90: class BatteryMonitor:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\betanet-bounty\python\noise_protocol.py:44:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     41:
     42:     @classmethod
     43:     def create(cls) -> "NoiseXKHandshake":
>>>  44:         """Create new Noise XK handshake instance with real X25519 keys."""
     45:         if not CRYPTO_AVAILABLE:
     46:             # Fallback for when cryptography not available
     47:             static_private = secrets.token_bytes(32)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\betanet-bounty\python\noise_protocol.py:64:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     61:         )
     62:
     63:     def _derive_keys(self, shared_secret: bytes) -> tuple[bytes, bytes]:
>>>  64:         """Derive encryption/decryption keys from shared secret using HKDF."""
     65:         if CRYPTO_AVAILABLE:
     66:             hkdf = HKDF(
     67:                 algorithm=hashes.SHA256(),


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\betanet-bounty\python\noise_protocol.py:183:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    180:
    181:
    182: def create_noise_handshake() -> NoiseXKHandshake:
>>> 183:     """Factory function to create Noise XK handshake."""
    184:     return NoiseXKHandshake.create()


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (20 total)
File: packages\p2p\betanet-bounty\python\noise_protocol.py:47:49
Recommendation: Replace magic numbers with named constants or enums
Code context:
     44:         """Create new Noise XK handshake instance with real X25519 keys."""
     45:         if not CRYPTO_AVAILABLE:
     46:             # Fallback for when cryptography not available
>>>  47:             static_private = secrets.token_bytes(32)
     48:             static_public = secrets.token_bytes(32)
     49:             return cls(
     50:                 static_private_key=static_private,


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (20 total)
File: packages\p2p\betanet-bounty\python\noise_protocol.py:48:48
Recommendation: Replace magic numbers with named constants or enums
Code context:
     45:         if not CRYPTO_AVAILABLE:
     46:             # Fallback for when cryptography not available
     47:             static_private = secrets.token_bytes(32)
>>>  48:             static_public = secrets.token_bytes(32)
     49:             return cls(
     50:                 static_private_key=static_private,
     51:                 static_public_key=static_public,


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (20 total)
File: packages\p2p\betanet-bounty\python\noise_protocol.py:68:23
Recommendation: Replace magic numbers with named constants or enums
Code context:
     65:         if CRYPTO_AVAILABLE:
     66:             hkdf = HKDF(
     67:                 algorithm=hashes.SHA256(),
>>>  68:                 length=64,  # 32 bytes each for tx/rx keys
     69:                 salt=b"noise_xk_salt",
     70:                 info=b"betanet_htx",
     71:             )


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (20 total)
File: packages\p2p\betanet-bounty\python\noise_protocol.py:73:33
Recommendation: Replace magic numbers with named constants or enums
Code context:
     70:                 info=b"betanet_htx",
     71:             )
     72:             key_material = hkdf.derive(shared_secret)
>>>  73:             return key_material[:32], key_material[32:64]
     74:         else:
     75:             # Fallback key derivation
     76:             combined = hashlib.sha256(shared_secret + b"noise_xk_salt").digest()


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (20 total)
File: packages\p2p\betanet-bounty\python\noise_protocol.py:73:51
Recommendation: Replace magic numbers with named constants or enums
Code context:
     70:                 info=b"betanet_htx",
     71:             )
     72:             key_material = hkdf.derive(shared_secret)
>>>  73:             return key_material[:32], key_material[32:64]
     74:         else:
     75:             # Fallback key derivation
     76:             combined = hashlib.sha256(shared_secret + b"noise_xk_salt").digest()


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\betanet-bounty\python\test_betanet_cover.py:1:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
>>>   1: """Test Betanet Cover Traffic Generator
      2:
      3: Tests the cover traffic and padding implementation that makes Betanet
      4: indistinguishable from normal web activity.


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\betanet-bounty\python\test_betanet_cover.py:23:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     20:
     21:
     22: def load_module_direct(name, path):
>>>  23:     """Load a module directly from file path"""
     24:     spec = importlib.util.spec_from_file_location(name, path)
     25:     module = importlib.util.module_from_spec(spec)
     26:     sys.modules[name] = module


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\betanet-bounty\python\test_betanet_cover.py:76:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     73:     """Test Betanet cover traffic functionality"""
     74:
     75:     def test_config_from_env(self):
>>>  76:         """Test cover traffic configuration from environment variables"""
     77:         # Set test environment variables
     78:         os.environ["BETANET_COVER_MODE"] = "constant"
     79:         os.environ["BETANET_COVER_RATE"] = "2.0"


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\betanet-bounty\python\test_betanet_cover.py:91:18
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     88:             assert config.max_bandwidth_bps == 20000
     89:             assert config.max_daily_mb == 200.0
     90:
>>>  91:             print("✓ Config from environment variables works")
     92:
     93:         finally:
     94:             # Clean up environment


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\betanet-bounty\python\test_betanet_cover.py:381:14
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    378:
    379:     try:
    380:         # Test 1: Config from environment
>>> 381:         print("\n1. Testing configuration from environment...")
    382:         test_suite.test_config_from_env()
    383:         print("   ✓ Environment configuration working")
    384:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\betanet-bounty\python\test_betanet_cover.py:422:14
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    419:
    420:         print("\n" + "=" * 60)
    421:         print("ALL COVER TRAFFIC TESTS PASSED! ✓")
>>> 422:         print("Cover traffic makes Betanet indistinguishable from web traffic.")
    423:         print("=" * 60)
    424:
    425:         return True


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'asyncio' methods (9 calls)
File: packages\p2p\betanet-bounty\python\test_betanet_cover.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'cover_traffic' methods (17 calls)
File: packages\p2p\betanet-bounty\python\test_betanet_cover.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'test_suite' methods (8 calls)
File: packages\p2p\betanet-bounty\python\test_betanet_cover.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (38 total)
File: packages\p2p\betanet-bounty\python\test_betanet_cover.py:48:33
Recommendation: Replace magic numbers with named constants or enums
Code context:
     45:     def __init__(self):
     46:         self.sent_messages = []
     47:         self.active_peers = ["peer1", "peer2", "peer3"]
>>>  48:         self.send_success_rate = 0.9  # 90% success rate
     49:
     50:     async def send_cover_message(self, payload: bytes, recipient: str = None) -> bool:
     51:         """Mock send cover message"""


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (38 total)
File: packages\p2p\betanet-bounty\python\test_betanet_cover.py:52:28
Recommendation: Replace magic numbers with named constants or enums
Code context:
     49:
     50:     async def send_cover_message(self, payload: bytes, recipient: str = None) -> bool:
     51:         """Mock send cover message"""
>>>  52:         await asyncio.sleep(0.001)  # Simulate network delay
     53:
     54:         success = len(self.sent_messages) % 10 < 9  # 90% success rate
     55:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (38 total)
File: packages\p2p\betanet-bounty\python\test_betanet_cover.py:54:49
Recommendation: Replace magic numbers with named constants or enums
Code context:
     51:         """Mock send cover message"""
     52:         await asyncio.sleep(0.001)  # Simulate network delay
     53:
>>>  54:         success = len(self.sent_messages) % 10 < 9  # 90% success rate
     55:
     56:         if success:
     57:             self.sent_messages.append(


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (38 total)
File: packages\p2p\betanet-bounty\python\test_betanet_cover.py:88:47
Recommendation: Replace magic numbers with named constants or enums
Code context:
     85:
     86:             assert config.mode == CoverTrafficMode.CONSTANT_RATE
     87:             assert config.base_rate_pps == 2.0
>>>  88:             assert config.max_bandwidth_bps == 20000
     89:             assert config.max_daily_mb == 200.0
     90:
     91:             print("✓ Config from environment variables works")


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (38 total)
File: packages\p2p\betanet-bounty\python\test_betanet_cover.py:89:42
Recommendation: Replace magic numbers with named constants or enums
Code context:
     86:             assert config.mode == CoverTrafficMode.CONSTANT_RATE
     87:             assert config.base_rate_pps == 2.0
     88:             assert config.max_bandwidth_bps == 20000
>>>  89:             assert config.max_daily_mb == 200.0
     90:
     91:             print("✓ Config from environment variables works")
     92:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\betanet-bounty\python\test_betanet_tls_quic.py:173:18
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    170:             assert "stream_success_rate" in metrics, "Missing success rate"
    171:         else:
    172:             # Metrics export is optional, not a failure
>>> 173:             print("Metrics file not created (optional feature)")
    174:
    175:     @pytest.mark.asyncio
    176:     async def test_alpn_negotiation(self):


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'link' methods (8 calls)
File: packages\p2p\betanet-bounty\python\test_betanet_tls_quic.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'test_suite' methods (7 calls)
File: packages\p2p\betanet-bounty\python\test_betanet_tls_quic.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\betanet-bounty\python\__init__.py:1:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
>>>   1: """
      2: BetaNet encrypted internet transport implementation - CONSOLIDATED VERSION.
      3:
      4: Based on the production-ready betanet bounty implementation, providing:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\betanet-bounty\python\__init__.py:117:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    114:     "CovertChannelConfig",
    115:     "CoverTrafficPattern",
    116:     "BetaNetMixnetIntegration",
>>> 117:     "create_advanced_betanet_transport",
    118:     # Mixnet Privacy
    119:     "ConsolidatedBetaNetMixnet",
    120:     "VRFSelector",


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\betanet-bounty\python\__init__.py:124:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    121:     "ConstantRatePadding",
    122:     "PrivacyMode",
    123:     "MixnetConfig",
>>> 124:     "create_privacy_enhanced_transport",
    125:     # Mobile Optimization
    126:     "MobileBetaNetOptimizer",
    127:     "BatteryState",


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\betanet-bounty\python\__init__.py:132:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    129:     "NetworkType",
    130:     "AdaptiveChunkingPolicy",
    131:     "DataBudgetManager",
>>> 132:     "create_mobile_optimized_transport",
    133: ]


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\betanet-bounty\ffi\betanet-c\python\betanet_bridge.py:20:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     17:
     18:
     19: class BetanetResult(ctypes.c_int):
>>>  20:     """Result codes from C API"""
     21:
     22:     SUCCESS = 0
     23:     ERROR = 1


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\betanet-bounty\ffi\betanet-c\python\betanet_bridge.py:113:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    110:             return False
    111:
    112:     def create_htx_client(self, config: dict[str, Any]) -> str | None:
>>> 113:         """Create an HTX client with integration to existing transport layer"""
    114:         try:
    115:             # Convert Python config to C config
    116:             c_config = BetanetConfig()


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\betanet-bounty\ffi\betanet-c\python\betanet_bridge.py:126:29
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    123:
    124:             client_ptr = self.lib.betanet_htx_client_create(ctypes.byref(c_config))
    125:             if not client_ptr:
>>> 126:                 logger.error("Failed to create HTX client")
    127:                 return None
    128:
    129:             client_id = f"htx_client_{len(self._clients)}"


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\betanet-bounty\ffi\betanet-c\python\betanet_bridge.py:136:27
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    133:             return client_id
    134:
    135:         except Exception as e:
>>> 136:             logger.error(f"Failed to create HTX client: {e}")
    137:             return None
    138:
    139:     def generate_chrome_fingerprint(self, hostname: str) -> dict[str, Any] | None:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\betanet-bounty\ffi\betanet-c\python\betanet_bridge.py:276:26
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    273:
    274:         client_id = bridge.create_htx_client(htx_config)
    275:         if client_id:
>>> 276:             logger.info(f"Created default HTX client: {client_id}")
    277:
    278:         return bridge
    279:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (25 calls)
File: packages\p2p\betanet-bounty\ffi\betanet-c\python\betanet_bridge.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'config' methods (6 calls)
File: packages\p2p\betanet-bounty\ffi\betanet-c\python\betanet_bridge.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'bridge' methods (6 calls)
File: packages\p2p\betanet-bounty\ffi\betanet-c\python\betanet_bridge.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

SEQUENTIAL_COUPLING: Sequential coupling detected: Function '__init__' is part of a sequence-dependent API
File: packages\p2p\betanet-bounty\ffi\betanet-c\python\betanet_bridge.py:45:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
     42: class BetanetBridge:
     43:     """Bridge between Rust Betanet components and Python infrastructure"""
     44:
>>>  45:     def __init__(self, library_path: Path | None = None):
     46:         """Initialize the Betanet bridge"""
     47:         self.library_path = library_path or self._find_library()
     48:         self.lib = None


SEQUENTIAL_COUPLING: Sequential coupling detected: Function 'initialize' is part of a sequence-dependent API
File: packages\p2p\betanet-bounty\ffi\betanet-c\python\betanet_bridge.py:76:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
     73:
     74:         raise FileNotFoundError(f"Could not find Betanet library: {lib_name}")
     75:
>>>  76:     def initialize(self) -> bool:
     77:         """Initialize the Betanet library"""
     78:         try:
     79:             self.lib = CDLL(str(self.library_path))


SEQUENTIAL_COUPLING: Sequential coupling detected: Function 'cleanup' is part of a sequence-dependent API
File: packages\p2p\betanet-bounty\ffi\betanet-c\python\betanet_bridge.py:216:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    213:             logger.error(f"Failed to send message: {e}")
    214:             return False
    215:
>>> 216:     def cleanup(self):
    217:         """Clean up resources"""
    218:         try:
    219:             # Clean up clients


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\communications\alembic\env.py:32:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     29:
     30:
     31: def get_url():
>>>  32:     """Get database URL from environment or config."""
     33:     url = os.getenv("DATABASE_URL")
     34:     if url:
     35:         return url


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\communications\alembic\env.py:64:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     61:
     62:
     63: def run_migrations_online() -> None:
>>>  64:     """Run migrations in 'online' mode.
     65:
     66:     In this scenario we need to create an Engine
     67:     and associate a connection with the context.


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'context' methods (7 calls)
File: packages\p2p\communications\alembic\env.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\communications\alembic\versions\001_initial_credits_schema.py:1:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
>>>   1: """Initial credits ledger schema.
      2:
      3: Revision ID: 001
      4: Revises:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\communications\alembic\versions\001_initial_credits_schema.py:64:20
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     61:         sa.ForeignKeyConstraint(["to_user_id"], ["users.id"]),
     62:         sa.PrimaryKeyConstraint("id"),
     63:     )
>>>  64:     op.create_index("idx_transaction_created", "transactions", ["created_at"], unique=False)
     65:     op.create_index("idx_transaction_from_user", "transactions", ["from_user_id"], unique=False)
     66:     op.create_index("idx_transaction_to_user", "transactions", ["to_user_id"], unique=False)
     67:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\communications\alembic\versions\001_initial_credits_schema.py:65:20
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     62:         sa.PrimaryKeyConstraint("id"),
     63:     )
     64:     op.create_index("idx_transaction_created", "transactions", ["created_at"], unique=False)
>>>  65:     op.create_index("idx_transaction_from_user", "transactions", ["from_user_id"], unique=False)
     66:     op.create_index("idx_transaction_to_user", "transactions", ["to_user_id"], unique=False)
     67:
     68:     # Create earnings table


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'op' methods (15 calls)
File: packages\p2p\communications\alembic\versions\001_initial_credits_schema.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'sa' methods (66 calls)
File: packages\p2p\communications\alembic\versions\001_initial_credits_schema.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\legacy_src\betanet\htx_transport.py:1:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
>>>   1: """Betanet Transport v2 - Production-Ready Implementation
      2:
      3: Addresses critiques from Betanet 1.1 spec review:
      4: - Operational fragility in fingerprint mirroring/calibration


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\legacy_src\betanet\htx_transport.py:191:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    188:         return self.templates[version]
    189:
    190:     async def refresh_template(self, version: str):
>>> 191:         """Refresh Chrome template from latest Chrome builds"""
    192:         # In production, this would fetch from Chrome build servers
    193:         # For now, simulate with known-good templates
    194:         logger.info(f"Refreshing Chrome template for version {version}")


HARDCODED_PATH: Hardcoded path or URL detected
File: packages\p2p\legacy_src\betanet\htx_transport.py:278:20
Recommendation: Use configuration files, environment variables, or path utilities
Code context:
    275:             ]
    276:
    277:             path = random.choice(common_paths)
>>> 278:             url = f"https://{hostname}{path}"
    279:
    280:             try:
    281:                 async with session.get(url, timeout=aiohttp.ClientTimeout(total=10)) as response:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\legacy_src\betanet\htx_transport.py:330:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    327:         )
    328:
    329:     def _create_fallback_fingerprint(self, hostname: str) -> OriginFingerprint:
>>> 330:         """Create fallback fingerprint when calibration fails"""
    331:         logger.warning(f"Using fallback fingerprint for {hostname}")
    332:
    333:         return OriginFingerprint(


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\legacy_src\betanet\htx_transport.py:507:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    504:         return await self._send_direct(message)
    505:
    506:     async def _create_cover_connections(self, origin: str, bytes_budget: int):
>>> 507:         """Create cover connections with mobile budget constraints"""
    508:
    509:         if self.cover_traffic_active:
    510:             return  # Avoid overlapping cover traffic


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\legacy_src\betanet\htx_transport.py:540:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    537:             self.cover_traffic_active = False
    538:
    539:     async def _create_single_cover_connection(self, origin: str, bytes_budget: int):
>>> 540:         """Create single cover connection"""
    541:
    542:         delay = random.uniform(0, 1.0)  # 0-1000ms delay
    543:         await asyncio.sleep(delay)


HARDCODED_PATH: Hardcoded path or URL detected
File: packages\p2p\legacy_src\betanet\htx_transport.py:548:24
Recommendation: Use configuration files, environment variables, or path utilities
Code context:
    545:         try:
    546:             async with aiohttp.ClientSession() as session:
    547:                 # Fetch a realistic resource
>>> 548:                 url = f"https://{origin}/favicon.ico"
    549:                 async with session.get(url, timeout=aiohttp.ClientTimeout(total=5)) as response:
    550:                     content = await response.read()
    551:                     logger.debug(f"Cover connection to {origin}: {len(content)} bytes")


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\legacy_src\betanet\htx_transport.py:561:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    558:         await asyncio.sleep(hold_time)
    559:
    560:     async def _select_cover_origins(self, actual_origin: str, count: int = 2) -> list[str]:
>>> 561:         """Select unrelated origins for cover traffic"""
    562:
    563:         # In production, would use a curated list of popular sites
    564:         cover_candidates = [


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'time' methods (10 calls)
File: packages\p2p\legacy_src\betanet\htx_transport.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'random' methods (9 calls)
File: packages\p2p\legacy_src\betanet\htx_transport.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (24 calls)
File: packages\p2p\legacy_src\betanet\htx_transport.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (21 calls)
File: packages\p2p\legacy_src\betanet\htx_transport.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'asyncio' methods (14 calls)
File: packages\p2p\legacy_src\betanet\htx_transport.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (92 total)
File: packages\p2p\legacy_src\betanet\htx_transport.py:43:44
Recommendation: Replace magic numbers with named constants or enums
Code context:
     40:     chrome_version: str
     41:     creation_timestamp: float
     42:
>>>  43:     def is_stale(self, max_age_hours: int = 24) -> bool:
     44:         """Check if template is stale and needs refresh"""
     45:         return (time.time() - self.creation_timestamp) > (max_age_hours * 3600)
     46:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (92 total)
File: packages\p2p\legacy_src\betanet\htx_transport.py:45:74
Recommendation: Replace magic numbers with named constants or enums
Code context:
     42:
     43:     def is_stale(self, max_age_hours: int = 24) -> bool:
     44:         """Check if template is stale and needs refresh"""
>>>  45:         return (time.time() - self.creation_timestamp) > (max_age_hours * 3600)
     46:
     47:
     48: @dataclass


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (92 total)
File: packages\p2p\legacy_src\betanet\htx_transport.py:64:55
Recommendation: Replace magic numbers with named constants or enums
Code context:
     61:     calibration_count: int
     62:     pop_selection_hints: list[str]  # CDN POP hints
     63:
>>>  64:     def needs_recalibration(self, max_age_hours: int = 6) -> bool:
     65:         """Check if origin needs recalibration"""
     66:         return (time.time() - self.last_calibrated) > (max_age_hours * 3600)
     67:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (92 total)
File: packages\p2p\legacy_src\betanet\htx_transport.py:66:71
Recommendation: Replace magic numbers with named constants or enums
Code context:
     63:
     64:     def needs_recalibration(self, max_age_hours: int = 6) -> bool:
     65:         """Check if origin needs recalibration"""
>>>  66:         return (time.time() - self.last_calibrated) > (max_age_hours * 3600)
     67:
     68:
     69: @dataclass


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (92 total)
File: packages\p2p\legacy_src\betanet\htx_transport.py:82:71
Recommendation: Replace magic numbers with named constants or enums
Code context:
     79:     # Frame-level security
     80:     key_epoch: int = 0  # Key rotation epoch
     81:     frame_counter: int = 0  # Per-epoch frame counter
>>>  82:     nonce_salt: bytes = field(default_factory=lambda: random.randbytes(12))
     83:
     84:     # HTX-specific headers
     85:     content_type: str = "application/octet-stream"


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\legacy_src\unified_transport\__init__.py:1:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
>>>   1: """Unified Communications System
      2:
      3: This package consolidates ALL overlapping communication systems:
      4:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\legacy_src\unified_transport\__init__.py:32:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     29:     "UnifiedMessage",
     30:     "TransportType",
     31:     "RoutingMode",
>>>  32:     "create_communication_hub",
     33:     # Backward compatibility
     34:     "CommunicationsProtocol",
     35:     "BetanetTransportV2",


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\legacy_src\unified_transport\core\unified_transport.py:1:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
>>>   1: """Unified Communications Transport - Master Implementation
      2:
      3: Consolidates the BEST features from:
      4: - src/communications/protocol.py (WebSocket + encryption)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\legacy_src\unified_transport\core\unified_transport.py:29:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     26:
     27:
     28: class TransportType(Enum):
>>>  29:     """Available transport types (from various implementations)"""
     30:
     31:     WEBSOCKET = "websocket"  # From communications/protocol.py
     32:     BETANET_HTX = "betanet_htx"  # From betanet_htx_transport.py


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\legacy_src\unified_transport\core\unified_transport.py:39:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     36:
     37:
     38: class RoutingMode(Enum):
>>>  39:     """Routing modes consolidated from Navigator agent"""
     40:
     41:     DIRECT = "direct"
     42:     MESH_ROUTED = "mesh_routed"


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\legacy_src\unified_transport\core\unified_transport.py:94:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     91:
     92:     @abstractmethod
     93:     async def receive_message(self) -> UnifiedMessage | None:
>>>  94:         """Receive message from this transport"""
     95:         pass
     96:
     97:     @abstractmethod


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\legacy_src\unified_transport\core\unified_transport.py:99:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     96:
     97:     @abstractmethod
     98:     async def disconnect(self, target_id: str) -> None:
>>>  99:         """Disconnect from target"""
    100:         pass
    101:
    102:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\legacy_src\unified_transport\core\unified_transport.py:104:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    101:
    102:
    103: class WebSocketTransport(TransportInterface):
>>> 104:     """WebSocket transport (from communications/protocol.py)"""
    105:
    106:     def __init__(self, agent_id: str, port: int = 8888):
    107:         self.agent_id = agent_id


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\legacy_src\unified_transport\core\unified_transport.py:113:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    110:         self.encryption_keys: dict[str, Fernet] = {}
    111:
    112:     async def connect(self, target_id: str, target_info: dict[str, Any]) -> bool:
>>> 113:         """Real WebSocket connection (consolidated from original)"""
    114:         try:
    115:             target_url = target_info.get("url", f"ws://localhost:{target_info.get('port', 8888)}")
    116:             websocket = await websockets.connect(target_url)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\legacy_src\unified_transport\core\unified_transport.py:129:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    126:             return False
    127:
    128:     def _setup_encryption(self, target_id: str) -> None:
>>> 129:         """Setup encryption key (from communications/protocol.py)"""
    130:         key = Fernet.generate_key()
    131:         self.encryption_keys[target_id] = Fernet(key)
    132:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\legacy_src\unified_transport\core\unified_transport.py:164:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    161:
    162:
    163: class BetanetTransport(TransportInterface):
>>> 164:     """Betanet transport (consolidated from betanet_transport_v2.py)"""
    165:
    166:     def __init__(self, agent_id: str):
    167:         self.agent_id = agent_id


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\legacy_src\unified_transport\core\unified_transport.py:229:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    226:         return success
    227:
    228:     def _select_optimal_transport(self, peer_id: str, peer_info: dict[str, Any]) -> TransportType:
>>> 229:         """Smart transport selection (consolidated from Navigator logic)"""
    230:
    231:         # Factors from various implementations:
    232:         # - Network conditions (from Navigator)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\legacy_src\unified_transport\core\unified_transport.py:264:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    261:         return success
    262:
    263:     def _update_routing_table(self, peer_id: str, transport: TransportType) -> None:
>>> 264:         """Update routing information"""
    265:         self.routing_table[peer_id] = {
    266:             "primary_transport": transport,
    267:             "last_connected": time.time(),


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\legacy_src\unified_transport\core\unified_transport.py:272:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    269:         }
    270:
    271:     def register_message_handler(self, message_type: str, handler: Callable) -> None:
>>> 272:         """Register message handler (from protocol.py)"""
    273:         self.message_handlers[message_type] = handler
    274:
    275:     async def start(self) -> None:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\legacy_src\unified_transport\core\unified_transport.py:290:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    287:
    288: # Factory function for easy instantiation
    289: def create_communication_hub(agent_id: str, **kwargs) -> UnifiedCommunicationHub:
>>> 290:     """Factory function to create unified communication hub"""
    291:     return UnifiedCommunicationHub(agent_id)
    292:
    293:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\mobile_integration\jni\libp2p_mesh_bridge.py:1:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
>>>   1: """Android JNI Bridge for LibP2P Mesh Network.
      2:
      3: This module provides a Python-to-Android bridge using several approaches:
      4: 1. HTTP REST API bridge (primary)


HARDCODED_PATH: Hardcoded path or URL detected
File: packages\p2p\mobile_integration\jni\libp2p_mesh_bridge.py:418:32
Recommendation: Use configuration files, environment variables, or path utilities
Code context:
    415:             "rest_port": self.rest_port,
    416:             "ws_port": self.ws_port,
    417:             "endpoints": {
>>> 418:                 "start_mesh": f"POST http://localhost:{self.rest_port}/mesh/start",
    419:                 "stop_mesh": f"POST http://localhost:{self.rest_port}/mesh/stop",
    420:                 "get_status": f"GET http://localhost:{self.rest_port}/mesh/status",
    421:                 "send_message": f"POST http://localhost:{self.rest_port}/mesh/send",


HARDCODED_PATH: Hardcoded path or URL detected
File: packages\p2p\mobile_integration\jni\libp2p_mesh_bridge.py:419:31
Recommendation: Use configuration files, environment variables, or path utilities
Code context:
    416:             "ws_port": self.ws_port,
    417:             "endpoints": {
    418:                 "start_mesh": f"POST http://localhost:{self.rest_port}/mesh/start",
>>> 419:                 "stop_mesh": f"POST http://localhost:{self.rest_port}/mesh/stop",
    420:                 "get_status": f"GET http://localhost:{self.rest_port}/mesh/status",
    421:                 "send_message": f"POST http://localhost:{self.rest_port}/mesh/send",
    422:                 "get_peers": f"GET http://localhost:{self.rest_port}/mesh/peers",


HARDCODED_PATH: Hardcoded path or URL detected
File: packages\p2p\mobile_integration\jni\libp2p_mesh_bridge.py:420:32
Recommendation: Use configuration files, environment variables, or path utilities
Code context:
    417:             "endpoints": {
    418:                 "start_mesh": f"POST http://localhost:{self.rest_port}/mesh/start",
    419:                 "stop_mesh": f"POST http://localhost:{self.rest_port}/mesh/stop",
>>> 420:                 "get_status": f"GET http://localhost:{self.rest_port}/mesh/status",
    421:                 "send_message": f"POST http://localhost:{self.rest_port}/mesh/send",
    422:                 "get_peers": f"GET http://localhost:{self.rest_port}/mesh/peers",
    423:                 "websocket": f"ws://localhost:{self.rest_port}/ws",


HARDCODED_PATH: Hardcoded path or URL detected
File: packages\p2p\mobile_integration\jni\libp2p_mesh_bridge.py:421:34
Recommendation: Use configuration files, environment variables, or path utilities
Code context:
    418:                 "start_mesh": f"POST http://localhost:{self.rest_port}/mesh/start",
    419:                 "stop_mesh": f"POST http://localhost:{self.rest_port}/mesh/stop",
    420:                 "get_status": f"GET http://localhost:{self.rest_port}/mesh/status",
>>> 421:                 "send_message": f"POST http://localhost:{self.rest_port}/mesh/send",
    422:                 "get_peers": f"GET http://localhost:{self.rest_port}/mesh/peers",
    423:                 "websocket": f"ws://localhost:{self.rest_port}/ws",
    424:             },


HARDCODED_PATH: Hardcoded path or URL detected
File: packages\p2p\mobile_integration\jni\libp2p_mesh_bridge.py:422:31
Recommendation: Use configuration files, environment variables, or path utilities
Code context:
    419:                 "stop_mesh": f"POST http://localhost:{self.rest_port}/mesh/stop",
    420:                 "get_status": f"GET http://localhost:{self.rest_port}/mesh/status",
    421:                 "send_message": f"POST http://localhost:{self.rest_port}/mesh/send",
>>> 422:                 "get_peers": f"GET http://localhost:{self.rest_port}/mesh/peers",
    423:                 "websocket": f"ws://localhost:{self.rest_port}/ws",
    424:             },
    425:             "message_types": [t.value for t in MeshMessageType],


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\mobile_integration\jni\libp2p_mesh_bridge.py:436:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    433:
    434:
    435: def initialize_bridge(port: int = 8080) -> dict[str, Any]:
>>> 436:     """Initialize bridge - called from JNI."""
    437:     global _bridge_instance
    438:
    439:     try:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\mobile_integration\jni\libp2p_mesh_bridge.py:448:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    445:
    446:
    447: def start_bridge() -> dict[str, Any]:
>>> 448:     """Start bridge server - called from JNI."""
    449:     global _bridge_instance
    450:
    451:     if not _bridge_instance:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\mobile_integration\jni\libp2p_mesh_bridge.py:467:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    464:
    465:
    466: def stop_bridge() -> dict[str, Any]:
>>> 467:     """Stop bridge server - called from JNI."""
    468:     global _bridge_instance
    469:
    470:     if not _bridge_instance:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\p2p\mobile_integration\jni\libp2p_mesh_bridge.py:483:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    480:
    481:
    482: def get_bridge_status() -> dict[str, Any]:
>>> 483:     """Get bridge status - called from JNI."""
    484:     global _bridge_instance
    485:
    486:     if not _bridge_instance:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (17 calls)
File: packages\p2p\mobile_integration\jni\libp2p_mesh_bridge.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'message_data' methods (14 calls)
File: packages\p2p\mobile_integration\jni\libp2p_mesh_bridge.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'data' methods (7 calls)
File: packages\p2p\mobile_integration\jni\libp2p_mesh_bridge.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'websocket' methods (9 calls)
File: packages\p2p\mobile_integration\jni\libp2p_mesh_bridge.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'json' methods (8 calls)
File: packages\p2p\mobile_integration\jni\libp2p_mesh_bridge.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'asyncio' methods (9 calls)
File: packages\p2p\mobile_integration\jni\libp2p_mesh_bridge.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

SEQUENTIAL_COUPLING: Sequential coupling detected: Function '__init__' is part of a sequence-dependent API
File: packages\p2p\mobile_integration\jni\libp2p_mesh_bridge.py:46:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
     43: class LibP2PMeshBridge:
     44:     """Bridge between Python LibP2P implementation and Android."""
     45:
>>>  46:     def __init__(self, port: int = 8080, ws_port: int = 8081) -> None:
     47:         self.rest_port = port
     48:         self.ws_port = ws_port
     49:         self.mesh_network: LibP2PMeshNetwork | None = None


SEQUENTIAL_COUPLING: Sequential coupling detected: Function '_setup_fastapi' is part of a sequence-dependent API
File: packages\p2p\mobile_integration\jni\libp2p_mesh_bridge.py:61:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
     58:         if FASTAPI_AVAILABLE:
     59:             self._setup_fastapi()
     60:
>>>  61:     def _setup_fastapi(self) -> None:
     62:         """Set up FastAPI application."""
     63:         self.app = FastAPI(
     64:             title="LibP2P Mesh Bridge",


SEQUENTIAL_COUPLING: Sequential coupling detected: Function 'run_server' is part of a sequence-dependent API
File: packages\p2p\mobile_integration\jni\libp2p_mesh_bridge.py:388:8
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    385:         logger.info(f"Starting LibP2P Mesh Bridge on port {self.rest_port}")
    386:
    387:         # Start in background thread to avoid blocking
>>> 388:         def run_server() -> None:
    389:             uvicorn.run(self.app, host="0.0.0.0", port=self.rest_port, log_level="info")
    390:
    391:         server_thread = Thread(target=run_server, daemon=True)


SEQUENTIAL_COUPLING: Sequential coupling detected: Function 'initialize_bridge' is part of a sequence-dependent API
File: packages\p2p\mobile_integration\jni\libp2p_mesh_bridge.py:435:0
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    432: _bridge_instance: LibP2PMeshBridge | None = None
    433:
    434:
>>> 435: def initialize_bridge(port: int = 8080) -> dict[str, Any]:
    436:     """Initialize bridge - called from JNI."""
    437:     global _bridge_instance
    438:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (20 total)
File: packages\p2p\mobile_integration\jni\libp2p_mesh_bridge.py:46:35
Recommendation: Replace magic numbers with named constants or enums
Code context:
     43: class LibP2PMeshBridge:
     44:     """Bridge between Python LibP2P implementation and Android."""
     45:
>>>  46:     def __init__(self, port: int = 8080, ws_port: int = 8081) -> None:
     47:         self.rest_port = port
     48:         self.ws_port = ws_port
     49:         self.mesh_network: LibP2PMeshNetwork | None = None


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (20 total)
File: packages\p2p\mobile_integration\jni\libp2p_mesh_bridge.py:46:56
Recommendation: Replace magic numbers with named constants or enums
Code context:
     43: class LibP2PMeshBridge:
     44:     """Bridge between Python LibP2P implementation and Android."""
     45:
>>>  46:     def __init__(self, port: int = 8080, ws_port: int = 8081) -> None:
     47:         self.rest_port = port
     48:         self.ws_port = ws_port
     49:         self.mesh_network: LibP2PMeshNetwork | None = None


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (20 total)
File: packages\p2p\mobile_integration\jni\libp2p_mesh_bridge.py:55:55
Recommendation: Replace magic numbers with named constants or enums
Code context:
     52:         self.running = False
     53:
     54:         # Background task handling
>>>  55:         self.executor = ThreadPoolExecutor(max_workers=4)
     56:         self.event_loop: asyncio.AbstractEventLoop | None = None
     57:
     58:         if FASTAPI_AVAILABLE:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (20 total)
File: packages\p2p\mobile_integration\jni\libp2p_mesh_bridge.py:132:48
Recommendation: Replace magic numbers with named constants or enums
Code context:
    129:
    130:             except Exception as e:
    131:                 logger.exception(f"Failed to start mesh: {e}")
>>> 132:                 raise HTTPException(status_code=500, detail=str(e))
    133:
    134:         @self.app.post("/mesh/stop")
    135:         async def stop_mesh():


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (20 total)
File: packages\p2p\mobile_integration\jni\libp2p_mesh_bridge.py:146:48
Recommendation: Replace magic numbers with named constants or enums
Code context:
    143:
    144:             except Exception as e:
    145:                 logger.exception(f"Failed to stop mesh: {e}")
>>> 146:                 raise HTTPException(status_code=500, detail=str(e))
    147:
    148:         @self.app.get("/mesh/status")
    149:         async def get_mesh_status():


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\py-aivillage\agent_forge\__init__.py:1:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
>>>   1: """Compatibility layer for Agent Forge.
      2:
      3: This package provides a thin wrapper that exposes the production
      4: ``AgentForge`` implementation at ``production.agent_forge.core`` under the


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\py-aivillage\p2p\bitchat_bridge.py:118:27
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    115:         else:
    116:             self.transport = None
    117:             self.framing = None
>>> 118:             logger.warning("BitChat bridge created but BitChat not available")
    119:
    120:     def register_unified_handler(self, message_type: str, handler: Callable):
    121:         """Register handler for unified message format"""


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\py-aivillage\p2p\bitchat_bridge.py:197:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    194:
    195:
    196: def create_bitchat_bridge(device_id: str, **kwargs) -> BitChatTransportBridge:
>>> 197:     """Factory function to create BitChat bridge instance"""
    198:     return BitChatTransportBridge(device_id, **kwargs)
    199:
    200:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (11 calls)
File: packages\py-aivillage\p2p\bitchat_bridge.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\py-aivillage\p2p\transport.py:36:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     33:
     34:
     35: class TransportPriority(Enum):
>>>  36:     """Transport selection priorities"""
     37:
     38:     OFFLINE_FIRST = "offline_first"  # Prefer BitChat
     39:     PRIVACY_FIRST = "privacy_first"  # Prefer Betanet


LONG_PARAMETER_LIST: Function '__init__' has 7 parameters (>5)
File: packages\py-aivillage\p2p\transport.py:73:4
Recommendation: Use parameter objects, data classes, or keyword-only arguments
Code context:
     70: class TransportManager:
     71:     """Unified transport coordination and management"""
     72:
>>>  73:     def __init__(
     74:         self,
     75:         device_id: str,
     76:         transport_priority: TransportPriority = TransportPriority.OFFLINE_FIRST,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\py-aivillage\p2p\transport.py:246:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    243:             return False
    244:
    245:     def _select_transport(self, message: MessageEnvelope) -> TransportType | None:
>>> 246:         """Select best transport for message based on priority and availability"""
    247:
    248:         # Use explicit preference if specified
    249:         if message.transport_preference:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\py-aivillage\p2p\transport.py:396:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    393:
    394: # Factory functions
    395: def create_transport_manager(device_id: str, **kwargs) -> TransportManager:
>>> 396:     """Factory function to create transport manager"""
    397:     return TransportManager(device_id, **kwargs)
    398:
    399:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\py-aivillage\p2p\transport.py:401:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    398:
    399:
    400: def create_offline_first_manager(device_id: str, **kwargs) -> TransportManager:
>>> 401:     """Create transport manager optimized for offline-first operation"""
    402:     return TransportManager(
    403:         device_id, transport_priority=TransportPriority.OFFLINE_FIRST, enable_bitchat=True, **kwargs
    404:     )


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\py-aivillage\p2p\transport.py:408:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    405:
    406:
    407: def create_privacy_first_manager(device_id: str, **kwargs) -> TransportManager:
>>> 408:     """Create transport manager optimized for privacy"""
    409:     return TransportManager(
    410:         device_id, transport_priority=TransportPriority.PRIVACY_FIRST, enable_betanet=True, **kwargs
    411:     )


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (32 calls)
File: packages\py-aivillage\p2p\transport.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (10 calls)
File: packages\py-aivillage\p2p\transport.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

SEQUENTIAL_COUPLING: Sequential coupling detected: Function '__init__' is part of a sequence-dependent API
File: packages\py-aivillage\p2p\transport.py:73:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
     70: class TransportManager:
     71:     """Unified transport coordination and management"""
     72:
>>>  73:     def __init__(
     74:         self,
     75:         device_id: str,
     76:         transport_priority: TransportPriority = TransportPriority.OFFLINE_FIRST,


SEQUENTIAL_COUPLING: Sequential coupling detected: Function '_init_bitchat' is part of a sequence-dependent API
File: packages\py-aivillage\p2p\transport.py:113:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    110:
    111:         logger.info(f"Transport manager initialized for device {device_id}")
    112:
>>> 113:     def _init_bitchat(self):
    114:         """Initialize BitChat BLE mesh transport"""
    115:         try:
    116:             if not self.config.enable_bitchat:


SEQUENTIAL_COUPLING: Sequential coupling detected: Function '_init_betanet' is part of a sequence-dependent API
File: packages\py-aivillage\p2p\transport.py:140:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    137:         except Exception as e:
    138:             logger.error(f"Failed to initialize BitChat transport: {e}")
    139:
>>> 140:     def _init_betanet(self):
    141:         """Initialize Betanet HTX transport"""
    142:         try:
    143:             if not self.config.enable_betanet:


SEQUENTIAL_COUPLING: Sequential coupling detected: Function '_init_quic' is part of a sequence-dependent API
File: packages\py-aivillage\p2p\transport.py:158:4
Recommendation: Consider using context managers, fluent interfaces, or state machines
Code context:
    155:         except Exception as e:
    156:             logger.error(f"Failed to initialize Betanet transport: {e}")
    157:
>>> 158:     def _init_quic(self):
    159:         """Initialize direct QUIC transport"""
    160:         try:
    161:             if not self.config.enable_quic:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'datetime' methods (6 calls)
File: packages\py-aivillage\rag\hippo_cache.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (9 calls)
File: packages\py-aivillage\rag\hippo_cache.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\py-aivillage\agent_forge\evaluation\evaluator.py:1:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
>>>   1: """
      2: Compatibility wrapper for Agent Forge evaluator.
      3:
      4: This module provides backward compatibility for code that imports from the old location.


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (20 calls)
File: packages\py-aivillage\agent_forge\models\manager.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\analysis\gap_detection.py:251:32
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    248:             return [
    249:                 DetectedGap(
    250:                     gap_type=GapType.MISSING_NODE,
>>> 251:                     description="Concepts found in vector search but missing from knowledge graph",
    252:                     evidence=[f"Missing concepts: {list(missing_in_graph)[:5]}"],
    253:                     confidence=0.6,
    254:                     priority=0.7,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\analysis\gap_detection.py:346:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    343:         return sources_info
    344:
    345:     def _extract_concepts_from_source(self, source_info: list[Any]) -> set[str]:
>>> 346:         """Extract concepts from source information."""
    347:         concepts = set()
    348:         for info in source_info:
    349:             content = getattr(info, "content", "")


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\analysis\gap_detection.py:355:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    352:         return concepts
    353:
    354:     def _get_incoming_trust_scores(self, node: Any, node_id: str) -> list[float]:
>>> 355:         """Get trust scores from incoming edges."""
    356:         if not self._trust_graph:
    357:             return []
    358:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (9 calls)
File: packages\rag\analysis\gap_detection.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (21 total)
File: packages\rag\analysis\gap_detection.py:47:34
Recommendation: Replace magic numbers with named constants or enums
Code context:
     44: class DetectionConfig:
     45:     """Immutable configuration for gap detection - no magic values."""
     46:
>>>  47:     SIMILARITY_THRESHOLD: float = 0.7
     48:     MIN_CONNECTIONS_FOR_HIGH_TRUST: int = 3
     49:     HIGH_TRUST_THRESHOLD: float = 0.6
     50:     TRUST_VARIANCE_THRESHOLD: float = 0.2


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (21 total)
File: packages\rag\analysis\gap_detection.py:48:42
Recommendation: Replace magic numbers with named constants or enums
Code context:
     45:     """Immutable configuration for gap detection - no magic values."""
     46:
     47:     SIMILARITY_THRESHOLD: float = 0.7
>>>  48:     MIN_CONNECTIONS_FOR_HIGH_TRUST: int = 3
     49:     HIGH_TRUST_THRESHOLD: float = 0.6
     50:     TRUST_VARIANCE_THRESHOLD: float = 0.2
     51:     MIN_NODES_FOR_ANALYSIS: int = 3


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (21 total)
File: packages\rag\analysis\gap_detection.py:49:34
Recommendation: Replace magic numbers with named constants or enums
Code context:
     46:
     47:     SIMILARITY_THRESHOLD: float = 0.7
     48:     MIN_CONNECTIONS_FOR_HIGH_TRUST: int = 3
>>>  49:     HIGH_TRUST_THRESHOLD: float = 0.6
     50:     TRUST_VARIANCE_THRESHOLD: float = 0.2
     51:     MIN_NODES_FOR_ANALYSIS: int = 3
     52:     EXPECTED_EDGES_MULTIPLIER: float = 1.5


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (21 total)
File: packages\rag\analysis\gap_detection.py:50:38
Recommendation: Replace magic numbers with named constants or enums
Code context:
     47:     SIMILARITY_THRESHOLD: float = 0.7
     48:     MIN_CONNECTIONS_FOR_HIGH_TRUST: int = 3
     49:     HIGH_TRUST_THRESHOLD: float = 0.6
>>>  50:     TRUST_VARIANCE_THRESHOLD: float = 0.2
     51:     MIN_NODES_FOR_ANALYSIS: int = 3
     52:     EXPECTED_EDGES_MULTIPLIER: float = 1.5
     53:     CONNECTIVITY_THRESHOLD_RATIO: float = 0.5


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (21 total)
File: packages\rag\analysis\gap_detection.py:51:34
Recommendation: Replace magic numbers with named constants or enums
Code context:
     48:     MIN_CONNECTIONS_FOR_HIGH_TRUST: int = 3
     49:     HIGH_TRUST_THRESHOLD: float = 0.6
     50:     TRUST_VARIANCE_THRESHOLD: float = 0.2
>>>  51:     MIN_NODES_FOR_ANALYSIS: int = 3
     52:     EXPECTED_EDGES_MULTIPLIER: float = 1.5
     53:     CONNECTIVITY_THRESHOLD_RATIO: float = 0.5
     54:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (10 calls)
File: packages\rag\analysis\graph_analyzer.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'np' methods (10 calls)
File: packages\rag\analysis\graph_analyzer.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (28 total)
File: packages\rag\analysis\graph_analyzer.py:43:35
Recommendation: Replace magic numbers with named constants or enums
Code context:
     40: class AnalysisConfig:
     41:     """Configuration for graph analysis - no magic values."""
     42:
>>>  43:     TARGET_AVERAGE_DEGREE: float = 3.0
     44:     MIN_TRUST_THRESHOLD: float = 0.3
     45:     HIGH_TRUST_THRESHOLD: float = 0.8
     46:     MIN_CONNECTIVITY_SCORE: float = 0.5


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (28 total)
File: packages\rag\analysis\graph_analyzer.py:44:33
Recommendation: Replace magic numbers with named constants or enums
Code context:
     41:     """Configuration for graph analysis - no magic values."""
     42:
     43:     TARGET_AVERAGE_DEGREE: float = 3.0
>>>  44:     MIN_TRUST_THRESHOLD: float = 0.3
     45:     HIGH_TRUST_THRESHOLD: float = 0.8
     46:     MIN_CONNECTIVITY_SCORE: float = 0.5
     47:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (28 total)
File: packages\rag\analysis\graph_analyzer.py:45:34
Recommendation: Replace magic numbers with named constants or enums
Code context:
     42:
     43:     TARGET_AVERAGE_DEGREE: float = 3.0
     44:     MIN_TRUST_THRESHOLD: float = 0.3
>>>  45:     HIGH_TRUST_THRESHOLD: float = 0.8
     46:     MIN_CONNECTIVITY_SCORE: float = 0.5
     47:
     48:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (28 total)
File: packages\rag\analysis\graph_analyzer.py:46:36
Recommendation: Replace magic numbers with named constants or enums
Code context:
     43:     TARGET_AVERAGE_DEGREE: float = 3.0
     44:     MIN_TRUST_THRESHOLD: float = 0.3
     45:     HIGH_TRUST_THRESHOLD: float = 0.8
>>>  46:     MIN_CONNECTIVITY_SCORE: float = 0.5
     47:
     48:
     49: class StructuralAnalyzer:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (28 total)
File: packages\rag\analysis\graph_analyzer.py:76:71
Recommendation: Replace magic numbers with named constants or enums
Code context:
     73:         completeness_score = min(1.0, avg_degree / self._config.TARGET_AVERAGE_DEGREE)
     74:
     75:         # Penalize for isolated and weakly connected nodes
>>>  76:         isolation_penalty = (isolated_nodes + weakly_connected_nodes * 0.5) / total_nodes
     77:         completeness_score = max(0.0, completeness_score - isolation_penalty)
     78:
     79:         return {


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\analysis\graph_fixer.py:141:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    138:
    139: @dataclass
    140: class GapAnalysisResult:
>>> 141:     """Result from knowledge gap analysis."""
    142:
    143:     gaps_detected: list[DetectedGap] = field(default_factory=list)
    144:     proposed_nodes: list[ProposedNode] = field(default_factory=list)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\analysis\graph_fixer.py:570:36
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    567:                 if missing_in_graph:
    568:                     gap = DetectedGap(
    569:                         gap_type=GapType.MISSING_NODE,
>>> 570:                         description="Concepts found in vector search but missing from knowledge graph",
    571:                         evidence=[f"Missing concepts: {list(missing_in_graph)[:5]}"],  # Show first 5
    572:                         confidence=0.6,
    573:                         priority=0.7,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\analysis\graph_fixer.py:610:62
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    607:                         gap = DetectedGap(
    608:                             gap_type=GapType.CONFLICTING_INFO,
    609:                             source_nodes=[node_id],
>>> 610:                             description=f"Node '{node.concept}' has conflicting trust information from connected nodes",
    611:                             evidence=[f"Trust variance: {trust_variance:.3f}, incoming trusts: {incoming_trusts}"],
    612:                             confidence=0.8,
    613:                             priority=0.8,  # High priority for trust conflicts


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\analysis\graph_fixer.py:766:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    763:         return proposals
    764:
    765:     async def _learn_from_validation(self, proposal: ProposedNode | ProposedRelationship, is_accepted: bool):
>>> 766:         """Learn from validation feedback to improve future proposals."""
    767:         # This would implement machine learning to improve proposal quality
    768:         # For now, just log the feedback
    769:         logger.info(f"Validation feedback: {proposal.id} {'accepted' if is_accepted else 'rejected'}")


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (21 calls)
File: packages\rag\analysis\graph_fixer.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (20 calls)
File: packages\rag\analysis\graph_fixer.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'gaps' methods (8 calls)
File: packages\rag\analysis\graph_fixer.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (56 total)
File: packages\rag\analysis\graph_fixer.py:41:16
Recommendation: Replace magic numbers with named constants or enums
Code context:
     38: class ConfidenceLevel(Enum):
     39:     """Confidence levels for gap detection and proposals."""
     40:
>>>  41:     VERY_HIGH = 0.9
     42:     HIGH = 0.8
     43:     MEDIUM = 0.6
     44:     LOW = 0.4


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (56 total)
File: packages\rag\analysis\graph_fixer.py:42:11
Recommendation: Replace magic numbers with named constants or enums
Code context:
     39:     """Confidence levels for gap detection and proposals."""
     40:
     41:     VERY_HIGH = 0.9
>>>  42:     HIGH = 0.8
     43:     MEDIUM = 0.6
     44:     LOW = 0.4
     45:     VERY_LOW = 0.2


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (56 total)
File: packages\rag\analysis\graph_fixer.py:43:13
Recommendation: Replace magic numbers with named constants or enums
Code context:
     40:
     41:     VERY_HIGH = 0.9
     42:     HIGH = 0.8
>>>  43:     MEDIUM = 0.6
     44:     LOW = 0.4
     45:     VERY_LOW = 0.2
     46:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (56 total)
File: packages\rag\analysis\graph_fixer.py:44:10
Recommendation: Replace magic numbers with named constants or enums
Code context:
     41:     VERY_HIGH = 0.9
     42:     HIGH = 0.8
     43:     MEDIUM = 0.6
>>>  44:     LOW = 0.4
     45:     VERY_LOW = 0.2
     46:
     47:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (56 total)
File: packages\rag\analysis\graph_fixer.py:45:15
Recommendation: Replace magic numbers with named constants or enums
Code context:
     42:     HIGH = 0.8
     43:     MEDIUM = 0.6
     44:     LOW = 0.4
>>>  45:     VERY_LOW = 0.2
     46:
     47:
     48: @dataclass


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\analysis\graph_fixer_original.py:141:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    138:
    139: @dataclass
    140: class GapAnalysisResult:
>>> 141:     """Result from knowledge gap analysis."""
    142:
    143:     gaps_detected: list[DetectedGap] = field(default_factory=list)
    144:     proposed_nodes: list[ProposedNode] = field(default_factory=list)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\analysis\graph_fixer_original.py:570:36
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    567:                 if missing_in_graph:
    568:                     gap = DetectedGap(
    569:                         gap_type=GapType.MISSING_NODE,
>>> 570:                         description="Concepts found in vector search but missing from knowledge graph",
    571:                         evidence=[f"Missing concepts: {list(missing_in_graph)[:5]}"],  # Show first 5
    572:                         confidence=0.6,
    573:                         priority=0.7,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\analysis\graph_fixer_original.py:610:62
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    607:                         gap = DetectedGap(
    608:                             gap_type=GapType.CONFLICTING_INFO,
    609:                             source_nodes=[node_id],
>>> 610:                             description=f"Node '{node.concept}' has conflicting trust information from connected nodes",
    611:                             evidence=[f"Trust variance: {trust_variance:.3f}, incoming trusts: {incoming_trusts}"],
    612:                             confidence=0.8,
    613:                             priority=0.8,  # High priority for trust conflicts


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\analysis\graph_fixer_original.py:766:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    763:         return proposals
    764:
    765:     async def _learn_from_validation(self, proposal: ProposedNode | ProposedRelationship, is_accepted: bool):
>>> 766:         """Learn from validation feedback to improve future proposals."""
    767:         # This would implement machine learning to improve proposal quality
    768:         # For now, just log the feedback
    769:         logger.info(f"Validation feedback: {proposal.id} {'accepted' if is_accepted else 'rejected'}")


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (21 calls)
File: packages\rag\analysis\graph_fixer_original.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (20 calls)
File: packages\rag\analysis\graph_fixer_original.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'gaps' methods (8 calls)
File: packages\rag\analysis\graph_fixer_original.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (56 total)
File: packages\rag\analysis\graph_fixer_original.py:41:16
Recommendation: Replace magic numbers with named constants or enums
Code context:
     38: class ConfidenceLevel(Enum):
     39:     """Confidence levels for gap detection and proposals."""
     40:
>>>  41:     VERY_HIGH = 0.9
     42:     HIGH = 0.8
     43:     MEDIUM = 0.6
     44:     LOW = 0.4


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (56 total)
File: packages\rag\analysis\graph_fixer_original.py:42:11
Recommendation: Replace magic numbers with named constants or enums
Code context:
     39:     """Confidence levels for gap detection and proposals."""
     40:
     41:     VERY_HIGH = 0.9
>>>  42:     HIGH = 0.8
     43:     MEDIUM = 0.6
     44:     LOW = 0.4
     45:     VERY_LOW = 0.2


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (56 total)
File: packages\rag\analysis\graph_fixer_original.py:43:13
Recommendation: Replace magic numbers with named constants or enums
Code context:
     40:
     41:     VERY_HIGH = 0.9
     42:     HIGH = 0.8
>>>  43:     MEDIUM = 0.6
     44:     LOW = 0.4
     45:     VERY_LOW = 0.2
     46:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (56 total)
File: packages\rag\analysis\graph_fixer_original.py:44:10
Recommendation: Replace magic numbers with named constants or enums
Code context:
     41:     VERY_HIGH = 0.9
     42:     HIGH = 0.8
     43:     MEDIUM = 0.6
>>>  44:     LOW = 0.4
     45:     VERY_LOW = 0.2
     46:
     47:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (56 total)
File: packages\rag\analysis\graph_fixer_original.py:45:15
Recommendation: Replace magic numbers with named constants or enums
Code context:
     42:     HIGH = 0.8
     43:     MEDIUM = 0.6
     44:     LOW = 0.4
>>>  45:     VERY_LOW = 0.2
     46:
     47:
     48: @dataclass


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\analysis\graph_types.py:133:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    130:
    131: @dataclass
    132: class GapAnalysisResult:
>>> 133:     """Result from knowledge gap analysis."""
    134:
    135:     gaps_detected: list[DetectedGap] = field(default_factory=list)
    136:     proposed_nodes: list[ProposedNode] = field(default_factory=list)


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (17 total)
File: packages\rag\analysis\graph_types.py:30:16
Recommendation: Replace magic numbers with named constants or enums
Code context:
     27: class ConfidenceLevel(Enum):
     28:     """Confidence levels for gap detection and proposals."""
     29:
>>>  30:     VERY_HIGH = 0.9
     31:     HIGH = 0.8
     32:     MEDIUM = 0.6
     33:     LOW = 0.4


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (17 total)
File: packages\rag\analysis\graph_types.py:31:11
Recommendation: Replace magic numbers with named constants or enums
Code context:
     28:     """Confidence levels for gap detection and proposals."""
     29:
     30:     VERY_HIGH = 0.9
>>>  31:     HIGH = 0.8
     32:     MEDIUM = 0.6
     33:     LOW = 0.4
     34:     VERY_LOW = 0.2


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (17 total)
File: packages\rag\analysis\graph_types.py:32:13
Recommendation: Replace magic numbers with named constants or enums
Code context:
     29:
     30:     VERY_HIGH = 0.9
     31:     HIGH = 0.8
>>>  32:     MEDIUM = 0.6
     33:     LOW = 0.4
     34:     VERY_LOW = 0.2
     35:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (17 total)
File: packages\rag\analysis\graph_types.py:33:10
Recommendation: Replace magic numbers with named constants or enums
Code context:
     30:     VERY_HIGH = 0.9
     31:     HIGH = 0.8
     32:     MEDIUM = 0.6
>>>  33:     LOW = 0.4
     34:     VERY_LOW = 0.2
     35:
     36:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (17 total)
File: packages\rag\analysis\graph_types.py:34:15
Recommendation: Replace magic numbers with named constants or enums
Code context:
     31:     HIGH = 0.8
     32:     MEDIUM = 0.6
     33:     LOW = 0.4
>>>  34:     VERY_LOW = 0.2
     35:
     36:
     37: @dataclass


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\analysis\proposal_engine.py:82:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     79:         return []
     80:
     81:     def _collect_neighboring_concepts(self, source_nodes: list[str]) -> set[str]:
>>>  82:         """Collect concepts from nodes connected to source nodes."""
     83:         if not self._trust_graph:
     84:             return set()
     85:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (29 total)
File: packages\rag\analysis\proposal_engine.py:48:91
Recommendation: Replace magic numbers with named constants or enums
Code context:
     45: class MissingNodeStrategy(ProposalStrategy):
     46:     """Strategy for proposing missing nodes."""
     47:
>>>  48:     def __init__(self, trust_graph: TrustGraphProtocol | None = None, max_proposals: int = 3):
     49:         self._trust_graph = trust_graph
     50:         self._max_proposals = max_proposals
     51:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (29 total)
File: packages\rag\analysis\proposal_engine.py:68:38
Recommendation: Replace magic numbers with named constants or enums
Code context:
     65:                 concept=bridging_concept,
     66:                 gap_id=gap.id,
     67:                 reasoning="Would help connect disparate concepts in the knowledge graph",
>>>  68:                 existence_probability=0.6,
     69:                 utility_score=0.7,
     70:                 confidence=0.6,
     71:                 suggested_trust_score=0.5,


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (29 total)
File: packages\rag\analysis\proposal_engine.py:69:30
Recommendation: Replace magic numbers with named constants or enums
Code context:
     66:                 gap_id=gap.id,
     67:                 reasoning="Would help connect disparate concepts in the knowledge graph",
     68:                 existence_probability=0.6,
>>>  69:                 utility_score=0.7,
     70:                 confidence=0.6,
     71:                 suggested_trust_score=0.5,
     72:             )


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (29 total)
File: packages\rag\analysis\proposal_engine.py:70:27
Recommendation: Replace magic numbers with named constants or enums
Code context:
     67:                 reasoning="Would help connect disparate concepts in the knowledge graph",
     68:                 existence_probability=0.6,
     69:                 utility_score=0.7,
>>>  70:                 confidence=0.6,
     71:                 suggested_trust_score=0.5,
     72:             )
     73:             return [proposal]


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (29 total)
File: packages\rag\analysis\proposal_engine.py:71:38
Recommendation: Replace magic numbers with named constants or enums
Code context:
     68:                 existence_probability=0.6,
     69:                 utility_score=0.7,
     70:                 confidence=0.6,
>>>  71:                 suggested_trust_score=0.5,
     72:             )
     73:             return [proposal]
     74:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\analysis\validation_manager.py:1:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
>>>   1: """
      2: Validation Manager for Proposal Validation
      3:
      4: Handles validation of proposed nodes and relationships,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\analysis\validation_manager.py:17:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     14:
     15:
     16: class ValidationManager:
>>>  17:     """
     18:     Manages validation of proposals and learning from feedback.
     19:
     20:     Follows single responsibility principle for validation concerns.


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\analysis\validation_manager.py:103:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    100:             self._validation_history = self._validation_history[-500:]
    101:
    102:     async def _learn_from_validation(self, proposal: ProposedNode | ProposedRelationship, is_accepted: bool) -> None:
>>> 103:         """Learn from validation feedback to improve future proposals."""
    104:         # Log the learning event
    105:         logger.info(f"Validation feedback: {proposal.id} " f"{'accepted' if is_accepted else 'rejected'}")
    106:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\analysis\validation_manager.py:114:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    111:         # - Updating detection method weights based on proposal success
    112:
    113:     def _update_acceptance_rate(self) -> None:
>>> 114:         """Update the overall acceptance rate metric."""
    115:         total = self._learning_metrics["total_validations"]
    116:         if total > 0:
    117:             accepted = self._learning_metrics["accepted_proposals"]


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\core\cognitive_nexus.py:63:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     60:
     61: @dataclass
     62: class RetrievedInformation:
>>>  63:     """Information retrieved from RAG system with enhanced metadata."""
     64:
     65:     id: str
     66:     content: str


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\core\cognitive_nexus.py:858:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    855:         logger.info("Initialized belief network with core reasoning patterns")
    856:
    857:     def _extract_beliefs_from_content(self, content: str, source_id: str) -> list[dict[str, Any]]:
>>> 858:         """Extract belief statements from content."""
    859:
    860:         beliefs = []
    861:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\core\cognitive_nexus.py:895:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    892:         return beliefs[:5]  # Limit to top 5 beliefs per source
    893:
    894:     def _update_belief_probability(self, belief: dict[str, Any], evidence: list[RetrievedInformation]) -> float:
>>> 895:         """Update belief probability based on new evidence."""
    896:
    897:         # Simple Bayesian update (in practice would be more sophisticated)
    898:         prior = belief.get("prior", 0.5)


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (14 calls)
File: packages\rag\core\cognitive_nexus.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (45 calls)
File: packages\rag\core\cognitive_nexus.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'time' methods (8 calls)
File: packages\rag\core\cognitive_nexus.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'reasoning_trace' methods (23 calls)
File: packages\rag\core\cognitive_nexus.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'np' methods (7 calls)
File: packages\rag\core\cognitive_nexus.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (70 total)
File: packages\rag\core\cognitive_nexus.py:44:15
Recommendation: Replace magic numbers with named constants or enums
Code context:
     41: class ConfidenceLevel(Enum):
     42:     """Confidence levels for analysis results."""
     43:
>>>  44:     VERY_LOW = 0.1
     45:     LOW = 0.3
     46:     MODERATE = 0.5
     47:     HIGH = 0.7


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (70 total)
File: packages\rag\core\cognitive_nexus.py:45:10
Recommendation: Replace magic numbers with named constants or enums
Code context:
     42:     """Confidence levels for analysis results."""
     43:
     44:     VERY_LOW = 0.1
>>>  45:     LOW = 0.3
     46:     MODERATE = 0.5
     47:     HIGH = 0.7
     48:     VERY_HIGH = 0.9


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (70 total)
File: packages\rag\core\cognitive_nexus.py:46:15
Recommendation: Replace magic numbers with named constants or enums
Code context:
     43:
     44:     VERY_LOW = 0.1
     45:     LOW = 0.3
>>>  46:     MODERATE = 0.5
     47:     HIGH = 0.7
     48:     VERY_HIGH = 0.9
     49:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (70 total)
File: packages\rag\core\cognitive_nexus.py:47:11
Recommendation: Replace magic numbers with named constants or enums
Code context:
     44:     VERY_LOW = 0.1
     45:     LOW = 0.3
     46:     MODERATE = 0.5
>>>  47:     HIGH = 0.7
     48:     VERY_HIGH = 0.9
     49:
     50:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (70 total)
File: packages\rag\core\cognitive_nexus.py:48:16
Recommendation: Replace magic numbers with named constants or enums
Code context:
     45:     LOW = 0.3
     46:     MODERATE = 0.5
     47:     HIGH = 0.7
>>>  48:     VERY_HIGH = 0.9
     49:
     50:
     51: class ReasoningStrategy(Enum):


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\core\hyper_rag.py:89:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     86:
     87: @dataclass
     88: class QueryResult:
>>>  89:     """Unified query result from HyperRAG system."""
     90:
     91:     # Core results
     92:     synthesized_answer: SynthesizedAnswer


HARDCODED_PATH: Hardcoded path or URL detected
File: packages\rag\core\hyper_rag.py:164:31
Recommendation: Use configuration files, environment variables, or path utilities
Code context:
    161:                 self.hippo_index = HippoIndex(
    162:                     db_path="./data/hippo_memory.db",
    163:                     redis_url="redis://localhost:6379/1",
>>> 164:                     qdrant_url="http://localhost:6333",
    165:                 )
    166:                 await self.hippo_index.initialize()
    167:                 logger.info("✅ HippoIndex (episodic memory) initialized")


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\core\hyper_rag.py:375:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    372:         metadata: dict[str, Any] | None = None,
    373:         user_id: str | None = None,
    374:     ) -> dict[str, bool]:
>>> 375:         """
    376:         Store document in appropriate memory systems.
    377:
    378:         Args:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\core\hyper_rag.py:520:33
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    517:                 converted.append(retrieved_info)
    518:
    519:             except Exception as e:
>>> 520:                 logger.warning(f"Failed to convert result from {source_system}: {e}")
    521:                 continue
    522:
    523:         return converted


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\core\hyper_rag.py:533:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    530:         creative_insights: dict[str, Any] | None,
    531:         edge_context: dict[str, Any] | None,
    532:     ) -> SynthesizedAnswer:
>>> 533:         """Synthesize final answer from all available information."""
    534:
    535:         try:
    536:             # Use cognitive nexus if available


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\core\hyper_rag.py:692:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    689: async def create_hyper_rag(
    690:     enable_all: bool = True, fog_computing: bool = False, edge_devices: bool = False, p2p_network: bool = False
    691: ) -> HyperRAG:
>>> 692:     """Create and initialize HyperRAG system with common configurations."""
    693:
    694:     config = RAGConfig(
    695:         enable_hippo_rag=enable_all,


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (24 calls)
File: packages\rag\core\hyper_rag.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (6 calls)
File: packages\rag\core\hyper_rag.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (23 total)
File: packages\rag\core\hyper_rag.py:72:27
Recommendation: Replace magic numbers with named constants or enums
Code context:
     69:     enable_p2p_network: bool = True
     70:
     71:     # Memory management
>>>  72:     hippo_ttl_hours: int = 168  # 7 days
     73:     graph_trust_threshold: float = 0.4
     74:     vector_similarity_threshold: float = 0.7
     75:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (23 total)
File: packages\rag\core\hyper_rag.py:73:35
Recommendation: Replace magic numbers with named constants or enums
Code context:
     70:
     71:     # Memory management
     72:     hippo_ttl_hours: int = 168  # 7 days
>>>  73:     graph_trust_threshold: float = 0.4
     74:     vector_similarity_threshold: float = 0.7
     75:
     76:     # Performance settings


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (23 total)
File: packages\rag\core\hyper_rag.py:74:41
Recommendation: Replace magic numbers with named constants or enums
Code context:
     71:     # Memory management
     72:     hippo_ttl_hours: int = 168  # 7 days
     73:     graph_trust_threshold: float = 0.4
>>>  74:     vector_similarity_threshold: float = 0.7
     75:
     76:     # Performance settings
     77:     max_results_per_system: int = 20


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (23 total)
File: packages\rag\core\hyper_rag.py:77:34
Recommendation: Replace magic numbers with named constants or enums
Code context:
     74:     vector_similarity_threshold: float = 0.7
     75:
     76:     # Performance settings
>>>  77:     max_results_per_system: int = 20
     78:     cognitive_analysis_timeout: float = 30.0
     79:     creativity_timeout: float = 15.0
     80:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (23 total)
File: packages\rag\core\hyper_rag.py:78:40
Recommendation: Replace magic numbers with named constants or enums
Code context:
     75:
     76:     # Performance settings
     77:     max_results_per_system: int = 20
>>>  78:     cognitive_analysis_timeout: float = 30.0
     79:     creativity_timeout: float = 15.0
     80:
     81:     # Quality thresholds


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\creativity\insight_engine.py:129:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    126:
    127: @dataclass
    128: class InsightDiscoveryResult:
>>> 129:     """Result from insight discovery process."""
    130:
    131:     insights: list[CreativeInsight] = field(default_factory=list)
    132:     analogies: list[CreativeAnalogy] = field(default_factory=list)


LONG_PARAMETER_LIST: Function '__init__' has 7 parameters (>5)
File: packages\rag\creativity\insight_engine.py:169:4
Recommendation: Use parameter objects, data classes, or keyword-only arguments
Code context:
    166:     - Insight validation and feedback learning
    167:     """
    168:
>>> 169:     def __init__(
    170:         self,
    171:         trust_graph=None,
    172:         vector_engine=None,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\creativity\insight_engine.py:585:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    582:             return insights, paths_explored
    583:
    584:     async def _perform_random_walk(self, start_node: str, creativity_level: float) -> list[str]:
>>> 585:         """Perform a random walk starting from a node."""
    586:         path = [start_node]
    587:         current_node = start_node
    588:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\creativity\insight_engine.py:751:28
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    748:             for concept in starting_concepts[:3]:
    749:                 contrarian_insight = CreativeInsight(
    750:                     insight_type=InsightType.CONTRARIAN_VIEW,
>>> 751:                     title=f"Alternative perspective on {concept}",
    752:                     description=f"What if conventional understanding of {concept} is incomplete?",
    753:                     explanation=f"Challenging assumptions about {concept} could reveal new possibilities",
    754:                     source_concepts=[concept],


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\creativity\insight_engine.py:847:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    844:         return insights
    845:
    846:     async def _create_insights_summary(self, top_insights: list[CreativeInsight]) -> str:
>>> 847:         """Create a human-readable summary of top insights."""
    848:         if not top_insights:
    849:             return "No significant creative insights discovered."
    850:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\creativity\insight_engine.py:859:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    856:         return "\n".join(summary_parts)
    857:
    858:     async def _learn_from_validation(self, insight: CreativeInsight, is_useful: bool):
>>> 859:         """Learn from validation feedback to improve future insights."""
    860:         # Adjust method weights based on validation
    861:         method = insight.generation_method
    862:         current_weight = self.creativity_methods[method]["weight"]


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (19 calls)
File: packages\rag\creativity\insight_engine.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (23 calls)
File: packages\rag\creativity\insight_engine.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'insights' methods (9 calls)
File: packages\rag\creativity\insight_engine.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (79 total)
File: packages\rag\creativity\insight_engine.py:75:27
Recommendation: Replace magic numbers with named constants or enums
Code context:
     72:     path_description: str = ""  # Human-readable path
     73:
     74:     # Quality metrics
>>>  75:     novelty_score: float = 0.5  # How novel/unexpected is this insight
     76:     utility_score: float = 0.5  # How useful could this be
     77:     confidence: float = 0.5  # How confident are we in this insight
     78:     surprise_factor: float = 0.5  # How surprising is this connection


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (79 total)
File: packages\rag\creativity\insight_engine.py:76:27
Recommendation: Replace magic numbers with named constants or enums
Code context:
     73:
     74:     # Quality metrics
     75:     novelty_score: float = 0.5  # How novel/unexpected is this insight
>>>  76:     utility_score: float = 0.5  # How useful could this be
     77:     confidence: float = 0.5  # How confident are we in this insight
     78:     surprise_factor: float = 0.5  # How surprising is this connection
     79:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (79 total)
File: packages\rag\creativity\insight_engine.py:77:24
Recommendation: Replace magic numbers with named constants or enums
Code context:
     74:     # Quality metrics
     75:     novelty_score: float = 0.5  # How novel/unexpected is this insight
     76:     utility_score: float = 0.5  # How useful could this be
>>>  77:     confidence: float = 0.5  # How confident are we in this insight
     78:     surprise_factor: float = 0.5  # How surprising is this connection
     79:
     80:     # Generation metadata


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (79 total)
File: packages\rag\creativity\insight_engine.py:78:29
Recommendation: Replace magic numbers with named constants or enums
Code context:
     75:     novelty_score: float = 0.5  # How novel/unexpected is this insight
     76:     utility_score: float = 0.5  # How useful could this be
     77:     confidence: float = 0.5  # How confident are we in this insight
>>>  78:     surprise_factor: float = 0.5  # How surprising is this connection
     79:
     80:     # Generation metadata
     81:     generation_method: CreativityMethod = CreativityMethod.RANDOM_WALK


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (79 total)
File: packages\rag\creativity\insight_engine.py:94:36
Recommendation: Replace magic numbers with named constants or enums
Code context:
     91:
     92:     def calculate_overall_score(self) -> float:
     93:         """Calculate overall quality score for this insight."""
>>>  94:         return self.novelty_score * 0.3 + self.utility_score * 0.3 + self.confidence * 0.2 + self.surprise_factor * 0.2
     95:
     96:
     97: @dataclass


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\graph\bayesian_trust_graph.py:84:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     81:     metadata: dict[str, Any] = field(default_factory=dict)
     82:
     83:     def update_trust_from_evidence(self, new_evidence_score: float, evidence_weight: float = 1.0):
>>>  84:         """Update trust score based on new evidence using Bayesian updating."""
     85:         # Bayesian update: P(H|E) = P(E|H) * P(H) / P(E)
     86:         prior = self.trust_score
     87:         likelihood = new_evidence_score


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\graph\bayesian_trust_graph.py:148:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    145:
    146: @dataclass
    147: class BayesianQueryResult:
>>> 148:     """Result from Bayesian graph query with probabilistic reasoning."""
    149:
    150:     nodes: list[GraphNode] = field(default_factory=list)
    151:     edges: list[GraphEdge] = field(default_factory=list)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\graph\bayesian_trust_graph.py:519:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    516:     # Private implementation methods
    517:
    518:     async def _extract_concepts(self, content: str) -> list[str]:
>>> 519:         """Extract key concepts from content (simplified implementation)."""
    520:         # This is a simplified concept extraction
    521:         # In a real implementation, you'd use NLP libraries like spaCy or NLTK
    522:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\graph\bayesian_trust_graph.py:570:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    567:         return list(set(concepts))[:5]
    568:
    569:     async def _create_concept_relationships(self, nodes: list[GraphNode], doc_id: str):
>>> 570:         """Create relationships between concepts from the same document."""
    571:         # Create associative relationships between concepts from same document
    572:         for i, node1 in enumerate(nodes):
    573:             for _j, node2 in enumerate(nodes[i + 1 :], i + 1):


LONG_PARAMETER_LIST: Function 'create_graph_node' has 7 parameters (>5)
File: packages\rag\graph\bayesian_trust_graph.py:808:0
Recommendation: Use parameter objects, data classes, or keyword-only arguments
Code context:
    805:     metadata: dict[str, Any] = field(default_factory=dict)
    806:
    807:
>>> 808: def create_graph_node(
    809:     content: str,
    810:     node_id: str | None = None,
    811:     concept: str | None = None,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\graph\bayesian_trust_graph.py:817:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    814:     confidence: float = 0.5,
    815:     metadata: dict[str, Any] | None = None,
    816: ) -> GraphNode:
>>> 817:     """Create a new graph node with the given parameters."""
    818:
    819:     node = GraphNode(
    820:         id=node_id or str(uuid.uuid4()),


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (12 calls)
File: packages\rag\graph\bayesian_trust_graph.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (8 calls)
File: packages\rag\graph\bayesian_trust_graph.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'graph' methods (11 calls)
File: packages\rag\graph\bayesian_trust_graph.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (65 total)
File: packages\rag\graph\bayesian_trust_graph.py:41:16
Recommendation: Replace magic numbers with named constants or enums
Code context:
     38: class TrustLevel(Enum):
     39:     """Trust levels for information in the graph."""
     40:
>>>  41:     VERY_HIGH = 0.9
     42:     HIGH = 0.8
     43:     MEDIUM = 0.6
     44:     LOW = 0.4


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (65 total)
File: packages\rag\graph\bayesian_trust_graph.py:42:11
Recommendation: Replace magic numbers with named constants or enums
Code context:
     39:     """Trust levels for information in the graph."""
     40:
     41:     VERY_HIGH = 0.9
>>>  42:     HIGH = 0.8
     43:     MEDIUM = 0.6
     44:     LOW = 0.4
     45:     VERY_LOW = 0.2


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (65 total)
File: packages\rag\graph\bayesian_trust_graph.py:43:13
Recommendation: Replace magic numbers with named constants or enums
Code context:
     40:
     41:     VERY_HIGH = 0.9
     42:     HIGH = 0.8
>>>  43:     MEDIUM = 0.6
     44:     LOW = 0.4
     45:     VERY_LOW = 0.2
     46:     UNKNOWN = 0.5


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (65 total)
File: packages\rag\graph\bayesian_trust_graph.py:44:10
Recommendation: Replace magic numbers with named constants or enums
Code context:
     41:     VERY_HIGH = 0.9
     42:     HIGH = 0.8
     43:     MEDIUM = 0.6
>>>  44:     LOW = 0.4
     45:     VERY_LOW = 0.2
     46:     UNKNOWN = 0.5
     47:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (65 total)
File: packages\rag\graph\bayesian_trust_graph.py:45:15
Recommendation: Replace magic numbers with named constants or enums
Code context:
     42:     HIGH = 0.8
     43:     MEDIUM = 0.6
     44:     LOW = 0.4
>>>  45:     VERY_LOW = 0.2
     46:     UNKNOWN = 0.5
     47:
     48:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\integration\edge_device_bridge.py:297:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    294:             return {"error": str(e)}
    295:
    296:     async def sync_device_knowledge(self, device_id: str, knowledge_updates: list[dict[str, Any]]) -> bool:
>>> 297:         """Synchronize knowledge updates from edge device."""
    298:         try:
    299:             if device_id not in self.registered_devices:
    300:                 return False


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\integration\edge_device_bridge.py:306:63
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    303:             for update in knowledge_updates:
    304:                 await self._process_knowledge_update(device_id, update)
    305:
>>> 306:             logger.info(f"Synchronized {len(knowledge_updates)} knowledge updates from {device_id}")
    307:             return True
    308:
    309:         except Exception as e:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\integration\edge_device_bridge.py:462:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    459:             logger.warning(f"Failed to setup monitoring for {device_profile.device_id}: {e}")
    460:
    461:     async def _update_device_status(self, device_profile: EdgeDeviceProfile):
>>> 462:         """Update device status with current resource information."""
    463:         try:
    464:             # This would get real resource information
    465:             # For now, simulate some updates


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\integration\edge_device_bridge.py:483:29
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    480:             device_profile.last_updated = datetime.now()
    481:
    482:         except Exception as e:
>>> 483:             logger.warning(f"Failed to update device status: {e}")
    484:
    485:     async def _optimize_for_device_profile(
    486:         self, device_profile: EdgeDeviceProfile, query: str, query_mode: Any, context: dict[str, Any] | None


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\integration\edge_device_bridge.py:620:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    617:         }
    618:
    619:     async def _process_knowledge_update(self, device_id: str, update: dict[str, Any]):
>>> 620:         """Process a knowledge update from an edge device."""
    621:         try:
    622:             # This would integrate the update with the HyperRAG system
    623:             # For now, just log the update


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\integration\edge_device_bridge.py:625:26
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    622:             # This would integrate the update with the HyperRAG system
    623:             # For now, just log the update
    624:             update_type = update.get("type", "unknown")
>>> 625:             logger.info(f"Knowledge update from {device_id}: {update_type}")
    626:
    627:             # Could store in hippo_index for episodic updates
    628:             # Could update trust_graph for relationship updates


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\integration\edge_device_bridge.py:632:29
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    629:             # Could update vector_engine for content updates
    630:
    631:         except Exception as e:
>>> 632:             logger.warning(f"Failed to process knowledge update: {e}")
    633:
    634:     async def _periodic_optimization(self):
    635:         """Periodic optimization tasks for edge devices."""


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (29 calls)
File: packages\rag\integration\edge_device_bridge.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (16 calls)
File: packages\rag\integration\edge_device_bridge.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'bridge' methods (7 calls)
File: packages\rag\integration\edge_device_bridge.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (40 total)
File: packages\rag\integration\edge_device_bridge.py:51:21
Recommendation: Replace magic numbers with named constants or enums
Code context:
     48:
     49:     # Resource capabilities
     50:     cpu_cores: int = 1
>>>  51:     memory_mb: int = 1024
     52:     storage_gb: int = 32
     53:     battery_percent: float = 100.0
     54:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (40 total)
File: packages\rag\integration\edge_device_bridge.py:52:22
Recommendation: Replace magic numbers with named constants or enums
Code context:
     49:     # Resource capabilities
     50:     cpu_cores: int = 1
     51:     memory_mb: int = 1024
>>>  52:     storage_gb: int = 32
     53:     battery_percent: float = 100.0
     54:
     55:     # Current resource usage


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (40 total)
File: packages\rag\integration\edge_device_bridge.py:63:24
Recommendation: Replace magic numbers with named constants or enums
Code context:
     60:     # Network capabilities
     61:     network_type: str = "wifi"  # wifi, cellular, ethernet, offline
     62:     bandwidth_mbps: float = 10.0
>>>  63:     latency_ms: float = 50.0
     64:     data_cost_per_mb: float = 0.0  # Cost in arbitrary units
     65:
     66:     # Constraints and preferences


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (40 total)
File: packages\rag\integration\edge_device_bridge.py:88:32
Recommendation: Replace magic numbers with named constants or enums
Code context:
     85:     """Result of edge device optimization for RAG operations."""
     86:
     87:     # Optimized parameters
>>>  88:     optimized_chunk_size: int = 512
     89:     optimized_max_results: int = 10
     90:     preferred_systems: list[str] = field(default_factory=list)  # hippo, graph, vector
     91:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (40 total)
File: packages\rag\integration\edge_device_bridge.py:94:29
Recommendation: Replace magic numbers with named constants or enums
Code context:
     91:
     92:     # Resource allocation
     93:     max_memory_mb: float = 100.0
>>>  94:     max_cpu_percent: float = 50.0
     95:     max_network_mb: float = 10.0
     96:
     97:     # Query routing decisions


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (6 calls)
File: packages\rag\integration\fog_compute_bridge.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

HARDCODED_PATH: Hardcoded path or URL detected
File: packages\rag\integration\fog_rag_bridge.py:115:31
Recommendation: Use configuration files, environment variables, or path utilities
Code context:
    112:
    113:     def __init__(
    114:         self,
>>> 115:         fog_gateway_url: str = "http://localhost:8080",
    116:         local_rag: HyperRAG | None = None,
    117:         default_strategy: FogRAGStrategy = FogRAGStrategy.ADAPTIVE,
    118:     ):


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\integration\fog_rag_bridge.py:162:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    159:         max_results: int = 10,
    160:         include_sources: bool = True,
    161:     ) -> dict[str, Any]:
>>> 162:         """
    163:         Execute distributed RAG query across fog nodes
    164:
    165:         Args:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\integration\fog_rag_bridge.py:502:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    499:         return results
    500:
    501:     async def _select_best_node(self, task: FogRAGTask) -> str | None:
>>> 502:         """Select the best fog node for a given task"""
    503:
    504:         candidate_nodes = []
    505:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\integration\fog_rag_bridge.py:615:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    612:     async def _aggregate_results(
    613:         self, task_results: dict[str, Any], max_results: int, include_sources: bool
    614:     ) -> dict[str, Any]:
>>> 615:         """Aggregate results from distributed tasks"""
    616:
    617:         all_results = []
    618:         sources = []


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\integration\fog_rag_bridge.py:723:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    720:             return {"status": "error", "message": f"Local query execution failed: {str(e)}", "results": []}
    721:
    722:     async def _update_node_metrics(self) -> None:
>>> 723:         """Update performance metrics for fog nodes"""
    724:
    725:         for node_id, node_info in self.available_nodes.items():
    726:             try:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\integration\fog_rag_bridge.py:744:31
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    741:                             node_info.availability *= 0.9
    742:
    743:             except Exception as e:
>>> 744:                 logger.debug(f"Failed to update metrics for node {node_id}: {e}")
    745:                 node_info.availability *= 0.8  # Reduce availability on error
    746:
    747:     def _update_performance_metrics(self, tasks: list[FogRAGTask], results: dict[str, Any]) -> None:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\integration\fog_rag_bridge.py:748:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    745:                 node_info.availability *= 0.8  # Reduce availability on error
    746:
    747:     def _update_performance_metrics(self, tasks: list[FogRAGTask], results: dict[str, Any]) -> None:
>>> 748:         """Update overall fog execution performance metrics"""
    749:
    750:         successful_tasks = sum(1 for task in tasks if task.status == "completed")
    751:         total_tasks = len(tasks)


HARDCODED_PATH: Hardcoded path or URL detected
File: packages\rag\integration\fog_rag_bridge.py:791:27
Recommendation: Use configuration files, environment variables, or path utilities
Code context:
    788:
    789: # Convenience functions for integration
    790: async def create_fog_rag_coordinator(
>>> 791:     fog_gateway_url: str = "http://localhost:8080", local_rag: HyperRAG | None = None
    792: ) -> FogRAGCoordinator:
    793:     """Create and initialize fog RAG coordinator"""
    794:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\integration\fog_rag_bridge.py:793:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    790: async def create_fog_rag_coordinator(
    791:     fog_gateway_url: str = "http://localhost:8080", local_rag: HyperRAG | None = None
    792: ) -> FogRAGCoordinator:
>>> 793:     """Create and initialize fog RAG coordinator"""
    794:
    795:     coordinator = FogRAGCoordinator(fog_gateway_url, local_rag)
    796:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\integration\fog_rag_bridge.py:810:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    807:     "FogNodeCapability",
    808:     "FogNodeInfo",
    809:     "FogRAGTask",
>>> 810:     "create_fog_rag_coordinator",
    811: ]


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'datetime' methods (6 calls)
File: packages\rag\integration\fog_rag_bridge.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'asyncio' methods (8 calls)
File: packages\rag\integration\fog_rag_bridge.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (14 calls)
File: packages\rag\integration\fog_rag_bridge.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (17 calls)
File: packages\rag\integration\fog_rag_bridge.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'node_data' methods (9 calls)
File: packages\rag\integration\fog_rag_bridge.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'result' methods (7 calls)
File: packages\rag\integration\fog_rag_bridge.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (45 total)
File: packages\rag\integration\fog_rag_bridge.py:92:20
Recommendation: Replace magic numbers with named constants or enums
Code context:
     89:     # Fog execution details
     90:     target_nodes: list[str] = field(default_factory=list)
     91:     strategy: FogRAGStrategy = FogRAGStrategy.ADAPTIVE
>>>  92:     priority: int = 5  # 1-10 priority scale
     93:
     94:     # Execution tracking
     95:     status: str = "pending"


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (45 total)
File: packages\rag\integration\fog_rag_bridge.py:128:32
Recommendation: Replace magic numbers with named constants or enums
Code context:
    125:         self.active_tasks: dict[str, FogRAGTask] = {}
    126:
    127:         # Performance tracking
>>> 128:         self.fog_success_rate = 0.95
    129:         self.avg_fog_latency = 0.0
    130:         self.fog_cost_benefit = 1.2  # Cost/benefit ratio vs local
    131:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (45 total)
File: packages\rag\integration\fog_rag_bridge.py:130:32
Recommendation: Replace magic numbers with named constants or enums
Code context:
    127:         # Performance tracking
    128:         self.fog_success_rate = 0.95
    129:         self.avg_fog_latency = 0.0
>>> 130:         self.fog_cost_benefit = 1.2  # Cost/benefit ratio vs local
    131:
    132:         # Background tasks
    133:         self._node_discovery_task: asyncio.Task | None = None


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (45 total)
File: packages\rag\integration\fog_rag_bridge.py:179:72
Recommendation: Replace magic numbers with named constants or enums
Code context:
    176:         strategy = strategy or self.default_strategy
    177:         task_id = str(uuid4())
    178:
>>> 179:         logger.info(f"Starting distributed RAG query {task_id}: {query[:50]}...")
    180:
    181:         try:
    182:             # Determine execution strategy


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (45 total)
File: packages\rag\integration\fog_rag_bridge.py:231:42
Recommendation: Replace magic numbers with named constants or enums
Code context:
    228:                 async with session.get(
    229:                     f"{self.fog_gateway_url}/v1/fog/nodes", params={"capabilities": "rag,vector_search,reasoning"}
    230:                 ) as response:
>>> 231:                     if response.status == 200:
    232:                         nodes_data = await response.json()
    233:
    234:                         for node_data in nodes_data.get("nodes", []):


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\integration\p2p_network_bridge.py:144:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    141:
    142:
    143: class P2PNetworkRAGBridge:
>>> 144:     """
    145:     P2P Network Integration Bridge for HyperRAG
    146:
    147:     Connects the unified RAG system with P2P communication networks to enable:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\integration\p2p_network_bridge.py:568:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    565:             raise
    566:
    567:     async def _select_query_peers(self, target_domains: list[str] | None, max_peers: int) -> list[PeerProfile]:
>>> 568:         """Select best peers for a query."""
    569:         candidates = []
    570:
    571:         for peer in self.known_peers.values():


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\integration\p2p_network_bridge.py:589:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    586:         return candidates[:max_peers]
    587:
    588:     def _select_best_protocol(self, peer: PeerProfile) -> NetworkProtocol | None:
>>> 589:         """Select the best protocol to communicate with a peer."""
    590:         # Find common protocols
    591:         available_protocols = set(self.network_transports.keys())
    592:         peer_protocols = set(peer.protocols)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\integration\p2p_network_bridge.py:634:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    631:             logger.warning(f"Failed to send query to peer {peer.peer_id}: {e}")
    632:
    633:     async def _aggregate_query_results(self, p2p_query: P2PQuery) -> list[Any]:
>>> 634:         """Aggregate results from multiple peers."""
    635:         all_results = []
    636:
    637:         # Collect all results


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\integration\p2p_network_bridge.py:782:26
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    779:                 "received_at": datetime.now(),
    780:             }
    781:
>>> 782:             logger.info(f"Received knowledge share from {message.sender_peer_id}")
    783:
    784:         except Exception as e:
    785:             logger.exception(f"Failed to handle knowledge share: {e}")


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\integration\p2p_network_bridge.py:796:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    793:         # Handle incremental knowledge sync
    794:
    795:     async def _update_peer_trust(self, peer_id: str, results: list[Any]):
>>> 796:         """Update trust score for a peer based on result quality."""
    797:         if peer_id in self.known_peers:
    798:             # Simple trust update based on result count and confidence
    799:             result_quality = sum(result.get("confidence", 0.5) for result in results) / max(len(results), 1)


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (37 calls)
File: packages\rag\integration\p2p_network_bridge.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (22 calls)
File: packages\rag\integration\p2p_network_bridge.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'asyncio' methods (14 calls)
File: packages\rag\integration\p2p_network_bridge.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'payload' methods (6 calls)
File: packages\rag\integration\p2p_network_bridge.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'bridge' methods (6 calls)
File: packages\rag\integration\p2p_network_bridge.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (37 total)
File: packages\rag\integration\p2p_network_bridge.py:67:26
Recommendation: Replace magic numbers with named constants or enums
Code context:
     64:
     65:     # Capabilities
     66:     knowledge_domains: list[str] = field(default_factory=list)
>>>  67:     max_query_size: int = 1024
     68:     max_concurrent_queries: int = 5
     69:     supports_offline: bool = True
     70:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (37 total)
File: packages\rag\integration\p2p_network_bridge.py:68:34
Recommendation: Replace magic numbers with named constants or enums
Code context:
     65:     # Capabilities
     66:     knowledge_domains: list[str] = field(default_factory=list)
     67:     max_query_size: int = 1024
>>>  68:     max_concurrent_queries: int = 5
     69:     supports_offline: bool = True
     70:
     71:     # RAG capabilities


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (37 total)
File: packages\rag\integration\p2p_network_bridge.py:77:25
Recommendation: Replace magic numbers with named constants or enums
Code context:
     74:     knowledge_freshness: datetime = field(default_factory=datetime.now)
     75:
     76:     # Trust and reputation
>>>  77:     trust_score: float = 0.5
     78:     reputation_score: float = 0.5
     79:     interaction_count: int = 0
     80:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (37 total)
File: packages\rag\integration\p2p_network_bridge.py:78:30
Recommendation: Replace magic numbers with named constants or enums
Code context:
     75:
     76:     # Trust and reputation
     77:     trust_score: float = 0.5
>>>  78:     reputation_score: float = 0.5
     79:     interaction_count: int = 0
     80:
     81:     # Status


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (37 total)
File: packages\rag\integration\p2p_network_bridge.py:100:20
Recommendation: Replace magic numbers with named constants or enums
Code context:
     97:     # Query routing
     98:     target_peers: list[str] = field(default_factory=list)
     99:     visited_peers: list[str] = field(default_factory=list)
>>> 100:     max_hops: int = 3
    101:     current_hop: int = 0
    102:
    103:     # Query parameters


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\legacy_src\education.py:160:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    157:             return False
    158:
    159:     def remove_concept(self, concept_id: str) -> bool:
>>> 160:         """
    161:         Remove a concept from the curriculum graph.
    162:
    163:         Args:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\legacy_src\education.py:227:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    224:         learner_id: str,
    225:         max_concepts: int = 20,
    226:     ) -> LearningPath | None:
>>> 227:         """
    228:         Generate optimal learning path from start to target concepts.
    229:
    230:         Args:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\legacy_src\education.py:320:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    317:             return None
    318:
    319:     def update_learner_progress(self, learner_id: str, path_id: str, completed_concepts: list[str]) -> bool:
>>> 320:         """
    321:         Update learner progress on a learning path.
    322:
    323:         Args:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\legacy_src\education.py:360:26
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    357:                 c.estimated_time_minutes for c in learning_path.concepts if c.concept_id in completed_concepts
    358:             )
    359:
>>> 360:             logger.info(f"Updated progress for learner {learner_id}: {completion_percentage:.1f}% complete")
    361:             return True
    362:
    363:         except Exception as e:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\legacy_src\education.py:364:27
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    361:             return True
    362:
    363:         except Exception as e:
>>> 364:             logger.error(f"Failed to update learner progress: {e}")
    365:             return False
    366:
    367:     def get_recommended_next_concepts(self, learner_id: str, max_recommendations: int = 5) -> list[ConceptNode]:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\legacy_src\education.py:433:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    430:             return [cid for cid, _ in concept_difficulty]
    431:
    432:     def _create_default_profile(self) -> dict[str, Any]:
>>> 433:         """Create default learner profile."""
    434:         return {
    435:             "learning_style": "multimodal",
    436:             "preferred_difficulty": "intermediate",


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\legacy_src\education.py:443:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    440:         }
    441:
    442:     def _update_stats(self):
>>> 443:         """Update graph statistics."""
    444:         self.stats["total_concepts"] = len(self.concepts)
    445:         self.stats["total_connections"] = self.graph.number_of_edges()
    446:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\legacy_src\education.py:637:27
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    634:         # Simple analogy generation based on concept and age
    635:         if target_age <= 6:
    636:             analogies = [
>>> 637:                 f"{concept} is like a puzzle where each piece fits perfectly",
    638:                 f"Think of {concept} like building blocks that stack together",
    639:                 "It's like a story where each part helps tell the whole tale",
    640:             ]


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\legacy_src\education.py:639:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    636:             analogies = [
    637:                 f"{concept} is like a puzzle where each piece fits perfectly",
    638:                 f"Think of {concept} like building blocks that stack together",
>>> 639:                 "It's like a story where each part helps tell the whole tale",
    640:             ]
    641:         elif target_age <= 10:
    642:             analogies = [


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\legacy_src\education.py:643:27
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    640:             ]
    641:         elif target_age <= 10:
    642:             analogies = [
>>> 643:                 f"{concept} works like a team where everyone has a special job",
    644:                 f"Imagine {concept} as a recipe - you need all the ingredients to make it work",
    645:                 "It's like a machine with different parts that work together",
    646:             ]


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\legacy_src\education.py:649:27
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    646:             ]
    647:         else:
    648:             analogies = [
>>> 649:                 f"{concept} functions like an ecosystem where all parts are interconnected",
    650:                 f"Think of {concept} as a symphony where different instruments create harmony",
    651:                 "It's like a complex network where information flows between nodes",
    652:             ]


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\legacy_src\education.py:650:36
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    647:         else:
    648:             analogies = [
    649:                 f"{concept} functions like an ecosystem where all parts are interconnected",
>>> 650:                 f"Think of {concept} as a symphony where different instruments create harmony",
    651:                 "It's like a complex network where information flows between nodes",
    652:             ]
    653:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\legacy_src\education.py:651:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    648:             analogies = [
    649:                 f"{concept} functions like an ecosystem where all parts are interconnected",
    650:                 f"Think of {concept} as a symphony where different instruments create harmony",
>>> 651:                 "It's like a complex network where information flows between nodes",
    652:             ]
    653:
    654:         return analogies[:2]  # Return top 2 analogies


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\legacy_src\education.py:688:18
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    685:         if target_age <= 8:
    686:             questions = [
    687:                 f"What do you think is the most interesting thing about {concept}?",
>>> 688:                 f"Can you think of where you might see {concept} in your daily life?",
    689:                 f"What questions do you have about {concept}?",
    690:             ]
    691:         else:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\legacy_src\education.py:727:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    724:         """Load analogy templates for different concepts."""
    725:         return {
    726:             "science": [
>>> 727:                 "like an experiment where we discover new things",
    728:                 "like exploring a mystery with clues to find",
    729:                 "like building something amazing with special tools",
    730:             ],


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (22 calls)
File: packages\rag\legacy_src\education.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (14 calls)
File: packages\rag\legacy_src\education.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (31 total)
File: packages\rag\legacy_src\education.py:60:75
Recommendation: Replace magic numbers with named constants or enums
Code context:
     57:     def __post_init__(self):
     58:         """Validate concept node after initialization."""
     59:         if not self.concept_id:
>>>  60:             self.concept_id = hashlib.md5(self.name.encode()).hexdigest()[:12]
     61:
     62:
     63: @dataclass


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (31 total)
File: packages\rag\legacy_src\education.py:225:28
Recommendation: Replace magic numbers with named constants or enums
Code context:
    222:         start_concepts: list[str],
    223:         target_concepts: list[str],
    224:         learner_id: str,
>>> 225:         max_concepts: int = 20,
    226:     ) -> LearningPath | None:
    227:         """
    228:         Generate optimal learning path from start to target concepts.


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (31 total)
File: packages\rag\legacy_src\education.py:290:46
Recommendation: Replace magic numbers with named constants or enums
Code context:
    287:
    288:             # Calculate estimated duration
    289:             total_minutes = sum(concept.estimated_time_minutes for concept in concept_list)
>>> 290:             estimated_hours = total_minutes / 60.0
    291:
    292:             # Determine difficulty progression
    293:             difficulty_progression = [concept.difficulty for concept in concept_list]


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (31 total)
File: packages\rag\legacy_src\education.py:296:108
Recommendation: Replace magic numbers with named constants or enums
Code context:
    293:             difficulty_progression = [concept.difficulty for concept in concept_list]
    294:
    295:             # Generate unique path ID
>>> 296:             path_id = hashlib.md5(f"{learner_id}_{target_concepts}_{datetime.now()}".encode()).hexdigest()[:12]
    297:
    298:             # Create learning path
    299:             learning_path = LearningPath(


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (31 total)
File: packages\rag\legacy_src\education.py:367:88
Recommendation: Replace magic numbers with named constants or enums
Code context:
    364:             logger.error(f"Failed to update learner progress: {e}")
    365:             return False
    366:
>>> 367:     def get_recommended_next_concepts(self, learner_id: str, max_recommendations: int = 5) -> list[ConceptNode]:
    368:         """
    369:         Get recommended next concepts for a learner based on their progress.
    370:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\legacy_src\rag_offline_config.py:278:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    275:     validation_errors: list[str] = field(default_factory=list)
    276:
    277:     def adapt_for_mobile(self) -> "OfflineRAGConfig":
>>> 278:         """Create mobile-optimized variant of this config."""
    279:         base_dir = Path(self.embedding.model_path).parent if self.embedding.model_path else None
    280:
    281:         mobile_config = OfflineRAGConfig(


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\legacy_src\rag_offline_config.py:551:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    548:             return False
    549:
    550:     def import_config(self, file_path: Path, validate: bool = True) -> str | None:
>>> 551:         """Import configuration from file."""
    552:         try:
    553:             with open(file_path) as f:
    554:                 if file_path.suffix.lower() == ".yaml" or file_path.suffix.lower() == ".yml":


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\legacy_src\rag_offline_config.py:578:27
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    575:             return config_name
    576:
    577:         except Exception as e:
>>> 578:             logger.error(f"Failed to import config from {file_path}: {e}")
    579:             return None
    580:
    581:     def get_registry_status(self) -> dict[str, Any]:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\legacy_src\rag_offline_config.py:628:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    625:     top_k: int = 5,
    626:     **kwargs,
    627: ) -> OfflineRAGConfig:
>>> 628:     """Create custom RAG configuration with validated defaults."""
    629:     config = OfflineRAGConfig(
    630:         name=name,
    631:         description=f"Custom RAG config: {name}",


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'errors' methods (11 calls)
File: packages\rag\legacy_src\rag_offline_config.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (11 calls)
File: packages\rag\legacy_src\rag_offline_config.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (66 total)
File: packages\rag\legacy_src\rag_offline_config.py:122:22
Recommendation: Replace magic numbers with named constants or enums
Code context:
    119:     provider: EmbeddingProvider
    120:     model_name: str
    121:     model_path: str | None = None  # Local path for offline models
>>> 122:     dimensions: int = 384
    123:     max_seq_length: int = 512
    124:     batch_size: int = 32
    125:     device: str = "cpu"  # cpu, cuda, mps


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (66 total)
File: packages\rag\legacy_src\rag_offline_config.py:123:26
Recommendation: Replace magic numbers with named constants or enums
Code context:
    120:     model_name: str
    121:     model_path: str | None = None  # Local path for offline models
    122:     dimensions: int = 384
>>> 123:     max_seq_length: int = 512
    124:     batch_size: int = 32
    125:     device: str = "cpu"  # cpu, cuda, mps
    126:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (66 total)
File: packages\rag\legacy_src\rag_offline_config.py:124:22
Recommendation: Replace magic numbers with named constants or enums
Code context:
    121:     model_path: str | None = None  # Local path for offline models
    122:     dimensions: int = 384
    123:     max_seq_length: int = 512
>>> 124:     batch_size: int = 32
    125:     device: str = "cpu"  # cpu, cuda, mps
    126:
    127:     # Validation metadata


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (66 total)
File: packages\rag\legacy_src\rag_offline_config.py:137:22
Recommendation: Replace magic numbers with named constants or enums
Code context:
    134: class ChunkingConfig:
    135:     """Configuration for text chunking."""
    136:
>>> 137:     chunk_size: int = 512
    138:     chunk_overlap: int = 50
    139:     separator: str = "\n\n"
    140:     keep_separator: bool = True


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (66 total)
File: packages\rag\legacy_src\rag_offline_config.py:138:25
Recommendation: Replace magic numbers with named constants or enums
Code context:
    135:     """Configuration for text chunking."""
    136:
    137:     chunk_size: int = 512
>>> 138:     chunk_overlap: int = 50
    139:     separator: str = "\n\n"
    140:     keep_separator: bool = True
    141:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\memory\hippo_index.py:119:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    116:         return max(0.0, decayed_importance)
    117:
    118:     def update_access(self):
>>> 119:         """Update access tracking."""
    120:         self.last_accessed = datetime.now()
    121:         self.access_count += 1
    122:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\memory\hippo_index.py:129:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    126:
    127: @dataclass
    128: class QueryResult:
>>> 129:     """Result from episodic memory query."""
    130:
    131:     nodes: list[HippoNode] = field(default_factory=list)
    132:     total_count: int = 0


HARDCODED_PATH: Hardcoded path or URL detected
File: packages\rag\memory\hippo_index.py:162:26
Recommendation: Use configuration files, environment variables, or path utilities
Code context:
    159:         self,
    160:         db_path: str = ":memory:",
    161:         redis_url: str = "redis://localhost:6379/1",
>>> 162:         qdrant_url: str = "http://localhost:6333",
    163:         embedding_dim: int = 768,
    164:     ):
    165:         self.db_path = db_path


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\memory\hippo_index.py:453:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    450:     # Private implementation methods
    451:
    452:     async def _create_embedding(self, text: str) -> np.ndarray:
>>> 453:         """Create embedding for text (fallback to random)."""
    454:         try:
    455:             # Try to use a real embedding model if available
    456:             # For now, create a simple hash-based pseudo-embedding


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\memory\hippo_index.py:477:21
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    474:
    475:     async def _setup_duckdb_schema(self):
    476:         """Set up DuckDB schema for episodic storage."""
>>> 477:         schema_sql = """
    478:         CREATE TABLE IF NOT EXISTS hippo_nodes (
    479:             id VARCHAR PRIMARY KEY,
    480:             content TEXT NOT NULL,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\memory\hippo_index.py:537:28
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    534:                     collection_name="hippo_embeddings",
    535:                     vectors_config=VectorParams(size=self.embedding_dim, distance=Distance.COSINE),
    536:                 )
>>> 537:                 logger.info("Created Qdrant collection: hippo_embeddings")
    538:
    539:         except Exception as e:
    540:             logger.warning(f"Failed to setup Qdrant collections: {e}")


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\memory\hippo_index.py:548:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    545:             embedding_list = node.embedding.tolist() if node.embedding is not None else None
    546:
    547:             self.duckdb_conn.execute(
>>> 548:                 """
    549:                 INSERT OR REPLACE INTO hippo_nodes (
    550:                     id, content, node_type, memory_type, user_id, confidence,
    551:                     importance_score, decay_rate, ttl, created_at, last_accessed,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\memory\hippo_index.py:644:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    641:
    642:
    643: def create_episodic_document(content: str, doc_type: str = "episodic", user_id: str | None = None) -> EpisodicDocument:
>>> 644:     """Create an episodic document optimized for hippocampal storage."""
    645:     return EpisodicDocument(
    646:         content=content,
    647:         doc_type=doc_type,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\memory\hippo_index.py:656:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    653:
    654:
    655: def create_hippo_node(content: str, user_id: str | None = None, ttl_hours: int = 168) -> HippoNode:  # 7 days default
>>> 656:     """Create a hippocampal episodic node with neurobiological parameters."""
    657:     return HippoNode(
    658:         content=content,
    659:         user_id=user_id,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\memory\hippo_index.py:683:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    680:
    681:         # Test document storage
    682:         doc = create_episodic_document(
>>> 683:             "Machine learning enables computers to learn from data without explicit programming.", user_id="test_user"
    684:         )
    685:
    686:         success = await hippo.store_document(doc)


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (27 calls)
File: packages\rag\memory\hippo_index.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (24 calls)
File: packages\rag\memory\hippo_index.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'hippo' methods (7 calls)
File: packages\rag\memory\hippo_index.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (28 total)
File: packages\rag\memory\hippo_index.py:54:24
Recommendation: Replace magic numbers with named constants or enums
Code context:
     51:
     52:     # Episodic-specific metadata
     53:     created_at: datetime = field(default_factory=datetime.now)
>>>  54:     confidence: float = 0.8
     55:     access_pattern: str = "recent"
     56:     decay_applied: bool = False
     57:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (28 total)
File: packages\rag\memory\hippo_index.py:83:24
Recommendation: Replace magic numbers with named constants or enums
Code context:
     80:     user_id: str | None = None
     81:
     82:     # Hippocampal properties
>>>  83:     confidence: float = 0.7
     84:     importance_score: float = 0.3  # Lower for episodic
     85:     decay_rate: float = 0.2  # Faster decay
     86:     ttl: int = 7 * 24 * 3600  # 7 days default


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (28 total)
File: packages\rag\memory\hippo_index.py:84:30
Recommendation: Replace magic numbers with named constants or enums
Code context:
     81:
     82:     # Hippocampal properties
     83:     confidence: float = 0.7
>>>  84:     importance_score: float = 0.3  # Lower for episodic
     85:     decay_rate: float = 0.2  # Faster decay
     86:     ttl: int = 7 * 24 * 3600  # 7 days default
     87:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (28 total)
File: packages\rag\memory\hippo_index.py:85:24
Recommendation: Replace magic numbers with named constants or enums
Code context:
     82:     # Hippocampal properties
     83:     confidence: float = 0.7
     84:     importance_score: float = 0.3  # Lower for episodic
>>>  85:     decay_rate: float = 0.2  # Faster decay
     86:     ttl: int = 7 * 24 * 3600  # 7 days default
     87:
     88:     # Time-based tracking


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (28 total)
File: packages\rag\memory\hippo_index.py:86:15
Recommendation: Replace magic numbers with named constants or enums
Code context:
     83:     confidence: float = 0.7
     84:     importance_score: float = 0.3  # Lower for episodic
     85:     decay_rate: float = 0.2  # Faster decay
>>>  86:     ttl: int = 7 * 24 * 3600  # 7 days default
     87:
     88:     # Time-based tracking
     89:     created_at: datetime = field(default_factory=datetime.now)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\memory\__init__.py:27:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     24:     "ConfidenceType",
     25:     "QueryResult",
     26:     "create_hippo_node",
>>>  27:     "create_episodic_document",
     28: ]


HARDCODED_PATH: Hardcoded path or URL detected
File: packages\rag\storage\encrypted_mounts.py:209:43
Recommendation: Use configuration files, environment variables, or path utilities
Code context:
    206:
    207:     def __init__(self, namespace: str, base_path: Path = None):
    208:         self.namespace = namespace
>>> 209:         self.base_path = base_path or Path("/var/lib/aivillage/mounts")
    210:
    211:         # Mount storage
    212:         self.active_mounts: dict[str, EncryptedMount] = {}


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\storage\encrypted_mounts.py:249:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    246:         user_id: str = None,
    247:         job_id: str = None,
    248:     ) -> str:
>>> 249:         """Create a new encrypted mount"""
    250:
    251:         # Validate namespace mount limits
    252:         if len(self.active_mounts) >= self.config["max_mounts_per_namespace"]:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\storage\encrypted_mounts.py:308:22
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    305:             mount_id=mount_id, action="mount_created", user_id=user_id, job_id=job_id, file_path=str(mount_point)
    306:         )
    307:
>>> 308:         logger.info(f"Created encrypted mount {mount_id} for namespace {self.namespace}")
    309:         return mount_id
    310:
    311:     async def get_mount(self, mount_id: str) -> EncryptedMount | None:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\storage\encrypted_mounts.py:395:47
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    392:             return {"success": False, "error": "Mount is read-only"}
    393:
    394:         if action == "delete" and not mount.has_permission(MountPermission.DELETE):
>>> 395:             return {"success": False, "error": "Delete permission not granted"}
    396:
    397:         # Construct full file path
    398:         full_path = mount.mount_point / file_path.lstrip("/")


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\storage\encrypted_mounts.py:518:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    515:     # Private helper methods
    516:
    517:     async def _get_or_create_namespace_key(self) -> NamespaceKeyInfo:
>>> 518:         """Get existing or create new namespace encryption key"""
    519:
    520:         # Look for existing key
    521:         for key_info in self.namespace_keys.values():


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\storage\encrypted_mounts.py:529:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    526:         return await self._create_namespace_key()
    527:
    528:     async def _create_namespace_key(self, rotate: bool = False) -> NamespaceKeyInfo:
>>> 529:         """Create new namespace encryption key"""
    530:
    531:         key_id = f"{self.namespace}_key_{uuid4().hex[:8]}"
    532:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\storage\encrypted_mounts.py:564:22
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    561:         # Persist key to secure storage
    562:         await self._save_key_to_storage(key_info)
    563:
>>> 564:         logger.info(f"Created encryption key {key_id} for namespace {self.namespace}")
    565:         return key_info
    566:
    567:     async def _mount_encrypted_filesystem(self, mount: EncryptedMount) -> None:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\storage\encrypted_mounts.py:658:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    655:             raise ValueError(f"Unsupported action: {action}")
    656:
    657:     async def _update_mount_stats(self, mount: EncryptedMount, action: str) -> None:
>>> 658:         """Update mount usage statistics"""
    659:
    660:         mount.last_accessed = datetime.now(UTC)
    661:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\storage\encrypted_mounts.py:674:29
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    671:                 mount.files_count = len([f for f in files if f.is_file()])
    672:                 mount.size_bytes = sum(f.stat().st_size for f in files if f.is_file())
    673:         except Exception as e:
>>> 674:             logger.warning(f"Failed to update mount stats for {mount.mount_id}: {e}")
    675:
    676:     async def _re_encrypt_mount(self, mount: EncryptedMount, new_key_info: NamespaceKeyInfo) -> None:
    677:         """Re-encrypt mount with new key"""


HARDCODED_PATH: Hardcoded path or URL detected
File: packages\rag\storage\encrypted_mounts.py:755:43
Recommendation: Use configuration files, environment variables, or path utilities
Code context:
    752:     """
    753:
    754:     def __init__(self, base_path: Path = None):
>>> 755:         self.base_path = base_path or Path("/var/lib/aivillage/mounts")
    756:         self.namespace_managers: dict[str, NamespaceMountManager] = {}
    757:
    758:         # Global configuration


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\storage\encrypted_mounts.py:771:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    768:         logger.info("Global mount manager initialized")
    769:
    770:     async def get_namespace_manager(self, namespace: str) -> NamespaceMountManager:
>>> 771:         """Get or create namespace mount manager"""
    772:
    773:         if namespace not in self.namespace_managers:
    774:             if len(self.namespace_managers) >= self.global_config["max_namespaces"]:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\storage\encrypted_mounts.py:780:26
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    777:             manager = NamespaceMountManager(namespace, self.base_path)
    778:             self.namespace_managers[namespace] = manager
    779:
>>> 780:             logger.info(f"Created namespace manager for: {namespace}")
    781:
    782:         return self.namespace_managers[namespace]
    783:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\storage\encrypted_mounts.py:794:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    791:         job_id: str = None,
    792:         **kwargs,
    793:     ) -> str:
>>> 794:         """Create mount in specific namespace"""
    795:
    796:         manager = await self.get_namespace_manager(namespace)
    797:         return await manager.create_mount(


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\storage\encrypted_mounts.py:880:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    877:     job_id: str = None,
    878:     **kwargs,
    879: ) -> str:
>>> 880:     """Convenience function to create namespace mount"""
    881:
    882:     manager = get_mount_manager()
    883:     return await manager.create_namespace_mount(


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'datetime' methods (10 calls)
File: packages\rag\storage\encrypted_mounts.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (18 calls)
File: packages\rag\storage\encrypted_mounts.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (19 calls)
File: packages\rag\storage\encrypted_mounts.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'mount' methods (7 calls)
File: packages\rag\storage\encrypted_mounts.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'file_path' methods (11 calls)
File: packages\rag\storage\encrypted_mounts.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'manager' methods (6 calls)
File: packages\rag\storage\encrypted_mounts.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (18 total)
File: packages\rag\storage\encrypted_mounts.py:123:59
Recommendation: Replace magic numbers with named constants or enums
Code context:
    120:     expires_at: datetime | None = None
    121:
    122:     # Key derivation metadata
>>> 123:     salt: bytes = field(default_factory=lambda: os.urandom(32))
    124:     iterations: int = 100000
    125:
    126:     # Access tracking


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (18 total)
File: packages\rag\storage\encrypted_mounts.py:124:22
Recommendation: Replace magic numbers with named constants or enums
Code context:
    121:
    122:     # Key derivation metadata
    123:     salt: bytes = field(default_factory=lambda: os.urandom(32))
>>> 124:     iterations: int = 100000
    125:
    126:     # Access tracking
    127:     last_accessed: datetime | None = None


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (18 total)
File: packages\rag\storage\encrypted_mounts.py:147:23
Recommendation: Replace magic numbers with named constants or enums
Code context:
    144:     allowed_jobs: set[str] = field(default_factory=set)
    145:
    146:     # Mount configuration
>>> 147:     max_size_mb: int = 1024  # Maximum size in MB
    148:     auto_unmount_hours: int = 24  # Auto-unmount after hours
    149:     backup_enabled: bool = True
    150:     compression_enabled: bool = False


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (18 total)
File: packages\rag\storage\encrypted_mounts.py:148:30
Recommendation: Replace magic numbers with named constants or enums
Code context:
    145:
    146:     # Mount configuration
    147:     max_size_mb: int = 1024  # Maximum size in MB
>>> 148:     auto_unmount_hours: int = 24  # Auto-unmount after hours
    149:     backup_enabled: bool = True
    150:     compression_enabled: bool = False
    151:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (18 total)
File: packages\rag\storage\encrypted_mounts.py:221:37
Recommendation: Replace magic numbers with named constants or enums
Code context:
    218:         # Configuration
    219:         self.config = {
    220:             "max_mounts_per_namespace": 10,
>>> 221:             "default_mount_size_mb": 512,
    222:             "max_mount_size_mb": 5120,  # 5GB
    223:             "auto_unmount_hours": 24,
    224:             "key_rotation_days": 90,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\storage\__init__.py:27:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     24:     "MountPermission",
     25:     "MountType",
     26:     "NamespaceMountManager",
>>>  27:     "create_namespace_mount",
     28:     "get_mount_manager",
     29: ]


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\vector\contextual_vector_engine.py:94:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     91:     metadata: dict[str, Any] = field(default_factory=dict)
     92:
     93:     def get_combined_context(self) -> str:
>>>  94:         """Get combined context from all context tags."""
     95:         contexts = []
     96:
     97:         if self.primary_context:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\vector\contextual_vector_engine.py:131:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    128:
    129: @dataclass
    130: class VectorSearchResult:
>>> 131:     """Result from vector similarity search."""
    132:
    133:     documents: list[VectorDocument] = field(default_factory=list)
    134:     similarities: list[float] = field(default_factory=list)


LONG_PARAMETER_LIST: Function '__init__' has 7 parameters (>5)
File: packages\rag\vector\contextual_vector_engine.py:171:4
Recommendation: Use parameter objects, data classes, or keyword-only arguments
Code context:
    168:     - Efficient vector indexing (FAISS with fallback to numpy)
    169:     """
    170:
>>> 171:     def __init__(
    172:         self,
    173:         embedding_dim: int = 768,
    174:         similarity_threshold: float = 0.7,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\vector\contextual_vector_engine.py:507:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    504:     # Private implementation methods
    505:
    506:     async def _create_embedding(self, text: str) -> np.ndarray:
>>> 507:         """Create embedding for text (with caching)."""
    508:         # Check cache first
    509:         text_hash = str(hash(text))
    510:         if text_hash in self.embedding_cache:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\vector\contextual_vector_engine.py:539:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    536:             return np.zeros(self.embedding_dim, dtype=np.float32)
    537:
    538:     async def _create_semantic_chunks(self, content: str, doc_id: str) -> list[str]:
>>> 539:         """Create semantic chunks from content."""
    540:         # Simple sentence-based chunking (would use more sophisticated methods in production)
    541:         sentences = content.split(". ")
    542:         chunks = []


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\vector\contextual_vector_engine.py:569:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    566:         return chunks
    567:
    568:     async def _update_context_indexes(self, doc: VectorDocument):
>>> 569:         """Update context and tag indexes for a document."""
    570:         # Index primary context
    571:         if doc.primary_context:
    572:             context_type = doc.primary_context.tag_type


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\vector\contextual_vector_engine.py:817:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    814:
    815:
    816: def create_context_tag(tag_type: str, content: str, level: int = 0, confidence: float = 1.0) -> ContextTag:
>>> 817:     """Create a context tag for dual context system."""
    818:     return ContextTag(
    819:         tag_type=tag_type,
    820:         content=content,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\vector\contextual_vector_engine.py:830:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    827: def create_book_chapter_contexts(
    828:     book_title: str, book_summary: str, chapter_title: str, chapter_summary: str
    829: ) -> tuple[ContextTag, ContextTag]:
>>> 830:     """Create book and chapter context tags."""
    831:     book_context = create_context_tag(tag_type="book", content=f"{book_title}: {book_summary}", level=0, confidence=1.0)
    832:
    833:     chapter_context = create_context_tag(


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (13 calls)
File: packages\rag\vector\contextual_vector_engine.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (21 calls)
File: packages\rag\vector\contextual_vector_engine.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'np' methods (14 calls)
File: packages\rag\vector\contextual_vector_engine.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'engine' methods (7 calls)
File: packages\rag\vector\contextual_vector_engine.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (21 total)
File: packages\rag\vector\contextual_vector_engine.py:173:29
Recommendation: Replace magic numbers with named constants or enums
Code context:
    170:
    171:     def __init__(
    172:         self,
>>> 173:         embedding_dim: int = 768,
    174:         similarity_threshold: float = 0.7,
    175:         enable_dual_context: bool = True,
    176:         enable_semantic_chunking: bool = True,


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (21 total)
File: packages\rag\vector\contextual_vector_engine.py:174:38
Recommendation: Replace magic numbers with named constants or enums
Code context:
    171:     def __init__(
    172:         self,
    173:         embedding_dim: int = 768,
>>> 174:         similarity_threshold: float = 0.7,
    175:         enable_dual_context: bool = True,
    176:         enable_semantic_chunking: bool = True,
    177:         chunk_size: int = 512,


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (21 total)
File: packages\rag\vector\contextual_vector_engine.py:177:26
Recommendation: Replace magic numbers with named constants or enums
Code context:
    174:         similarity_threshold: float = 0.7,
    175:         enable_dual_context: bool = True,
    176:         enable_semantic_chunking: bool = True,
>>> 177:         chunk_size: int = 512,
    178:         chunk_overlap: int = 50,
    179:     ):
    180:         self.embedding_dim = embedding_dim


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (21 total)
File: packages\rag\vector\contextual_vector_engine.py:178:29
Recommendation: Replace magic numbers with named constants or enums
Code context:
    175:         enable_dual_context: bool = True,
    176:         enable_semantic_chunking: bool = True,
    177:         chunk_size: int = 512,
>>> 178:         chunk_overlap: int = 50,
    179:     ):
    180:         self.embedding_dim = embedding_dim
    181:         self.similarity_threshold = similarity_threshold


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (21 total)
File: packages\rag\vector\contextual_vector_engine.py:208:25
Recommendation: Replace magic numbers with named constants or enums
Code context:
    205:         self.similarity_metric = SimilarityMetric.COSINE
    206:         self.chunking_strategy = ChunkingStrategy.SEMANTIC
    207:         self.rerank_with_context = True
>>> 208:         self.cache_ttl = 3600  # 1 hour
    209:
    210:         # Statistics
    211:         self.stats = {


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\vector\__init__.py:27:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     24:     "ChunkingStrategy",
     25:     "SimilarityMetric",
     26:     "create_context_tag",
>>>  27:     "create_book_chapter_contexts",
     28: ]


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'pipeline' methods (6 calls)
File: packages\rag\codex-audit\snippets\rag_smoke.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\legacy_src\education\curriculum_graph.py:270:22
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    267:             base_criteria.extend(
    268:                 [
    269:                     f"Student can compare {concept} to related concepts",
>>> 270:                     f"Student can create examples of {concept}",
    271:                 ]
    272:             )
    273:         else:  # Grades 6-8


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\legacy_src\education\curriculum_graph.py:292:26
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    289:                 "Counting to 10",
    290:                 [],
    291:                 {
>>> 292:                     "en": "Learn to count from 1 to 10",
    293:                     "es": "Aprende a contar del 1 al 10",
    294:                 },
    295:             ),


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\legacy_src\education\curriculum_graph.py:448:26
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    445:                 "Data and Graphs",
    446:                 ["Patterns"],
    447:                 {
>>> 448:                     "en": "Create and interpret bar graphs",
    449:                     "es": "Crear e interpretar gráficos de barras",
    450:                 },
    451:             ),


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\legacy_src\education\curriculum_graph.py:837:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    834:             ),
    835:             (
    836:                 8,
>>> 837:                 "Evolution and Natural Selection",
    838:                 ["Genetics and Heredity"],
    839:                 {
    840:                     "en": "Species change over time",


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\legacy_src\education\curriculum_graph.py:1267:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1264:             await self.add_concept("social_studies", grade, concept, prereqs, content, estimated_time=35)
    1265:
    1266:     async def create_cross_curricular_connections(self) -> None:
>>> 1267:         """Create connections between subjects."""
    1268:         # Math-Science connections
    1269:         math_science_connections = [
    1270:             ("Data and Graphs", "Weather Patterns", "graphing_weather_data"),


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\legacy_src\education\curriculum_graph.py:1292:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1289:             await self.create_concept_connection(la_concept, ss_concept, connection_type)
    1290:
    1291:     async def create_concept_connection(self, concept1_name: str, concept2_name: str, connection_type: str) -> None:
>>> 1292:         """Create hyperedge connecting concepts across subjects."""
    1293:         # Find concept IDs
    1294:         concept1_id = None
    1295:         concept2_id = None


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\legacy_src\education\curriculum_graph.py:1363:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1360:         cultural_region: str,
    1361:         language: str,
    1362:     ) -> str:
>>> 1363:         """Create optimized learning path for specific parameters."""
    1364:         # Get concepts for grade range and subject
    1365:         relevant_concepts = [
    1366:             concept


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\legacy_src\education\curriculum_graph.py:1412:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1409:                 f"learning_paths/{subject}/total": len(
    1410:                     [p for p in self.learning_paths.values() if p.subject == subject]
    1411:                 ),
>>> 1412:                 "learning_path_created": True,
    1413:                 "path_id": path_id,
    1414:                 "concepts_count": len(ordered_concepts),
    1415:                 "estimated_hours": total_time,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\legacy_src\education\curriculum_graph.py:1500:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    1497:         # Log path selection
    1498:         wandb.log(
    1499:             {
>>> 1500:                 "optimal_path_selected": True,
    1501:                 "subject": subject,
    1502:                 "grade": current_grade,
    1503:                 "path_id": best_path.path_id,


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (36 calls)
File: packages\rag\legacy_src\education\curriculum_graph.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (79 total)
File: packages\rag\legacy_src\education\curriculum_graph.py:144:30
Recommendation: Replace magic numbers with named constants or enums
Code context:
    141:         content: dict[str, str],
    142:         learning_objectives: list[str] | None = None,
    143:         cultural_adaptations: dict[str, Any] | None = None,
>>> 144:         estimated_time: int = 30,
    145:     ) -> str:
    146:         """Add educational concept with multi-language content and cultural adaptations."""
    147:         concept_id = self.generate_concept_id(subject, grade, concept)


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (79 total)
File: packages\rag\legacy_src\education\curriculum_graph.py:227:89
Recommendation: Replace magic numbers with named constants or enums
Code context:
    224:     def generate_concept_id(self, subject: str, grade: int, concept: str) -> str:
    225:         """Generate unique concept ID."""
    226:         # Create deterministic ID based on content
>>> 227:         content_hash = hashlib.md5(f"{subject}_{grade}_{concept}".encode()).hexdigest()[:8]
    228:         return f"{subject.lower()}_{grade}_{content_hash}"
    229:
    230:     def estimate_difficulty(self, prerequisites: list[str], grade: int) -> float:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (79 total)
File: packages\rag\legacy_src\education\curriculum_graph.py:232:34
Recommendation: Replace magic numbers with named constants or enums
Code context:
    229:
    230:     def estimate_difficulty(self, prerequisites: list[str], grade: int) -> float:
    231:         """Estimate concept difficulty based on prerequisites and grade level."""
>>> 232:         base_difficulty = grade / 8.0  # Normalize grade to 0-1
    233:
    234:         # Add complexity based on prerequisites
    235:         prereq_complexity = len(prerequisites) * 0.1


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (79 total)
File: packages\rag\legacy_src\education\curriculum_graph.py:235:49
Recommendation: Replace magic numbers with named constants or enums
Code context:
    232:         base_difficulty = grade / 8.0  # Normalize grade to 0-1
    233:
    234:         # Add complexity based on prerequisites
>>> 235:         prereq_complexity = len(prerequisites) * 0.1
    236:
    237:         # Consider depth of prerequisite chain
    238:         max_depth = 0


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (79 total)
File: packages\rag\legacy_src\education\curriculum_graph.py:244:39
Recommendation: Replace magic numbers with named constants or enums
Code context:
    241:                 prereq_depth = len(self.concepts[prereq_id].prerequisites)
    242:                 max_depth = max(max_depth, prereq_depth)
    243:
>>> 244:         depth_complexity = max_depth * 0.05
    245:
    246:         total_difficulty = min(1.0, base_difficulty + prereq_complexity + depth_complexity)
    247:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\legacy_src\education\eli5_chain.py:195:20
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    192:                 (
    193:                     "gravity",
    194:                     "en",
>>> 195:                     "Gravity is like an invisible friend that always pulls things down - that's why your basketball falls when you drop it!",
    196:                     "daily_life",
    197:                     6,
    198:                 ),


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\legacy_src\education\eli5_chain.py:333:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    330:         wandb.log(
    331:             {
    332:                 f"cultural_examples/{region}": len(list(examples)),
>>> 333:                 "cultural_database_updated": True,
    334:                 "region": region,
    335:                 "timestamp": datetime.now(UTC).isoformat(),
    336:             }


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\legacy_src\education\eli5_chain.py:364:35
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    361:                 concept_category="general",
    362:                 age_range=(7, 10),
    363:                 language="en",
>>> 364:                 template_structure="""
    365:                 Let me explain {concept} in a way that's easy to understand!
    366:
    367:                 {concept} is {basic_definition}.


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\legacy_src\education\eli5_chain.py:434:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    431:         await self.create_multilingual_templates()
    432:
    433:     async def create_multilingual_templates(self) -> None:
>>> 434:         """Create templates for different languages."""
    435:         # Spanish templates
    436:         spanish_templates = [
    437:             ExplanationTemplate(


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\legacy_src\education\eli5_chain.py:625:31
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    622:             return response.content[0].text.strip()
    623:
    624:         except Exception as e:
>>> 625:             logger.exception(f"Error getting base explanation from Anthropic: {e}")
    626:
    627:             # Fallback to OpenAI
    628:             try:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\legacy_src\education\eli5_chain.py:638:35
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    635:                 return response.choices[0].message.content.strip()
    636:
    637:             except Exception as e2:
>>> 638:                 logger.exception(f"Error getting base explanation from OpenAI: {e2}")
    639:                 return f"I'll explain {concept} in a simple way that's perfect for someone who is {age} years old."
    640:
    641:     def get_age_descriptor(self, age: int) -> str:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\legacy_src\education\eli5_chain.py:680:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    677:         return suitable_examples[:3]  # Return top 3 examples
    678:
    679:     def select_explanation_template(self, age: int, language: str, concept: str) -> ExplanationTemplate | None:
>>> 680:         """Select most appropriate explanation template."""
    681:         # Filter templates by age range and language
    682:         suitable_templates = [
    683:             template


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\legacy_src\education\eli5_chain.py:726:44
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    723:
    724:         # Create adaptation prompt
    725:         adaptation_prompt = f"""
>>> 726:         Adapt this explanation of "{concept}" to be culturally relevant for someone from {region}:
    727:
    728:         Base explanation: {base_explanation}
    729:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\legacy_src\education\eli5_chain.py:887:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    884:         return min(1.0, engagement_factors)
    885:
    886:     async def update_effectiveness_metrics(self, result: ExplanationResult) -> None:
>>> 887:         """Update effectiveness metrics based on explanation result."""
    888:         # Update cultural example effectiveness
    889:         for example_id in result.cultural_examples_used:
    890:             for examples_list in self.cultural_examples.values():


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (19 calls)
File: packages\rag\legacy_src\education\eli5_chain.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (8 calls)
File: packages\rag\legacy_src\education\eli5_chain.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'text' methods (9 calls)
File: packages\rag\legacy_src\education\eli5_chain.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (88 total)
File: packages\rag\legacy_src\education\eli5_chain.py:168:20
Recommendation: Replace magic numbers with named constants or enums
Code context:
    165:                     "en",
    166:                     "Think of pizza slices! If you cut a pizza into 4 equal pieces and eat 2, you ate 2/4 or 1/2 of the pizza!",
    167:                     "food",
>>> 168:                     6,
    169:                 ),
    170:                 (
    171:                     "multiplication",


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (88 total)
File: packages\rag\legacy_src\education\eli5_chain.py:175:20
Recommendation: Replace magic numbers with named constants or enums
Code context:
    172:                     "en",
    173:                     "If each football team has 11 players, and there are 2 teams on the field, that's 11 × 2 = 22 players total!",
    174:                     "sport",
>>> 175:                     7,
    176:                 ),
    177:                 (
    178:                     "geometry",


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (88 total)
File: packages\rag\legacy_src\education\eli5_chain.py:182:20
Recommendation: Replace magic numbers with named constants or enums
Code context:
    179:                     "en",
    180:                     "A square is like a baseball diamond - 4 equal sides and 4 corners (bases)!",
    181:                     "sport",
>>> 182:                     8,
    183:                 ),
    184:                 # Science
    185:                 (


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (88 total)
File: packages\rag\legacy_src\education\eli5_chain.py:190:20
Recommendation: Replace magic numbers with named constants or enums
Code context:
    187:                     "en",
    188:                     "Plants eat sunlight like we eat breakfast! They use sunlight, water, and air to make their own food and give us oxygen to breathe.",
    189:                     "daily_life",
>>> 190:                     8,
    191:                 ),
    192:                 (
    193:                     "gravity",


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (88 total)
File: packages\rag\legacy_src\education\eli5_chain.py:197:20
Recommendation: Replace magic numbers with named constants or enums
Code context:
    194:                     "en",
    195:                     "Gravity is like an invisible friend that always pulls things down - that's why your basketball falls when you drop it!",
    196:                     "daily_life",
>>> 197:                     6,
    198:                 ),
    199:                 (
    200:                     "ecosystem",


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\auth.py:420:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    417:         return entries[-limit:]
    418:
    419:     async def update_permissions(self, role: str, permissions: list[str]) -> None:
>>> 420:         """Update permissions for a role (admin only)."""
    421:         self.permissions_config[role] = permissions
    422:
    423:         # Update active sessions with the role


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\auth.py:428:22
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    425:             if context.role == role:
    426:                 context.permissions = set(permissions)
    427:
>>> 428:         logger.info(f"Updated permissions for role {role}")
    429:
    430:
    431: # Decorators for easy permission checking


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'datetime' methods (9 calls)
File: packages\rag\mcp_servers\hyperag\auth.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'payload' methods (6 calls)
File: packages\rag\mcp_servers\hyperag\auth.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'time' methods (6 calls)
File: packages\rag\mcp_servers\hyperag\auth.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (7 calls)
File: packages\rag\mcp_servers\hyperag\auth.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (7 calls)
File: packages\rag\mcp_servers\hyperag\auth.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (7 calls)
File: packages\rag\mcp_servers\hyperag\mcp_server.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\models.py:29:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     26:
     27: @dataclass
     28: class QueryPlan:
>>>  29:     """Query planning result from agent reasoning model."""
     30:
     31:     query_id: str
     32:     mode: QueryMode


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\models.py:156:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    153:         plan: QueryPlan,
    154:         context: dict[str, Any] | None = None,
    155:     ) -> KnowledgeGraph:
>>> 156:         """Agent-specific knowledge construction.
    157:
    158:         Args:
    159:             retrieved: List of retrieved nodes


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\models.py:175:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    172:         plan: QueryPlan,
    173:         context: dict[str, Any] | None = None,
    174:     ) -> ReasoningResult:
>>> 175:         """Agent-specific reasoning over knowledge graph.
    176:
    177:         Args:
    178:             knowledge: The knowledge graph to reason over


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\models.py:194:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    191:         """Clean up model resources (optional)."""
    192:
    193:     def update_stats(self, processing_time: float, confidence: float) -> None:
>>> 194:         """Update usage statistics."""
    195:         self.usage_stats["queries_processed"] += 1
    196:         self.usage_stats["total_processing_time"] += processing_time
    197:         self.usage_stats["last_used"] = time.time()


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\models.py:291:28
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    288:             ReasoningStep(
    289:                 step_id="step_2",
    290:                 step_type="answer_generation",
>>> 291:                 description="Generated answer from top nodes",
    292:                 input_data=top_nodes,
    293:                 output_data=answer,
    294:                 confidence=confidence,


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'model' methods (6 calls)
File: packages\rag\mcp_servers\hyperag\models.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (22 total)
File: packages\rag\mcp_servers\hyperag\models.py:33:21
Recommendation: Replace magic numbers with named constants or enums
Code context:
     30:
     31:     query_id: str
     32:     mode: QueryMode
>>>  33:     max_depth: int = 3
     34:     time_budget_ms: int = 2000
     35:     confidence_threshold: float = 0.7
     36:     include_explanations: bool = True


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (22 total)
File: packages\rag\mcp_servers\hyperag\models.py:34:26
Recommendation: Replace magic numbers with named constants or enums
Code context:
     31:     query_id: str
     32:     mode: QueryMode
     33:     max_depth: int = 3
>>>  34:     time_budget_ms: int = 2000
     35:     confidence_threshold: float = 0.7
     36:     include_explanations: bool = True
     37:     search_strategies: list[str] = field(default_factory=lambda: ["vector", "ppr"])


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (22 total)
File: packages\rag\mcp_servers\hyperag\models.py:35:34
Recommendation: Replace magic numbers with named constants or enums
Code context:
     32:     mode: QueryMode
     33:     max_depth: int = 3
     34:     time_budget_ms: int = 2000
>>>  35:     confidence_threshold: float = 0.7
     36:     include_explanations: bool = True
     37:     search_strategies: list[str] = field(default_factory=lambda: ["vector", "ppr"])
     38:     constraints: dict[str, Any] = field(default_factory=dict)


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (22 total)
File: packages\rag\mcp_servers\hyperag\models.py:128:98
Recommendation: Replace magic numbers with named constants or enums
Code context:
    125:         self.agent_id = agent_id
    126:         self.model_name = model_name
    127:         self.config = config or {}
>>> 128:         self.model_id = f"{agent_id}_{model_name}_{hashlib.md5(str(config).encode()).hexdigest()[:8]}"
    129:         self.created_at = time.time()
    130:         self.usage_stats = {
    131:             "queries_processed": 0,


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (22 total)
File: packages\rag\mcp_servers\hyperag\models.py:203:20
Recommendation: Replace magic numbers with named constants or enums
Code context:
    200:         if self.usage_stats["average_confidence"] == 0.0:
    201:             self.usage_stats["average_confidence"] = confidence
    202:         else:
>>> 203:             alpha = 0.1  # Smoothing factor
    204:             self.usage_stats["average_confidence"] = (
    205:                 alpha * confidence + (1 - alpha) * self.usage_stats["average_confidence"]
    206:             )


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\protocol.py:139:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    136:             # Knowledge management
    137:             "hyperag/knowledge/add": self.handle_add_knowledge,
    138:             "hyperag/knowledge/search": self.handle_search_knowledge,
>>> 139:             "hyperag/knowledge/update": self.handle_update_knowledge,
    140:             "hyperag/knowledge/delete": self.handle_delete_knowledge,
    141:             # Adapter management
    142:             "hyperag/adapter/upload": self.handle_upload_adapter,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\protocol.py:140:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    137:             "hyperag/knowledge/add": self.handle_add_knowledge,
    138:             "hyperag/knowledge/search": self.handle_search_knowledge,
    139:             "hyperag/knowledge/update": self.handle_update_knowledge,
>>> 140:             "hyperag/knowledge/delete": self.handle_delete_knowledge,
    141:             # Adapter management
    142:             "hyperag/adapter/upload": self.handle_upload_adapter,
    143:             "hyperag/adapter/list": self.handle_list_adapters,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\protocol.py:411:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    408:         metadata: dict[str, Any] | None = None,
    409:         **kwargs,
    410:     ) -> dict[str, Any]:
>>> 411:         """Handle update knowledge request."""
    412:         if not self.storage_backend:
    413:             msg = "Storage backend not configured"
    414:             raise InternalError(msg)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\protocol.py:421:23
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    418:         return {
    419:             "node_id": node_id,
    420:             "status": "success",
>>> 421:             "message": "Knowledge updated successfully",
    422:         }
    423:
    424:     @require_permission(HypeRAGPermissions.WRITE)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\protocol.py:427:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    424:     @require_permission(HypeRAGPermissions.WRITE)
    425:     @audit_operation("delete_knowledge")
    426:     async def handle_delete_knowledge(self, context: AuthContext, node_id: str, **kwargs) -> dict[str, Any]:
>>> 427:         """Handle delete knowledge request."""
    428:         if not self.storage_backend:
    429:             msg = "Storage backend not configured"
    430:             raise InternalError(msg)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\protocol.py:437:23
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    434:         return {
    435:             "node_id": node_id,
    436:             "status": "success",
>>> 437:             "message": "Knowledge deleted successfully",
    438:         }
    439:
    440:     # Adapter management


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'datetime' methods (9 calls)
File: packages\rag\mcp_servers\hyperag\protocol.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (11 total)
File: packages\rag\mcp_servers\hyperag\protocol.py:270:34
Recommendation: Replace magic numbers with named constants or enums
Code context:
    267:             },
    268:             "guardian_decision": {
    269:                 "action": "APPLY",
>>> 270:                 "semantic_score": 0.9,
    271:                 "utility_score": 0.85,
    272:                 "safety_score": 0.95,
    273:             },


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (11 total)
File: packages\rag\mcp_servers\hyperag\protocol.py:271:33
Recommendation: Replace magic numbers with named constants or enums
Code context:
    268:             "guardian_decision": {
    269:                 "action": "APPLY",
    270:                 "semantic_score": 0.9,
>>> 271:                 "utility_score": 0.85,
    272:                 "safety_score": 0.95,
    273:             },
    274:             "plan": asdict(plan),


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (11 total)
File: packages\rag\mcp_servers\hyperag\protocol.py:272:32
Recommendation: Replace magic numbers with named constants or enums
Code context:
    269:                 "action": "APPLY",
    270:                 "semantic_score": 0.9,
    271:                 "utility_score": 0.85,
>>> 272:                 "safety_score": 0.95,
    273:             },
    274:             "plan": asdict(plan),
    275:         }


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (11 total)
File: packages\rag\mcp_servers\hyperag\protocol.py:298:34
Recommendation: Replace magic numbers with named constants or enums
Code context:
    295:                     target_concept or "unknown",
    296:                 ],
    297:                 "relations": ["relates_to", "enables"],
>>> 298:                 "surprise_score": 0.82,
    299:                 "confidence": 0.73,
    300:                 "explanation": (
    301:                     "Creative connection between " f"{source_concept} and {target_concept or 'related concepts'}"


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (11 total)
File: packages\rag\mcp_servers\hyperag\protocol.py:299:30
Recommendation: Replace magic numbers with named constants or enums
Code context:
    296:                 ],
    297:                 "relations": ["relates_to", "enables"],
    298:                 "surprise_score": 0.82,
>>> 299:                 "confidence": 0.73,
    300:                 "explanation": (
    301:                     "Creative connection between " f"{source_concept} and {target_concept or 'related concepts'}"
    302:                 ),


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\secure_database.py:48:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     45:             raise
     46:
     47:     def _create_secure_schema(self) -> None:
>>>  48:         """Create secure database schema with proper constraints."""
     49:         schema_queries = [
     50:             """
     51:             CREATE TABLE IF NOT EXISTS memories (


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\secure_database.py:50:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     47:     def _create_secure_schema(self) -> None:
     48:         """Create secure database schema with proper constraints."""
     49:         schema_queries = [
>>>  50:             """
     51:             CREATE TABLE IF NOT EXISTS memories (
     52:                 id INTEGER PRIMARY KEY AUTOINCREMENT,
     53:                 content_hash TEXT NOT NULL UNIQUE,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\secure_database.py:62:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     59:                 importance_score REAL DEFAULT 0.0
     60:             )
     61:             """,
>>>  62:             """
     63:             CREATE TABLE IF NOT EXISTS knowledge_graph (
     64:                 id INTEGER PRIMARY KEY AUTOINCREMENT,
     65:                 subject TEXT NOT NULL,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\secure_database.py:74:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     71:                 UNIQUE(subject, predicate, object)
     72:             )
     73:             """,
>>>  74:             """
     75:             CREATE TABLE IF NOT EXISTS embeddings (
     76:                 id INTEGER PRIMARY KEY AUTOINCREMENT,
     77:                 content_hash TEXT NOT NULL UNIQUE,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\secure_database.py:85:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     82:                 FOREIGN KEY (content_hash) REFERENCES memories(content_hash)
     83:             )
     84:             """,
>>>  85:             """
     86:             CREATE INDEX IF NOT EXISTS idx_memories_hash ON memories(content_hash)
     87:             """,
     88:             """


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\secure_database.py:88:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     85:             """
     86:             CREATE INDEX IF NOT EXISTS idx_memories_hash ON memories(content_hash)
     87:             """,
>>>  88:             """
     89:             CREATE INDEX IF NOT EXISTS idx_memories_tags ON memories(tags)
     90:             """,
     91:             """


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\secure_database.py:91:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     88:             """
     89:             CREATE INDEX IF NOT EXISTS idx_memories_tags ON memories(tags)
     90:             """,
>>>  91:             """
     92:             CREATE INDEX IF NOT EXISTS idx_kg_subject ON knowledge_graph(subject)
     93:             """,
     94:             """


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\secure_database.py:94:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     91:             """
     92:             CREATE INDEX IF NOT EXISTS idx_kg_subject ON knowledge_graph(subject)
     93:             """,
>>>  94:             """
     95:             CREATE INDEX IF NOT EXISTS idx_kg_predicate ON knowledge_graph(predicate)
     96:             """,
     97:             """


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\secure_database.py:97:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     94:             """
     95:             CREATE INDEX IF NOT EXISTS idx_kg_predicate ON knowledge_graph(predicate)
     96:             """,
>>>  97:             """
     98:             CREATE INDEX IF NOT EXISTS idx_embeddings_hash ON embeddings(content_hash)
     99:             """,
    100:         ]


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\secure_database.py:122:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    119:         try:
    120:             # Use parameterized query to prevent SQL injection
    121:             self.connection.execute(
>>> 122:                 """
    123:                 INSERT OR REPLACE INTO memories
    124:                 (content_hash, content, tags, importance_score, updated_at)
    125:                 VALUES (?, ?, ?, ?, ?)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\secure_database.py:141:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    138:         """Retrieve memory with secure parameterized query."""
    139:         try:
    140:             cursor = self.connection.execute(
>>> 141:                 """
    142:                 SELECT content, tags, created_at, updated_at, access_count, importance_score
    143:                 FROM memories
    144:                 WHERE content_hash = ?


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\secure_database.py:155:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    152:
    153:             # Update access count securely
    154:             self.connection.execute(
>>> 155:                 "UPDATE memories SET access_count = access_count + 1 WHERE content_hash = ?",
    156:                 (content_hash,),
    157:             )
    158:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\secure_database.py:177:25
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    174:         """Search memories with secure parameterized queries."""
    175:         try:
    176:             # Build secure query with parameterized placeholders
>>> 177:             base_query = """
    178:                 SELECT content_hash, content, tags, created_at, importance_score
    179:                 FROM memories
    180:                 WHERE content LIKE ?


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\secure_database.py:193:26
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    190:
    191:                 base_query += " AND (" + " OR ".join(tag_conditions) + ")"
    192:
>>> 193:             base_query += " ORDER BY importance_score DESC, created_at DESC LIMIT ?"
    194:             params.append(limit)
    195:
    196:             cursor = self.connection.execute(base_query, params)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\secure_database.py:228:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    225:         """Store knowledge graph triple with secure parameterized query."""
    226:         try:
    227:             self.connection.execute(
>>> 228:                 """
    229:                 INSERT OR REPLACE INTO knowledge_graph
    230:                 (subject, predicate, object, confidence, source)
    231:                 VALUES (?, ?, ?, ?, ?)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\secure_database.py:268:25
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    265:                 conditions.append("object = ?")
    266:                 params.append(obj)
    267:
>>> 268:             base_query = "SELECT subject, predicate, object, confidence, source, created_at FROM knowledge_graph"
    269:
    270:             if conditions:
    271:                 base_query += " WHERE " + " AND ".join(conditions)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\secure_database.py:273:26
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    270:             if conditions:
    271:                 base_query += " WHERE " + " AND ".join(conditions)
    272:
>>> 273:             base_query += " ORDER BY confidence DESC, created_at DESC LIMIT ?"
    274:             params.append(limit)
    275:
    276:             cursor = self.connection.execute(base_query, params)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\secure_database.py:304:45
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    301:             stats = {}
    302:
    303:             # Count memories
>>> 304:             cursor = self.connection.execute("SELECT COUNT(*) FROM memories")
    305:             stats["memory_count"] = cursor.fetchone()[0]
    306:
    307:             # Count knowledge triples


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\secure_database.py:308:45
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    305:             stats["memory_count"] = cursor.fetchone()[0]
    306:
    307:             # Count knowledge triples
>>> 308:             cursor = self.connection.execute("SELECT COUNT(*) FROM knowledge_graph")
    309:             stats["knowledge_triple_count"] = cursor.fetchone()[0]
    310:
    311:             # Count embeddings


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\secure_database.py:312:45
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    309:             stats["knowledge_triple_count"] = cursor.fetchone()[0]
    310:
    311:             # Count embeddings
>>> 312:             cursor = self.connection.execute("SELECT COUNT(*) FROM embeddings")
    313:             stats["embedding_count"] = cursor.fetchone()[0]
    314:
    315:             # Database size


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\secure_database.py:317:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    314:
    315:             # Database size
    316:             cursor = self.connection.execute(
>>> 317:                 "SELECT page_count * page_size FROM pragma_page_count(), pragma_page_size()"
    318:             )
    319:             stats["database_size_bytes"] = cursor.fetchone()[0]
    320:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (11 calls)
File: packages\rag\mcp_servers\hyperag\secure_database.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'cursor' methods (7 calls)
File: packages\rag\mcp_servers\hyperag\secure_database.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'params' methods (6 calls)
File: packages\rag\mcp_servers\hyperag\secure_database.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'db' methods (7 calls)
File: packages\rag\mcp_servers\hyperag\secure_database.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (13 total)
File: packages\rag\mcp_servers\hyperag\secure_database.py:164:34
Recommendation: Replace magic numbers with named constants or enums
Code context:
    161:                 "content": row[0],
    162:                 "tags": json.loads(row[1]),
    163:                 "created_at": row[2],
>>> 164:                 "updated_at": row[3],
    165:                 "access_count": row[4] + 1,
    166:                 "importance_score": row[5],
    167:             }


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (13 total)
File: packages\rag\mcp_servers\hyperag\secure_database.py:165:36
Recommendation: Replace magic numbers with named constants or enums
Code context:
    162:                 "tags": json.loads(row[1]),
    163:                 "created_at": row[2],
    164:                 "updated_at": row[3],
>>> 165:                 "access_count": row[4] + 1,
    166:                 "importance_score": row[5],
    167:             }
    168:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (13 total)
File: packages\rag\mcp_servers\hyperag\secure_database.py:166:40
Recommendation: Replace magic numbers with named constants or enums
Code context:
    163:                 "created_at": row[2],
    164:                 "updated_at": row[3],
    165:                 "access_count": row[4] + 1,
>>> 166:                 "importance_score": row[5],
    167:             }
    168:
    169:         except Exception as e:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (13 total)
File: packages\rag\mcp_servers\hyperag\secure_database.py:206:42
Recommendation: Replace magic numbers with named constants or enums
Code context:
    203:                         "content_hash": row[0],
    204:                         "content": row[1],
    205:                         "tags": json.loads(row[2]),
>>> 206:                         "created_at": row[3],
    207:                         "importance_score": row[4],
    208:                     }
    209:                 )


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (13 total)
File: packages\rag\mcp_servers\hyperag\secure_database.py:207:48
Recommendation: Replace magic numbers with named constants or enums
Code context:
    204:                         "content": row[1],
    205:                         "tags": json.loads(row[2]),
    206:                         "created_at": row[3],
>>> 207:                         "importance_score": row[4],
    208:                     }
    209:                 )
    210:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\server.py:76:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     73:         logger.info("HypeRAG MCP Server initialized successfully")
     74:
     75:     async def _load_config(self) -> None:
>>>  76:         """Load configuration from file."""
     77:         try:
     78:             config_file = Path(self.config_path)
     79:             if config_file.exists():


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\server.py:82:30
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     79:             if config_file.exists():
     80:                 with open(config_file) as f:
     81:                     self.config = yaml.safe_load(f) or {}
>>>  82:                 logger.info(f"Loaded configuration from {self.config_path}")
     83:             else:
     84:                 logger.warning(f"Configuration file {self.config_path} not found, using defaults")
     85:                 self.config = self._get_default_config()


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\server.py:215:35
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    212:             except json.JSONDecodeError:
    213:                 await self._send_error(websocket, "PARSE_ERROR", "Invalid JSON")
    214:             except Exception as e:
>>> 215:                 logger.exception(f"Error processing message from {connection_id}: {e!s}")
    216:                 await self._send_error(websocket, "INTERNAL_ERROR", f"Internal error: {e!s}")
    217:
    218:     async def _authenticate_request(self, params: dict[str, Any], ip_address: str) -> AuthContext | None:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\server.py:235:29
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    232:             return None
    233:
    234:         except AuthenticationError as e:
>>> 235:             logger.warning(f"Authentication failed from {ip_address}: {e!s}")
    236:             return None
    237:
    238:     async def _send_error(


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (19 calls)
File: packages\rag\mcp_servers\hyperag\server.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (12 calls)
File: packages\rag\mcp_servers\hyperag\server.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\test_server.py:31:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     28:         logger.info(f"Connected to {self.uri}")
     29:
     30:     async def disconnect(self) -> None:
>>>  31:         """Disconnect from the server."""
     32:         if self.websocket:
     33:             await self.websocket.close()
     34:             logger.info("Disconnected")


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (12 calls)
File: packages\rag\mcp_servers\hyperag\test_server.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'client' methods (12 calls)
File: packages\rag\mcp_servers\hyperag\test_server.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (12 calls)
File: packages\rag\mcp_servers\hyperag\gdc\extractor.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\gdc\registry.py:1:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
>>>   1: """GDC Registry.
      2:
      3: Loads and manages Graph Denial Constraint specifications from YAML configuration.
      4: """


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\gdc\registry.py:20:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     17:
     18:
     19: def load_gdc_registry(config_path: pathlib.Path | None = None) -> dict[str, GDCSpec]:
>>>  20:     """Load GDC specifications from YAML file.
     21:
     22:     Args:
     23:         config_path: Path to GDC rules YAML file (optional)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\gdc\registry.py:83:40
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     80:             msg = f"Invalid GDC specification: {e}"
     81:             raise ValueError(msg)
     82:
>>>  83:     logger.info(f"Loaded {len(registry)} GDC specifications from {config_path}")
     84:     return registry
     85:
     86:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'registry' methods (6 calls)
File: packages\rag\mcp_servers\hyperag\gdc\registry.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\gdc\specs.py:80:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     77:
     78:     @classmethod
     79:     def from_dict(cls, data: dict[str, Any]) -> "Violation":
>>>  80:         """Create violation from dictionary."""
     81:         data = data.copy()
     82:         if "detected_at" in data and isinstance(data["detected_at"], str):
     83:             data["detected_at"] = datetime.fromisoformat(data["detected_at"])


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\gdc\specs.py:87:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     84:         return cls(**data)
     85:
     86:     def get_affected_node_ids(self) -> list[str]:
>>>  87:         """Extract node IDs from violation."""
     88:         node_ids = []
     89:         for node in self.nodes:
     90:             if "id" in node:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\gdc\specs.py:95:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     92:         return node_ids
     93:
     94:     def get_affected_edge_ids(self) -> list[str]:
>>>  95:         """Extract edge IDs from violation."""
     96:         edge_ids = []
     97:         for edge in self.edges:
     98:             if "id" in edge:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\guardian\audit.py:138:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    135:
    136:
    137: def cleanup_old_records(days: int = 30):
>>> 138:     """Clean up audit records older than specified days.
    139:
    140:     Args:
    141:         days: Records older than this will be deleted


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\guardian\gate.py:73:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     70:         )
     71:
     72:     def _load_policies(self) -> dict[str, Any]:
>>>  73:         """Load policies from YAML configuration file."""
     74:         try:
     75:             with open(self.policy_path) as f:
     76:                 return yaml.safe_load(f)


LONG_PARAMETER_LIST: Function '_generate_rationale' has 6 parameters (>5)
File: packages\rag\mcp_servers\hyperag\guardian\gate.py:412:4
Recommendation: Use parameter objects, data classes, or keyword-only arguments
Code context:
    409:             return "QUARANTINE"
    410:         return "REJECT"
    411:
>>> 412:     def _generate_rationale(
    413:         self,
    414:         decision: Decision,
    415:         score: float,


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (16 calls)
File: packages\rag\mcp_servers\hyperag\guardian\gate.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'graph' methods (8 calls)
File: packages\rag\mcp_servers\hyperag\guardian\gate.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'factors' methods (7 calls)
File: packages\rag\mcp_servers\hyperag\guardian\gate.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'components' methods (10 calls)
File: packages\rag\mcp_servers\hyperag\guardian\gate.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (58 total)
File: packages\rag\mcp_servers\hyperag\guardian\gate.py:40:24
Recommendation: Replace magic numbers with named constants or enums
Code context:
     37:     """Creative bridge structure for validation."""
     38:
     39:     id: str
>>>  40:     confidence: float = 0.7
     41:     bridge_type: str = "semantic"
     42:     source_nodes: list[str] = None
     43:     target_nodes: list[str] = None


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (58 total)
File: packages\rag\mcp_servers\hyperag\guardian\gate.py:67:89
Recommendation: Replace magic numbers with named constants or enums
Code context:
     64:         self.metrics.set_policy_info(
     65:             {
     66:                 "version": "1.0",
>>>  67:                 "confidence_threshold": self.policies.get("thresholds", {}).get("apply", 0.8),
     68:                 "quarantine_threshold": self.policies.get("thresholds", {}).get("quarantine", 0.4),
     69:             }
     70:         )


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (58 total)
File: packages\rag\mcp_servers\hyperag\guardian\gate.py:68:94
Recommendation: Replace magic numbers with named constants or enums
Code context:
     65:             {
     66:                 "version": "1.0",
     67:                 "confidence_threshold": self.policies.get("thresholds", {}).get("apply", 0.8),
>>>  68:                 "quarantine_threshold": self.policies.get("thresholds", {}).get("quarantine", 0.4),
     69:             }
     70:         )
     71:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (58 total)
File: packages\rag\mcp_servers\hyperag\guardian\gate.py:80:38
Recommendation: Replace magic numbers with named constants or enums
Code context:
     77:         except FileNotFoundError:
     78:             return {
     79:                 "weights": {
>>>  80:                     "structural_fix": 0.4,
     81:                     "domain_veracity": 0.4,
     82:                     "evidence_strength": 0.2,
     83:                 },


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (58 total)
File: packages\rag\mcp_servers\hyperag\guardian\gate.py:81:39
Recommendation: Replace magic numbers with named constants or enums
Code context:
     78:             return {
     79:                 "weights": {
     80:                     "structural_fix": 0.4,
>>>  81:                     "domain_veracity": 0.4,
     82:                     "evidence_strength": 0.2,
     83:                 },
     84:                 "thresholds": {"apply": 0.80, "quarantine": 0.40},


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\guardian\metrics.py:103:52
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    100:
    101:             # Log significant changes
    102:             if abs(self.gauge_value - old_value) > 0.1:
>>> 103:                 logger.info(f"MockMetric {self.name}: gauge changed from {old_value:.3f} to {self.gauge_value:.3f}")
    104:
    105:         def info(self, info_dict) -> None:
    106:             """Store info metric data."""


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\guardian\metrics.py:213:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    210:
    211:         self.guardian_confidence_score = Histogram(
    212:             "hyperag_guardian_confidence_score",
>>> 213:             "Confidence scores from Guardian evaluations",
    214:             ["component", "domain"],
    215:             buckets=[0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0],
    216:         )


LONG_PARAMETER_LIST: Function 'record_decision' has 6 parameters (>5)
File: packages\rag\mcp_servers\hyperag\guardian\metrics.py:264:4
Recommendation: Use parameter objects, data classes, or keyword-only arguments
Code context:
    261:
    262:         logger.info("Guardian metrics initialized")
    263:
>>> 264:     def record_decision(
    265:         self,
    266:         decision: str,
    267:         domain: str = "general",


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\guardian\metrics.py:381:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    378:             logger.exception(f"Failed to record Guardian error metrics: {e}")
    379:
    380:     def update_quarantine_count(self, domain: str, count: int) -> None:
>>> 381:         """Update active quarantine count."""
    382:         if not self.enabled:
    383:             return
    384:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\guardian\metrics.py:388:31
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    385:         try:
    386:             self.guardian_active_quarantines.set(count, domain=domain)
    387:         except Exception as e:
>>> 388:             logger.exception(f"Failed to update quarantine count metrics: {e}")
    389:
    390:     def set_policy_info(self, policy_info: dict[str, Any]) -> None:
    391:         """Set Guardian policy information."""


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (25 calls)
File: packages\rag\mcp_servers\hyperag\guardian\metrics.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (23 total)
File: packages\rag\mcp_servers\hyperag\guardian\metrics.py:81:34
Recommendation: Replace magic numbers with named constants or enums
Code context:
     78:                 self.values = self.values[-1000:]
     79:
     80:             # Log statistical summary every 25 observations
>>>  81:             if len(self.values) % 25 == 0:
     82:                 stats = self.get_stats()
     83:                 logger.info(
     84:                     f"MockMetric {self.name}: {len(self.values)} observations, "


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (23 total)
File: packages\rag\mcp_servers\hyperag\guardian\metrics.py:102:51
Recommendation: Replace magic numbers with named constants or enums
Code context:
     99:             self.gauge_value = float(value)
    100:
    101:             # Log significant changes
>>> 102:             if abs(self.gauge_value - old_value) > 0.1:
    103:                 logger.info(f"MockMetric {self.name}: gauge changed from {old_value:.3f} to {self.gauge_value:.3f}")
    104:
    105:         def info(self, info_dict) -> None:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (23 total)
File: packages\rag\mcp_servers\hyperag\guardian\metrics.py:208:21
Recommendation: Replace magic numbers with named constants or enums
Code context:
    205:             "hyperag_guardian_decision_duration_seconds",
    206:             "Time taken for Guardian Gate decisions",
    207:             ["decision_type", "domain"],
>>> 208:             buckets=[0.001, 0.005, 0.010, 0.020, 0.050, 0.100, 0.200, 0.500, 1.0],
    209:         )
    210:
    211:         self.guardian_confidence_score = Histogram(


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (23 total)
File: packages\rag\mcp_servers\hyperag\guardian\metrics.py:208:28
Recommendation: Replace magic numbers with named constants or enums
Code context:
    205:             "hyperag_guardian_decision_duration_seconds",
    206:             "Time taken for Guardian Gate decisions",
    207:             ["decision_type", "domain"],
>>> 208:             buckets=[0.001, 0.005, 0.010, 0.020, 0.050, 0.100, 0.200, 0.500, 1.0],
    209:         )
    210:
    211:         self.guardian_confidence_score = Histogram(


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (23 total)
File: packages\rag\mcp_servers\hyperag\guardian\metrics.py:208:35
Recommendation: Replace magic numbers with named constants or enums
Code context:
    205:             "hyperag_guardian_decision_duration_seconds",
    206:             "Time taken for Guardian Gate decisions",
    207:             ["decision_type", "domain"],
>>> 208:             buckets=[0.001, 0.005, 0.010, 0.020, 0.050, 0.100, 0.200, 0.500, 1.0],
    209:         )
    210:
    211:         self.guardian_confidence_score = Histogram(


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\lora\adapter_loader.py:34:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     31:
     32:     @classmethod
     33:     def from_dict(cls, data: dict[str, Any]) -> "AdapterSignature":
>>>  34:         """Create signature from dictionary."""
     35:         return cls(
     36:             sha256=data["sha"],
     37:             domain=data["domain"],


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\lora\adapter_loader.py:66:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     63:         self._load_registry()
     64:
     65:     def _load_registry(self) -> None:
>>>  66:         """Load adapter registry from disk."""
     67:         try:
     68:             if self.registry_path.exists():
     69:                 with open(self.registry_path) as f:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\lora\adapter_loader.py:75:57
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     72:                 for adapter_id, sig_data in data.get("adapters", {}).items():
     73:                     self.registry[adapter_id] = AdapterSignature.from_dict(sig_data)
     74:
>>>  75:                 logger.info(f"Loaded {len(self.registry)} adapters from registry")
     76:         except Exception as e:
     77:             logger.exception(f"Failed to load adapter registry: {e}")
     78:             self.registry = {}


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\lora\adapter_loader.py:246:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    243:         return result
    244:
    245:     def remove_adapter(self, adapter_id: str) -> bool:
>>> 246:         """Remove adapter from registry.
    247:
    248:         Args:
    249:             adapter_id: ID of adapter to remove


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\lora\adapter_loader.py:361:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    358:
    359:
    360: def create_adapter_registry(registry_path: str | None = None) -> AdapterRegistry:
>>> 361:     """Create adapter registry instance."""
    362:     return AdapterRegistry(registry_path)
    363:
    364:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\lora\adapter_loader.py:368:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    365: def create_secure_loader(
    366:     registry: AdapterRegistry | None = None,
    367: ) -> SecureAdapterLoader:
>>> 368:     """Create secure adapter loader instance."""
    369:     return SecureAdapterLoader(registry)


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'datetime' methods (7 calls)
File: packages\rag\mcp_servers\hyperag\lora\adapter_loader.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (16 calls)
File: packages\rag\mcp_servers\hyperag\lora\adapter_loader.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\lora\generate_data.py:2:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
      1: #!/usr/bin/env python3
>>>   2: """HypeRAG LoRA Training Data Generator.
      3:
      4: Generates domain-specific training data for LoRA fine-tuning by:
      5: 1. Reusing inference templates from prompt_bank.md


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\lora\generate_data.py:126:14
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    123: - Consider drug interactions and contraindications
    124: - Validate clinical data against medical guidelines
    125: - Flag high-risk modifications for human review""",
>>> 126:     "movies": """You are a movie knowledge graph repair assistant. Focus on:
    127: - Maintaining data consistency across movie metadata
    128: - Resolving entity duplicates and ambiguities
    129: - Preserving user-generated content when possible


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\lora\generate_data.py:159:41
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    156:         instruction = f"""
    157: Analyze the following knowledge graph violation and propose a repair:
    158:
>>> 159: **Violation**: {violation["description"]}
    160:
    161: **Available Operations**:
    162: - add_edge(source, edge_type, target)


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'repair' methods (8 calls)
File: packages\rag\mcp_servers\hyperag\lora\generate_data.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'parser' methods (6 calls)
File: packages\rag\mcp_servers\hyperag\lora\generate_data.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (14 total)
File: packages\rag\mcp_servers\hyperag\lora\generate_data.py:140:48
Recommendation: Replace magic numbers with named constants or enums
Code context:
    137:
    138:
    139: class LoRADataGenerator:
>>> 140:     def __init__(self, domain: str, seed: int = 42) -> None:
    141:         self.domain = domain
    142:         self.rng = random.Random(seed)
    143:         self.stats = {


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (14 total)
File: packages\rag\mcp_servers\hyperag\lora\generate_data.py:185:43
Recommendation: Replace magic numbers with named constants or enums
Code context:
    182:         completion = {
    183:             "operation": repair["operation"],
    184:             "rationale": repair["rationale"],
>>> 185:             "confidence": self.rng.uniform(0.7, 0.95),
    186:         }
    187:
    188:         # Add operation-specific parameters


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (14 total)
File: packages\rag\mcp_servers\hyperag\lora\generate_data.py:185:48
Recommendation: Replace magic numbers with named constants or enums
Code context:
    182:         completion = {
    183:             "operation": repair["operation"],
    184:             "rationale": repair["rationale"],
>>> 185:             "confidence": self.rng.uniform(0.7, 0.95),
    186:         }
    187:
    188:         # Add operation-specific parameters


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (14 total)
File: packages\rag\mcp_servers\hyperag\lora\generate_data.py:225:58
Recommendation: Replace magic numbers with named constants or enums
Code context:
    222:             violation_desc = violation_template["template"]
    223:             if self.domain == "medical":
    224:                 violation_desc = violation_desc.format(
>>> 225:                     patient_id=f"P{self.rng.randint(1000, 9999)}",
    226:                     drug=self.rng.choice(["Aspirin", "Penicillin", "Warfarin", "Ibuprofen"]),
    227:                     allergen=self.rng.choice(["Penicillin", "Sulfa", "Aspirin", "NSAIDs"]),
    228:                     treatment=f"TX{self.rng.randint(100, 999)}",


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (14 total)
File: packages\rag\mcp_servers\hyperag\lora\generate_data.py:228:57
Recommendation: Replace magic numbers with named constants or enums
Code context:
    225:                     patient_id=f"P{self.rng.randint(1000, 9999)}",
    226:                     drug=self.rng.choice(["Aspirin", "Penicillin", "Warfarin", "Ibuprofen"]),
    227:                     allergen=self.rng.choice(["Penicillin", "Sulfa", "Aspirin", "NSAIDs"]),
>>> 228:                     treatment=f"TX{self.rng.randint(100, 999)}",
    229:                     future_date="2025-12-01",
    230:                     corrected_date="2024-12-01",
    231:                     standard_dosage="5mg daily",


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\lora\registry.py:41:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     38:
     39:     @classmethod
     40:     def from_dict(cls, data: dict[str, Any]) -> "AdapterEntry":
>>>  41:         """Create from dictionary."""
     42:         return cls(**data)
     43:
     44:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\lora\registry.py:61:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     58:             self._load_registry()
     59:
     60:     def _load_registry(self) -> None:
>>>  61:         """Load registry from disk."""
     62:         try:
     63:             with open(self.registry_path, encoding="utf-8") as f:
     64:                 data = json.load(f)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\lora\registry.py:66:52
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     63:             with open(self.registry_path, encoding="utf-8") as f:
     64:                 data = json.load(f)
     65:                 self.entries = {k: AdapterEntry.from_dict(v) for k, v in data.get("adapters", {}).items()}
>>>  66:             logger.info(f"Loaded {len(self.entries)} adapters from registry")
     67:         except Exception as e:
     68:             logger.exception(f"Failed to load registry: {e}")
     69:             self.entries = {}


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (8 calls)
File: packages\rag\mcp_servers\hyperag\lora\registry.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (14 calls)
File: packages\rag\mcp_servers\hyperag\lora\registry.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\lora\train_adapter.py:99:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     96:             self.model = self.model.to(self.device)
     97:
     98:     def create_lora_model(self, lora_config: dict[str, Any] | None = None) -> None:
>>>  99:         """Create LoRA model with specified configuration."""
    100:         if lora_config is None:
    101:             lora_config = {
    102:                 "r": 16,  # LoRA rank


LONG_PARAMETER_LIST: Function 'train' has 10 parameters (>5)
File: packages\rag\mcp_servers\hyperag\lora\train_adapter.py:119:4
Recommendation: Use parameter objects, data classes, or keyword-only arguments
Code context:
    116:         self.peft_model = get_peft_model(self.model, peft_config)
    117:         self.peft_model.print_trainable_parameters()
    118:
>>> 119:     def train(
    120:         self,
    121:         train_data_path: Path,
    122:         eval_data_path: Path | None = None,


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (7 calls)
File: packages\rag\mcp_servers\hyperag\lora\train_adapter.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'trainer' methods (6 calls)
File: packages\rag\mcp_servers\hyperag\lora\train_adapter.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'parser' methods (13 calls)
File: packages\rag\mcp_servers\hyperag\lora\train_adapter.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (17 total)
File: packages\rag\mcp_servers\hyperag\lora\train_adapter.py:35:69
Recommendation: Replace magic numbers with named constants or enums
Code context:
     32: class RepairDataset(Dataset):
     33:     """Dataset for knowledge graph repair tasks."""
     34:
>>>  35:     def __init__(self, data_path: Path, tokenizer, max_length: int = 512) -> None:
     36:         self.tokenizer = tokenizer
     37:         self.max_length = max_length
     38:         self.examples = []


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (17 total)
File: packages\rag\mcp_servers\hyperag\lora\train_adapter.py:102:21
Recommendation: Replace magic numbers with named constants or enums
Code context:
     99:         """Create LoRA model with specified configuration."""
    100:         if lora_config is None:
    101:             lora_config = {
>>> 102:                 "r": 16,  # LoRA rank
    103:                 "lora_alpha": 32,
    104:                 "target_modules": ["q_proj", "v_proj", "k_proj", "o_proj"],
    105:                 "lora_dropout": 0.1,


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (17 total)
File: packages\rag\mcp_servers\hyperag\lora\train_adapter.py:103:30
Recommendation: Replace magic numbers with named constants or enums
Code context:
    100:         if lora_config is None:
    101:             lora_config = {
    102:                 "r": 16,  # LoRA rank
>>> 103:                 "lora_alpha": 32,
    104:                 "target_modules": ["q_proj", "v_proj", "k_proj", "o_proj"],
    105:                 "lora_dropout": 0.1,
    106:                 "bias": "none",


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (17 total)
File: packages\rag\mcp_servers\hyperag\lora\train_adapter.py:105:32
Recommendation: Replace magic numbers with named constants or enums
Code context:
    102:                 "r": 16,  # LoRA rank
    103:                 "lora_alpha": 32,
    104:                 "target_modules": ["q_proj", "v_proj", "k_proj", "o_proj"],
>>> 105:                 "lora_dropout": 0.1,
    106:                 "bias": "none",
    107:                 "task_type": TaskType.CAUSAL_LM,
    108:             }


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (17 total)
File: packages\rag\mcp_servers\hyperag\lora\train_adapter.py:124:26
Recommendation: Replace magic numbers with named constants or enums
Code context:
    121:         train_data_path: Path,
    122:         eval_data_path: Path | None = None,
    123:         output_dir: Path = Path("./lora_output"),
>>> 124:         num_epochs: int = 3,
    125:         batch_size: int = 4,
    126:         learning_rate: float = 2e-4,
    127:         warmup_steps: int = 100,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\base.py:87:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     84:             self.created_at = datetime.now()
     85:
     86:     def update_access(self) -> None:
>>>  87:         """Update access tracking."""
     88:         self.last_accessed = datetime.now()
     89:         self.access_count += 1
     90:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\base.py:162:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    159:             self.participants.append(self.target_id)
    160:
    161:     def update_access(self) -> None:
>>> 162:         """Update access tracking."""
    163:         self.last_accessed = datetime.now()
    164:         self.access_count += 1
    165:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\base.py:176:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    173:             self.confidence = min(1.0, self.confidence + confidence_gain)
    174:
    175:     def update_bayesian_confidence(self, prior: float, likelihood: float) -> None:
>>> 176:         """Update confidence using Bayesian inference."""
    177:         # Simple Bayesian update: posterior ∝ likelihood × prior
    178:         posterior = (likelihood * prior) / ((likelihood * prior) + ((1 - likelihood) * (1 - prior)))
    179:         self.confidence = posterior


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\base.py:253:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    250:         self.dimension = dimension
    251:
    252:     def create_embedding(self, text: str) -> np.ndarray:
>>> 253:         """Create embedding for text (mock implementation)."""
    254:         # In production, this would use a real embedding model
    255:         np.random.seed(hash(text) % 2**32)
    256:         return np.random.rand(self.dimension).astype(np.float32)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\base.py:285:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    282:
    283:
    284: def create_episodic_node(content: str, user_id: str | None = None, ttl_hours: int = 168) -> Node:  # 7 days default
>>> 285:     """Create a new episodic memory node."""
    286:     return Node(
    287:         id=str(uuid.uuid4()),
    288:         content=content,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\base.py:300:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    297:
    298:
    299: def create_semantic_node(content: str, confidence: float = 0.8) -> Node:
>>> 300:     """Create a new semantic memory node."""
    301:     return Node(
    302:         id=str(uuid.uuid4()),
    303:         content=content,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\base.py:319:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    316:     confidence: float = 1.0,
    317:     user_id: str | None = None,
    318: ) -> Edge:
>>> 319:     """Create a hyperedge connecting multiple nodes."""
    320:     # Use first two participants as source/target for compatibility
    321:     source_id = participants[0] if participants else str(uuid.uuid4())
    322:     target_id = participants[1] if len(participants) > 1 else str(uuid.uuid4())


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'uuid' methods (8 calls)
File: packages\rag\mcp_servers\hyperag\memory\base.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'datetime' methods (9 calls)
File: packages\rag\mcp_servers\hyperag\memory\base.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (13 total)
File: packages\rag\mcp_servers\hyperag\memory\base.py:70:30
Recommendation: Replace magic numbers with named constants or enums
Code context:
     67:     popularity_rank: int = 0
     68:
     69:     # Temporal properties
>>>  70:     importance_score: float = 0.5
     71:     decay_rate: float = 0.1
     72:     ttl: int | None = None  # seconds
     73:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (13 total)
File: packages\rag\mcp_servers\hyperag\memory\base.py:71:24
Recommendation: Replace magic numbers with named constants or enums
Code context:
     68:
     69:     # Temporal properties
     70:     importance_score: float = 0.5
>>>  71:     decay_rate: float = 0.1
     72:     ttl: int | None = None  # seconds
     73:
     74:     # Uncertainty tracking


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (13 total)
File: packages\rag\mcp_servers\hyperag\memory\base.py:100:53
Recommendation: Replace magic numbers with named constants or enums
Code context:
     97:             return 0.0
     98:
     99:         time_diff = (current_time - self.created_at).total_seconds()
>>> 100:         return np.exp(-self.decay_rate * time_diff / 3600)  # Hourly decay
    101:
    102:     def is_expired(self, current_time: datetime | None = None) -> bool:
    103:         """Check if node has expired based on TTL."""


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (13 total)
File: packages\rag\mcp_servers\hyperag\memory\base.py:166:66
Recommendation: Replace magic numbers with named constants or enums
Code context:
    163:         self.last_accessed = datetime.now()
    164:         self.access_count += 1
    165:
>>> 166:     def add_evidence(self, doc_id: str, confidence_boost: float = 0.1) -> None:
    167:         """Add evidence supporting this edge."""
    168:         if doc_id not in self.source_docs:
    169:             self.source_docs.append(doc_id)


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (13 total)
File: packages\rag\mcp_servers\hyperag\memory\base.py:249:40
Recommendation: Replace magic numbers with named constants or enums
Code context:
    246: class EmbeddingManager:
    247:     """Manages embeddings for memory systems."""
    248:
>>> 249:     def __init__(self, dimension: int = 768) -> None:
    250:         self.dimension = dimension
    251:
    252:     def create_embedding(self, text: str) -> np.ndarray:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\consolidator.py:523:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    520:             result.errors.append(error_msg)
    521:
    522:     async def _update_communities(self, result: ConsolidationResult) -> None:
>>> 523:         """Update community structure after consolidation."""
    524:         try:
    525:             if hasattr(self.semantic, "detect_communities"):
    526:                 communities = await self.semantic.detect_communities()


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\consolidator.py:530:26
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    527:                 result.metadata["communities_detected"] = len(set(communities.values()))
    528:
    529:         except Exception as e:
>>> 530:             error_msg = f"Community update failed: {e!s}"
    531:             logger.exception(error_msg)
    532:             result.errors.append(error_msg)
    533:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\consolidator.py:573:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    570:     async def _validate_consolidation_with_guardian(
    571:         self, item: Any, consolidation_type: str, result: ConsolidationResult
    572:     ) -> bool:
>>> 573:         """Validate consolidation items through Guardian Gate.
    574:
    575:         Args:
    576:             item: The hyperedge or semantic node to validate


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\consolidator.py:636:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    633:     hypergraph_kg: HypergraphKG,
    634:     config: ConsolidationConfig | None = None,
    635: ) -> MemoryConsolidator:
>>> 636:     """Create a memory consolidator with the given backends."""
    637:     if config is None:
    638:         config = ConsolidationConfig()
    639:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (25 calls)
File: packages\rag\mcp_servers\hyperag\memory\consolidator.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (12 calls)
File: packages\rag\mcp_servers\hyperag\memory\consolidator.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (21 total)
File: packages\rag\mcp_servers\hyperag\memory\consolidator.py:29:34
Recommendation: Replace magic numbers with named constants or enums
Code context:
     26:     """Configuration for memory consolidation process."""
     27:
     28:     # Thresholds for consolidation
>>>  29:     confidence_threshold: float = 0.7  # Min confidence to consolidate
     30:     evidence_threshold: int = 3  # Min evidence count for episodic edges
     31:     frequency_threshold: int = 2  # Min occurrence count for patterns
     32:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (21 total)
File: packages\rag\mcp_servers\hyperag\memory\consolidator.py:30:30
Recommendation: Replace magic numbers with named constants or enums
Code context:
     27:
     28:     # Thresholds for consolidation
     29:     confidence_threshold: float = 0.7  # Min confidence to consolidate
>>>  30:     evidence_threshold: int = 3  # Min evidence count for episodic edges
     31:     frequency_threshold: int = 2  # Min occurrence count for patterns
     32:
     33:     # Timing parameters


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (21 total)
File: packages\rag\mcp_servers\hyperag\memory\consolidator.py:34:40
Recommendation: Replace magic numbers with named constants or enums
Code context:
     31:     frequency_threshold: int = 2  # Min occurrence count for patterns
     32:
     33:     # Timing parameters
>>>  34:     consolidation_interval_hours: int = 8  # How often to run consolidation
     35:     max_age_hours: int = 24  # Max age of episodic memories to consider
     36:     batch_size: int = 100  # Max items per consolidation batch
     37:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (21 total)
File: packages\rag\mcp_servers\hyperag\memory\consolidator.py:35:25
Recommendation: Replace magic numbers with named constants or enums
Code context:
     32:
     33:     # Timing parameters
     34:     consolidation_interval_hours: int = 8  # How often to run consolidation
>>>  35:     max_age_hours: int = 24  # Max age of episodic memories to consider
     36:     batch_size: int = 100  # Max items per consolidation batch
     37:
     38:     # Pattern detection


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (21 total)
File: packages\rag\mcp_servers\hyperag\memory\consolidator.py:40:33
Recommendation: Replace magic numbers with named constants or enums
Code context:
     37:
     38:     # Pattern detection
     39:     enable_pattern_detection: bool = True
>>>  40:     min_pattern_support: float = 0.3  # Min support for frequent patterns
     41:     max_pattern_length: int = 5  # Max length of sequential patterns
     42:
     43:     # Community-based consolidation


LONG_PARAMETER_LIST: Function '__init__' has 6 parameters (>5)
File: packages\rag\mcp_servers\hyperag\memory\hippo_index.py:91:4
Recommendation: Use parameter objects, data classes, or keyword-only arguments
Code context:
     88:     - Qdrant for vector similarity
     89:     """
     90:
>>>  91:     def __init__(
     92:         self,
     93:         db_path: str = ":memory:",
     94:         redis_url: str = "redis://localhost:6379",


HARDCODED_PATH: Hardcoded path or URL detected
File: packages\rag\mcp_servers\hyperag\memory\hippo_index.py:95:26
Recommendation: Use configuration files, environment variables, or path utilities
Code context:
     92:         self,
     93:         db_path: str = ":memory:",
     94:         redis_url: str = "redis://localhost:6379",
>>>  95:         qdrant_url: str = "http://localhost:6333",
     96:         embedding_dim: int = 768,
     97:         consolidator: "MemoryConsolidator | None" = None,
     98:     ) -> None:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\hippo_index.py:200:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    197:             embedding_list = node.embedding.tolist() if node.embedding is not None else None
    198:
    199:             self.duckdb_conn.execute(
>>> 200:                 """
    201:                 INSERT INTO hippo_nodes (
    202:                     id, content, node_type, memory_type, confidence, embedding,
    203:                     created_at, user_id, gdc_flags, popularity_rank,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\hippo_index.py:261:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    258:         """Store an edge in episodic memory."""
    259:         try:
    260:             self.duckdb_conn.execute(
>>> 261:                 """
    262:                 INSERT INTO hippo_edges (
    263:                     id, source_id, target_id, relation, confidence, participants,
    264:                     memory_type, created_at, gdc_flags, popularity_rank,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\hippo_index.py:310:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    307:             embedding_list = document.embedding.tolist() if document.embedding is not None else None
    308:
    309:             self.duckdb_conn.execute(
>>> 310:                 """
    311:                 INSERT INTO hippo_documents (
    312:                     id, content, doc_type, created_at, user_id,
    313:                     embedding, confidence, metadata


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\hippo_index.py:370:20
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    367:
    368:             # Execute query
    369:             results = self.duckdb_conn.execute(
>>> 370:                 f"""
    371:                 SELECT id, content, node_type, memory_type, confidence,
    372:                        embedding, created_at, last_accessed, access_count,
    373:                        user_id, gdc_flags, popularity_rank, importance_score,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\hippo_index.py:376:36
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    373:                        user_id, gdc_flags, popularity_rank, importance_score,
    374:                        decay_rate, ttl, uncertainty, confidence_type, metadata
    375:                 FROM hippo_nodes
>>> 376:                 WHERE {where_clause}
    377:                 ORDER BY importance_score DESC, created_at DESC
    378:                 LIMIT ?
    379:             """,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\hippo_index.py:456:20
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    453:             for result in search_results:
    454:                 node_id = result.id
    455:                 node_data = self.duckdb_conn.execute(
>>> 456:                     """
    457:                     SELECT id, content, node_type, memory_type, confidence,
    458:                            embedding, created_at, last_accessed, access_count,
    459:                            user_id, gdc_flags, popularity_rank, importance_score,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\hippo_index.py:514:20
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    511:
    512:         try:
    513:             results = self.duckdb_conn.execute(
>>> 514:                 f"""
    515:                 SELECT id, content, node_type, memory_type, confidence,
    516:                        embedding, created_at, last_accessed, access_count,
    517:                        user_id, gdc_flags, popularity_rank, importance_score,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\hippo_index.py:520:36
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    517:                        user_id, gdc_flags, popularity_rank, importance_score,
    518:                        decay_rate, ttl, uncertainty, confidence_type, metadata
    519:                 FROM hippo_nodes
>>> 520:                 WHERE {where_clause}
    521:                 ORDER BY created_at DESC
    522:                 LIMIT ?
    523:             """,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\hippo_index.py:567:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    564:             current_time = datetime.now()
    565:
    566:             expired_nodes = self.duckdb_conn.execute(
>>> 567:                 """
    568:                 SELECT id FROM hippo_nodes
    569:                 WHERE ttl IS NOT NULL
    570:                 AND (EXTRACT(EPOCH FROM ? - created_at)) > ttl


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\hippo_index.py:583:24
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    580:                 placeholders = ",".join(["?" for _ in expired_ids])
    581:
    582:                 self.duckdb_conn.execute(
>>> 583:                     f"""
    584:                     DELETE FROM hippo_nodes WHERE id IN ({placeholders})
    585:                 """,
    586:                     expired_ids,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\hippo_index.py:610:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    607:         try:
    608:             # Get node counts
    609:             node_stats = self.duckdb_conn.execute(
>>> 610:                 """
    611:                 SELECT
    612:                     COUNT(*) as total_nodes,
    613:                     COUNT(CASE WHEN memory_type = 'episodic' THEN 1 END) as episodic_nodes,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\hippo_index.py:621:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    618:
    619:             # Get edge count
    620:             edge_count = self.duckdb_conn.execute(
>>> 621:                 """
    622:                 SELECT COUNT(*) FROM hippo_edges
    623:             """
    624:             ).fetchone()[0]


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\hippo_index.py:698:31
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    695:                 self.duckdb_conn.execute(sql)
    696:             except Exception as e:
    697:                 # Some indexes might not be supported in all DuckDB versions
>>> 698:                 logger.warning("Failed to create index: %s", e)
    699:
    700:         # Create materialized views
    701:         for sql in self.schema.get_materialized_views_sql():


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\hippo_index.py:705:31
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    702:             try:
    703:                 self.duckdb_conn.execute(sql)
    704:             except Exception as e:
>>> 705:                 logger.warning("Failed to create materialized view: %s", e)
    706:
    707:         logger.info("DuckDB schema setup complete")
    708:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\hippo_index.py:724:32
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    721:                         collection_name=collection_name,
    722:                         vectors_config=VectorParams(size=config["vectors"]["size"], distance=Distance.COSINE),
    723:                     )
>>> 724:                     logger.info("Created Qdrant collection: %s", collection_name)
    725:
    726:             except Exception as e:
    727:                 logger.exception("Failed to setup Qdrant collection %s: %s", collection_name, e)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\hippo_index.py:782:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    779:
    780:
    781: def create_episodic_document(content: str, doc_type: str = "episodic", user_id: str | None = None) -> EpisodicDocument:
>>> 782:     """Create an episodic document."""
    783:     return EpisodicDocument(
    784:         content=content,
    785:         doc_type=doc_type,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\hippo_index.py:793:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    790:
    791:
    792: def create_hippo_node(content: str, user_id: str | None = None, ttl_hours: int = 168) -> HippoNode:  # 7 days default
>>> 793:     """Create a hippocampal episodic node."""
    794:     return HippoNode(
    795:         content=content,
    796:         user_id=user_id,


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (26 calls)
File: packages\rag\mcp_servers\hyperag\memory\hippo_index.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (6 calls)
File: packages\rag\mcp_servers\hyperag\memory\hippo_index.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'json' methods (8 calls)
File: packages\rag\mcp_servers\hyperag\memory\hippo_index.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'params' methods (6 calls)
File: packages\rag\mcp_servers\hyperag\memory\hippo_index.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (79 total)
File: packages\rag\mcp_servers\hyperag\memory\hippo_index.py:71:23
Recommendation: Replace magic numbers with named constants or enums
Code context:
     68:         )
     69:         # Default episodic properties
     70:         if self.ttl is None:
>>>  71:             self.ttl = 7 * 24 * 3600  # 7 days default
     72:         if self.decay_rate == 0.1:  # Base class default
     73:             self.decay_rate = 0.2  # Faster decay for episodic
     74:         if self.importance_score == 0.5:  # Base class default


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (79 total)
File: packages\rag\mcp_servers\hyperag\memory\hippo_index.py:71:27
Recommendation: Replace magic numbers with named constants or enums
Code context:
     68:         )
     69:         # Default episodic properties
     70:         if self.ttl is None:
>>>  71:             self.ttl = 7 * 24 * 3600  # 7 days default
     72:         if self.decay_rate == 0.1:  # Base class default
     73:             self.decay_rate = 0.2  # Faster decay for episodic
     74:         if self.importance_score == 0.5:  # Base class default


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (79 total)
File: packages\rag\mcp_servers\hyperag\memory\hippo_index.py:71:32
Recommendation: Replace magic numbers with named constants or enums
Code context:
     68:         )
     69:         # Default episodic properties
     70:         if self.ttl is None:
>>>  71:             self.ttl = 7 * 24 * 3600  # 7 days default
     72:         if self.decay_rate == 0.1:  # Base class default
     73:             self.decay_rate = 0.2  # Faster decay for episodic
     74:         if self.importance_score == 0.5:  # Base class default


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (79 total)
File: packages\rag\mcp_servers\hyperag\memory\hippo_index.py:72:30
Recommendation: Replace magic numbers with named constants or enums
Code context:
     69:         # Default episodic properties
     70:         if self.ttl is None:
     71:             self.ttl = 7 * 24 * 3600  # 7 days default
>>>  72:         if self.decay_rate == 0.1:  # Base class default
     73:             self.decay_rate = 0.2  # Faster decay for episodic
     74:         if self.importance_score == 0.5:  # Base class default
     75:             self.importance_score = 0.3  # Lower importance for episodic


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (79 total)
File: packages\rag\mcp_servers\hyperag\memory\hippo_index.py:73:30
Recommendation: Replace magic numbers with named constants or enums
Code context:
     70:         if self.ttl is None:
     71:             self.ttl = 7 * 24 * 3600  # 7 days default
     72:         if self.decay_rate == 0.1:  # Base class default
>>>  73:             self.decay_rate = 0.2  # Faster decay for episodic
     74:         if self.importance_score == 0.5:  # Base class default
     75:             self.importance_score = 0.3  # Lower importance for episodic
     76:


LONG_PARAMETER_LIST: Function '__init__' has 7 parameters (>5)
File: packages\rag\mcp_servers\hyperag\memory\hypergraph_kg.py:144:4
Recommendation: Use parameter objects, data classes, or keyword-only arguments
Code context:
    141:     - Redis for caching
    142:     """
    143:
>>> 144:     def __init__(
    145:         self,
    146:         neo4j_uri: str = "bolt://localhost:7687",
    147:         neo4j_user: str = "neo4j",


HARDCODED_PATH: Hardcoded path or URL detected
File: packages\rag\mcp_servers\hyperag\memory\hypergraph_kg.py:149:26
Recommendation: Use configuration files, environment variables, or path utilities
Code context:
    146:         neo4j_uri: str = "bolt://localhost:7687",
    147:         neo4j_user: str = "neo4j",
    148:         neo4j_password: str = "password",
>>> 149:         qdrant_url: str = "http://localhost:6333",
    150:         redis_url: str = "redis://localhost:6379",
    151:         embedding_dim: int = 768,
    152:     ) -> None:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\hypergraph_kg.py:264:20
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    261:             # Store in Neo4j
    262:             async with self.neo4j_driver.session() as session:
    263:                 await session.run(
>>> 264:                     """
    265:                     MERGE (n:SemanticNode {id: $id})
    266:                     SET n.content = $content,
    267:                         n.node_type = $node_type,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\hypergraph_kg.py:335:20
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    332:             async with self.neo4j_driver.session() as session:
    333:                 # Create the hyperedge node
    334:                 await session.run(
>>> 335:                     """
    336:                     MERGE (h:Hyperedge {id: $id})
    337:                     SET h.relation = $relation,
    338:                         h.confidence = $confidence,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\hypergraph_kg.py:412:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    409:         max_iterations: int = 50,
    410:         tolerance: float = 1e-6,
    411:     ) -> dict[str, float]:
>>> 412:         """Compute Personalized PageRank from start nodes.
    413:
    414:         Args:
    415:             start_nodes: List of node IDs to start from


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\hypergraph_kg.py:442:20
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    439:
    440:                 # Get all nodes and edges in the graph
    441:                 graph_result = await session.run(
>>> 442:                     """
    443:                     MATCH (n:SemanticNode)
    444:                     OPTIONAL MATCH (n)-[:PARTICIPATES]->(h:Hyperedge)<-[:PARTICIPATES]-(m:SemanticNode)
    445:                     WHERE n.id <> m.id


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\hypergraph_kg.py:524:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    521:         min_confidence: float = 0.5,
    522:         max_nodes: int = 50,
    523:     ) -> Subgraph | None:
>>> 524:         """Extract a subgraph around center nodes for reasoning.
    525:
    526:         Args:
    527:             center_nodes: Starting nodes for subgraph extraction


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\hypergraph_kg.py:539:20
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    536:             async with self.neo4j_driver.session() as session:
    537:                 # Extract subgraph using Cypher
    538:                 subgraph_result = await session.run(
>>> 539:                     """
    540:                     MATCH (center:SemanticNode)
    541:                     WHERE center.id IN $center_nodes
    542:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\hypergraph_kg.py:675:24
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    672:
    673:                 async with self.neo4j_driver.session() as session:
    674:                     node_result = await session.run(
>>> 675:                         """
    676:                         MATCH (n:SemanticNode {id: $node_id})
    677:                         RETURN n.id as id, n.content as content, n.node_type as node_type,
    678:                                n.confidence as confidence, n.created_at as created_at,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\hypergraph_kg.py:721:24
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    718:             async with self.neo4j_driver.session() as session:
    719:                 if algorithm == "louvain":
    720:                     result = await session.run(
>>> 721:                         """
    722:                         CALL gds.louvain.stream('semantic-graph')
    723:                         YIELD nodeId, communityId
    724:                         MATCH (n:SemanticNode) WHERE id(n) = nodeId


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\hypergraph_kg.py:730:24
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    727:                     )
    728:                 elif algorithm == "label_propagation":
    729:                     result = await session.run(
>>> 730:                         """
    731:                         CALL gds.labelPropagation.stream('semantic-graph')
    732:                         YIELD nodeId, communityId
    733:                         MATCH (n:SemanticNode) WHERE id(n) = nodeId


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\hypergraph_kg.py:829:35
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    826:                 try:
    827:                     await session.run(constraint)
    828:                 except Exception as e:
>>> 829:                     logger.warning("Failed to create constraint: %s", e)
    830:
    831:             for constraint in self.schema.get_relationship_constraints():
    832:                 try:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\hypergraph_kg.py:835:35
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    832:                 try:
    833:                     await session.run(constraint)
    834:                 except Exception as e:
>>> 835:                     logger.warning("Failed to create relationship constraint: %s", e)
    836:
    837:             # Create indexes
    838:             for index in self.schema.get_indexes():


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\hypergraph_kg.py:842:35
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    839:                 try:
    840:                     await session.run(index)
    841:                 except Exception as e:
>>> 842:                     logger.warning("Failed to create index: %s", e)
    843:
    844:             # Create sample data if needed
    845:             sample_data = self.schema.get_sample_data_cypher()


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\hypergraph_kg.py:867:36
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    864:                             collection_name=collection_name,
    865:                             vectors_config=VectorParams(size=config["vectors"]["size"], distance=Distance.COSINE),
    866:                         )
>>> 867:                         logger.info("Created Qdrant collection: %s", collection_name)
    868:
    869:                 except Exception as e:
    870:                     logger.exception("Failed to setup Qdrant collection %s: %s", collection_name, e)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\hypergraph_kg.py:923:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    920:             logger.warning("Failed to cache hyperedge %s: %s", edge.id, e)
    921:
    922:     async def _record_consolidation_event(self) -> None:
>>> 923:         """Update consolidation timestamp and persist it."""
    924:         self.last_consolidation = datetime.now()
    925:         if self.redis_client is not None:
    926:             try:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\hypergraph_kg.py:983:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    980:
    981:
    982: def create_semantic_node(content: str, node_type: str = "concept", confidence: float = 0.8) -> SemanticNode:
>>> 983:     """Create a semantic node for consolidated knowledge."""
    984:     return SemanticNode(
    985:         content=content,
    986:         node_type=node_type,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\hypergraph_kg.py:1000:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    997:     confidence: float = 0.8,
    998:     evidence_count: int = 1,
    999: ) -> Hyperedge:
>>> 1000:     """Create a hyperedge for n-ary semantic relationships."""
    1001:     edge = Hyperedge(
    1002:         participants=participants,
    1003:         relation=relation,


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'datetime' methods (7 calls)
File: packages\rag\mcp_servers\hyperag\memory\hypergraph_kg.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (8 calls)
File: packages\rag\mcp_servers\hyperag\memory\hypergraph_kg.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (32 calls)
File: packages\rag\mcp_servers\hyperag\memory\hypergraph_kg.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'session' methods (17 calls)
File: packages\rag\mcp_servers\hyperag\memory\hypergraph_kg.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'json' methods (7 calls)
File: packages\rag\mcp_servers\hyperag\memory\hypergraph_kg.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (26 total)
File: packages\rag\mcp_servers\hyperag\memory\hypergraph_kg.py:38:30
Recommendation: Replace magic numbers with named constants or enums
Code context:
     35:         )
     36:         # Semantic-specific defaults
     37:         if self.confidence == 1.0:  # Base class default
>>>  38:             self.confidence = 0.8  # More conservative for semantic
     39:         if self.importance_score == 0.5:  # Base class default
     40:             self.importance_score = 0.8  # Higher for semantic
     41:         if self.decay_rate == 0.1:  # Base class default


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (26 total)
File: packages\rag\mcp_servers\hyperag\memory\hypergraph_kg.py:39:36
Recommendation: Replace magic numbers with named constants or enums
Code context:
     36:         # Semantic-specific defaults
     37:         if self.confidence == 1.0:  # Base class default
     38:             self.confidence = 0.8  # More conservative for semantic
>>>  39:         if self.importance_score == 0.5:  # Base class default
     40:             self.importance_score = 0.8  # Higher for semantic
     41:         if self.decay_rate == 0.1:  # Base class default
     42:             self.decay_rate = 0.01  # Much slower decay


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (26 total)
File: packages\rag\mcp_servers\hyperag\memory\hypergraph_kg.py:40:36
Recommendation: Replace magic numbers with named constants or enums
Code context:
     37:         if self.confidence == 1.0:  # Base class default
     38:             self.confidence = 0.8  # More conservative for semantic
     39:         if self.importance_score == 0.5:  # Base class default
>>>  40:             self.importance_score = 0.8  # Higher for semantic
     41:         if self.decay_rate == 0.1:  # Base class default
     42:             self.decay_rate = 0.01  # Much slower decay
     43:         self.confidence_type = ConfidenceType.BAYESIAN  # Use Bayesian for semantic


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (26 total)
File: packages\rag\mcp_servers\hyperag\memory\hypergraph_kg.py:41:30
Recommendation: Replace magic numbers with named constants or enums
Code context:
     38:             self.confidence = 0.8  # More conservative for semantic
     39:         if self.importance_score == 0.5:  # Base class default
     40:             self.importance_score = 0.8  # Higher for semantic
>>>  41:         if self.decay_rate == 0.1:  # Base class default
     42:             self.decay_rate = 0.01  # Much slower decay
     43:         self.confidence_type = ConfidenceType.BAYESIAN  # Use Bayesian for semantic
     44:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (26 total)
File: packages\rag\mcp_servers\hyperag\memory\hypergraph_kg.py:42:30
Recommendation: Replace magic numbers with named constants or enums
Code context:
     39:         if self.importance_score == 0.5:  # Base class default
     40:             self.importance_score = 0.8  # Higher for semantic
     41:         if self.decay_rate == 0.1:  # Base class default
>>>  42:             self.decay_rate = 0.01  # Much slower decay
     43:         self.confidence_type = ConfidenceType.BAYESIAN  # Use Bayesian for semantic
     44:
     45:         # Semantic-specific properties


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\schemas.py:14:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     11:
     12:     @staticmethod
     13:     def get_create_tables_sql() -> list[str]:
>>>  14:         """Get SQL statements to create Hippo-Index tables."""
     15:         return [
     16:             # Episodic nodes table
     17:             """


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\schemas.py:17:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     14:         """Get SQL statements to create Hippo-Index tables."""
     15:         return [
     16:             # Episodic nodes table
>>>  17:             """
     18:             CREATE TABLE IF NOT EXISTS hippo_nodes (
     19:                 id VARCHAR PRIMARY KEY,
     20:                 content TEXT NOT NULL,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\schemas.py:48:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     45:             )
     46:             """,
     47:             # Episodic edges table
>>>  48:             """
     49:             CREATE TABLE IF NOT EXISTS hippo_edges (
     50:                 id VARCHAR PRIMARY KEY,
     51:                 source_id VARCHAR NOT NULL,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\schemas.py:87:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     84:             )
     85:             """,
     86:             # Document storage
>>>  87:             """
     88:             CREATE TABLE IF NOT EXISTS hippo_documents (
     89:                 id VARCHAR PRIMARY KEY,
     90:                 content TEXT NOT NULL,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\schemas.py:100:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     97:             )
     98:             """,
     99:             # Consolidation tracking
>>> 100:             """
    101:             CREATE TABLE IF NOT EXISTS consolidation_batches (
    102:                 id VARCHAR PRIMARY KEY,
    103:                 confidence_threshold REAL NOT NULL,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\schemas.py:115:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    112:
    113:     @staticmethod
    114:     def get_create_indexes_sql() -> list[str]:
>>> 115:         """Get SQL statements to create indexes for performance."""
    116:         return [
    117:             # Node indexes
    118:             ("CREATE INDEX IF NOT EXISTS idx_hippo_nodes_embedding " "ON hippo_nodes USING HNSW(embedding)"),


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\schemas.py:118:13
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    115:         """Get SQL statements to create indexes for performance."""
    116:         return [
    117:             # Node indexes
>>> 118:             ("CREATE INDEX IF NOT EXISTS idx_hippo_nodes_embedding " "ON hippo_nodes USING HNSW(embedding)"),
    119:             ("CREATE INDEX IF NOT EXISTS idx_hippo_nodes_user_time " "ON hippo_nodes(user_id, created_at DESC)"),
    120:             ("CREATE INDEX IF NOT EXISTS idx_hippo_nodes_confidence " "ON hippo_nodes(confidence DESC)"),
    121:             ("CREATE INDEX IF NOT EXISTS idx_hippo_nodes_importance " "ON hippo_nodes(importance_score DESC)"),


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\schemas.py:119:13
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    116:         return [
    117:             # Node indexes
    118:             ("CREATE INDEX IF NOT EXISTS idx_hippo_nodes_embedding " "ON hippo_nodes USING HNSW(embedding)"),
>>> 119:             ("CREATE INDEX IF NOT EXISTS idx_hippo_nodes_user_time " "ON hippo_nodes(user_id, created_at DESC)"),
    120:             ("CREATE INDEX IF NOT EXISTS idx_hippo_nodes_confidence " "ON hippo_nodes(confidence DESC)"),
    121:             ("CREATE INDEX IF NOT EXISTS idx_hippo_nodes_importance " "ON hippo_nodes(importance_score DESC)"),
    122:             ("CREATE INDEX IF NOT EXISTS idx_hippo_nodes_type " "ON hippo_nodes(node_type, memory_type)"),


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\schemas.py:120:13
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    117:             # Node indexes
    118:             ("CREATE INDEX IF NOT EXISTS idx_hippo_nodes_embedding " "ON hippo_nodes USING HNSW(embedding)"),
    119:             ("CREATE INDEX IF NOT EXISTS idx_hippo_nodes_user_time " "ON hippo_nodes(user_id, created_at DESC)"),
>>> 120:             ("CREATE INDEX IF NOT EXISTS idx_hippo_nodes_confidence " "ON hippo_nodes(confidence DESC)"),
    121:             ("CREATE INDEX IF NOT EXISTS idx_hippo_nodes_importance " "ON hippo_nodes(importance_score DESC)"),
    122:             ("CREATE INDEX IF NOT EXISTS idx_hippo_nodes_type " "ON hippo_nodes(node_type, memory_type)"),
    123:             ("CREATE INDEX IF NOT EXISTS idx_hippo_nodes_ttl " "ON hippo_nodes(created_at, ttl) WHERE ttl IS NOT NULL"),


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\schemas.py:121:13
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    118:             ("CREATE INDEX IF NOT EXISTS idx_hippo_nodes_embedding " "ON hippo_nodes USING HNSW(embedding)"),
    119:             ("CREATE INDEX IF NOT EXISTS idx_hippo_nodes_user_time " "ON hippo_nodes(user_id, created_at DESC)"),
    120:             ("CREATE INDEX IF NOT EXISTS idx_hippo_nodes_confidence " "ON hippo_nodes(confidence DESC)"),
>>> 121:             ("CREATE INDEX IF NOT EXISTS idx_hippo_nodes_importance " "ON hippo_nodes(importance_score DESC)"),
    122:             ("CREATE INDEX IF NOT EXISTS idx_hippo_nodes_type " "ON hippo_nodes(node_type, memory_type)"),
    123:             ("CREATE INDEX IF NOT EXISTS idx_hippo_nodes_ttl " "ON hippo_nodes(created_at, ttl) WHERE ttl IS NOT NULL"),
    124:             ("CREATE INDEX IF NOT EXISTS idx_hippo_nodes_gdc " "ON hippo_nodes USING GIN(gdc_flags)"),


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\schemas.py:122:13
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    119:             ("CREATE INDEX IF NOT EXISTS idx_hippo_nodes_user_time " "ON hippo_nodes(user_id, created_at DESC)"),
    120:             ("CREATE INDEX IF NOT EXISTS idx_hippo_nodes_confidence " "ON hippo_nodes(confidence DESC)"),
    121:             ("CREATE INDEX IF NOT EXISTS idx_hippo_nodes_importance " "ON hippo_nodes(importance_score DESC)"),
>>> 122:             ("CREATE INDEX IF NOT EXISTS idx_hippo_nodes_type " "ON hippo_nodes(node_type, memory_type)"),
    123:             ("CREATE INDEX IF NOT EXISTS idx_hippo_nodes_ttl " "ON hippo_nodes(created_at, ttl) WHERE ttl IS NOT NULL"),
    124:             ("CREATE INDEX IF NOT EXISTS idx_hippo_nodes_gdc " "ON hippo_nodes USING GIN(gdc_flags)"),
    125:             # Edge indexes


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\schemas.py:123:13
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    120:             ("CREATE INDEX IF NOT EXISTS idx_hippo_nodes_confidence " "ON hippo_nodes(confidence DESC)"),
    121:             ("CREATE INDEX IF NOT EXISTS idx_hippo_nodes_importance " "ON hippo_nodes(importance_score DESC)"),
    122:             ("CREATE INDEX IF NOT EXISTS idx_hippo_nodes_type " "ON hippo_nodes(node_type, memory_type)"),
>>> 123:             ("CREATE INDEX IF NOT EXISTS idx_hippo_nodes_ttl " "ON hippo_nodes(created_at, ttl) WHERE ttl IS NOT NULL"),
    124:             ("CREATE INDEX IF NOT EXISTS idx_hippo_nodes_gdc " "ON hippo_nodes USING GIN(gdc_flags)"),
    125:             # Edge indexes
    126:             ("CREATE INDEX IF NOT EXISTS idx_hippo_edges_source " "ON hippo_edges(source_id)"),


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\schemas.py:124:13
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    121:             ("CREATE INDEX IF NOT EXISTS idx_hippo_nodes_importance " "ON hippo_nodes(importance_score DESC)"),
    122:             ("CREATE INDEX IF NOT EXISTS idx_hippo_nodes_type " "ON hippo_nodes(node_type, memory_type)"),
    123:             ("CREATE INDEX IF NOT EXISTS idx_hippo_nodes_ttl " "ON hippo_nodes(created_at, ttl) WHERE ttl IS NOT NULL"),
>>> 124:             ("CREATE INDEX IF NOT EXISTS idx_hippo_nodes_gdc " "ON hippo_nodes USING GIN(gdc_flags)"),
    125:             # Edge indexes
    126:             ("CREATE INDEX IF NOT EXISTS idx_hippo_edges_source " "ON hippo_edges(source_id)"),
    127:             ("CREATE INDEX IF NOT EXISTS idx_hippo_edges_target " "ON hippo_edges(target_id)"),


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\schemas.py:126:13
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    123:             ("CREATE INDEX IF NOT EXISTS idx_hippo_nodes_ttl " "ON hippo_nodes(created_at, ttl) WHERE ttl IS NOT NULL"),
    124:             ("CREATE INDEX IF NOT EXISTS idx_hippo_nodes_gdc " "ON hippo_nodes USING GIN(gdc_flags)"),
    125:             # Edge indexes
>>> 126:             ("CREATE INDEX IF NOT EXISTS idx_hippo_edges_source " "ON hippo_edges(source_id)"),
    127:             ("CREATE INDEX IF NOT EXISTS idx_hippo_edges_target " "ON hippo_edges(target_id)"),
    128:             ("CREATE INDEX IF NOT EXISTS idx_hippo_edges_relation " "ON hippo_edges(relation)"),
    129:             ("CREATE INDEX IF NOT EXISTS idx_hippo_edges_confidence " "ON hippo_edges(confidence DESC)"),


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\schemas.py:127:13
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    124:             ("CREATE INDEX IF NOT EXISTS idx_hippo_nodes_gdc " "ON hippo_nodes USING GIN(gdc_flags)"),
    125:             # Edge indexes
    126:             ("CREATE INDEX IF NOT EXISTS idx_hippo_edges_source " "ON hippo_edges(source_id)"),
>>> 127:             ("CREATE INDEX IF NOT EXISTS idx_hippo_edges_target " "ON hippo_edges(target_id)"),
    128:             ("CREATE INDEX IF NOT EXISTS idx_hippo_edges_relation " "ON hippo_edges(relation)"),
    129:             ("CREATE INDEX IF NOT EXISTS idx_hippo_edges_confidence " "ON hippo_edges(confidence DESC)"),
    130:             "CREATE INDEX IF NOT EXISTS idx_hippo_edges_user ON hippo_edges(user_id)",


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\schemas.py:128:13
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    125:             # Edge indexes
    126:             ("CREATE INDEX IF NOT EXISTS idx_hippo_edges_source " "ON hippo_edges(source_id)"),
    127:             ("CREATE INDEX IF NOT EXISTS idx_hippo_edges_target " "ON hippo_edges(target_id)"),
>>> 128:             ("CREATE INDEX IF NOT EXISTS idx_hippo_edges_relation " "ON hippo_edges(relation)"),
    129:             ("CREATE INDEX IF NOT EXISTS idx_hippo_edges_confidence " "ON hippo_edges(confidence DESC)"),
    130:             "CREATE INDEX IF NOT EXISTS idx_hippo_edges_user ON hippo_edges(user_id)",
    131:             ("CREATE INDEX IF NOT EXISTS idx_hippo_edges_participants " "ON hippo_edges USING GIN(participants)"),


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\schemas.py:129:13
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    126:             ("CREATE INDEX IF NOT EXISTS idx_hippo_edges_source " "ON hippo_edges(source_id)"),
    127:             ("CREATE INDEX IF NOT EXISTS idx_hippo_edges_target " "ON hippo_edges(target_id)"),
    128:             ("CREATE INDEX IF NOT EXISTS idx_hippo_edges_relation " "ON hippo_edges(relation)"),
>>> 129:             ("CREATE INDEX IF NOT EXISTS idx_hippo_edges_confidence " "ON hippo_edges(confidence DESC)"),
    130:             "CREATE INDEX IF NOT EXISTS idx_hippo_edges_user ON hippo_edges(user_id)",
    131:             ("CREATE INDEX IF NOT EXISTS idx_hippo_edges_participants " "ON hippo_edges USING GIN(participants)"),
    132:             ("CREATE INDEX IF NOT EXISTS idx_hippo_edges_popularity " "ON hippo_edges(popularity_rank DESC)"),


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\schemas.py:130:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    127:             ("CREATE INDEX IF NOT EXISTS idx_hippo_edges_target " "ON hippo_edges(target_id)"),
    128:             ("CREATE INDEX IF NOT EXISTS idx_hippo_edges_relation " "ON hippo_edges(relation)"),
    129:             ("CREATE INDEX IF NOT EXISTS idx_hippo_edges_confidence " "ON hippo_edges(confidence DESC)"),
>>> 130:             "CREATE INDEX IF NOT EXISTS idx_hippo_edges_user ON hippo_edges(user_id)",
    131:             ("CREATE INDEX IF NOT EXISTS idx_hippo_edges_participants " "ON hippo_edges USING GIN(participants)"),
    132:             ("CREATE INDEX IF NOT EXISTS idx_hippo_edges_popularity " "ON hippo_edges(popularity_rank DESC)"),
    133:             # Document indexes


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\schemas.py:131:13
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    128:             ("CREATE INDEX IF NOT EXISTS idx_hippo_edges_relation " "ON hippo_edges(relation)"),
    129:             ("CREATE INDEX IF NOT EXISTS idx_hippo_edges_confidence " "ON hippo_edges(confidence DESC)"),
    130:             "CREATE INDEX IF NOT EXISTS idx_hippo_edges_user ON hippo_edges(user_id)",
>>> 131:             ("CREATE INDEX IF NOT EXISTS idx_hippo_edges_participants " "ON hippo_edges USING GIN(participants)"),
    132:             ("CREATE INDEX IF NOT EXISTS idx_hippo_edges_popularity " "ON hippo_edges(popularity_rank DESC)"),
    133:             # Document indexes
    134:             ("CREATE INDEX IF NOT EXISTS idx_hippo_docs_type " "ON hippo_documents(doc_type)"),


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\schemas.py:132:13
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    129:             ("CREATE INDEX IF NOT EXISTS idx_hippo_edges_confidence " "ON hippo_edges(confidence DESC)"),
    130:             "CREATE INDEX IF NOT EXISTS idx_hippo_edges_user ON hippo_edges(user_id)",
    131:             ("CREATE INDEX IF NOT EXISTS idx_hippo_edges_participants " "ON hippo_edges USING GIN(participants)"),
>>> 132:             ("CREATE INDEX IF NOT EXISTS idx_hippo_edges_popularity " "ON hippo_edges(popularity_rank DESC)"),
    133:             # Document indexes
    134:             ("CREATE INDEX IF NOT EXISTS idx_hippo_docs_type " "ON hippo_documents(doc_type)"),
    135:             ("CREATE INDEX IF NOT EXISTS idx_hippo_docs_user_time " "ON hippo_documents(user_id, created_at DESC)"),


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\schemas.py:134:13
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    131:             ("CREATE INDEX IF NOT EXISTS idx_hippo_edges_participants " "ON hippo_edges USING GIN(participants)"),
    132:             ("CREATE INDEX IF NOT EXISTS idx_hippo_edges_popularity " "ON hippo_edges(popularity_rank DESC)"),
    133:             # Document indexes
>>> 134:             ("CREATE INDEX IF NOT EXISTS idx_hippo_docs_type " "ON hippo_documents(doc_type)"),
    135:             ("CREATE INDEX IF NOT EXISTS idx_hippo_docs_user_time " "ON hippo_documents(user_id, created_at DESC)"),
    136:             ("CREATE INDEX IF NOT EXISTS idx_hippo_docs_embedding " "ON hippo_documents USING HNSW(embedding)"),
    137:             # Consolidation indexes


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\schemas.py:135:13
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    132:             ("CREATE INDEX IF NOT EXISTS idx_hippo_edges_popularity " "ON hippo_edges(popularity_rank DESC)"),
    133:             # Document indexes
    134:             ("CREATE INDEX IF NOT EXISTS idx_hippo_docs_type " "ON hippo_documents(doc_type)"),
>>> 135:             ("CREATE INDEX IF NOT EXISTS idx_hippo_docs_user_time " "ON hippo_documents(user_id, created_at DESC)"),
    136:             ("CREATE INDEX IF NOT EXISTS idx_hippo_docs_embedding " "ON hippo_documents USING HNSW(embedding)"),
    137:             # Consolidation indexes
    138:             ("CREATE INDEX IF NOT EXISTS idx_consolidation_status " "ON consolidation_batches(status, created_at)"),


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\schemas.py:136:13
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    133:             # Document indexes
    134:             ("CREATE INDEX IF NOT EXISTS idx_hippo_docs_type " "ON hippo_documents(doc_type)"),
    135:             ("CREATE INDEX IF NOT EXISTS idx_hippo_docs_user_time " "ON hippo_documents(user_id, created_at DESC)"),
>>> 136:             ("CREATE INDEX IF NOT EXISTS idx_hippo_docs_embedding " "ON hippo_documents USING HNSW(embedding)"),
    137:             # Consolidation indexes
    138:             ("CREATE INDEX IF NOT EXISTS idx_consolidation_status " "ON consolidation_batches(status, created_at)"),
    139:         ]


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\schemas.py:138:13
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    135:             ("CREATE INDEX IF NOT EXISTS idx_hippo_docs_user_time " "ON hippo_documents(user_id, created_at DESC)"),
    136:             ("CREATE INDEX IF NOT EXISTS idx_hippo_docs_embedding " "ON hippo_documents USING HNSW(embedding)"),
    137:             # Consolidation indexes
>>> 138:             ("CREATE INDEX IF NOT EXISTS idx_consolidation_status " "ON consolidation_batches(status, created_at)"),
    139:         ]
    140:
    141:     @staticmethod


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\schemas.py:146:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    143:         """Get SQL for materialized views for common queries."""
    144:         return [
    145:             # Recent nodes by user
>>> 146:             """
    147:             CREATE MATERIALIZED VIEW IF NOT EXISTS recent_nodes_by_user AS
    148:             SELECT
    149:                 user_id,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\schemas.py:158:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    155:             GROUP BY user_id
    156:             """,
    157:             # Popular relations
>>> 158:             """
    159:             CREATE MATERIALIZED VIEW IF NOT EXISTS popular_relations AS
    160:             SELECT
    161:                 relation,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\schemas.py:170:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    167:             ORDER BY edge_count DESC
    168:             """,
    169:             # Expiring nodes
>>> 170:             """
    171:             CREATE MATERIALIZED VIEW IF NOT EXISTS expiring_nodes AS
    172:             SELECT
    173:                 id,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\schemas.py:192:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    189:
    190:     @staticmethod
    191:     def get_node_constraints() -> list[str]:
>>> 192:         """Get Cypher statements to create node constraints."""
    193:         return [
    194:             ("CREATE CONSTRAINT semantic_node_id IF NOT EXISTS " "FOR (n:SemanticNode) REQUIRE n.id IS UNIQUE"),
    195:             ("CREATE CONSTRAINT entity_id IF NOT EXISTS " "FOR (e:Entity) REQUIRE e.id IS UNIQUE"),


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\schemas.py:194:13
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    191:     def get_node_constraints() -> list[str]:
    192:         """Get Cypher statements to create node constraints."""
    193:         return [
>>> 194:             ("CREATE CONSTRAINT semantic_node_id IF NOT EXISTS " "FOR (n:SemanticNode) REQUIRE n.id IS UNIQUE"),
    195:             ("CREATE CONSTRAINT entity_id IF NOT EXISTS " "FOR (e:Entity) REQUIRE e.id IS UNIQUE"),
    196:             ("CREATE CONSTRAINT hyperedge_id IF NOT EXISTS " "FOR (h:Hyperedge) REQUIRE h.id IS UNIQUE"),
    197:             ("CREATE CONSTRAINT user_id IF NOT EXISTS " "FOR (u:User) REQUIRE u.id IS UNIQUE"),


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\schemas.py:195:13
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    192:         """Get Cypher statements to create node constraints."""
    193:         return [
    194:             ("CREATE CONSTRAINT semantic_node_id IF NOT EXISTS " "FOR (n:SemanticNode) REQUIRE n.id IS UNIQUE"),
>>> 195:             ("CREATE CONSTRAINT entity_id IF NOT EXISTS " "FOR (e:Entity) REQUIRE e.id IS UNIQUE"),
    196:             ("CREATE CONSTRAINT hyperedge_id IF NOT EXISTS " "FOR (h:Hyperedge) REQUIRE h.id IS UNIQUE"),
    197:             ("CREATE CONSTRAINT user_id IF NOT EXISTS " "FOR (u:User) REQUIRE u.id IS UNIQUE"),
    198:             ("CREATE CONSTRAINT document_id IF NOT EXISTS " "FOR (d:Document) REQUIRE d.id IS UNIQUE"),


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\schemas.py:196:13
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    193:         return [
    194:             ("CREATE CONSTRAINT semantic_node_id IF NOT EXISTS " "FOR (n:SemanticNode) REQUIRE n.id IS UNIQUE"),
    195:             ("CREATE CONSTRAINT entity_id IF NOT EXISTS " "FOR (e:Entity) REQUIRE e.id IS UNIQUE"),
>>> 196:             ("CREATE CONSTRAINT hyperedge_id IF NOT EXISTS " "FOR (h:Hyperedge) REQUIRE h.id IS UNIQUE"),
    197:             ("CREATE CONSTRAINT user_id IF NOT EXISTS " "FOR (u:User) REQUIRE u.id IS UNIQUE"),
    198:             ("CREATE CONSTRAINT document_id IF NOT EXISTS " "FOR (d:Document) REQUIRE d.id IS UNIQUE"),
    199:         ]


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\schemas.py:197:13
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    194:             ("CREATE CONSTRAINT semantic_node_id IF NOT EXISTS " "FOR (n:SemanticNode) REQUIRE n.id IS UNIQUE"),
    195:             ("CREATE CONSTRAINT entity_id IF NOT EXISTS " "FOR (e:Entity) REQUIRE e.id IS UNIQUE"),
    196:             ("CREATE CONSTRAINT hyperedge_id IF NOT EXISTS " "FOR (h:Hyperedge) REQUIRE h.id IS UNIQUE"),
>>> 197:             ("CREATE CONSTRAINT user_id IF NOT EXISTS " "FOR (u:User) REQUIRE u.id IS UNIQUE"),
    198:             ("CREATE CONSTRAINT document_id IF NOT EXISTS " "FOR (d:Document) REQUIRE d.id IS UNIQUE"),
    199:         ]
    200:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\schemas.py:198:13
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    195:             ("CREATE CONSTRAINT entity_id IF NOT EXISTS " "FOR (e:Entity) REQUIRE e.id IS UNIQUE"),
    196:             ("CREATE CONSTRAINT hyperedge_id IF NOT EXISTS " "FOR (h:Hyperedge) REQUIRE h.id IS UNIQUE"),
    197:             ("CREATE CONSTRAINT user_id IF NOT EXISTS " "FOR (u:User) REQUIRE u.id IS UNIQUE"),
>>> 198:             ("CREATE CONSTRAINT document_id IF NOT EXISTS " "FOR (d:Document) REQUIRE d.id IS UNIQUE"),
    199:         ]
    200:
    201:     @staticmethod


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\schemas.py:206:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    203:         """Get Cypher statements for relationship constraints."""
    204:         return [
    205:             # Ensure hyperedge relationships have valid confidence
>>> 206:             """
    207:             CREATE CONSTRAINT valid_confidence IF NOT EXISTS
    208:             FOR ()-[r:PARTICIPATES]-()
    209:             REQUIRE 0.0 <= r.confidence <= 1.0


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\schemas.py:212:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    209:             REQUIRE 0.0 <= r.confidence <= 1.0
    210:             """,
    211:             # Ensure consolidation tracking
>>> 212:             """
    213:             CREATE CONSTRAINT consolidation_timestamp IF NOT EXISTS
    214:             FOR ()-[r:CONSOLIDATED_FROM]-()
    215:             REQUIRE r.consolidated_at IS NOT NULL


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\schemas.py:221:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    218:
    219:     @staticmethod
    220:     def get_indexes() -> list[str]:
>>> 221:         """Get Cypher statements to create indexes."""
    222:         return [
    223:             # Node property indexes
    224:             ("CREATE INDEX semantic_node_confidence IF NOT EXISTS " "FOR (n:SemanticNode) ON (n.confidence)"),


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\schemas.py:224:13
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    221:         """Get Cypher statements to create indexes."""
    222:         return [
    223:             # Node property indexes
>>> 224:             ("CREATE INDEX semantic_node_confidence IF NOT EXISTS " "FOR (n:SemanticNode) ON (n.confidence)"),
    225:             ("CREATE INDEX semantic_node_created IF NOT EXISTS " "FOR (n:SemanticNode) ON (n.created_at)"),
    226:             ("CREATE INDEX semantic_node_importance IF NOT EXISTS " "FOR (n:SemanticNode) ON (n.importance_score)"),
    227:             ("CREATE INDEX semantic_node_type IF NOT EXISTS " "FOR (n:SemanticNode) ON (n.node_type)"),


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\schemas.py:225:13
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    222:         return [
    223:             # Node property indexes
    224:             ("CREATE INDEX semantic_node_confidence IF NOT EXISTS " "FOR (n:SemanticNode) ON (n.confidence)"),
>>> 225:             ("CREATE INDEX semantic_node_created IF NOT EXISTS " "FOR (n:SemanticNode) ON (n.created_at)"),
    226:             ("CREATE INDEX semantic_node_importance IF NOT EXISTS " "FOR (n:SemanticNode) ON (n.importance_score)"),
    227:             ("CREATE INDEX semantic_node_type IF NOT EXISTS " "FOR (n:SemanticNode) ON (n.node_type)"),
    228:             ("CREATE INDEX semantic_node_user IF NOT EXISTS " "FOR (n:SemanticNode) ON (n.user_id)"),


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\schemas.py:226:13
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    223:             # Node property indexes
    224:             ("CREATE INDEX semantic_node_confidence IF NOT EXISTS " "FOR (n:SemanticNode) ON (n.confidence)"),
    225:             ("CREATE INDEX semantic_node_created IF NOT EXISTS " "FOR (n:SemanticNode) ON (n.created_at)"),
>>> 226:             ("CREATE INDEX semantic_node_importance IF NOT EXISTS " "FOR (n:SemanticNode) ON (n.importance_score)"),
    227:             ("CREATE INDEX semantic_node_type IF NOT EXISTS " "FOR (n:SemanticNode) ON (n.node_type)"),
    228:             ("CREATE INDEX semantic_node_user IF NOT EXISTS " "FOR (n:SemanticNode) ON (n.user_id)"),
    229:             # Entity indexes


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\schemas.py:227:13
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    224:             ("CREATE INDEX semantic_node_confidence IF NOT EXISTS " "FOR (n:SemanticNode) ON (n.confidence)"),
    225:             ("CREATE INDEX semantic_node_created IF NOT EXISTS " "FOR (n:SemanticNode) ON (n.created_at)"),
    226:             ("CREATE INDEX semantic_node_importance IF NOT EXISTS " "FOR (n:SemanticNode) ON (n.importance_score)"),
>>> 227:             ("CREATE INDEX semantic_node_type IF NOT EXISTS " "FOR (n:SemanticNode) ON (n.node_type)"),
    228:             ("CREATE INDEX semantic_node_user IF NOT EXISTS " "FOR (n:SemanticNode) ON (n.user_id)"),
    229:             # Entity indexes
    230:             "CREATE INDEX entity_type IF NOT EXISTS FOR (e:Entity) ON (e.entity_type)",


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\schemas.py:228:13
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    225:             ("CREATE INDEX semantic_node_created IF NOT EXISTS " "FOR (n:SemanticNode) ON (n.created_at)"),
    226:             ("CREATE INDEX semantic_node_importance IF NOT EXISTS " "FOR (n:SemanticNode) ON (n.importance_score)"),
    227:             ("CREATE INDEX semantic_node_type IF NOT EXISTS " "FOR (n:SemanticNode) ON (n.node_type)"),
>>> 228:             ("CREATE INDEX semantic_node_user IF NOT EXISTS " "FOR (n:SemanticNode) ON (n.user_id)"),
    229:             # Entity indexes
    230:             "CREATE INDEX entity_type IF NOT EXISTS FOR (e:Entity) ON (e.entity_type)",
    231:             ("CREATE INDEX entity_popularity IF NOT EXISTS " "FOR (e:Entity) ON (e.popularity_rank)"),


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\schemas.py:230:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    227:             ("CREATE INDEX semantic_node_type IF NOT EXISTS " "FOR (n:SemanticNode) ON (n.node_type)"),
    228:             ("CREATE INDEX semantic_node_user IF NOT EXISTS " "FOR (n:SemanticNode) ON (n.user_id)"),
    229:             # Entity indexes
>>> 230:             "CREATE INDEX entity_type IF NOT EXISTS FOR (e:Entity) ON (e.entity_type)",
    231:             ("CREATE INDEX entity_popularity IF NOT EXISTS " "FOR (e:Entity) ON (e.popularity_rank)"),
    232:             # Hyperedge indexes
    233:             ("CREATE INDEX hyperedge_relation IF NOT EXISTS " "FOR (h:Hyperedge) ON (h.relation)"),


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\schemas.py:231:13
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    228:             ("CREATE INDEX semantic_node_user IF NOT EXISTS " "FOR (n:SemanticNode) ON (n.user_id)"),
    229:             # Entity indexes
    230:             "CREATE INDEX entity_type IF NOT EXISTS FOR (e:Entity) ON (e.entity_type)",
>>> 231:             ("CREATE INDEX entity_popularity IF NOT EXISTS " "FOR (e:Entity) ON (e.popularity_rank)"),
    232:             # Hyperedge indexes
    233:             ("CREATE INDEX hyperedge_relation IF NOT EXISTS " "FOR (h:Hyperedge) ON (h.relation)"),
    234:             ("CREATE INDEX hyperedge_confidence IF NOT EXISTS " "FOR (h:Hyperedge) ON (h.confidence)"),


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\schemas.py:233:13
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    230:             "CREATE INDEX entity_type IF NOT EXISTS FOR (e:Entity) ON (e.entity_type)",
    231:             ("CREATE INDEX entity_popularity IF NOT EXISTS " "FOR (e:Entity) ON (e.popularity_rank)"),
    232:             # Hyperedge indexes
>>> 233:             ("CREATE INDEX hyperedge_relation IF NOT EXISTS " "FOR (h:Hyperedge) ON (h.relation)"),
    234:             ("CREATE INDEX hyperedge_confidence IF NOT EXISTS " "FOR (h:Hyperedge) ON (h.confidence)"),
    235:             ("CREATE INDEX hyperedge_created IF NOT EXISTS " "FOR (h:Hyperedge) ON (h.created_at)"),
    236:             ("CREATE INDEX hyperedge_popularity IF NOT EXISTS " "FOR (h:Hyperedge) ON (h.popularity_rank)"),


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\schemas.py:234:13
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    231:             ("CREATE INDEX entity_popularity IF NOT EXISTS " "FOR (e:Entity) ON (e.popularity_rank)"),
    232:             # Hyperedge indexes
    233:             ("CREATE INDEX hyperedge_relation IF NOT EXISTS " "FOR (h:Hyperedge) ON (h.relation)"),
>>> 234:             ("CREATE INDEX hyperedge_confidence IF NOT EXISTS " "FOR (h:Hyperedge) ON (h.confidence)"),
    235:             ("CREATE INDEX hyperedge_created IF NOT EXISTS " "FOR (h:Hyperedge) ON (h.created_at)"),
    236:             ("CREATE INDEX hyperedge_popularity IF NOT EXISTS " "FOR (h:Hyperedge) ON (h.popularity_rank)"),
    237:             # User indexes


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\schemas.py:235:13
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    232:             # Hyperedge indexes
    233:             ("CREATE INDEX hyperedge_relation IF NOT EXISTS " "FOR (h:Hyperedge) ON (h.relation)"),
    234:             ("CREATE INDEX hyperedge_confidence IF NOT EXISTS " "FOR (h:Hyperedge) ON (h.confidence)"),
>>> 235:             ("CREATE INDEX hyperedge_created IF NOT EXISTS " "FOR (h:Hyperedge) ON (h.created_at)"),
    236:             ("CREATE INDEX hyperedge_popularity IF NOT EXISTS " "FOR (h:Hyperedge) ON (h.popularity_rank)"),
    237:             # User indexes
    238:             "CREATE INDEX user_created IF NOT EXISTS FOR (u:User) ON (u.created_at)",


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\schemas.py:236:13
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    233:             ("CREATE INDEX hyperedge_relation IF NOT EXISTS " "FOR (h:Hyperedge) ON (h.relation)"),
    234:             ("CREATE INDEX hyperedge_confidence IF NOT EXISTS " "FOR (h:Hyperedge) ON (h.confidence)"),
    235:             ("CREATE INDEX hyperedge_created IF NOT EXISTS " "FOR (h:Hyperedge) ON (h.created_at)"),
>>> 236:             ("CREATE INDEX hyperedge_popularity IF NOT EXISTS " "FOR (h:Hyperedge) ON (h.popularity_rank)"),
    237:             # User indexes
    238:             "CREATE INDEX user_created IF NOT EXISTS FOR (u:User) ON (u.created_at)",
    239:             # Document indexes


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\schemas.py:238:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    235:             ("CREATE INDEX hyperedge_created IF NOT EXISTS " "FOR (h:Hyperedge) ON (h.created_at)"),
    236:             ("CREATE INDEX hyperedge_popularity IF NOT EXISTS " "FOR (h:Hyperedge) ON (h.popularity_rank)"),
    237:             # User indexes
>>> 238:             "CREATE INDEX user_created IF NOT EXISTS FOR (u:User) ON (u.created_at)",
    239:             # Document indexes
    240:             "CREATE INDEX document_type IF NOT EXISTS FOR (d:Document) ON (d.doc_type)",
    241:             ("CREATE INDEX document_created IF NOT EXISTS " "FOR (d:Document) ON (d.created_at)"),


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\schemas.py:240:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    237:             # User indexes
    238:             "CREATE INDEX user_created IF NOT EXISTS FOR (u:User) ON (u.created_at)",
    239:             # Document indexes
>>> 240:             "CREATE INDEX document_type IF NOT EXISTS FOR (d:Document) ON (d.doc_type)",
    241:             ("CREATE INDEX document_created IF NOT EXISTS " "FOR (d:Document) ON (d.created_at)"),
    242:             # Composite indexes for common queries
    243:             ("CREATE INDEX node_user_confidence IF NOT EXISTS " "FOR (n:SemanticNode) ON (n.user_id, n.confidence)"),


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\schemas.py:241:13
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    238:             "CREATE INDEX user_created IF NOT EXISTS FOR (u:User) ON (u.created_at)",
    239:             # Document indexes
    240:             "CREATE INDEX document_type IF NOT EXISTS FOR (d:Document) ON (d.doc_type)",
>>> 241:             ("CREATE INDEX document_created IF NOT EXISTS " "FOR (d:Document) ON (d.created_at)"),
    242:             # Composite indexes for common queries
    243:             ("CREATE INDEX node_user_confidence IF NOT EXISTS " "FOR (n:SemanticNode) ON (n.user_id, n.confidence)"),
    244:             ("CREATE INDEX edge_relation_confidence IF NOT EXISTS " "FOR (h:Hyperedge) ON (h.relation, h.confidence)"),


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\schemas.py:243:13
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    240:             "CREATE INDEX document_type IF NOT EXISTS FOR (d:Document) ON (d.doc_type)",
    241:             ("CREATE INDEX document_created IF NOT EXISTS " "FOR (d:Document) ON (d.created_at)"),
    242:             # Composite indexes for common queries
>>> 243:             ("CREATE INDEX node_user_confidence IF NOT EXISTS " "FOR (n:SemanticNode) ON (n.user_id, n.confidence)"),
    244:             ("CREATE INDEX edge_relation_confidence IF NOT EXISTS " "FOR (h:Hyperedge) ON (h.relation, h.confidence)"),
    245:             # Full-text search indexes
    246:             ("CREATE FULLTEXT INDEX semantic_content IF NOT EXISTS " "FOR (n:SemanticNode) ON EACH [n.content]"),


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\schemas.py:244:13
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    241:             ("CREATE INDEX document_created IF NOT EXISTS " "FOR (d:Document) ON (d.created_at)"),
    242:             # Composite indexes for common queries
    243:             ("CREATE INDEX node_user_confidence IF NOT EXISTS " "FOR (n:SemanticNode) ON (n.user_id, n.confidence)"),
>>> 244:             ("CREATE INDEX edge_relation_confidence IF NOT EXISTS " "FOR (h:Hyperedge) ON (h.relation, h.confidence)"),
    245:             # Full-text search indexes
    246:             ("CREATE FULLTEXT INDEX semantic_content IF NOT EXISTS " "FOR (n:SemanticNode) ON EACH [n.content]"),
    247:             ("CREATE FULLTEXT INDEX entity_content IF NOT EXISTS " "FOR (e:Entity) ON EACH [e.content]"),


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\schemas.py:246:13
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    243:             ("CREATE INDEX node_user_confidence IF NOT EXISTS " "FOR (n:SemanticNode) ON (n.user_id, n.confidence)"),
    244:             ("CREATE INDEX edge_relation_confidence IF NOT EXISTS " "FOR (h:Hyperedge) ON (h.relation, h.confidence)"),
    245:             # Full-text search indexes
>>> 246:             ("CREATE FULLTEXT INDEX semantic_content IF NOT EXISTS " "FOR (n:SemanticNode) ON EACH [n.content]"),
    247:             ("CREATE FULLTEXT INDEX entity_content IF NOT EXISTS " "FOR (e:Entity) ON EACH [e.content]"),
    248:             ("CREATE FULLTEXT INDEX document_content IF NOT EXISTS " "FOR (d:Document) ON EACH [d.content]"),
    249:         ]


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\schemas.py:247:13
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    244:             ("CREATE INDEX edge_relation_confidence IF NOT EXISTS " "FOR (h:Hyperedge) ON (h.relation, h.confidence)"),
    245:             # Full-text search indexes
    246:             ("CREATE FULLTEXT INDEX semantic_content IF NOT EXISTS " "FOR (n:SemanticNode) ON EACH [n.content]"),
>>> 247:             ("CREATE FULLTEXT INDEX entity_content IF NOT EXISTS " "FOR (e:Entity) ON EACH [e.content]"),
    248:             ("CREATE FULLTEXT INDEX document_content IF NOT EXISTS " "FOR (d:Document) ON EACH [d.content]"),
    249:         ]
    250:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\schemas.py:248:13
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    245:             # Full-text search indexes
    246:             ("CREATE FULLTEXT INDEX semantic_content IF NOT EXISTS " "FOR (n:SemanticNode) ON EACH [n.content]"),
    247:             ("CREATE FULLTEXT INDEX entity_content IF NOT EXISTS " "FOR (e:Entity) ON EACH [e.content]"),
>>> 248:             ("CREATE FULLTEXT INDEX document_content IF NOT EXISTS " "FOR (d:Document) ON EACH [d.content]"),
    249:         ]
    250:
    251:     @staticmethod


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\schemas.py:253:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    250:
    251:     @staticmethod
    252:     def get_sample_data_cypher() -> list[str]:
>>> 253:         """Get Cypher statements to create sample data structure."""
    254:         return [
    255:             # Create semantic nodes
    256:             """


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\schemas.py:256:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    253:         """Get Cypher statements to create sample data structure."""
    254:         return [
    255:             # Create semantic nodes
>>> 256:             """
    257:             MERGE (ai:SemanticNode {
    258:                 id: 'semantic_ai_001',
    259:                 content: 'Artificial Intelligence',


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\schemas.py:269:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    266:                 uncertainty: 0.05
    267:             })
    268:             """,
>>> 269:             """
    270:             MERGE (ml:SemanticNode {
    271:                 id: 'semantic_ml_001',
    272:                 content: 'Machine Learning',


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\schemas.py:283:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    280:             })
    281:             """,
    282:             # Create hyperedge
>>> 283:             """
    284:             MERGE (h:Hyperedge {
    285:                 id: 'hyperedge_001',
    286:                 relation: 'is_subfield_of',


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\memory\schemas.py:305:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    302:             MERGE (ai)-[:PARTICIPATES {role: 'object', confidence: 0.9}]->(h)
    303:             """,
    304:             # Create user
>>> 305:             """
    306:             MERGE (u:User {
    307:                 id: 'user_001',
    308:                 name: 'Example User',


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (19 total)
File: packages\rag\mcp_servers\hyperag\memory\schemas.py:328:36
Recommendation: Replace magic numbers with named constants or enums
Code context:
    325:         """Get Qdrant collection configurations."""
    326:         return {
    327:             "hippo_embeddings": {
>>> 328:                 "vectors": {"size": 768, "distance": "Cosine"},
    329:                 "payload_schema": {
    330:                     "node_id": "keyword",
    331:                     "content": "text",


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (19 total)
File: packages\rag\mcp_servers\hyperag\memory\schemas.py:341:36
Recommendation: Replace magic numbers with named constants or enums
Code context:
    338:                 },
    339:             },
    340:             "semantic_embeddings": {
>>> 341:                 "vectors": {"size": 768, "distance": "Cosine"},
    342:                 "payload_schema": {
    343:                     "node_id": "keyword",
    344:                     "content": "text",


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (19 total)
File: packages\rag\mcp_servers\hyperag\memory\schemas.py:354:28
Recommendation: Replace magic numbers with named constants or enums
Code context:
    351:             },
    352:             "user_profiles": {
    353:                 "vectors": {
>>> 354:                     "size": 256,  # Smaller for user preference vectors
    355:                     "distance": "Cosine",
    356:                 },
    357:                 "payload_schema": {


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (19 total)
File: packages\rag\mcp_servers\hyperag\memory\schemas.py:371:21
Recommendation: Replace magic numbers with named constants or enums
Code context:
    368:         """Get HNSW index configurations for collections."""
    369:         return {
    370:             "hippo_embeddings": {
>>> 371:                 "m": 16,
    372:                 "ef_construct": 200,
    373:                 "full_scan_threshold": 10000,
    374:             },


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (19 total)
File: packages\rag\mcp_servers\hyperag\memory\schemas.py:372:32
Recommendation: Replace magic numbers with named constants or enums
Code context:
    369:         return {
    370:             "hippo_embeddings": {
    371:                 "m": 16,
>>> 372:                 "ef_construct": 200,
    373:                 "full_scan_threshold": 10000,
    374:             },
    375:             "semantic_embeddings": {


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\planning\learning.py:1:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
>>>   1: """Planning Learning System.
      2:
      3: Learns from plan execution outcomes to improve strategy selection and planning.
      4: Tracks plan effectiveness, updates strategy weights, and learns from agent feedback.


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\planning\learning.py:70:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     67:
     68:
     69: class PlanLearner:
>>>  70:     """Learning system for query planning optimization.
     71:
     72:     Tracks plan effectiveness, updates strategy weights, and learns from feedback
     73:     to improve future planning decisions.


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\planning\learning.py:92:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     89:         self.learning_stats = {
     90:             "total_feedback_received": 0,
     91:             "successful_adaptations": 0,
>>>  92:             "strategy_weight_updates": 0,
     93:             "last_learning_update": datetime.now(UTC),
     94:         }
     95:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\planning\learning.py:100:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     97:         self.query_patterns: dict[str, list[tuple[ReasoningStrategy, float]]] = {}
     98:
     99:     def record_execution_feedback(self, plan: QueryPlan, feedback: StrategyFeedback) -> None:
>>> 100:         """Record feedback from plan execution."""
    101:         # Store feedback
    102:         self.feedback_history.append(feedback)
    103:         if len(self.feedback_history) > self.max_history_size:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\planning\learning.py:211:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    208:         return analysis
    209:
    210:     def get_learning_insights(self) -> dict[str, Any]:
>>> 211:         """Get insights from learning system."""
    212:         insights = {
    213:             "learning_stats": self.learning_stats.copy(),
    214:             "top_performing_strategies": self._get_top_strategies(),


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\planning\learning.py:223:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    220:         return insights
    221:
    222:     def _update_strategy_metrics(self, feedback: StrategyFeedback) -> None:
>>> 223:         """Update performance metrics for strategy-query type combination."""
    224:         key = (feedback.strategy, feedback.query_type)
    225:
    226:         if key not in self.strategy_metrics:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\planning\learning.py:271:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    268:         metrics.last_updated = datetime.now(UTC)
    269:
    270:     def _update_strategy_weights(self, feedback: StrategyFeedback) -> None:
>>> 271:         """Update global strategy weights based on feedback."""
    272:         strategy = feedback.strategy
    273:         current_weight = self.global_strategy_weights[strategy]
    274:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\planning\learning.py:297:32
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    294:         self.global_strategy_weights[strategy] = new_weight
    295:
    296:         if abs(adjustment) > 0.01:
>>> 297:             self.learning_stats["strategy_weight_updates"] += 1
    298:             logger.debug(f"Updated {strategy.value} weight: {current_weight:.3f} -> {new_weight:.3f}")
    299:
    300:     def _learn_query_patterns(self, plan: QueryPlan, feedback: StrategyFeedback) -> None:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\planning\learning.py:301:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    298:             logger.debug(f"Updated {strategy.value} weight: {current_weight:.3f} -> {new_weight:.3f}")
    299:
    300:     def _learn_query_patterns(self, plan: QueryPlan, feedback: StrategyFeedback) -> None:
>>> 301:         """Learn patterns from successful query-strategy combinations."""
    302:         # Extract query features for pattern recognition
    303:         query_features = self._extract_query_features(plan.original_query)
    304:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\planning\learning.py:335:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    332:                 self.query_patterns[feature] = strategy_scores[:5]
    333:
    334:     def _extract_query_features(self, query: str) -> list[str]:
>>> 335:         """Extract features from query for pattern recognition."""
    336:         query_lower = query.lower()
    337:         features = []
    338:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\planning\learning.py:516:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    513:         return problematic[:5]
    514:
    515:     def _get_pattern_insights(self) -> dict[str, Any]:
>>> 516:         """Get insights from learned query patterns."""
    517:         insights = {
    518:             "total_patterns": len(self.query_patterns),
    519:             "most_reliable_patterns": [],


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'datetime' methods (6 calls)
File: packages\rag\mcp_servers\hyperag\planning\learning.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (10 calls)
File: packages\rag\mcp_servers\hyperag\planning\learning.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'features' methods (9 calls)
File: packages\rag\mcp_servers\hyperag\planning\learning.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (43 total)
File: packages\rag\mcp_servers\hyperag\planning\learning.py:76:46
Recommendation: Replace magic numbers with named constants or enums
Code context:
     73:     to improve future planning decisions.
     74:     """
     75:
>>>  76:     def __init__(self, learning_rate: float = 0.1, min_samples: int = 5) -> None:
     77:         self.learning_rate = learning_rate
     78:         self.min_samples = min_samples
     79:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (43 total)
File: packages\rag\mcp_servers\hyperag\planning\learning.py:76:70
Recommendation: Replace magic numbers with named constants or enums
Code context:
     73:     to improve future planning decisions.
     74:     """
     75:
>>>  76:     def __init__(self, learning_rate: float = 0.1, min_samples: int = 5) -> None:
     77:         self.learning_rate = learning_rate
     78:         self.min_samples = min_samples
     79:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (43 total)
File: packages\rag\mcp_servers\hyperag\planning\learning.py:86:32
Recommendation: Replace magic numbers with named constants or enums
Code context:
     83:
     84:         # Feedback history
     85:         self.feedback_history: list[StrategyFeedback] = []
>>>  86:         self.max_history_size = 10000
     87:
     88:         # Learning statistics
     89:         self.learning_stats = {


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (43 total)
File: packages\rag\mcp_servers\hyperag\planning\learning.py:151:51
Recommendation: Replace magic numbers with named constants or enums
Code context:
    148:             best_strategy = max(strategy_scores.items(), key=lambda x: x[1])
    149:             return best_strategy
    150:         # Fallback to direct retrieval
>>> 151:         return ReasoningStrategy.DIRECT_RETRIEVAL, 0.5
    152:
    153:     def analyze_strategy_performance(
    154:         self,


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (43 total)
File: packages\rag\mcp_servers\hyperag\planning\learning.py:157:33
Recommendation: Replace magic numbers with named constants or enums
Code context:
    154:         self,
    155:         strategy: ReasoningStrategy | None = None,
    156:         query_type: QueryType | None = None,
>>> 157:         time_window_hours: int = 24,
    158:     ) -> dict[str, Any]:
    159:         """Analyze strategy performance over time window."""
    160:         cutoff_time = datetime.now(UTC) - timedelta(hours=time_window_hours)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\planning\plan_structures.py:179:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    176:         self.expected_steps = len(self.execution_steps)
    177:
    178:     def create_checkpoint(self, completed_steps: set[str], intermediate_results: dict[str, Any]) -> PlanCheckpoint:
>>> 179:         """Create checkpoint at current execution state."""
    180:         checkpoint = PlanCheckpoint(
    181:             step_index=self.current_step_index,
    182:             completed_steps=completed_steps.copy(),


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\planning\plan_structures.py:217:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    214:         return {step.step_id for step in self.execution_steps if step.status == ExecutionStatus.COMPLETED}
    215:
    216:     def calculate_overall_confidence(self) -> float:
>>> 217:         """Calculate aggregate confidence from completed steps."""
    218:         completed = [step for step in self.execution_steps if step.status == ExecutionStatus.COMPLETED]
    219:
    220:         if not completed:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\planning\plan_structures.py:256:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    253:
    254:     @classmethod
    255:     def from_dict(cls, data: dict[str, Any]) -> "QueryPlan":
>>> 256:         """Deserialize plan from dictionary."""
    257:         plan = cls(
    258:             plan_id=data["plan_id"],
    259:             original_query=data["original_query"],


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\planning\plan_structures.py:333:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    330:
    331:     @staticmethod
    332:     def parse_plan(dsl_text: str) -> QueryPlan:
>>> 333:         """Parse plan from DSL format (simplified implementation)."""
    334:         lines = dsl_text.strip().split("\n")
    335:
    336:         # Extract basic info


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'datetime' methods (6 calls)
File: packages\rag\mcp_servers\hyperag\planning\plan_structures.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\planning\query_classifier.py:183:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    180:             r"\b(better|worse|best|worst|more|less|most|least)\b",
    181:             r"\b(higher|lower|greater|smaller|larger)\b",
    182:             r"\b(advantage|disadvantage|pros|cons|benefits|drawbacks)\b",
>>> 183:             r"\b(alternative|alternatives|option|options|choice|choices)\b",
    184:         ]
    185:
    186:     def _build_meta_patterns(self) -> list[str]:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\planning\query_classifier.py:210:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    207:     def _build_complexity_indicators(self) -> list[str]:
    208:         """Build patterns that indicate query complexity."""
    209:         return [
>>> 210:             r"\b(and|or|but|however|although|while|whereas)\b",
    211:             r"\b(if|unless|provided|assuming|given that)\b",
    212:             r"\b(multiple|several|various|different|numerous)\b",
    213:             r"\?.*\?",  # Multiple questions


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (22 calls)
File: packages\rag\mcp_servers\hyperag\planning\query_classifier.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'query' methods (8 calls)
File: packages\rag\mcp_servers\hyperag\planning\query_classifier.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'hints' methods (8 calls)
File: packages\rag\mcp_servers\hyperag\planning\query_classifier.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (33 total)
File: packages\rag\mcp_servers\hyperag\planning\query_classifier.py:31:41
Recommendation: Replace magic numbers with named constants or enums
Code context:
     28:
     29:         # Classification weights (could be learned)
     30:         self.pattern_weights = {
>>>  31:             QueryType.TEMPORAL_ANALYSIS: 0.8,
     32:             QueryType.CAUSAL_CHAIN: 0.9,
     33:             QueryType.COMPARATIVE: 0.7,
     34:             QueryType.META_KNOWLEDGE: 0.85,


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (33 total)
File: packages\rag\mcp_servers\hyperag\planning\query_classifier.py:32:36
Recommendation: Replace magic numbers with named constants or enums
Code context:
     29:         # Classification weights (could be learned)
     30:         self.pattern_weights = {
     31:             QueryType.TEMPORAL_ANALYSIS: 0.8,
>>>  32:             QueryType.CAUSAL_CHAIN: 0.9,
     33:             QueryType.COMPARATIVE: 0.7,
     34:             QueryType.META_KNOWLEDGE: 0.85,
     35:             QueryType.AGGREGATION: 0.75,


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (33 total)
File: packages\rag\mcp_servers\hyperag\planning\query_classifier.py:33:35
Recommendation: Replace magic numbers with named constants or enums
Code context:
     30:         self.pattern_weights = {
     31:             QueryType.TEMPORAL_ANALYSIS: 0.8,
     32:             QueryType.CAUSAL_CHAIN: 0.9,
>>>  33:             QueryType.COMPARATIVE: 0.7,
     34:             QueryType.META_KNOWLEDGE: 0.85,
     35:             QueryType.AGGREGATION: 0.75,
     36:             QueryType.MULTI_HOP: 0.6,


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (33 total)
File: packages\rag\mcp_servers\hyperag\planning\query_classifier.py:34:38
Recommendation: Replace magic numbers with named constants or enums
Code context:
     31:             QueryType.TEMPORAL_ANALYSIS: 0.8,
     32:             QueryType.CAUSAL_CHAIN: 0.9,
     33:             QueryType.COMPARATIVE: 0.7,
>>>  34:             QueryType.META_KNOWLEDGE: 0.85,
     35:             QueryType.AGGREGATION: 0.75,
     36:             QueryType.MULTI_HOP: 0.6,
     37:             QueryType.HYPOTHETICAL: 0.8,


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (33 total)
File: packages\rag\mcp_servers\hyperag\planning\query_classifier.py:35:35
Recommendation: Replace magic numbers with named constants or enums
Code context:
     32:             QueryType.CAUSAL_CHAIN: 0.9,
     33:             QueryType.COMPARATIVE: 0.7,
     34:             QueryType.META_KNOWLEDGE: 0.85,
>>>  35:             QueryType.AGGREGATION: 0.75,
     36:             QueryType.MULTI_HOP: 0.6,
     37:             QueryType.HYPOTHETICAL: 0.8,
     38:         }


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\planning\query_planner.py:1:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
>>>   1: """Query Planner.
      2:
      3: Strategic planning system for complex queries inspired by PlanRAG research.
      4: Provides adaptive planning, strategy selection, and intelligent re-planning capabilities.


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\planning\query_planner.py:83:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     80:         constraints: RetrievalConstraints | None = None,
     81:         context: dict[str, Any] | None = None,
     82:     ) -> QueryPlan:
>>>  83:         """Create a strategic execution plan for a query.
     84:
     85:         Args:
     86:             query: Input query string


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\planning\query_planner.py:147:31
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    144:
    145:         except Exception as e:
    146:             planning_time = (time.time() - start_time) * 1000
>>> 147:             logger.exception(f"Failed to create plan for query '{query[:50]}...': {e}")
    148:
    149:             # Create fallback simple plan
    150:             fallback_plan = await self._create_fallback_plan(query, constraints)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\planning\query_planner.py:162:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    159:         current_confidence: float,
    160:         failure_reason: str | None = None,
    161:     ) -> QueryPlan:
>>> 162:         """Adaptive replanning when confidence is low or execution fails.
    163:
    164:         Args:
    165:             original_plan: Original execution plan


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\planning\query_planner.py:212:31
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    209:             return new_plan
    210:
    211:         except Exception as e:
>>> 212:             logger.exception(f"Failed to create replan: {e}")
    213:             # Return original plan as fallback
    214:             return original_plan
    215:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\planning\query_planner.py:228:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    225:         agent_model: AgentReasoningModel,
    226:         context: dict[str, Any],
    227:     ) -> ReasoningStrategy:
>>> 228:         """Select appropriate reasoning strategy."""
    229:         # Check agent capabilities
    230:         if complexity_score > agent_model.max_complexity:
    231:             logger.warning(


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\planning\query_planner.py:280:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    277:         constraints: RetrievalConstraints,
    278:         analysis: dict[str, Any],
    279:     ) -> QueryPlan:
>>> 280:         """Create plan using selected strategy."""
    281:         # Get strategy instance
    282:         strategy_instance = self.strategy_selector.create_strategy_instance(strategy)
    283:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\planning\query_planner.py:343:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    340:         return plan
    341:
    342:     async def _create_fallback_plan(self, query: str, constraints: RetrievalConstraints) -> QueryPlan:
>>> 343:         """Create simple fallback plan when planning fails."""
    344:         from .strategies import SimpleFactStrategy
    345:
    346:         strategy = SimpleFactStrategy()


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\planning\query_planner.py:395:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    392:         return analysis
    393:
    394:     async def _select_replan_strategy(self, original_plan: QueryPlan, analysis: dict[str, Any]) -> ReasoningStrategy:
>>> 395:         """Select new strategy for replanning."""
    396:         original_strategy = original_plan.reasoning_strategy
    397:
    398:         # Try fallback strategy first


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\planning\query_planner.py:422:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    419:         new_strategy: ReasoningStrategy,
    420:         analysis: dict[str, Any],
    421:     ) -> QueryPlan:
>>> 422:         """Create new plan with different strategy."""
    423:         # Create new plan with updated strategy
    424:         new_plan = await self._create_strategy_plan(
    425:             original_plan.original_query,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\planning\query_planner.py:523:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    520:         return stats
    521:
    522:     async def validate_final_answer(self, answer: str, confidence: float, context: dict[str, Any]) -> tuple[bool, str]:
>>> 523:         """Validate final answer through Guardian Gate if confidence is low or domain is high-risk.
    524:
    525:         Args:
    526:             answer: The final answer to validate


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (12 calls)
File: packages\rag\mcp_servers\hyperag\planning\query_planner.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (14 calls)
File: packages\rag\mcp_servers\hyperag\planning\query_planner.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (21 total)
File: packages\rag\mcp_servers\hyperag\planning\query_planner.py:33:72
Recommendation: Replace magic numbers with named constants or enums
Code context:
     30:         self.performance_profile = performance_profile
     31:
     32:         # Default performance metrics
>>>  33:         self.max_complexity = performance_profile.get("max_complexity", 0.8)
     34:         self.reasoning_speed = performance_profile.get("reasoning_speed", 1.0)
     35:         self.accuracy = performance_profile.get("accuracy", 0.85)
     36:         self.memory_limit_mb = performance_profile.get("memory_limit_mb", 1000)


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (21 total)
File: packages\rag\mcp_servers\hyperag\planning\query_planner.py:35:60
Recommendation: Replace magic numbers with named constants or enums
Code context:
     32:         # Default performance metrics
     33:         self.max_complexity = performance_profile.get("max_complexity", 0.8)
     34:         self.reasoning_speed = performance_profile.get("reasoning_speed", 1.0)
>>>  35:         self.accuracy = performance_profile.get("accuracy", 0.85)
     36:         self.memory_limit_mb = performance_profile.get("memory_limit_mb", 1000)
     37:
     38:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (21 total)
File: packages\rag\mcp_servers\hyperag\planning\query_planner.py:58:35
Recommendation: Replace magic numbers with named constants or enums
Code context:
     55:
     56:         # Planning configuration
     57:         self.default_constraints = RetrievalConstraints()
>>>  58:         self.max_replan_attempts = 3
     59:         self.confidence_threshold_for_replan = 0.5
     60:
     61:         # Guardian integration settings


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (21 total)
File: packages\rag\mcp_servers\hyperag\planning\query_planner.py:59:47
Recommendation: Replace magic numbers with named constants or enums
Code context:
     56:         # Planning configuration
     57:         self.default_constraints = RetrievalConstraints()
     58:         self.max_replan_attempts = 3
>>>  59:         self.confidence_threshold_for_replan = 0.5
     60:
     61:         # Guardian integration settings
     62:         self.guardian_confidence_threshold = 0.7


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (21 total)
File: packages\rag\mcp_servers\hyperag\planning\query_planner.py:62:45
Recommendation: Replace magic numbers with named constants or enums
Code context:
     59:         self.confidence_threshold_for_replan = 0.5
     60:
     61:         # Guardian integration settings
>>>  62:         self.guardian_confidence_threshold = 0.7
     63:         self.guardian_high_risk_domains = {"medical", "financial", "legal"}
     64:
     65:         # Planning history for learning


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\planning\strategies.py:32:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     29:         constraints: RetrievalConstraints,
     30:         context: dict[str, Any],
     31:     ) -> QueryPlan:
>>>  32:         """Create execution plan for the query."""
     33:
     34:     def _create_base_plan(
     35:         self,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\planning\strategies.py:41:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     38:         strategy: ReasoningStrategy,
     39:         constraints: RetrievalConstraints,
     40:     ) -> QueryPlan:
>>>  41:         """Create base plan structure."""
     42:         return QueryPlan(
     43:             original_query=query,
     44:             query_type=query_type,


LONG_PARAMETER_LIST: Function '_add_retrieval_step' has 6 parameters (>5)
File: packages\rag\mcp_servers\hyperag\planning\strategies.py:49:4
Recommendation: Use parameter objects, data classes, or keyword-only arguments
Code context:
     46:             retrieval_constraints=constraints,
     47:         )
     48:
>>>  49:     def _add_retrieval_step(
     50:         self,
     51:         plan: QueryPlan,
     52:         description: str,


LONG_PARAMETER_LIST: Function '_add_reasoning_step' has 6 parameters (>5)
File: packages\rag\mcp_servers\hyperag\planning\strategies.py:70:4
Recommendation: Use parameter objects, data classes, or keyword-only arguments
Code context:
     67:         plan.add_step(step)
     68:         return step.step_id
     69:
>>>  70:     def _add_reasoning_step(
     71:         self,
     72:         plan: QueryPlan,
     73:         description: str,


LONG_PARAMETER_LIST: Function '_add_verification_step' has 6 parameters (>5)
File: packages\rag\mcp_servers\hyperag\planning\strategies.py:91:4
Recommendation: Use parameter objects, data classes, or keyword-only arguments
Code context:
     88:         plan.add_step(step)
     89:         return step.step_id
     90:
>>>  91:     def _add_verification_step(
     92:         self,
     93:         plan: QueryPlan,
     94:         description: str,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\planning\strategies.py:431:30
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    428:             operation="iterative_reasoning",
    429:             parameters={
    430:                 "initial_results": "from_previous_step",
>>> 431:                 "subqueries": "from_decomposition_step",
    432:                 "max_hops": constraints.max_depth,
    433:                 "convergence_threshold": 0.1,
    434:             },


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\planning\strategies.py:625:24
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    622:         # Step 3: Result integration
    623:         integration_step = self._add_reasoning_step(
    624:             plan,
>>> 625:             description="Integrate results from multiple strategies",
    626:             operation="result_integration",
    627:             parameters={
    628:                 "parallel_results": "from_previous_step",


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (38 calls)
File: packages\rag\mcp_servers\hyperag\planning\strategies.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (22 total)
File: packages\rag\mcp_servers\hyperag\planning\strategies.py:65:75
Recommendation: Replace magic numbers with named constants or enums
Code context:
     62:             parameters=parameters,
     63:             dependencies=dependencies or [],
     64:             confidence_threshold=plan.retrieval_constraints.confidence_threshold,
>>>  65:             timeout_ms=min(plan.retrieval_constraints.time_budget_ms // 2, 2000),
     66:         )
     67:         plan.add_step(step)
     68:         return step.step_id


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (22 total)
File: packages\rag\mcp_servers\hyperag\planning\strategies.py:85:33
Recommendation: Replace magic numbers with named constants or enums
Code context:
     82:             operation=operation,
     83:             parameters=parameters,
     84:             dependencies=dependencies or [],
>>>  85:             confidence_threshold=0.6,  # Lower threshold for reasoning steps
     86:             timeout_ms=min(plan.retrieval_constraints.time_budget_ms // 3, 3000),
     87:         )
     88:         plan.add_step(step)


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (22 total)
File: packages\rag\mcp_servers\hyperag\planning\strategies.py:86:72
Recommendation: Replace magic numbers with named constants or enums
Code context:
     83:             parameters=parameters,
     84:             dependencies=dependencies or [],
     85:             confidence_threshold=0.6,  # Lower threshold for reasoning steps
>>>  86:             timeout_ms=min(plan.retrieval_constraints.time_budget_ms // 3, 3000),
     87:         )
     88:         plan.add_step(step)
     89:         return step.step_id


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (22 total)
File: packages\rag\mcp_servers\hyperag\planning\strategies.py:86:75
Recommendation: Replace magic numbers with named constants or enums
Code context:
     83:             parameters=parameters,
     84:             dependencies=dependencies or [],
     85:             confidence_threshold=0.6,  # Lower threshold for reasoning steps
>>>  86:             timeout_ms=min(plan.retrieval_constraints.time_budget_ms // 3, 3000),
     87:         )
     88:         plan.add_step(step)
     89:         return step.step_id


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (22 total)
File: packages\rag\mcp_servers\hyperag\planning\strategies.py:106:33
Recommendation: Replace magic numbers with named constants or enums
Code context:
    103:             operation=operation,
    104:             parameters=parameters,
    105:             dependencies=dependencies or [],
>>> 106:             confidence_threshold=0.8,  # Higher threshold for verification
    107:             timeout_ms=1000,
    108:         )
    109:         plan.add_step(step)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\planning\strategy_selector.py:1:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
>>>   1: """Strategy Selection System.
      2:
      3: Selects and configures reasoning strategies based on query classification and requirements.
      4: Manages strategy registry and provides adaptive strategy selection.


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\planning\strategy_selector.py:15:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     12:
     13:
     14: class StrategySelector:
>>>  15:     """Selects appropriate reasoning strategies based on query analysis.
     16:     Maintains registry of available strategies and provides adaptive selection.
     17:     """
     18:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\planning\strategy_selector.py:90:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     87:         constraints: RetrievalConstraints | None = None,
     88:         context: dict | None = None,
     89:     ) -> ReasoningStrategy:
>>>  90:         """Select best reasoning strategy for the given query characteristics.
     91:
     92:         Args:
     93:             query_type: Classified query type


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\planning\strategy_selector.py:137:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    134:         return best_strategy
    135:
    136:     def create_strategy_instance(self, strategy: ReasoningStrategy, **kwargs):
>>> 137:         """Create instance of selected strategy."""
    138:         strategy_class = self.strategies.get(strategy)
    139:
    140:         if not strategy_class:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\planning\strategy_selector.py:147:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    144:         return strategy_class(**kwargs)
    145:
    146:     def _select_by_performance(self, candidates: list[ReasoningStrategy], context: dict) -> ReasoningStrategy:
>>> 147:         """Select strategy based on performance metrics."""
    148:         if not candidates:
    149:             return ReasoningStrategy.DIRECT_RETRIEVAL
    150:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\planning\strategy_selector.py:185:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    182:         confidence: float,
    183:         execution_time_ms: float,
    184:     ) -> None:
>>> 185:         """Update performance metrics for a strategy."""
    186:         if strategy not in self.strategy_performance:
    187:             self.strategy_performance[strategy] = {
    188:                 "success_rate": 0.8,


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'perf' methods (6 calls)
File: packages\rag\mcp_servers\hyperag\planning\strategy_selector.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (52 total)
File: packages\rag\mcp_servers\hyperag\planning\strategy_selector.py:79:39
Recommendation: Replace magic numbers with named constants or enums
Code context:
     76:
     77:         # Strategy performance tracking (would be learned over time)
     78:         self.strategy_performance = {
>>>  79:             strategy: {"success_rate": 0.8, "avg_confidence": 0.7, "avg_time_ms": 2000}
     80:             for strategy in ReasoningStrategy
     81:         }
     82:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (52 total)
File: packages\rag\mcp_servers\hyperag\planning\strategy_selector.py:79:62
Recommendation: Replace magic numbers with named constants or enums
Code context:
     76:
     77:         # Strategy performance tracking (would be learned over time)
     78:         self.strategy_performance = {
>>>  79:             strategy: {"success_rate": 0.8, "avg_confidence": 0.7, "avg_time_ms": 2000}
     80:             for strategy in ReasoningStrategy
     81:         }
     82:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (52 total)
File: packages\rag\mcp_servers\hyperag\planning\strategy_selector.py:79:82
Recommendation: Replace magic numbers with named constants or enums
Code context:
     76:
     77:         # Strategy performance tracking (would be learned over time)
     78:         self.strategy_performance = {
>>>  79:             strategy: {"success_rate": 0.8, "avg_confidence": 0.7, "avg_time_ms": 2000}
     80:             for strategy in ReasoningStrategy
     81:         }
     82:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (52 total)
File: packages\rag\mcp_servers\hyperag\planning\strategy_selector.py:108:30
Recommendation: Replace magic numbers with named constants or enums
Code context:
    105:         candidates = self.type_strategy_map.get(query_type, [ReasoningStrategy.DIRECT_RETRIEVAL])
    106:
    107:         # Apply complexity-based filtering
>>> 108:         if complexity_score > 0.8:
    109:             # Very complex queries benefit from hybrid or step-by-step
    110:             if ReasoningStrategy.HYBRID in self.strategies:
    111:                 return ReasoningStrategy.HYBRID


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (52 total)
File: packages\rag\mcp_servers\hyperag\planning\strategy_selector.py:115:32
Recommendation: Replace magic numbers with named constants or enums
Code context:
    112:             if ReasoningStrategy.STEP_BY_STEP in candidates:
    113:                 return ReasoningStrategy.STEP_BY_STEP
    114:
>>> 115:         elif complexity_score < 0.3:
    116:             # Simple queries can use direct retrieval
    117:             if ReasoningStrategy.DIRECT_RETRIEVAL in candidates:
    118:                 return ReasoningStrategy.DIRECT_RETRIEVAL


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\planning\__init__.py:1:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
>>>   1: """HypeRAG Planning Engine.
      2:
      3: Strategic query planning system inspired by PlanRAG research for complex reasoning tasks.
      4: Provides adaptive planning, strategy selection, and intelligent re-planning capabilities.


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\repair\innovator_agent.py:93:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     90:
     91:     @classmethod
     92:     def from_dict(cls, data: dict[str, Any]) -> "RepairOperation":
>>>  93:         """Create operation from dictionary."""
     94:         op_type = RepairOperationType(data["op"])
     95:
     96:         return cls(


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\repair\innovator_agent.py:184:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    181:         return [op for op in self.proposals if op.safety_critical]
    182:
    183:     def validate(self) -> bool:
>>> 184:         """Validate the proposal set and update validation status."""
    185:         self.validation_errors.clear()
    186:         self.validation_warnings.clear()
    187:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\repair\innovator_agent.py:287:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    284:         self.prompts = self._load_prompts()
    285:
    286:     def _load_prompts(self) -> dict[str, str]:
>>> 287:         """Load prompts from markdown file."""
    288:         prompts = {}
    289:
    290:         try:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\repair\innovator_agent.py:303:30
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    300:                     section_content = sections[i + 1].strip() if i + 1 < len(sections) else ""
    301:                     prompts[section_name] = section_content
    302:         except Exception as e:
>>> 303:             logging.warning(f"Could not load prompts from {self.prompt_bank_path}: {e}")
    304:
    305:         # Fallback prompts
    306:         if not prompts:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\repair\innovator_agent.py:314:34
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    311:     def _get_default_prompts(self) -> dict[str, str]:
    312:         """Get default prompts if file loading fails."""
    313:         return {
>>> 314:             "base_system_prompt": """You are a knowledge graph repair assistant (Innovator Agent) specializing in analyzing graph violations and proposing precise repair operations.
    315:
    316: Your responsibilities:
    317: - Analyze knowledge graph constraint violations


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\repair\innovator_agent.py:328:43
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    325: - Prefer minimal changes over extensive restructuring
    326: - Maintain semantic consistency
    327: - Include confidence scores when possible""",
>>> 328:             "general_repair_instructions": """Analyze the following knowledge graph violation and propose repair operations.
    329:
    330: **Available Operations:**
    331: - add_edge: Create new relationships


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\repair\innovator_agent.py:428:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    425:                 "",
    426:                 "**Required Format:**",
    427:                 "[",
>>> 428:                 '  {"op":"delete_edge","target":"edge_123","rationale":"Removes unsafe drug prescription due to patient allergy","confidence":0.95},',
    429:                 '  {"op":"update_attr","target":"node_456","property":"dosage","value":"250mg","rationale":"Corrects dosage to therapeutic range","confidence":0.8}',
    430:                 "]",
    431:                 "",


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\repair\innovator_agent.py:429:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    426:                 "**Required Format:**",
    427:                 "[",
    428:                 '  {"op":"delete_edge","target":"edge_123","rationale":"Removes unsafe drug prescription due to patient allergy","confidence":0.95},',
>>> 429:                 '  {"op":"update_attr","target":"node_456","property":"dosage","value":"250mg","rationale":"Corrects dosage to therapeutic range","confidence":0.8}',
    430:                 "]",
    431:                 "",
    432:                 "JSON Array:",


LONG_PARAMETER_LIST: Function '__init__' has 6 parameters (>5)
File: packages\rag\mcp_servers\hyperag\repair\innovator_agent.py:442:4
Recommendation: Use parameter objects, data classes, or keyword-only arguments
Code context:
    439: class InnovatorAgent:
    440:     """Main Innovator Agent class for knowledge graph repair."""
    441:
>>> 442:     def __init__(
    443:         self,
    444:         llm_driver: LLMDriver,
    445:         template_encoder: TemplateEncoder | None = None,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\repair\innovator_agent.py:471:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    468:         self.success_rate = 0.0
    469:
    470:     async def analyze_violation(self, violation_data: dict[str, Any]) -> ViolationTemplate:
>>> 471:         """Analyze and encode a GDC violation.
    472:
    473:         Args:
    474:             violation_data: Raw violation data from GDC extractor


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\repair\innovator_agent.py:568:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    565:             )
    566:
    567:     def _parse_repair_operations(self, response_text: str) -> list[RepairOperation]:
>>> 568:         """Parse repair operations from LLM response.
    569:
    570:         Args:
    571:             response_text: Raw LLM response


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\repair\innovator_agent.py:814:25
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    811:         deleted_entities = {op.target_id for op in operations if op.operation_type == RepairOperationType.DELETE_NODE}
    812:
    813:         if core_entities & deleted_entities:
>>> 814:             notes.append("Operations may delete core entity nodes - verify this is intended")
    815:
    816:         # Domain-specific validation
    817:         if self.domain == "medical":


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\repair\innovator_agent.py:833:64
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    830:
    831:         conflicts = edge_deletions & edge_updates
    832:         if conflicts:
>>> 833:             notes.append(f"Potential conflicts: {len(conflicts)} edges are both deleted and updated")
    834:
    835:         return notes
    836:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\repair\innovator_agent.py:918:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    915:
    916:     @classmethod
    917:     async def create_default(cls, model_name: str = "llama3.2:3b", domain: str = "general") -> "InnovatorAgent":
>>> 918:         """Create InnovatorAgent with default configuration.
    919:
    920:         Args:
    921:             model_name: LLM model to use


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (16 calls)
File: packages\rag\mcp_servers\hyperag\repair\innovator_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'data' methods (10 calls)
File: packages\rag\mcp_servers\hyperag\repair\innovator_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'op_data' methods (19 calls)
File: packages\rag\mcp_servers\hyperag\repair\innovator_agent.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (17 total)
File: packages\rag\mcp_servers\hyperag\repair\innovator_agent.py:148:69
Recommendation: Replace magic numbers with named constants or enums
Code context:
    145:         if self.proposals:
    146:             self.overall_confidence = sum(op.confidence for op in self.proposals) / len(self.proposals)
    147:             self.safety_score = 1.0 - (sum(1 for op in self.proposals if op.safety_critical) / len(self.proposals))
>>> 148:             self.completeness_score = min(1.0, len(self.proposals) / 3.0)  # Assume ~3 ops for complete repair
    149:
    150:     def to_dict(self) -> dict[str, Any]:
    151:         """Convert proposal set to dictionary."""


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (17 total)
File: packages\rag\mcp_servers\hyperag\repair\innovator_agent.py:175:63
Recommendation: Replace magic numbers with named constants or enums
Code context:
    172:         """Convert proposals to JSON array format."""
    173:         return json.dumps([op.to_dict() for op in self.proposals], indent=2)
    174:
>>> 175:     def get_high_confidence_proposals(self, threshold: float = 0.8) -> list[RepairOperation]:
    176:         """Get proposals with confidence above threshold."""
    177:         return [op for op in self.proposals if op.confidence >= threshold]
    178:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (17 total)
File: packages\rag\mcp_servers\hyperag\repair\innovator_agent.py:236:70
Recommendation: Replace magic numbers with named constants or enums
Code context:
    233:         if self.operations:
    234:             self.overall_confidence = sum(op.confidence for op in self.operations) / len(self.operations)
    235:             self.safety_score = 1.0 - (sum(1 for op in self.operations if op.safety_critical) / len(self.operations))
>>> 236:             self.completeness_score = min(1.0, len(self.operations) / 3.0)  # Assume ~3 ops for complete repair
    237:
    238:     def to_dict(self) -> dict[str, Any]:
    239:         """Convert proposal to dictionary."""


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (17 total)
File: packages\rag\mcp_servers\hyperag\repair\innovator_agent.py:263:64
Recommendation: Replace magic numbers with named constants or enums
Code context:
    260:             lines.append(operation.to_jsonl())
    261:         return "\n".join(lines)
    262:
>>> 263:     def get_high_confidence_operations(self, threshold: float = 0.8) -> list[RepairOperation]:
    264:         """Get operations with confidence above threshold."""
    265:         return [op for op in self.operations if op.confidence >= threshold]
    266:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (17 total)
File: packages\rag\mcp_servers\hyperag\repair\innovator_agent.py:485:38
Recommendation: Replace magic numbers with named constants or enums
Code context:
    482:         self,
    483:         violation_data: dict[str, Any],
    484:         max_operations: int = 10,
>>> 485:         confidence_threshold: float = 0.5,
    486:     ) -> RepairProposalSet:
    487:         """Generate repair proposals for a GDC violation.
    488:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\repair\llm_driver.py:109:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    106:
    107: @dataclass
    108: class GenerationResponse:
>>> 109:     """Response from LLM generation."""
    110:
    111:     text: str
    112:     finish_reason: str


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\repair\llm_driver.py:143:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    140:
    141:     @abstractmethod
    142:     async def generate(self, request: GenerationRequest) -> GenerationResponse:
>>> 143:         """Generate text from prompt."""
    144:
    145:     @abstractmethod
    146:     async def generate_stream(self, request: GenerationRequest) -> AsyncIterator[str]:


HARDCODED_PATH: Hardcoded path or URL detected
File: packages\rag\mcp_servers\hyperag\repair\llm_driver.py:163:47
Recommendation: Use configuration files, environment variables, or path utilities
Code context:
    160:
    161:     def __init__(self, config: ModelConfig) -> None:
    162:         super().__init__(config)
>>> 163:         self.base_url = config.api_endpoint or "http://localhost:11434"
    164:
    165:     async def generate(self, request: GenerationRequest) -> GenerationResponse:
    166:         """Generate using Ollama API."""


HARDCODED_PATH: Hardcoded path or URL detected
File: packages\rag\mcp_servers\hyperag\repair\llm_driver.py:298:47
Recommendation: Use configuration files, environment variables, or path utilities
Code context:
    295:
    296:     def __init__(self, config: ModelConfig) -> None:
    297:         super().__init__(config)
>>> 298:         self.base_url = config.api_endpoint or "http://localhost:1234"
    299:
    300:     async def generate(self, request: GenerationRequest) -> GenerationResponse:
    301:         """Generate using LM Studio OpenAI-compatible API."""


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\repair\llm_driver.py:557:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    554:         self._audit_log = []
    555:
    556:     def _create_backend(self) -> LLMBackend:
>>> 557:         """Create appropriate backend based on config."""
    558:         if self.config.backend == ModelBackend.OLLAMA:
    559:             return OllamaBackend(self.config)
    560:         if self.config.backend == ModelBackend.LMSTUDIO:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\repair\llm_driver.py:610:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    607:             self._audit_log = self._audit_log[-500:]
    608:
    609:     async def generate(self, prompt: str, system_prompt: str | None = None, **kwargs) -> GenerationResponse:
>>> 610:         """Generate text from prompt with rate limiting and audit logging.
    611:
    612:         Args:
    613:             prompt: Input prompt


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\repair\llm_driver.py:671:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    668:         return info
    669:
    670:     def parse_confidence_from_response(self, response_text: str) -> float | None:
>>> 671:         """Parse confidence score from model response.
    672:
    673:         Args:
    674:             response_text: Generated text


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\repair\llm_driver.py:728:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    725:
    726:     @classmethod
    727:     def create_default_config(cls, model_name: str, backend: ModelBackend = ModelBackend.OLLAMA) -> ModelConfig:
>>> 728:         """Create default configuration for common models.
    729:
    730:         Args:
    731:             model_name: Name of the model


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\repair\llm_driver.py:749:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    746:
    747:     @classmethod
    748:     def create_llama_config(cls, model_size: str = "7b") -> ModelConfig:
>>> 749:         """Create configuration for Llama models.
    750:
    751:         Args:
    752:             model_size: Model size (7b, 13b, 70b)


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'time' methods (7 calls)
File: packages\rag\mcp_servers\hyperag\repair\llm_driver.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'aiohttp' methods (12 calls)
File: packages\rag\mcp_servers\hyperag\repair\llm_driver.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'session' methods (8 calls)
File: packages\rag\mcp_servers\hyperag\repair\llm_driver.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'response' methods (10 calls)
File: packages\rag\mcp_servers\hyperag\repair\llm_driver.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'result' methods (7 calls)
File: packages\rag\mcp_servers\hyperag\repair\llm_driver.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (6 calls)
File: packages\rag\mcp_servers\hyperag\repair\llm_driver.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (28 total)
File: packages\rag\mcp_servers\hyperag\repair\llm_driver.py:49:22
Recommendation: Replace magic numbers with named constants or enums
Code context:
     46:     api_key: str | None = None
     47:
     48:     # Generation parameters
>>>  49:     max_tokens: int = 2048
     50:     temperature: float = 0.1
     51:     top_p: float = 0.9
     52:     stop_sequences: list[str] = field(default_factory=lambda: ["\n\n", "###"])


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (28 total)
File: packages\rag\mcp_servers\hyperag\repair\llm_driver.py:50:25
Recommendation: Replace magic numbers with named constants or enums
Code context:
     47:
     48:     # Generation parameters
     49:     max_tokens: int = 2048
>>>  50:     temperature: float = 0.1
     51:     top_p: float = 0.9
     52:     stop_sequences: list[str] = field(default_factory=lambda: ["\n\n", "###"])
     53:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (28 total)
File: packages\rag\mcp_servers\hyperag\repair\llm_driver.py:51:19
Recommendation: Replace magic numbers with named constants or enums
Code context:
     48:     # Generation parameters
     49:     max_tokens: int = 2048
     50:     temperature: float = 0.1
>>>  51:     top_p: float = 0.9
     52:     stop_sequences: list[str] = field(default_factory=lambda: ["\n\n", "###"])
     53:
     54:     # Model-specific parameters


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (28 total)
File: packages\rag\mcp_servers\hyperag\repair\llm_driver.py:55:26
Recommendation: Replace magic numbers with named constants or enums
Code context:
     52:     stop_sequences: list[str] = field(default_factory=lambda: ["\n\n", "###"])
     53:
     54:     # Model-specific parameters
>>>  55:     context_length: int = 4096
     56:     batch_size: int = 1
     57:     gpu_layers: int = -1  # -1 for auto
     58:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (28 total)
File: packages\rag\mcp_servers\hyperag\repair\llm_driver.py:60:27
Recommendation: Replace magic numbers with named constants or enums
Code context:
     57:     gpu_layers: int = -1  # -1 for auto
     58:
     59:     # Performance settings
>>>  60:     timeout_seconds: int = 30
     61:     retry_attempts: int = 3
     62:
     63:     # Rate limiting


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\repair\templates.py:108:21
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    105:         # Build natural sentence based on relationship type
    106:         if self.relationship == "PRESCRIBES":
    107:             props_text = f" {', '.join(critical_props)}" if critical_props else ""
>>> 108:             return f"Prescription relationship where {self.source_id} prescribes {self.target_id}{props_text}"
    109:         if self.relationship == "ALLERGIC_TO":
    110:             severity = ""
    111:             if critical_props:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\repair\templates.py:113:21
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    110:             severity = ""
    111:             if critical_props:
    112:                 severity = f" ({', '.join(critical_props)})"
>>> 113:             return f"Allergy relationship where {self.source_id} is allergic to {self.target_id}{severity}"
    114:         if self.relationship == "TREATS":
    115:             props_text = f" {', '.join(critical_props)}" if critical_props else ""
    116:             return f"Treatment relationship where {self.source_id} treats condition {self.target_id}{props_text}"


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\repair\templates.py:116:21
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    113:             return f"Allergy relationship where {self.source_id} is allergic to {self.target_id}{severity}"
    114:         if self.relationship == "TREATS":
    115:             props_text = f" {', '.join(critical_props)}" if critical_props else ""
>>> 116:             return f"Treatment relationship where {self.source_id} treats condition {self.target_id}{props_text}"
    117:         # Generic relationship format
    118:         props_text = f" with {', '.join(critical_props)}" if critical_props else ""
    119:         return f"Relationship {self.edge_id} where {self.source_id} {self.relationship.lower().replace('_', ' ')} {self.target_id}{props_text}"


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\repair\templates.py:175:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    172:         self.field_mappings = self._load_field_mappings()
    173:
    174:     def _load_field_mappings(self) -> dict[str, set[DomainField]]:
>>> 175:         """Load mappings from node/edge types to critical fields."""
    176:         # Default mappings for HypeRAG schema
    177:         mappings = {
    178:             # Node type mappings


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\repair\templates.py:215:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    212:         return mappings
    213:
    214:     def encode_node(self, node_data: dict[str, Any]) -> NodeTemplate:
>>> 215:         """Encode a single node into template format.
    216:
    217:         Args:
    218:             node_data: Node data from Neo4j result


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\repair\templates.py:250:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    247:         )
    248:
    249:     def encode_edge(self, edge_data: dict[str, Any]) -> EdgeTemplate:
>>> 250:         """Encode a single edge into template format.
    251:
    252:         Args:
    253:             edge_data: Edge data from Neo4j result


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\repair\templates.py:329:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    326:         )
    327:
    328:     def create_repair_context(self, violation: ViolationTemplate) -> dict[str, Any]:
>>> 329:         """Create structured context for repair operations.
    330:
    331:         Args:
    332:             violation: The violation template


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'critical_props' methods (9 calls)
File: packages\rag\mcp_servers\hyperag\repair\templates.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'violation_data' methods (8 calls)
File: packages\rag\mcp_servers\hyperag\repair\templates.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\retrieval\divergent_retriever.py:24:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     21:
     22: @dataclass
     23: class DivergentResults:
>>>  24:     """Results from divergent/creative retrieval."""
     25:
     26:     nodes: list[dict[str, Any]]
     27:     edges: list[dict[str, Any]]


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\retrieval\divergent_retriever.py:41:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     38:
     39:
     40: class DivergentRetriever:
>>>  41:     """Creative retrieval using non-standard graph patterns.
     42:
     43:     Strategies:
     44:     1. Reverse walks - start from distant nodes, walk towards query


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\retrieval\divergent_retriever.py:173:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    170:             )
    171:
    172:     async def _find_distant_nodes(self, query_seeds: list[str], plan: QueryPlan) -> list[str]:
>>> 173:         """Find nodes that are semantically/topologically distant from query seeds."""
    174:         try:
    175:             distant_nodes = []
    176:             self.config.get("max_reverse_distance", 5)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\retrieval\divergent_retriever.py:303:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    300:             return []
    301:
    302:     async def _find_temporal_anomalies(self, query_seeds: list[str], plan: QueryPlan) -> list[str]:
>>> 303:         """Find temporal patterns that deviate from expected."""
    304:         try:
    305:             anomaly_nodes = []
    306:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\retrieval\divergent_retriever.py:409:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    406:         return divergent_scores
    407:
    408:     def _calculate_divergence(self, node_id: str, query_seeds: list[str]) -> float:
>>> 409:         """Calculate how divergent a node is from the query."""
    410:         # Simulate semantic/topological divergence
    411:         node_hash = hash(node_id)
    412:         seed_hashes = [hash(seed) for seed in query_seeds]


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\retrieval\divergent_retriever.py:559:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    556:
    557: # Factory function
    558: def create_divergent_retriever(hypergraph_kg: HypergraphKG, config: dict[str, Any] | None = None) -> DivergentRetriever:
>>> 559:     """Create a DivergentRetriever for creative mode retrieval."""
    560:     return DivergentRetriever(hypergraph=hypergraph_kg, config=config)
    561:
    562:


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (16 calls)
File: packages\rag\mcp_servers\hyperag\retrieval\divergent_retriever.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (7 calls)
File: packages\rag\mcp_servers\hyperag\retrieval\divergent_retriever.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'reasoning_trace' methods (16 calls)
File: packages\rag\mcp_servers\hyperag\retrieval\divergent_retriever.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'random' methods (7 calls)
File: packages\rag\mcp_servers\hyperag\retrieval\divergent_retriever.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'node_id' methods (13 calls)
File: packages\rag\mcp_servers\hyperag\retrieval\divergent_retriever.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (46 total)
File: packages\rag\mcp_servers\hyperag\retrieval\divergent_retriever.py:56:70
Recommendation: Replace magic numbers with named constants or enums
Code context:
     53:         self.config = config or self._default_config()
     54:
     55:         # Creative parameters
>>>  56:         self.divergence_factor = self.config.get("divergence_factor", 0.7)
     57:         self.serendipity_rate = self.config.get("serendipity_rate", 0.3)
     58:         self.cross_domain_boost = self.config.get("cross_domain_boost", 2.0)
     59:         self.weak_tie_amplification = self.config.get("weak_tie_amplification", 1.5)


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (46 total)
File: packages\rag\mcp_servers\hyperag\retrieval\divergent_retriever.py:57:68
Recommendation: Replace magic numbers with named constants or enums
Code context:
     54:
     55:         # Creative parameters
     56:         self.divergence_factor = self.config.get("divergence_factor", 0.7)
>>>  57:         self.serendipity_rate = self.config.get("serendipity_rate", 0.3)
     58:         self.cross_domain_boost = self.config.get("cross_domain_boost", 2.0)
     59:         self.weak_tie_amplification = self.config.get("weak_tie_amplification", 1.5)
     60:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (46 total)
File: packages\rag\mcp_servers\hyperag\retrieval\divergent_retriever.py:59:80
Recommendation: Replace magic numbers with named constants or enums
Code context:
     56:         self.divergence_factor = self.config.get("divergence_factor", 0.7)
     57:         self.serendipity_rate = self.config.get("serendipity_rate", 0.3)
     58:         self.cross_domain_boost = self.config.get("cross_domain_boost", 2.0)
>>>  59:         self.weak_tie_amplification = self.config.get("weak_tie_amplification", 1.5)
     60:
     61:         # Performance tracking
     62:         self.query_count = 0


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (46 total)
File: packages\rag\mcp_servers\hyperag\retrieval\divergent_retriever.py:176:52
Recommendation: Replace magic numbers with named constants or enums
Code context:
    173:         """Find nodes that are semantically/topologically distant from query seeds."""
    174:         try:
    175:             distant_nodes = []
>>> 176:             self.config.get("max_reverse_distance", 5)
    177:
    178:             # For each seed, find nodes that are far away
    179:             for seed in query_seeds:


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (46 total)
File: packages\rag\mcp_servers\hyperag\retrieval\divergent_retriever.py:184:31
Recommendation: Replace magic numbers with named constants or enums
Code context:
    181:                 # In practice, this would use shortest path or embedding distance
    182:
    183:                 # Generate realistic distant node IDs
>>> 184:                 for i in range(3):  # 3 distant nodes per seed
    185:                     # Create distant node ID by hashing seed with distance
    186:                     distant_id = f"distant_{hash(seed + str(i)) % 10000}"
    187:                     distant_nodes.append(distant_id)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\retrieval\hybrid_retriever.py:25:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     22:
     23: @dataclass
     24: class HybridResults:
>>>  25:     """Combined results from hybrid retrieval."""
     26:
     27:     vector_results: list[dict[str, Any]]
     28:     ppr_results: PPRResults


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\retrieval\hybrid_retriever.py:213:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    210:             return []
    211:
    212:     def _extract_seeds(self, vector_results: list[dict[str, Any]], plan: QueryPlan) -> list[str]:
>>> 213:         """Extract seed node IDs for PPR from vector results."""
    214:         try:
    215:             # Use top vector results as seeds
    216:             max_seeds = getattr(plan, "max_seeds", 10)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\retrieval\hybrid_retriever.py:328:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    325:         }
    326:
    327:     def update_fusion_weights(self, vector_weight: float, ppr_weight: float) -> None:
>>> 328:         """Update fusion weights (could be based on user feedback)."""
    329:         total = vector_weight + ppr_weight
    330:         if total > 0:
    331:             self.vector_weight = vector_weight / total


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\retrieval\hybrid_retriever.py:333:26
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    330:         if total > 0:
    331:             self.vector_weight = vector_weight / total
    332:             self.ppr_weight = ppr_weight / total
>>> 333:             logger.info(f"Updated fusion weights: vector={self.vector_weight:.3f}, ppr={self.ppr_weight:.3f}")
    334:
    335:
    336: # Factory function


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\retrieval\hybrid_retriever.py:345:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    342:     ppr_retriever: PersonalizedPageRank,
    343:     alpha_store: AlphaProfileStore | None = None,
    344: ) -> HybridRetriever:
>>> 345:     """Create a HybridRetriever with the given components."""
    346:     return HybridRetriever(
    347:         hippo_index=hippo_index,
    348:         hypergraph_kg=hypergraph_kg,


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (6 calls)
File: packages\rag\mcp_servers\hyperag\retrieval\hybrid_retriever.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'reasoning_trace' methods (10 calls)
File: packages\rag\mcp_servers\hyperag\retrieval\hybrid_retriever.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\retrieval\importance_flow.py:133:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    130:         propagation_steps: int = 3,
    131:         decay_factor: float = 0.8,
    132:     ) -> dict[str, float]:
>>> 133:         """Propagate uncertainty through the graph.
    134:
    135:         Args:
    136:             source_uncertainties: Initial uncertainties {node_id: uncertainty}


LONG_PARAMETER_LIST: Function 'random_walk_sampling' has 6 parameters (>5)
File: packages\rag\mcp_servers\hyperag\retrieval\importance_flow.py:165:4
Recommendation: Use parameter objects, data classes, or keyword-only arguments
Code context:
    162:
    163:         return current_uncertainties
    164:
>>> 165:     def random_walk_sampling(
    166:         self,
    167:         start_nodes: list[str],
    168:         adjacency_dict: dict[str, list[tuple[str, float]]],


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\retrieval\importance_flow.py:263:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    260:         flow_matrix: np.ndarray,
    261:         node_ids: list[str],
    262:     ) -> dict[str, float]:
>>> 263:         """Rank nodes based on flow from sources to targets.
    264:
    265:         Args:
    266:             source_nodes: Source node IDs


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\retrieval\importance_flow.py:387:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    384:
    385:
    386: def build_sparse_adjacency(edges: list[tuple[str, str, float]], node_ids: list[str]) -> csr_matrix:
>>> 387:     """Build sparse adjacency matrix from edge list."""
    388:     node_to_idx = {node_id: i for i, node_id in enumerate(node_ids)}
    389:     n = len(node_ids)
    390:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\retrieval\importance_flow.py:405:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    402:
    403:
    404: def create_importance_flow(damping: float = 0.85) -> ImportanceFlow:
>>> 405:     """Create an ImportanceFlow instance."""
    406:     return ImportanceFlow(damping=damping)


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'np' methods (27 calls)
File: packages\rag\mcp_servers\hyperag\retrieval\importance_flow.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\retrieval\ppr_retriever.py:1:0
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
>>>   1: """Personalized PageRank Retriever with Rel-GAT α-weight fusion.
      2:
      3: Core retrieval engine that combines:
      4: - Standard PPR over hypergraph knowledge


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\retrieval\ppr_retriever.py:29:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     26:
     27: @dataclass
     28: class PPRResults:
>>>  29:     """Results from Personalized PageRank retrieval."""
     30:
     31:     nodes: list[dict[str, Any]]
     32:     edges: list[dict[str, Any]]


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\retrieval\ppr_retriever.py:109:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    106:         return alpha_scores
    107:
    108:     async def update_profile(self, profile: AlphaProfile) -> bool:
>>> 109:         """Update user's α-profile."""
    110:         try:
    111:             self.profiles_cache[profile.user_id] = profile
    112:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\retrieval\ppr_retriever.py:131:31
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    128:             return True
    129:
    130:         except Exception as e:
>>> 131:             logger.exception(f"Failed to update α-profile for {profile.user_id}: {e!s}")
    132:             return False
    133:
    134:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\retrieval\ppr_retriever.py:136:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    133:
    134:
    135: class PersonalizedPageRank:
>>> 136:     """Single-pass, uncertainty-aware multi-hop retrieval.
    137:
    138:     Pipeline:
    139:     1) Seed collection from query planner


LONG_PARAMETER_LIST: Function '__init__' has 6 parameters (>5)
File: packages\rag\mcp_servers\hyperag\retrieval\ppr_retriever.py:146:4
Recommendation: Use parameter objects, data classes, or keyword-only arguments
Code context:
    143:     5) Return scored Node / Hyperedge list
    144:     """
    145:
>>> 146:     def __init__(
    147:         self,
    148:         hippo_index: HippoIndex,
    149:         hypergraph: HypergraphKG,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\retrieval\ppr_retriever.py:200:35
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    197:                 return await self._route_to_creative(query_seeds, user_id, plan, reasoning_trace)
    198:
    199:             # 1. Standard dense k-NN on Hippo-Index for recency boost
>>> 200:             reasoning_trace.append("Fetching recency nodes from HippoIndex")
    201:             recency_nodes = await self._knn_hippo(query_seeds, plan)
    202:             reasoning_trace.append(f"Found {len(recency_nodes)} recent nodes")
    203:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\retrieval\ppr_retriever.py:281:60
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    278:             # Extract node IDs
    279:             recency_node_ids = [node.id for node in recent_nodes[:knn_limit]]
    280:
>>> 281:             logger.debug(f"Retrieved {len(recency_node_ids)} recent nodes from HippoIndex")
    282:             return recency_node_ids
    283:
    284:         except Exception as e:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\retrieval\ppr_retriever.py:513:26
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    510:         try:
    511:             with open(config_path) as f:
    512:                 config = yaml.safe_load(f)
>>> 513:             logger.info(f"Loaded retrieval config from {config_path}")
    514:             return config
    515:         except Exception as e:
    516:             logger.warning(f"Failed to load config from {config_path}: {e!s}")


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\retrieval\ppr_retriever.py:516:29
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    513:             logger.info(f"Loaded retrieval config from {config_path}")
    514:             return config
    515:         except Exception as e:
>>> 516:             logger.warning(f"Failed to load config from {config_path}: {e!s}")
    517:             # Return default configuration
    518:             return {
    519:                 "pagerank": {"damping_factor": 0.85, "max_iterations": 50},


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\retrieval\ppr_retriever.py:548:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    545:     alpha_store: AlphaProfileStore | None = None,
    546:     config_path: str | None = None,
    547: ) -> PersonalizedPageRank:
>>> 548:     """Create a PersonalizedPageRank retriever with the given backends."""
    549:     return PersonalizedPageRank(
    550:         hippo_index=hippo_index,
    551:         hypergraph=hypergraph_kg,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\retrieval\ppr_retriever.py:558:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    555:
    556:
    557: def create_alpha_profile_store(redis_client=None) -> AlphaProfileStore:
>>> 558:     """Create an AlphaProfileStore for managing user personalization."""
    559:     return AlphaProfileStore(redis_client=redis_client)


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (13 calls)
File: packages\rag\mcp_servers\hyperag\retrieval\ppr_retriever.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (9 calls)
File: packages\rag\mcp_servers\hyperag\retrieval\ppr_retriever.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'reasoning_trace' methods (14 calls)
File: packages\rag\mcp_servers\hyperag\retrieval\ppr_retriever.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

MAGIC_NUMBER_ABUSE: Excessive magic literals detected (22 total)
File: packages\rag\mcp_servers\hyperag\retrieval\ppr_retriever.py:64:25
Recommendation: Replace magic numbers with named constants or enums
Code context:
     61:     def __init__(self, redis_client=None) -> None:
     62:         self.redis_client = redis_client
     63:         self.profiles_cache: dict[str, AlphaProfile] = {}
>>>  64:         self.cache_ttl = 3600  # 1 hour
     65:
     66:     async def get_profile(self, user_id: str) -> AlphaProfile | None:
     67:         """Get user's α-profile."""


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (22 total)
File: packages\rag\mcp_servers\hyperag\retrieval\ppr_retriever.py:151:25
Recommendation: Replace magic numbers with named constants or enums
Code context:
    148:         hippo_index: HippoIndex,
    149:         hypergraph: HypergraphKG,
    150:         alpha_store: AlphaProfileStore | None = None,
>>> 151:         damping: float = 0.85,
    152:         config_path: str | None = None,
    153:     ) -> None:
    154:         self.hippo_index = hippo_index


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (22 total)
File: packages\rag\mcp_servers\hyperag\retrieval\ppr_retriever.py:268:56
Recommendation: Replace magic numbers with named constants or enums
Code context:
    265:             if not recency_config.get("enabled", True):
    266:                 return []
    267:
>>> 268:             knn_limit = recency_config.get("knn_limit", 20)
    269:             max_age_hours = recency_config.get("max_age_hours", 24)
    270:
    271:             # Get recent nodes from HippoIndex


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (22 total)
File: packages\rag\mcp_servers\hyperag\retrieval\ppr_retriever.py:269:64
Recommendation: Replace magic numbers with named constants or enums
Code context:
    266:                 return []
    267:
    268:             knn_limit = recency_config.get("knn_limit", 20)
>>> 269:             max_age_hours = recency_config.get("max_age_hours", 24)
    270:
    271:             # Get recent nodes from HippoIndex
    272:             recent_nodes = await self.hippo_index.get_recent_nodes(


MAGIC_NUMBER_ABUSE: Excessive magic literals detected (22 total)
File: packages\rag\mcp_servers\hyperag\retrieval\ppr_retriever.py:292:62
Recommendation: Replace magic numbers with named constants or enums
Code context:
    289:         """Run Personalized PageRank on the hypergraph."""
    290:         try:
    291:             ppr_config = self.config.get("pagerank", {})
>>> 292:             max_iterations = ppr_config.get("max_iterations", 50)
    293:             convergence_tolerance = ppr_config.get("convergence_tolerance", 1e-6)
    294:             min_score_threshold = ppr_config.get("min_score_threshold", 0.001)
    295:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\storage\sqlite_storage.py:21:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     18:     def _init_db(self) -> None:
     19:         cur = self.conn.cursor()
     20:         cur.execute(
>>>  21:             """
     22:             CREATE TABLE IF NOT EXISTS knowledge (
     23:                 id TEXT PRIMARY KEY,
     24:                 content TEXT NOT NULL,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\storage\sqlite_storage.py:42:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     39:         def _insert() -> None:
     40:             cur = self.conn.cursor()
     41:             cur.execute(
>>>  42:                 "INSERT INTO knowledge (id, content, content_type, metadata) VALUES (?, ?, ?, ?)",
     43:                 (node_id, content, content_type, json.dumps(metadata or {})),
     44:             )
     45:             self.conn.commit()


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\storage\sqlite_storage.py:53:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     50:         def _get() -> dict[str, Any] | None:
     51:             cur = self.conn.cursor()
     52:             cur.execute(
>>>  53:                 "SELECT id, content, content_type, metadata FROM knowledge WHERE id=?",
     54:                 (node_id,),
     55:             )
     56:             row = cur.fetchone()


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\storage\sqlite_storage.py:80:16
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     77:         def _search() -> list[dict[str, Any]]:
     78:             cur = self.conn.cursor()
     79:             cur.execute(
>>>  80:                 "SELECT id, content, content_type, metadata FROM knowledge WHERE content LIKE ? LIMIT ?",
     81:                 (like_query, limit),
     82:             )
     83:             rows = cur.fetchall()


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\storage\sqlite_storage.py:109:28
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    106:         def _update() -> None:
    107:             cur = self.conn.cursor()
    108:             if content is not None:
>>> 109:                 cur.execute("UPDATE knowledge SET content=? WHERE id=?", (content, node_id))
    110:             if metadata is not None:
    111:                 cur.execute(
    112:                     "UPDATE knowledge SET metadata=? WHERE id=?",


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\storage\sqlite_storage.py:112:20
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    109:                 cur.execute("UPDATE knowledge SET content=? WHERE id=?", (content, node_id))
    110:             if metadata is not None:
    111:                 cur.execute(
>>> 112:                     "UPDATE knowledge SET metadata=? WHERE id=?",
    113:                     (json.dumps(metadata), node_id),
    114:                 )
    115:             self.conn.commit()


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\rag\mcp_servers\hyperag\storage\sqlite_storage.py:122:24
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    119:     async def delete_knowledge(self, node_id: str) -> None:
    120:         def _delete() -> None:
    121:             cur = self.conn.cursor()
>>> 122:             cur.execute("DELETE FROM knowledge WHERE id=?", (node_id,))
    123:             self.conn.commit()
    124:
    125:         await asyncio.to_thread(_delete)


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'cur' methods (9 calls)
File: packages\rag\mcp_servers\hyperag\storage\sqlite_storage.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'asyncio' methods (6 calls)
File: packages\rag\mcp_servers\hyperag\storage\sqlite_storage.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\tokenomics\governance\cli.py:41:4
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     38:
     39:
     40: def create_proposal(gov: GovernanceSystem, args) -> None:
>>>  41:     """Create a new proposal."""
     42:     try:
     43:         proposal = gov.create_proposal(
     44:             proposer_id=args.proposer,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\tokenomics\governance\cli.py:187:57
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    184:     subparsers = parser.add_subparsers(dest="command", help="Available commands")
    185:
    186:     # Create proposal
>>> 187:     create_parser = subparsers.add_parser("create", help="Create a new proposal")
    188:     create_parser.add_argument("proposer", help="Proposer user ID")
    189:     create_parser.add_argument("title", help="Proposal title")
    190:     create_parser.add_argument("description", help="Proposal description")


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'gov' methods (9 calls)
File: packages\tokenomics\governance\cli.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'sys' methods (7 calls)
File: packages\tokenomics\governance\cli.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'subparsers' methods (8 calls)
File: packages\tokenomics\governance\cli.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\tokenomics\governance\governance_system.py:57:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     54:         return self.credit_system.get_balance(user_id)
     55:
     56:     def get_total_supply(self) -> int:
>>>  57:         """Calculate total token supply from all users."""
     58:         # Use tracked users plus governance participants
     59:         try:
     60:             all_users = set(self._known_users)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\tokenomics\governance\governance_system.py:81:27
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     78:                 if balance > 0:
     79:                     total += balance
     80:
>>>  81:             logger.debug(f"Total supply calculated from {len(all_users)} users: {total}")
     82:             return total
     83:         except Exception as e:
     84:             logger.error(f"Error calculating total supply: {e}")


LONG_PARAMETER_LIST: Function 'create_proposal' has 6 parameters (>5)
File: packages\tokenomics\governance\governance_system.py:87:4
Recommendation: Use parameter objects, data classes, or keyword-only arguments
Code context:
     84:             logger.error(f"Error calculating total supply: {e}")
     85:             return 0
     86:
>>>  87:     def create_proposal(
     88:         self,
     89:         proposer_id: str,
     90:         title: str,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\tokenomics\governance\governance_system.py:95:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     92:         proposal_type: str = "general",
     93:         execution_metadata: dict | None = None,
     94:     ) -> Proposal:
>>>  95:         """Create a new proposal in DRAFT status."""
     96:         # Check minimum voting power requirement
     97:         voting_power = self.get_voting_power(proposer_id)
     98:         if voting_power < self.config.min_proposal_power:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\tokenomics\governance\governance_system.py:123:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    120:         return proposal
    121:
    122:     def start_voting(self, proposal_id: str) -> Proposal:
>>> 123:         """Move proposal from DRAFT to VOTE status."""
    124:         proposal = self.storage.load_proposal(proposal_id)
    125:         if not proposal:
    126:             raise ValueError(f"Proposal {proposal_id} not found")


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (15 calls)
File: packages\tokenomics\governance\governance_system.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (6 calls)
File: packages\tokenomics\governance\governance_system.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\tokenomics\governance\models.py:45:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     42:
     43:     @classmethod
     44:     def from_dict(cls, data: dict) -> "Vote":
>>>  45:         """Create from dictionary."""
     46:         return cls(
     47:             voter_id=data["voter_id"],
     48:             choice=VoteChoice(data["choice"]),


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\tokenomics\governance\models.py:97:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     94:         return None
     95:
     96:     def add_vote(self, vote: Vote) -> None:
>>>  97:         """Add or update a vote."""
     98:         # Remove existing vote from same user
     99:         self.votes = [v for v in self.votes if v.voter_id != vote.voter_id]
    100:         self.votes.append(vote)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\tokenomics\governance\models.py:119:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    116:
    117:     @classmethod
    118:     def from_dict(cls, data: dict) -> "Proposal":
>>> 119:         """Create from dictionary."""
    120:         votes = [Vote.from_dict(vote_data) for vote_data in data.get("votes", [])]
    121:         return cls(
    122:             id=data["id"],


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\tokenomics\governance\storage.py:18:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     15:     """Interface for governance data persistence."""
     16:
     17:     def save_proposal(self, proposal: Proposal) -> None:
>>>  18:         """Save or update a proposal."""
     19:         ...
     20:
     21:     def load_proposal(self, proposal_id: str) -> Proposal | None:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\tokenomics\governance\storage.py:50:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     47:         logger.info(f"Governance storage initialized at {self.path}")
     48:
     49:     def _init_tables(self) -> None:
>>>  50:         """Create necessary database tables."""
     51:         self.conn.execute(
     52:             """
     53:             CREATE TABLE IF NOT EXISTS proposals (


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\tokenomics\governance\storage.py:52:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     49:     def _init_tables(self) -> None:
     50:         """Create necessary database tables."""
     51:         self.conn.execute(
>>>  52:             """
     53:             CREATE TABLE IF NOT EXISTS proposals (
     54:                 id TEXT PRIMARY KEY,
     55:                 title TEXT NOT NULL,


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\tokenomics\governance\storage.py:71:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     68:         logger.debug("Governance tables initialized")
     69:
     70:     def save_proposal(self, proposal: Proposal) -> None:
>>>  71:         """Save or update a proposal."""
     72:         proposal_data = proposal.to_dict()
     73:         votes_json = json.dumps(proposal_data["votes"])
     74:         execution_metadata_json = json.dumps(proposal_data["execution_metadata"])


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\tokenomics\governance\storage.py:77:12
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     74:         execution_metadata_json = json.dumps(proposal_data["execution_metadata"])
     75:
     76:         self.conn.execute(
>>>  77:             """
     78:             INSERT OR REPLACE INTO proposals
     79:             (id, title, description, proposer_id, status, created_at,
     80:              voting_start, voting_end, execution_metadata, votes_json)


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\tokenomics\governance\storage.py:101:35
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
     98:
     99:     def load_proposal(self, proposal_id: str) -> Proposal | None:
    100:         """Load a proposal by ID."""
>>> 101:         cursor = self.conn.execute("SELECT * FROM proposals WHERE id = ?", (proposal_id,))
    102:         row = cursor.fetchone()
    103:         if not row:
    104:             return None


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\tokenomics\governance\storage.py:124:35
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    121:
    122:     def list_proposals(self) -> list[Proposal]:
    123:         """List all proposals."""
>>> 124:         cursor = self.conn.execute("SELECT id FROM proposals ORDER BY created_at DESC")
    125:         proposal_ids = [row["id"] for row in cursor.fetchall()]
    126:
    127:         proposals = []


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\tokenomics\governance\storage.py:137:35
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    134:
    135:     def delete_proposal(self, proposal_id: str) -> bool:
    136:         """Delete a proposal."""
>>> 137:         cursor = self.conn.execute("DELETE FROM proposals WHERE id = ?", (proposal_id,))
    138:         self.conn.commit()
    139:         return cursor.rowcount > 0
    140:


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\tokenomics\governance\storage.py:168:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    165:         logger.debug(f"Proposal {proposal.id} saved to {proposal_path}")
    166:
    167:     def load_proposal(self, proposal_id: str) -> Proposal | None:
>>> 168:         """Load a proposal from file."""
    169:         proposal_path = self._get_proposal_path(proposal_id)
    170:         if not proposal_path.exists():
    171:             return None


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\tokenomics\governance\storage.py:182:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    179:             return None
    180:
    181:     def list_proposals(self) -> list[Proposal]:
>>> 182:         """List all proposals from files."""
    183:         proposals = []
    184:         for proposal_file in self.storage_dir.glob("proposal_*.json"):
    185:             proposal_id = proposal_file.stem.replace("proposal_", "")


EMBEDDED_SQL: Embedded SQL query detected in code
File: packages\tokenomics\governance\storage.py:195:8
Recommendation: Use ORM, query builders, or move SQL to separate files
Code context:
    192:         return proposals
    193:
    194:     def delete_proposal(self, proposal_id: str) -> bool:
>>> 195:         """Delete a proposal file."""
    196:         proposal_path = self._get_proposal_path(proposal_id)
    197:         if proposal_path.exists():
    198:             proposal_path.unlink()


FEATURE_ENVY: Potential Feature Envy: Excessive use of 'self' methods (6 calls)
File: packages\tokenomics\governance\storage.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'logger' methods (8 calls)
File: packages\tokenomics\governance\storage.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

FEATURE_ENVY: Potential Feature Envy: Excessive use of 'json' methods (6 calls)
File: packages\tokenomics\governance\storage.py:1:0
Recommendation: Consider moving this behavior to the envied class or use delegation

================================================================================
REFACTORING PRIORITIES
================================================================================

• CRITICAL: Break down God Objects using Extract Class refactoring (79 instances)
• HIGH: Split complex methods into smaller, focused functions (450 instances)
• HIGH: Extract duplicate code into shared utilities (218 instances)
• MEDIUM: Use parameter objects or data classes (80 instances)
• HIGH: Replace with proper messaging or API patterns (693 instances)
• MEDIUM: Implement context managers or fluent interfaces (145 instances)
• MEDIUM: Replace magic numbers with named constants (1100 instances)
