openapi: 3.0.3
info:
  title: AIVillage API
  description: |
    AIVillage Distributed AI Platform API

    This API provides access to AIVillage's core functionality including:
    - Multi-agent AI coordination
    - Advanced RAG with Bayesian trust networks
    - P2P mesh networking and edge computing
    - Digital twin concierge services

    ## Authentication

    The API uses Bearer token authentication:
    ```
    Authorization: Bearer <your-api-key>
    ```

    Alternatively, you can use the `x-api-key` header:
    ```
    x-api-key: <your-api-key>
    ```

    ## Rate Limiting

    All endpoints are rate limited:
    - **Default**: 100 requests per 60 seconds
    - **Authenticated**: 200 requests per 60 seconds
    - **Premium**: 500 requests per 60 seconds

    Rate limit headers are included in responses:
    - `X-RateLimit-Limit`: Total requests allowed in time window
    - `X-RateLimit-Remaining`: Requests remaining in current window
    - `X-RateLimit-Reset`: Unix timestamp when window resets

    ## Idempotency

    POST, PUT, and PATCH requests support idempotency keys:
    ```
    Idempotency-Key: <your-unique-key>
    ```

    Duplicate requests with the same key return the cached response.

  version: 1.0.0
  contact:
    name: AIVillage Team
    url: https://github.com/DNYoussef/AIVillage
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.aivillage.io/v1
    description: Production server
  - url: https://staging-api.aivillage.io/v1
    description: Staging server
  - url: http://localhost:8000/v1
    description: Local development server

security:
  - BearerAuth: []
  - ApiKeyAuth: []

paths:
  /health:
    get:
      summary: Health Check
      description: Check API health status and service dependencies
      operationId: getHealth
      tags:
        - Health
      security: []
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
        '503':
          description: API is unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /chat:
    post:
      summary: Chat with AI Agents
      description: |
        Send a message to AIVillage's multi-agent system for conversational AI.
        Supports various agent specializations and conversation modes.
      operationId: chat
      tags:
        - Chat
      parameters:
        - name: Idempotency-Key
          in: header
          description: Unique key for idempotent requests
          schema:
            type: string
            minLength: 16
            maxLength: 64
          example: "chat-2025-08-19-uuid-123"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatRequest'
      responses:
        '200':
          description: Chat response generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatResponse'
        '400':
          description: Invalid request format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateLimitResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /query:
    post:
      summary: RAG Query Processing
      description: |
        Process queries using AIVillage's advanced RAG system with Bayesian trust networks,
        cognitive nexus, and multi-perspective analysis.
      operationId: processQuery
      tags:
        - RAG
      parameters:
        - name: Idempotency-Key
          in: header
          description: Unique key for idempotent requests
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
      responses:
        '200':
          description: Query processed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryResponse'
        '400':
          description: Invalid query format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /agents:
    get:
      summary: List Available Agents
      description: Get list of available specialized agents and their capabilities
      operationId: listAgents
      tags:
        - Agents
      parameters:
        - name: category
          in: query
          description: Filter agents by category
          schema:
            type: string
            enum: [governance, infrastructure, knowledge, culture, economy, language, health]
        - name: available_only
          in: query
          description: Only return currently available agents
          schema:
            type: boolean
            default: true
      responses:
        '200':
          description: List of agents
          content:
            application/json:
              schema:
                type: object
                properties:
                  agents:
                    type: array
                    items:
                      $ref: '#/components/schemas/Agent'
                  total:
                    type: integer
                  categories:
                    type: array
                    items:
                      type: string

  /agents/{agent_id}/task:
    post:
      summary: Assign Task to Agent
      description: Assign a specific task to a specialized agent
      operationId: assignAgentTask
      tags:
        - Agents
      parameters:
        - name: agent_id
          in: path
          required: true
          description: Unique identifier for the agent
          schema:
            type: string
          example: "magi-001"
        - name: Idempotency-Key
          in: header
          description: Unique key for idempotent requests
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AgentTaskRequest'
      responses:
        '200':
          description: Task assigned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentTaskResponse'
        '404':
          description: Agent not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /p2p/status:
    get:
      summary: P2P Network Status
      description: Get status of P2P mesh networking and connected peers
      operationId: getP2PStatus
      tags:
        - P2P
      responses:
        '200':
          description: P2P network status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P2PStatusResponse'

  /p2p/peers:
    get:
      summary: List Connected Peers
      description: Get list of connected peers in P2P mesh network
      operationId: listPeers
      tags:
        - P2P
      parameters:
        - name: transport
          in: query
          description: Filter by transport type
          schema:
            type: string
            enum: [bitchat, betanet, all]
            default: all
      responses:
        '200':
          description: List of connected peers
          content:
            application/json:
              schema:
                type: object
                properties:
                  peers:
                    type: array
                    items:
                      $ref: '#/components/schemas/Peer'
                  total:
                    type: integer
                  transports:
                    type: object
                    properties:
                      bitchat:
                        type: integer
                      betanet:
                        type: integer

  /digital-twin/profile:
    get:
      summary: Get Digital Twin Profile
      description: Get user's digital twin profile and learning metrics
      operationId: getDigitalTwinProfile
      tags:
        - Digital Twin
      responses:
        '200':
          description: Digital twin profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DigitalTwinProfile'

    post:
      summary: Update Digital Twin Data
      description: |
        Update digital twin with new data points for learning.
        All data remains local and is processed with differential privacy.
      operationId: updateDigitalTwinData
      tags:
        - Digital Twin
      parameters:
        - name: Idempotency-Key
          in: header
          description: Unique key for idempotent requests
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DigitalTwinDataUpdate'
      responses:
        '200':
          description: Data updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DigitalTwinUpdateResponse'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-api-key

  schemas:
    HealthResponse:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
        timestamp:
          type: string
          format: date-time
        services:
          type: object
          properties:
            database:
              type: string
              enum: [up, down]
            p2p_network:
              type: string
              enum: [up, down]
            agents:
              type: string
              enum: [up, down]
            rag_system:
              type: string
              enum: [up, down]
        version:
          type: string
          example: "1.0.0"

    ChatRequest:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          description: The message to send to the AI agents
          example: "How can I optimize my mobile app's battery usage?"
        conversation_id:
          type: string
          description: ID to continue an existing conversation
          example: "conv-2025-08-19-abc123"
        agent_preference:
          type: string
          description: Preferred agent type for response
          enum: [king, magi, sage, oracle, navigator, any]
          default: any
        mode:
          type: string
          description: Response mode
          enum: [fast, balanced, comprehensive, creative]
          default: balanced
        user_context:
          type: object
          description: Additional context about the user
          properties:
            device_type:
              type: string
              enum: [mobile, desktop, tablet]
            battery_level:
              type: number
              minimum: 0
              maximum: 100
            network_type:
              type: string
              enum: [wifi, cellular, offline]

    ChatResponse:
      type: object
      properties:
        response:
          type: string
          description: The AI agent's response
        conversation_id:
          type: string
          description: Conversation ID for follow-up messages
        agent_used:
          type: string
          description: Which agent generated the response
        processing_time_ms:
          type: integer
          description: Time taken to generate response
        metadata:
          type: object
          properties:
            confidence:
              type: number
              minimum: 0
              maximum: 1
            features_used:
              type: array
              items:
                type: string
            thought_process:
              type: string
              description: Agent's reasoning (if available)

    QueryRequest:
      type: object
      required:
        - query
      properties:
        query:
          type: string
          description: The query to process
          example: "What are the best practices for distributed AI systems?"
        mode:
          type: string
          enum: [fast, balanced, comprehensive, creative, analytical]
          default: balanced
        include_sources:
          type: boolean
          description: Include source documents in response
          default: true
        max_results:
          type: integer
          minimum: 1
          maximum: 50
          default: 10
        user_id:
          type: string
          description: User identifier for personalization

    QueryResponse:
      type: object
      properties:
        query_id:
          type: string
          description: Unique identifier for this query
        response:
          type: string
          description: Generated response
        sources:
          type: array
          items:
            type: object
            properties:
              title:
                type: string
              content:
                type: string
              confidence:
                type: number
              url:
                type: string
                format: uri
        metadata:
          type: object
          properties:
            processing_time_ms:
              type: integer
            mode:
              type: string
            features_enabled:
              type: object
            bayesian_confidence:
              type: number
              minimum: 0
              maximum: 1

    Agent:
      type: object
      properties:
        id:
          type: string
          example: "magi-001"
        name:
          type: string
          example: "Magi Research Agent"
        category:
          type: string
          enum: [governance, infrastructure, knowledge, culture, economy, language, health]
        capabilities:
          type: array
          items:
            type: string
        status:
          type: string
          enum: [available, busy, offline]
        current_load:
          type: number
          minimum: 0
          maximum: 1
        specializations:
          type: array
          items:
            type: string

    AgentTaskRequest:
      type: object
      required:
        - task_description
      properties:
        task_description:
          type: string
          description: Description of the task to perform
        priority:
          type: string
          enum: [low, medium, high, urgent]
          default: medium
        timeout_seconds:
          type: integer
          minimum: 1
          maximum: 3600
          default: 300
        context:
          type: object
          description: Additional context for the task

    AgentTaskResponse:
      type: object
      properties:
        task_id:
          type: string
        agent_id:
          type: string
        status:
          type: string
          enum: [accepted, rejected, completed, failed]
        result:
          type: object
        estimated_completion_time:
          type: string
          format: date-time
        metadata:
          type: object

    P2PStatusResponse:
      type: object
      properties:
        status:
          type: string
          enum: [connected, connecting, disconnected]
        peer_count:
          type: integer
        transports:
          type: object
          properties:
            bitchat:
              type: object
              properties:
                status:
                  type: string
                peer_count:
                  type: integer
            betanet:
              type: object
              properties:
                status:
                  type: string
                peer_count:
                  type: integer
        network_health:
          type: object
          properties:
            message_success_rate:
              type: number
            average_latency_ms:
              type: number

    Peer:
      type: object
      properties:
        id:
          type: string
        transport:
          type: string
          enum: [bitchat, betanet]
        status:
          type: string
          enum: [connected, connecting, disconnected]
        capabilities:
          type: array
          items:
            type: string
        last_seen:
          type: string
          format: date-time
        metadata:
          type: object

    DigitalTwinProfile:
      type: object
      properties:
        user_id:
          type: string
        model_size_mb:
          type: number
        learning_stats:
          type: object
          properties:
            total_interactions:
              type: integer
            surprise_based_improvements:
              type: integer
            accuracy_score:
              type: number
              minimum: 0
              maximum: 1
        privacy_settings:
          type: object
          properties:
            data_retention_hours:
              type: integer
            differential_privacy_enabled:
              type: boolean
        last_updated:
          type: string
          format: date-time

    DigitalTwinDataUpdate:
      type: object
      properties:
        data_type:
          type: string
          enum: [conversation, interaction, preference, context]
        data_points:
          type: array
          items:
            type: object
            properties:
              timestamp:
                type: string
                format: date-time
              content:
                type: object
              prediction_accuracy:
                type: number
                minimum: 0
                maximum: 1

    DigitalTwinUpdateResponse:
      type: object
      properties:
        processed_points:
          type: integer
        model_updated:
          type: boolean
        privacy_preserved:
          type: boolean
        surprise_scores:
          type: array
          items:
            type: number

    ErrorResponse:
      type: object
      properties:
        detail:
          type: string
          description: Human-readable error message
        error_code:
          type: string
          description: Machine-readable error code
        timestamp:
          type: string
          format: date-time
        request_id:
          type: string
          description: Unique identifier for request tracing

    RateLimitResponse:
      type: object
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
        - type: object
          properties:
            retry_after:
              type: integer
              description: Seconds to wait before retrying
            limit:
              type: integer
              description: Total requests allowed in time window
            window_seconds:
              type: integer
              description: Length of rate limiting window

tags:
  - name: Health
    description: Health check and monitoring endpoints
  - name: Chat
    description: Conversational AI with multi-agent system
  - name: RAG
    description: Retrieval-Augmented Generation with Bayesian trust
  - name: Agents
    description: Specialized AI agent coordination
  - name: P2P
    description: Peer-to-peer mesh networking
  - name: Digital Twin
    description: Privacy-preserving personal AI assistant
