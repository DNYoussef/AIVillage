{
  "validation_summary": {
    "total_files": 7,
    "files_processed": 7,
    "files_with_issues": 7,
    "total_issues": 59,
    "validated_secrets": 115
  },
  "file_results": [
    {
      "file": "tests\\security\\test_auth_system.py",
      "issues": [
        {
          "line": 84,
          "type": "info_security_issue",
          "content": "no_symbols = \"TestNoSymbols123\"",
          "pattern": "[\"\\'][A-Z0-9]{10,}[\"\\']",
          "pattern_name": "uppercase_string",
          "description": "Long uppercase string - check if credential",
          "severity": "INFO"
        },
        {
          "line": 266,
          "type": "info_security_issue",
          "content": "username=\"nonexistent\", password=\"test_auth_password_123!\"  # nosec B106 - test password,  # pragma: allowlist secret",
          "pattern": "[\"\\'][A-Z0-9]{10,}[\"\\']",
          "pattern_name": "uppercase_string",
          "description": "Long uppercase string - check if credential",
          "severity": "INFO"
        },
        {
          "line": 285,
          "type": "info_security_issue",
          "content": "username=\"locktest\", password=\"WrongPassword\"  # nosec B106 - test password, ip_address=\"127.0.0.1\"  # pragma: allowlist secret",
          "pattern": "[\"\\'][A-Z0-9]{10,}[\"\\']",
          "pattern_name": "uppercase_string",
          "description": "Long uppercase string - check if credential",
          "severity": "INFO"
        },
        {
          "line": 299,
          "type": "info_security_issue",
          "content": "username=\"sessionuser\",",
          "pattern": "[\"\\'][A-Z0-9]{10,}[\"\\']",
          "pattern_name": "uppercase_string",
          "description": "Long uppercase string - check if credential",
          "severity": "INFO"
        },
        {
          "line": 306,
          "type": "info_security_issue",
          "content": "username=\"sessionuser\", password=\"test_auth_password_123!\"  # nosec B106 - test password,  # pragma: allowlist secret",
          "pattern": "[\"\\'][A-Z0-9]{10,}[\"\\']",
          "pattern_name": "uppercase_string",
          "description": "Long uppercase string - check if credential",
          "severity": "INFO"
        },
        {
          "line": 364,
          "type": "error_security_issue",
          "content": "username=\"resetuser\", password=\"test_reset_password_123!\" # nosec B106 - test password",
          "pattern": "password\\s*=\\s*[\"\\'][^\"\\']*[A-Za-z0-9!@#$%^&*()]{8,}[^\"\\']*[\"\\'](?!.*pragma.*allowlist)",
          "pattern_name": "hardcoded_password",
          "description": "Hardcoded password without pragma allowlist",
          "severity": "ERROR"
        },
        {
          "line": 364,
          "type": "warning_security_issue",
          "content": "username=\"resetuser\", password=\"test_reset_password_123!\" # nosec B106 - test password",
          "pattern": "password\\s*=\\s*[\"\\'][^\"\\']*test[^\"\\']*[\"\\'](?!.*pragma.*allowlist)",
          "pattern_name": "test_password_no_pragma",
          "description": "Test password without pragma comment",
          "severity": "WARNING"
        },
        {
          "line": 396,
          "type": "error_security_issue",
          "content": "username=\"mfadisable\", email=\"mfadisable@example.com\", password=\"test_auth_password_123!\"",
          "pattern": "password\\s*=\\s*[\"\\'][^\"\\']*[A-Za-z0-9!@#$%^&*()]{8,}[^\"\\']*[\"\\'](?!.*pragma.*allowlist)",
          "pattern_name": "hardcoded_password",
          "description": "Hardcoded password without pragma allowlist",
          "severity": "ERROR"
        },
        {
          "line": 396,
          "type": "warning_security_issue",
          "content": "username=\"mfadisable\", email=\"mfadisable@example.com\", password=\"test_auth_password_123!\"",
          "pattern": "password\\s*=\\s*[\"\\'][^\"\\']*test[^\"\\']*[\"\\'](?!.*pragma.*allowlist)",
          "pattern_name": "test_password_no_pragma",
          "description": "Test password without pragma comment",
          "severity": "WARNING"
        },
        {
          "line": 396,
          "type": "info_security_issue",
          "content": "username=\"mfadisable\", email=\"mfadisable@example.com\", password=\"test_auth_password_123!\"",
          "pattern": "[\"\\'][A-Z0-9]{10,}[\"\\']",
          "pattern_name": "uppercase_string",
          "description": "Long uppercase string - check if credential",
          "severity": "INFO"
        },
        {
          "line": 498,
          "type": "error_security_issue",
          "content": "username=\"nonexistent_user_12345\", password=\"any_password\"",
          "pattern": "password\\s*=\\s*[\"\\'][^\"\\']*[A-Za-z0-9!@#$%^&*()]{8,}[^\"\\']*[\"\\'](?!.*pragma.*allowlist)",
          "pattern_name": "hardcoded_password",
          "description": "Hardcoded password without pragma allowlist",
          "severity": "ERROR"
        },
        {
          "line": 504,
          "type": "error_security_issue",
          "content": "username=\"realuser\", email=\"real@example.com\", password=\"test_real_password_123!\" # nosec B106 - test password",
          "pattern": "password\\s*=\\s*[\"\\'][^\"\\']*[A-Za-z0-9!@#$%^&*()]{8,}[^\"\\']*[\"\\'](?!.*pragma.*allowlist)",
          "pattern_name": "hardcoded_password",
          "description": "Hardcoded password without pragma allowlist",
          "severity": "ERROR"
        },
        {
          "line": 504,
          "type": "warning_security_issue",
          "content": "username=\"realuser\", email=\"real@example.com\", password=\"test_real_password_123!\" # nosec B106 - test password",
          "pattern": "password\\s*=\\s*[\"\\'][^\"\\']*test[^\"\\']*[\"\\'](?!.*pragma.*allowlist)",
          "pattern_name": "test_password_no_pragma",
          "description": "Test password without pragma comment",
          "severity": "WARNING"
        },
        {
          "line": 509,
          "type": "error_security_issue",
          "content": "username=\"realuser\", password=\"wrong_password\"",
          "pattern": "password\\s*=\\s*[\"\\'][^\"\\']*[A-Za-z0-9!@#$%^&*()]{8,}[^\"\\']*[\"\\'](?!.*pragma.*allowlist)",
          "pattern_name": "hardcoded_password",
          "description": "Hardcoded password without pragma allowlist",
          "severity": "ERROR"
        },
        {
          "line": 725,
          "type": "ambiguous_secret",
          "content": "\"password_hash\": \"test_hash_value\",  # pragma: allowlist secret",
          "message": "Has pragma comment but secret doesn't match expected patterns"
        }
      ],
      "validated_secrets": [
        {
          "line": 23,
          "content": "class TestPasswordManager:  # pragma: allowlist secret"
        },
        {
          "line": 26,
          "content": "def test_password_manager_initialization(self):  # pragma: allowlist secret"
        },
        {
          "line": 28,
          "content": "pm = PasswordManager()  # pragma: allowlist secret"
        },
        {
          "line": 33,
          "content": "def test_password_hashing(self):  # pragma: allowlist secret"
        },
        {
          "line": 35,
          "content": "pm = PasswordManager()  # pragma: allowlist secret"
        },
        {
          "line": 36,
          "content": "password = \"test_password_hash_123!\"  # nosec B106 - test password # pragma: allowlist secret"
        },
        {
          "line": 38,
          "content": "hash1 = pm.hash_password(password)  # pragma: allowlist secret"
        },
        {
          "line": 39,
          "content": "hash2 = pm.hash_password(password)  # pragma: allowlist secret"
        },
        {
          "line": 46,
          "content": "def test_password_verification(self):  # pragma: allowlist secret"
        },
        {
          "line": 48,
          "content": "pm = PasswordManager()  # pragma: allowlist secret"
        },
        {
          "line": 49,
          "content": "password = \"test_password_verify_123!\"  # pragma: allowlist secret"
        },
        {
          "line": 51,
          "content": "password_hash = pm.hash_password(password)  # pragma: allowlist secret"
        },
        {
          "line": 59,
          "content": "def test_password_strength_validation(self):  # pragma: allowlist secret"
        },
        {
          "line": 61,
          "content": "pm = PasswordManager()  # pragma: allowlist secret"
        },
        {
          "line": 66,
          "content": "strong_password = \"test_strong_password_123!\"  # pragma: allowlist secret"
        },
        {
          "line": 67,
          "content": "is_valid, errors = pm.validate_password_strength(strong_password, config)  # pragma: allowlist secret"
        },
        {
          "line": 72,
          "content": "weak_password = \"test_short\"  # pragma: allowlist secret"
        },
        {
          "line": 73,
          "content": "is_valid, errors = pm.validate_password_strength(weak_password, config)  # pragma: allowlist secret"
        },
        {
          "line": 79,
          "content": "is_valid, errors = pm.validate_password_strength(no_upper, config)  # pragma: allowlist secret"
        },
        {
          "line": 85,
          "content": "is_valid, errors = pm.validate_password_strength(no_symbols, config)  # pragma: allowlist secret"
        },
        {
          "line": 104,
          "content": "def test_secret_generation(self):  # pragma: allowlist secret"
        },
        {
          "line": 108,
          "content": "secret1 = mfa.generate_secret()  # pragma: allowlist secret"
        },
        {
          "line": 109,
          "content": "secret2 = mfa.generate_secret()  # pragma: allowlist secret"
        },
        {
          "line": 111,
          "content": "assert secret1 != secret2  # pragma: allowlist secret"
        },
        {
          "line": 117,
          "content": "secret = mfa.generate_secret()  # pragma: allowlist secret"
        },
        {
          "line": 121,
          "content": "otp = mfa.generate_otp(secret, timestamp)  # pragma: allowlist secret"
        },
        {
          "line": 126,
          "content": "is_valid = mfa.verify_otp(secret, otp, timestamp)  # pragma: allowlist secret"
        },
        {
          "line": 130,
          "content": "is_valid = mfa.verify_otp(secret, \"000000\", timestamp)  # pragma: allowlist secret"
        },
        {
          "line": 135,
          "content": "secret = mfa.generate_secret()  # pragma: allowlist secret"
        },
        {
          "line": 139,
          "content": "otp = mfa.generate_otp(secret, base_time)  # pragma: allowlist secret"
        },
        {
          "line": 161,
          "content": ")  # Test config pragma: allowlist secret"
        },
        {
          "line": 191,
          "content": "password=\"test_user_password_123!\"  # nosec B106 - test password,  # pragma: allowlist secret"
        },
        {
          "line": 206,
          "content": "password=\"test_duplicate_first_123!\"  # nosec B106 - test password,  # pragma: allowlist secret"
        },
        {
          "line": 214,
          "content": "password=\"test_duplicate_second_123!\"  # nosec B106 - test password,  # pragma: allowlist secret"
        },
        {
          "line": 217,
          "content": "def test_user_creation_weak_password(self):  # pragma: allowlist secret"
        },
        {
          "line": 219,
          "content": "with pytest.raises(ValueError, match=\"Password validation failed\"):  # pragma: allowlist secret"
        },
        {
          "line": 223,
          "content": "password=\"weak\"  # nosec B106 - test weak password # pragma: allowlist secret"
        },
        {
          "line": 232,
          "content": "password=\"test_auth_password_123!\"  # nosec B106 - test password,  # pragma: allowlist secret"
        },
        {
          "line": 237,
          "content": "username=\"authuser\", password=\"test_auth_password_123!\"  # nosec B106 - test password,  # pragma: allowlist secret"
        },
        {
          "line": 245,
          "content": "def test_failed_authentication_wrong_password(self):  # pragma: allowlist secret"
        },
        {
          "line": 251,
          "content": "password=\"test_auth_password_123!\"  # nosec B106 - test password,  # pragma: allowlist secret"
        },
        {
          "line": 256,
          "content": "username=\"authuser\", password=\"test_wrong_password\"  # nosec B106 - test password,  # pragma: allowlist secret"
        },
        {
          "line": 266,
          "content": "username=\"nonexistent\", password=\"test_auth_password_123!\"  # nosec B106 - test password,  # pragma: allowlist secret"
        },
        {
          "line": 273,
          "content": "def test_account_lockout(self):  # pragma: allowlist secret"
        },
        {
          "line": 279,
          "content": "password=\"test_auth_password_123!\"  # nosec B106 - test password,  # pragma: allowlist secret"
        },
        {
          "line": 280,
          "content": ")  # Test lockout pragma: allowlist secret"
        },
        {
          "line": 285,
          "content": "username=\"locktest\", password=\"WrongPassword\"  # nosec B106 - test password, ip_address=\"127.0.0.1\"  # pragma: allowlist secret"
        },
        {
          "line": 291,
          "content": "username=\"locktest\", password=\"test_auth_password_123!\"  # nosec B106 - test password,  # Correct password  # pragma: allowlist secret"
        },
        {
          "line": 301,
          "content": "password=\"test_auth_password_123!\"  # nosec B106 - test password,  # pragma: allowlist secret"
        },
        {
          "line": 306,
          "content": "username=\"sessionuser\", password=\"test_auth_password_123!\"  # nosec B106 - test password,  # pragma: allowlist secret"
        },
        {
          "line": 307,
          "content": "ip_address=\"127.0.0.1\",  # pragma: allowlist secret"
        },
        {
          "line": 329,
          "content": "username=\"apiuser\", email=\"api@example.com\", password=\"test_auth_password_123!\"  # pragma: allowlist secret"
        },
        {
          "line": 351,
          "content": "password=\"test_auth_password_123!\"  # nosec B106 - test password,  # pragma: allowlist secret"
        },
        {
          "line": 372,
          "content": "username=\"mfauser\", email=\"mfa@example.com\", password=\"test_auth_password_123!\"  # pragma: allowlist secret"
        },
        {
          "line": 376,
          "content": "secret = self.auth_manager.enable_mfa(user.user_id)  # pragma: allowlist secret"
        },
        {
          "line": 384,
          "content": "\"SELECT mfa_enabled, mfa_secret FROM users WHERE user_id = ?\",  # pragma: allowlist secret"
        },
        {
          "line": 390,
          "content": "assert row[\"mfa_secret\"] == secret  # pragma: allowlist secret"
        },
        {
          "line": 408,
          "content": "\"SELECT mfa_enabled, mfa_secret FROM users WHERE user_id = ?\",  # pragma: allowlist secret"
        },
        {
          "line": 420,
          "content": "username=\"mfaauth\", email=\"mfaauth@example.com\", password=\"test_auth_password_123!\"  # pragma: allowlist secret"
        },
        {
          "line": 423,
          "content": "secret = self.auth_manager.enable_mfa(user.user_id)  # pragma: allowlist secret"
        },
        {
          "line": 426,
          "content": "otp = self.auth_manager.mfa_manager.generate_otp(secret)  # pragma: allowlist secret"
        },
        {
          "line": 431,
          "content": "password=\"test_auth_password_123!\"  # nosec B106 - test password,  # pragma: allowlist secret"
        },
        {
          "line": 440,
          "content": "username=\"mfaauth\", password=\"test_auth_password_123!\"  # nosec B106 - test password, ip_address=\"127.0.0.1\" # pragma: allowlist secret"
        },
        {
          "line": 450,
          "content": "username=\"audituser\", email=\"audit@example.com\", password=\"test_auth_password_123!\"  # pragma: allowlist secret"
        },
        {
          "line": 455,
          "content": "username=\"audituser\", password=\"test_auth_password_123!\"  # nosec B106 - test password,  # pragma: allowlist secret"
        },
        {
          "line": 524,
          "content": "password_hash=\"hash\",  # pragma: allowlist secret"
        },
        {
          "line": 526,
          "content": "security_level=SecurityLevel.TOP_SECRET,  # pragma: allowlist secret"
        },
        {
          "line": 539,
          "content": "password_hash=\"hash\",  # pragma: allowlist secret"
        },
        {
          "line": 564,
          "content": "password_hash=\"hash\",  # pragma: allowlist secret"
        },
        {
          "line": 566,
          "content": "security_level=SecurityLevel.TOP_SECRET,  # pragma: allowlist secret"
        },
        {
          "line": 591,
          "content": "password=\"test_secure_workflow_123!\"  # nosec B106 - test password,  # pragma: allowlist secret"
        },
        {
          "line": 595,
          "content": "mfa_secret = self.auth_manager.enable_mfa(user.user_id)  # pragma: allowlist secret"
        },
        {
          "line": 605,
          "content": "otp = self.auth_manager.mfa_manager.generate_otp(mfa_secret)  # pragma: allowlist secret"
        },
        {
          "line": 609,
          "content": "password=\"test_secure_workflow_123!\"  # nosec B106 - test password,  # pragma: allowlist secret"
        },
        {
          "line": 631,
          "content": "password=\"test_victim_password_123!\"  # nosec B106 - test password,  # pragma: allowlist secret"
        },
        {
          "line": 639,
          "content": "password=f\"wrong_password_{i}\",  # pragma: allowlist secret"
        },
        {
          "line": 648,
          "content": "password=\"test_victim_password_123!\"  # nosec B106 - test password,  # pragma: allowlist secret"
        },
        {
          "line": 649,
          "content": "ip_address=\"192.168.1.100\",  # pragma: allowlist secret"
        },
        {
          "line": 666,
          "content": "pm = PasswordManager()  # pragma: allowlist secret"
        },
        {
          "line": 667,
          "content": "password = \"test_auth_password_123!\"  # pragma: allowlist secret"
        },
        {
          "line": 668,
          "content": "hash_result = pm.hash_password(password)  # pragma: allowlist secret"
        },
        {
          "line": 669,
          "content": "verification = pm.verify_password(password, hash_result)  # pragma: allowlist secret"
        },
        {
          "line": 670,
          "content": "print(f\"OK Password hashing and verification: {verification}\")  # pragma: allowlist secret"
        },
        {
          "line": 678,
          "content": "secret = mfa.generate_secret()  # pragma: allowlist secret"
        },
        {
          "line": 679,
          "content": "otp = mfa.generate_otp(secret)  # pragma: allowlist secret"
        },
        {
          "line": 680,
          "content": "mfa_valid = mfa.verify_otp(secret, otp)  # pragma: allowlist secret"
        },
        {
          "line": 697,
          "content": "password=\"test_auth_password_123!\"  # nosec B106 - test password,  # pragma: allowlist secret"
        },
        {
          "line": 702,
          "content": "username=\"testuser\", password=\"test_auth_password_123!\"  # nosec B106 - test password, ip_address=\"127.0.0.1\"  # pragma: allowlist secret"
        },
        {
          "line": 727,
          "content": "\"security_level\": SecurityLevel.TOP_SECRET,  # pragma: allowlist secret"
        }
      ],
      "line_count": 729
    },
    {
      "file": "tests\\integration\\test_end_to_end_system.py",
      "issues": [
        {
          "line": 67,
          "type": "info_security_issue",
          "content": "\"observability\": ObservabilitySystem(\"aivillage_e2e\", self.temp_dbs[1]),",
          "pattern": "[\"\\'][A-Z0-9]{10,}[\"\\']",
          "pattern_name": "uppercase_string",
          "description": "Long uppercase string - check if credential",
          "severity": "INFO"
        },
        {
          "line": 81,
          "type": "info_security_issue",
          "content": "self.components[\"observability\"].start()",
          "pattern": "[\"\\'][A-Z0-9]{10,}[\"\\']",
          "pattern_name": "uppercase_string",
          "description": "Long uppercase string - check if credential",
          "severity": "INFO"
        },
        {
          "line": 87,
          "type": "info_security_issue",
          "content": "if \"observability\" in self.components:",
          "pattern": "[\"\\'][A-Z0-9]{10,}[\"\\']",
          "pattern_name": "uppercase_string",
          "description": "Long uppercase string - check if credential",
          "severity": "INFO"
        },
        {
          "line": 88,
          "type": "info_security_issue",
          "content": "self.components[\"observability\"].stop()",
          "pattern": "[\"\\'][A-Z0-9]{10,}[\"\\']",
          "pattern_name": "uppercase_string",
          "description": "Long uppercase string - check if credential",
          "severity": "INFO"
        },
        {
          "line": 102,
          "type": "info_security_issue",
          "content": "observability = self.components[\"observability\"]",
          "pattern": "[\"\\'][A-Z0-9]{10,}[\"\\']",
          "pattern_name": "uppercase_string",
          "description": "Long uppercase string - check if credential",
          "severity": "INFO"
        },
        {
          "line": 158,
          "type": "info_security_issue",
          "content": "observability = self.components[\"observability\"]",
          "pattern": "[\"\\'][A-Z0-9]{10,}[\"\\']",
          "pattern_name": "uppercase_string",
          "description": "Long uppercase string - check if credential",
          "severity": "INFO"
        },
        {
          "line": 184,
          "type": "info_security_issue",
          "content": "\"capabilities\": [",
          "pattern": "[\"\\'][A-Z0-9]{10,}[\"\\']",
          "pattern_name": "uppercase_string",
          "description": "Long uppercase string - check if credential",
          "severity": "INFO"
        },
        {
          "line": 195,
          "type": "info_security_issue",
          "content": "\"capabilities\": [",
          "pattern": "[\"\\'][A-Z0-9]{10,}[\"\\']",
          "pattern_name": "uppercase_string",
          "description": "Long uppercase string - check if credential",
          "severity": "INFO"
        },
        {
          "line": 206,
          "type": "info_security_issue",
          "content": "\"capabilities\": [",
          "pattern": "[\"\\'][A-Z0-9]{10,}[\"\\']",
          "pattern_name": "uppercase_string",
          "description": "Long uppercase string - check if credential",
          "severity": "INFO"
        },
        {
          "line": 217,
          "type": "info_security_issue",
          "content": "\"capabilities\": [",
          "pattern": "[\"\\'][A-Z0-9]{10,}[\"\\']",
          "pattern_name": "uppercase_string",
          "description": "Long uppercase string - check if credential",
          "severity": "INFO"
        },
        {
          "line": 231,
          "type": "info_security_issue",
          "content": "for cap in agent_config[\"capabilities\"]",
          "pattern": "[\"\\'][A-Z0-9]{10,}[\"\\']",
          "pattern_name": "uppercase_string",
          "description": "Long uppercase string - check if credential",
          "severity": "INFO"
        },
        {
          "line": 246,
          "type": "info_security_issue",
          "content": "\"security_level\": \"confidential\",",
          "pattern": "[\"\\'][A-Z0-9]{10,}[\"\\']",
          "pattern_name": "uppercase_string",
          "description": "Long uppercase string - check if credential",
          "severity": "INFO"
        },
        {
          "line": 292,
          "type": "info_security_issue",
          "content": "observability = self.components[\"observability\"]",
          "pattern": "[\"\\'][A-Z0-9]{10,}[\"\\']",
          "pattern_name": "uppercase_string",
          "description": "Long uppercase string - check if credential",
          "severity": "INFO"
        },
        {
          "line": 308,
          "type": "info_security_issue",
          "content": "requirements={\"security_level\": \"confidential\"},",
          "pattern": "[\"\\'][A-Z0-9]{10,}[\"\\']",
          "pattern_name": "uppercase_string",
          "description": "Long uppercase string - check if credential",
          "severity": "INFO"
        },
        {
          "line": 317,
          "type": "info_security_issue",
          "content": "\"hyperparams\": {\"n_estimators\": 100, \"max_depth\": 6},",
          "pattern": "[\"\\'][A-Z0-9]{10,}[\"\\']",
          "pattern_name": "uppercase_string",
          "description": "Long uppercase string - check if credential",
          "severity": "INFO"
        },
        {
          "line": 320,
          "type": "info_security_issue",
          "content": "requirements={\"gpu_memory\": 8, \"security_level\": \"confidential\"},",
          "pattern": "[\"\\'][A-Z0-9]{10,}[\"\\']",
          "pattern_name": "uppercase_string",
          "description": "Long uppercase string - check if credential",
          "severity": "INFO"
        },
        {
          "line": 333,
          "type": "info_security_issue",
          "content": "requirements={\"security_level\": \"confidential\"},",
          "pattern": "[\"\\'][A-Z0-9]{10,}[\"\\']",
          "pattern_name": "uppercase_string",
          "description": "Long uppercase string - check if credential",
          "severity": "INFO"
        },
        {
          "line": 396,
          "type": "info_security_issue",
          "content": "return {\"tasks\": submitted_tasks, \"models\": models, \"comparison\": comparison}",
          "pattern": "[\"\\'][A-Z0-9]{10,}[\"\\']",
          "pattern_name": "uppercase_string",
          "description": "Long uppercase string - check if credential",
          "severity": "INFO"
        },
        {
          "line": 403,
          "type": "info_security_issue",
          "content": "observability = self.components[\"observability\"]",
          "pattern": "[\"\\'][A-Z0-9]{10,}[\"\\']",
          "pattern_name": "uppercase_string",
          "description": "Long uppercase string - check if credential",
          "severity": "INFO"
        },
        {
          "line": 497,
          "type": "info_security_issue",
          "content": "observability = self.components[\"observability\"]",
          "pattern": "[\"\\'][A-Z0-9]{10,}[\"\\']",
          "pattern_name": "uppercase_string",
          "description": "Long uppercase string - check if credential",
          "severity": "INFO"
        },
        {
          "line": 567,
          "type": "info_security_issue",
          "content": "observability = self.components[\"observability\"]",
          "pattern": "[\"\\'][A-Z0-9]{10,}[\"\\']",
          "pattern_name": "uppercase_string",
          "description": "Long uppercase string - check if credential",
          "severity": "INFO"
        },
        {
          "line": 687,
          "type": "info_security_issue",
          "content": "self.test_results[\"resilience\"] = resilience_result",
          "pattern": "[\"\\'][A-Z0-9]{10,}[\"\\']",
          "pattern_name": "uppercase_string",
          "description": "Long uppercase string - check if credential",
          "severity": "INFO"
        },
        {
          "line": 691,
          "type": "info_security_issue",
          "content": "self.test_results[\"performance\"] = performance_result",
          "pattern": "[\"\\'][A-Z0-9]{10,}[\"\\']",
          "pattern_name": "uppercase_string",
          "description": "Long uppercase string - check if credential",
          "severity": "INFO"
        },
        {
          "line": 726,
          "type": "info_security_issue",
          "content": "\"System Resilience\": self.test_results.get(\"resilience\", {}),",
          "pattern": "[\"\\'][A-Z0-9]{10,}[\"\\']",
          "pattern_name": "uppercase_string",
          "description": "Long uppercase string - check if credential",
          "severity": "INFO"
        },
        {
          "line": 727,
          "type": "info_security_issue",
          "content": "\"Performance\": self.test_results.get(\"performance\", {}),",
          "pattern": "[\"\\'][A-Z0-9]{10,}[\"\\']",
          "pattern_name": "uppercase_string",
          "description": "Long uppercase string - check if credential",
          "severity": "INFO"
        },
        {
          "line": 756,
          "type": "info_security_issue",
          "content": "if \"performance\" in self.test_results:",
          "pattern": "[\"\\'][A-Z0-9]{10,}[\"\\']",
          "pattern_name": "uppercase_string",
          "description": "Long uppercase string - check if credential",
          "severity": "INFO"
        },
        {
          "line": 757,
          "type": "info_security_issue",
          "content": "perf = self.test_results[\"performance\"]",
          "pattern": "[\"\\'][A-Z0-9]{10,}[\"\\']",
          "pattern_name": "uppercase_string",
          "description": "Long uppercase string - check if credential",
          "severity": "INFO"
        },
        {
          "line": 765,
          "type": "info_security_issue",
          "content": "print(\"\\nSYSTEM STATUS: \" + (\"OPERATIONAL\" if passed_tests == total_tests else \"DEGRADED\"))",
          "pattern": "[\"\\'][A-Z0-9]{10,}[\"\\']",
          "pattern_name": "uppercase_string",
          "description": "Long uppercase string - check if credential",
          "severity": "INFO"
        }
      ],
      "validated_secrets": [
        {
          "line": 110,
          "content": "password=\"test_e2e_workflow_password_123!\"  # nosec B106 - test password,  # pragma: allowlist secret"
        },
        {
          "line": 125,
          "content": "password=\"test_e2e_workflow_password_123!\"  # nosec B106 - test password,  # pragma: allowlist secret"
        },
        {
          "line": 586,
          "content": "mfa_secret = auth_manager.enable_mfa(user_context[\"user\"].user_id)  # pragma: allowlist secret"
        },
        {
          "line": 590,
          "content": "otp = auth_manager.mfa_manager.generate_otp(mfa_secret)  # pragma: allowlist secret"
        },
        {
          "line": 593,
          "content": "password=\"test_e2e_workflow_password_123!\"  # nosec B106 - test password,  # pragma: allowlist secret"
        },
        {
          "line": 606,
          "content": "password=\"test_admin_security_123!\"  # nosec B106 - test password,  # pragma: allowlist secret"
        },
        {
          "line": 608,
          "content": "security_level=SecurityLevel.TOP_SECRET,  # pragma: allowlist secret"
        },
        {
          "line": 614,
          "content": "password=\"test_public_user_123!\"  # nosec B106 - test password,  # pragma: allowlist secret"
        }
      ],
      "line_count": 787
    },
    {
      "file": "tests\\integration\\test_integration_simple.py",
      "issues": [
        {
          "line": 168,
          "type": "info_security_issue",
          "content": "sender_id=\"coordinator\",",
          "pattern": "[\"\\'][A-Z0-9]{10,}[\"\\']",
          "pattern_name": "uppercase_string",
          "description": "Long uppercase string - check if credential",
          "severity": "INFO"
        },
        {
          "line": 414,
          "type": "info_security_issue",
          "content": "sender_id=\"coordinator\",",
          "pattern": "[\"\\'][A-Z0-9]{10,}[\"\\']",
          "pattern_name": "uppercase_string",
          "description": "Long uppercase string - check if credential",
          "severity": "INFO"
        }
      ],
      "validated_secrets": [
        {
          "line": 71,
          "content": "password=\"test_integration_password_123!\"  # nosec B106 - test password,  # pragma: allowlist secret"
        },
        {
          "line": 81,
          "content": "password=\"test_integration_password_123!\"  # nosec B106 - test password,  # pragma: allowlist secret"
        },
        {
          "line": 257,
          "content": "password=\"test_admin_integration_123!\"  # nosec B106 - test password,  # pragma: allowlist secret"
        },
        {
          "line": 265,
          "content": "password=\"test_viewer_integration_123!\"  # nosec B106 - test password,  # pragma: allowlist secret"
        },
        {
          "line": 331,
          "content": "password=\"test_e2e_integration_123!\"  # nosec B106 - test password,  # pragma: allowlist secret"
        },
        {
          "line": 337,
          "content": "password=\"test_e2e_integration_123!\"  # nosec B106 - test password,  # pragma: allowlist secret"
        },
        {
          "line": 338,
          "content": "ip_address=\"127.0.0.1\",  # pragma: allowlist secret"
        }
      ],
      "line_count": 516
    },
    {
      "file": "tests\\fixtures\\service_fixtures.py",
      "issues": [
        {
          "line": 83,
          "type": "info_security_issue",
          "content": "secret_key=\"test-secret\",  # pragma: allowlist secret",
          "pattern": "key\\s*=\\s*[\"\\'][^\"\\']{10,}[\"\\']",
          "pattern_name": "generic_key",
          "description": "Generic key assignment",
          "severity": "INFO"
        },
        {
          "line": 105,
          "type": "info_security_issue",
          "content": "\"dependencies\": {",
          "pattern": "[\"\\'][A-Z0-9]{10,}[\"\\']",
          "pattern_name": "uppercase_string",
          "description": "Long uppercase string - check if credential",
          "severity": "INFO"
        },
        {
          "line": 294,
          "type": "info_security_issue",
          "content": "\"transformers\": Mock(),",
          "pattern": "[\"\\'][A-Z0-9]{10,}[\"\\']",
          "pattern_name": "uppercase_string",
          "description": "Long uppercase string - check if credential",
          "severity": "INFO"
        },
        {
          "line": 309,
          "type": "info_security_issue",
          "content": "\"ENVIRONMENT\": \"testing\",",
          "pattern": "[\"\\'][A-Z0-9]{10,}[\"\\']",
          "pattern_name": "uppercase_string",
          "description": "Long uppercase string - check if credential",
          "severity": "INFO"
        }
      ],
      "validated_secrets": [
        {
          "line": 83,
          "content": "secret_key=\"test-secret\",  # pragma: allowlist secret"
        },
        {
          "line": 311,
          "content": "\"SECRET_KEY\": \"test-secret-key\",  # pragma: allowlist secret"
        }
      ],
      "line_count": 321
    },
    {
      "file": "tests\\conftest_fixtures.py",
      "issues": [
        {
          "line": 83,
          "type": "info_security_issue",
          "content": "secret_key=\"test-secret\",  # pragma: allowlist secret",
          "pattern": "key\\s*=\\s*[\"\\'][^\"\\']{10,}[\"\\']",
          "pattern_name": "generic_key",
          "description": "Generic key assignment",
          "severity": "INFO"
        },
        {
          "line": 105,
          "type": "info_security_issue",
          "content": "\"dependencies\": {",
          "pattern": "[\"\\'][A-Z0-9]{10,}[\"\\']",
          "pattern_name": "uppercase_string",
          "description": "Long uppercase string - check if credential",
          "severity": "INFO"
        },
        {
          "line": 294,
          "type": "info_security_issue",
          "content": "\"transformers\": Mock(),",
          "pattern": "[\"\\'][A-Z0-9]{10,}[\"\\']",
          "pattern_name": "uppercase_string",
          "description": "Long uppercase string - check if credential",
          "severity": "INFO"
        },
        {
          "line": 309,
          "type": "info_security_issue",
          "content": "\"ENVIRONMENT\": \"testing\",",
          "pattern": "[\"\\'][A-Z0-9]{10,}[\"\\']",
          "pattern_name": "uppercase_string",
          "description": "Long uppercase string - check if credential",
          "severity": "INFO"
        }
      ],
      "validated_secrets": [
        {
          "line": 83,
          "content": "secret_key=\"test-secret\",  # pragma: allowlist secret"
        },
        {
          "line": 311,
          "content": "\"SECRET_KEY\": \"test-secret-key\",  # pragma: allowlist secret"
        }
      ],
      "line_count": 321
    },
    {
      "file": "tests\\test_federation_integration.py",
      "issues": [
        {
          "line": 20,
          "type": "info_security_issue",
          "content": "sys.path.insert(0, os.path.join(os.path.dirname(__file__), \"..\", \"experimental\", \"agents\", \"agents\"))",
          "pattern": "[\"\\'][A-Z0-9]{10,}[\"\\']",
          "pattern_name": "uppercase_string",
          "description": "Long uppercase string - check if credential",
          "severity": "INFO"
        },
        {
          "line": 278,
          "type": "info_security_issue",
          "content": "private_key=\"test_mock_private_key\",  # pragma: allowlist secret",
          "pattern": "key\\s*=\\s*[\"\\'][^\"\\']{10,}[\"\\']",
          "pattern_name": "generic_key",
          "description": "Generic key assignment",
          "severity": "INFO"
        },
        {
          "line": 424,
          "type": "info_security_issue",
          "content": "assert tunnel_info[\"destination\"] == \"target_node\"",
          "pattern": "[\"\\'][A-Z0-9]{10,}[\"\\']",
          "pattern_name": "uppercase_string",
          "description": "Long uppercase string - check if credential",
          "severity": "INFO"
        }
      ],
      "validated_secrets": [
        {
          "line": 278,
          "content": "private_key=\"test_mock_private_key\",  # pragma: allowlist secret"
        }
      ],
      "line_count": 591
    },
    {
      "file": "tests\\benchmarks\\test_performance_benchmarks.py",
      "issues": [
        {
          "line": 189,
          "type": "info_security_issue",
          "content": "\"throughput\": m.throughput_per_second,",
          "pattern": "[\"\\'][A-Z0-9]{10,}[\"\\']",
          "pattern_name": "uppercase_string",
          "description": "Long uppercase string - check if credential",
          "severity": "INFO"
        },
        {
          "line": 334,
          "type": "info_security_issue",
          "content": "topic=\"algorithms\",",
          "pattern": "[\"\\'][A-Z0-9]{10,}[\"\\']",
          "pattern_name": "uppercase_string",
          "description": "Long uppercase string - check if credential",
          "severity": "INFO"
        },
        {
          "line": 654,
          "type": "info_security_issue",
          "content": "print(f\"\\n{'By Operation:':<20} {'Avg Duration':<12} {'Throughput':<12} {'Success Rate'}\")",
          "pattern": "[\"\\'][A-Z0-9]{10,}[\"\\']",
          "pattern_name": "uppercase_string",
          "description": "Long uppercase string - check if credential",
          "severity": "INFO"
        }
      ],
      "validated_secrets": [
        {
          "line": 406,
          "content": "api_key = os.getenv(\"OPENROUTER_API_KEY\", \"test_mock_api_key\")  # pragma: allowlist secret"
        },
        {
          "line": 407,
          "content": "use_mock = api_key == \"test_mock_api_key\"  # pragma: allowlist secret"
        },
        {
          "line": 512,
          "content": "api_key = os.getenv(\"OPENROUTER_API_KEY\", \"test_mock_api_key\")  # pragma: allowlist secret"
        },
        {
          "line": 513,
          "content": "use_mock = api_key == \"test_mock_api_key\"  # pragma: allowlist secret"
        },
        {
          "line": 583,
          "content": "api_key = os.getenv(\"OPENROUTER_API_KEY\", \"test_mock_api_key\")  # pragma: allowlist secret"
        },
        {
          "line": 584,
          "content": "use_mock = api_key == \"test_mock_api_key\"  # pragma: allowlist secret"
        }
      ],
      "line_count": 667
    }
  ],
  "overall_status": "FAIL"
}