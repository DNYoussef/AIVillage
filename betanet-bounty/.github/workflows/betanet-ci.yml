name: Betanet Bounty CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # HTX Coverage Testing (≥80% requirement)
  coverage:
    name: HTX Coverage (≥80%)
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview

    - name: Install cargo-llvm-cov
      run: cargo install cargo-llvm-cov --version 0.6.15

    - name: Cache cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Run HTX coverage analysis
      run: |
        mkdir -p artifacts/coverage/htx
        cargo llvm-cov --package betanet-htx --html --output-dir artifacts/coverage/htx
        cargo llvm-cov --package betanet-htx --summary-only | tee artifacts/coverage/htx/summary.txt

    - name: Check coverage threshold
      run: |
        echo "🎯 Checking ≥80% coverage requirement..."
        coverage_percent=$(grep -o '[0-9]*\.[0-9]*%' artifacts/coverage/htx/summary.txt | head -1 | sed 's/%//')
        echo "Coverage: ${coverage_percent}%"
        if (( $(echo "$coverage_percent >= 80" | bc -l) )); then
          echo "✅ Coverage requirement met: ${coverage_percent}% ≥ 80%"
        else
          echo "❌ Coverage requirement not met: ${coverage_percent}% < 80%"
          exit 1
        fi

    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v3
      with:
        name: htx-coverage-report
        path: artifacts/coverage/htx/

  # Fuzz Testing (5-minute smoke test)
  fuzz:
    name: Fuzz Testing (5min smoke)
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-fuzz
      run: cargo install cargo-fuzz

    - name: Cache cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-fuzz-${{ hashFiles('**/Cargo.lock') }}

    - name: Run HTX frame fuzzer (5min)
      run: |
        cd crates/betanet-htx
        timeout 300s cargo fuzz run htx_frame_fuzz -- -max_total_time=300 || true

    - name: Run HTX mux fuzzer (5min)
      run: |
        cd crates/betanet-htx
        timeout 300s cargo fuzz run htx_mux_fuzz -- -max_total_time=300 || true

    - name: Run HTX noise fuzzer (5min)
      run: |
        cd crates/betanet-htx
        timeout 300s cargo fuzz run htx_noise_fuzz -- -max_total_time=300 || true

    - name: Archive fuzz artifacts
      uses: actions/upload-artifact@v3
      with:
        name: fuzz-artifacts
        path: |
          crates/betanet-htx/fuzz/artifacts/
          crates/betanet-htx/fuzz/corpus/
      if: always()

  # Build and Test
  test:
    name: Build and Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable, beta]
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@${{ matrix.rust }}

    - name: Cache cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}

    - name: Build all crates
      run: cargo build --all-features

    - name: Run tests
      run: cargo test --all-features

    - name: Run betanet-htx specific tests
      run: cargo test --package betanet-htx --all-features

  # QUIC DATAGRAM Demo
  quic-demo:
    name: QUIC DATAGRAM Demo
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-quic-demo-${{ hashFiles('**/Cargo.lock') }}

    - name: Build QUIC DATAGRAM demo
      run: cargo build --example htx_quic_datagram_demo --features quic

    - name: Run QUIC DATAGRAM demo
      run: |
        timeout 30s cargo run --example htx_quic_datagram_demo --features quic || true
        echo "✅ QUIC DATAGRAM demo executed (connection failure expected without server)"

  # Linting and Formatting
  lint:
    name: Lint and Format
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --all-features -- -D warnings
