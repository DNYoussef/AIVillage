# Betanet Linter GitHub Action
# Runs §11 spec-compliance linting and SBOM generation on Betanet projects
name: Betanet Spec Compliance

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  betanet-linter:
    name: §11 Compliance Check & SBOM Generation
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        rust-version: [stable, 1.70.0]  # Support both stable and MSRV
        
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better analysis

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust-version }}
        components: clippy, rustfmt

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.rust-version }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.rust-version }}-
          ${{ runner.os }}-cargo-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential pkg-config libssl-dev

    - name: Build betanet-linter
      run: |
        cargo build --release -p betanet-linter --features sbom,checks-all
        
    - name: Install betanet-linter
      run: |
        cargo install --path crates/betanet-linter --features sbom,checks-all

    - name: Run §11 Compliance Checks
      id: compliance
      run: |
        # Create output directory
        mkdir -p compliance-reports
        
        # Run compliance checks on all binaries
        echo "::group::Running compliance checks"
        FAIL_COUNT=0
        
        # Check each crate for compliance
        for crate_dir in crates/*/; do
          if [ -f "$crate_dir/Cargo.toml" ]; then
            crate_name=$(basename "$crate_dir")
            echo "Checking compliance for $crate_name..."
            
            # Run linter with compliance checks
            if betanet-linter lint \
              --directory "$crate_dir" \
              --all-checks \
              --format json \
              --output "compliance-reports/${crate_name}-compliance.json" \
              --severity error; then
              echo "✅ $crate_name: PASSED"
            else
              echo "❌ $crate_name: FAILED"
              FAIL_COUNT=$((FAIL_COUNT + 1))
            fi
          fi
        done
        echo "::endgroup::"
        
        # Set outputs for later steps
        echo "fail_count=$FAIL_COUNT" >> $GITHUB_OUTPUT
        
        # Generate summary report
        echo "## §11 Compliance Summary" >> compliance-reports/summary.md
        echo "- Crates checked: $(find crates -name "Cargo.toml" | wc -l)" >> compliance-reports/summary.md
        echo "- Failed compliance: $FAIL_COUNT" >> compliance-reports/summary.md
        if [ $FAIL_COUNT -eq 0 ]; then
          echo "- Status: ✅ **ALL PASSED**" >> compliance-reports/summary.md
        else
          echo "- Status: ❌ **COMPLIANCE ISSUES FOUND**" >> compliance-reports/summary.md
        fi

    - name: Generate SBOM
      id: sbom
      run: |
        echo "::group::Generating SBOM"
        
        # Generate comprehensive SBOM for the entire project
        betanet-linter sbom \
          --directory . \
          --format spdx \
          --include-dev \
          --output betanet-bounty/final-sbom.json
          
        echo "✅ SBOM generated: betanet-bounty/final-sbom.json"
        
        # Generate production SBOM (no dev dependencies)
        betanet-linter sbom \
          --directory . \
          --format spdx \
          --output compliance-reports/betanet-production-sbom.json
          
        echo "✅ Production SBOM generated: compliance-reports/betanet-production-sbom.json"
        
        # Generate CycloneDX format as well
        betanet-linter sbom \
          --directory . \
          --format cyclonedx \
          --output compliance-reports/betanet-sbom.cyclonedx.json
          
        echo "✅ CycloneDX SBOM generated: compliance-reports/betanet-sbom.cyclonedx.json"
        echo "::endgroup::"

    - name: Validate SBOM format
      run: |
        echo "::group::Validating SBOM"
        
        # Basic validation - check that SBOM is valid JSON and has required fields
        if jq -e '.spdxVersion and .packages and .relationships' betanet-bounty/final-sbom.json > /dev/null; then
          echo "✅ SPDX SBOM validation passed"
        else
          echo "❌ SPDX SBOM validation failed"
          exit 1
        fi
        
        # Count packages in SBOM
        PACKAGE_COUNT=$(jq '.packages | length' betanet-bounty/final-sbom.json)
        echo "📦 SBOM contains $PACKAGE_COUNT packages"
        
        if [ $PACKAGE_COUNT -lt 5 ]; then
          echo "⚠️ Warning: SBOM has fewer packages than expected"
        fi
        echo "::endgroup::"

    - name: Upload compliance artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: compliance-reports-${{ matrix.rust-version }}
        path: |
          compliance-reports/
          betanet-bounty/final-sbom.json
        retention-days: 30

    - name: Add PR comment with results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          // Read compliance summary
          let summary = '';
          try {
            summary = fs.readFileSync('compliance-reports/summary.md', 'utf8');
          } catch (e) {
            summary = '❌ Could not read compliance summary';
          }
          
          // Create comment body
          const commentBody = `
          # Betanet §11 Compliance Check Results
          
          ${summary}
          
          ## SBOM Generation
          ✅ Software Bill of Materials generated successfully
          - Full SBOM: \`betanet-bounty/final-sbom.json\`
          - Production SBOM: \`compliance-reports/betanet-production-sbom.json\`
          - CycloneDX format: \`compliance-reports/betanet-sbom.cyclonedx.json\`
          
          ## Artifacts
          📁 All compliance reports and SBOMs are available as workflow artifacts.
          
          ---
          🤖 Generated by [betanet-linter](https://github.com/betanet/betanet-bounty/tree/main/crates/betanet-linter)
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: commentBody
          });

    - name: Fail on compliance issues
      if: steps.compliance.outputs.fail_count != '0'
      run: |
        echo "❌ §11 Compliance check failed with ${{ steps.compliance.outputs.fail_count }} issues"
        echo "Review the compliance reports for details on how to fix these issues"
        exit 1

    - name: Success summary
      if: steps.compliance.outputs.fail_count == '0'
      run: |
        echo "🎉 All §11 compliance checks passed!"
        echo "📋 SBOM generated successfully"
        echo "✅ Ready for production deployment"