#ifndef BETANET_H
#define BETANET_H

/* Warning: This file is auto-generated by cbindgen. Do not modify manually. */

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>
#include <stdint.h>
#include <stdlib.h>
#include <stdbool.h>

/*
 Connection state
 */
typedef enum BetanetConnectionState {
  Disconnected = 0,
  Connecting = 1,
  Connected = 2,
  Disconnecting = 3,
  Error = 4,
} BetanetConnectionState;

/*
 Result codes for C API
 */
typedef enum BetanetResult {
  Success = 0,
  Error = 1,
  InvalidParameter = 2,
  NetworkError = 3,
  CryptoError = 4,
  Timeout = 5,
  NotConnected = 6,
  AlreadyConnected = 7,
  BufferTooSmall = 8,
} BetanetResult;

/*
 Transport type
 */
typedef enum BetanetTransport {
  Tcp = 0,
  Quic = 1,
  NoiseXk = 2,
  HybridKem = 3,
} BetanetTransport;

/*
 C-compatible configuration structure
 */
typedef struct BetanetConfig {
  /*
   Listen address (null-terminated string)
   */
  const char *listen_addr;
  /*
   Server name for TLS (null-terminated string, optional)
   */
  const char *server_name;
  /*
   Transport type
   */
  enum BetanetTransport transport;
  /*
   Maximum connections
   */
  unsigned int max_connections;
  /*
   Connection timeout in seconds
   */
  unsigned int connection_timeout_secs;
  /*
   Keep-alive interval in seconds
   */
  unsigned int keepalive_interval_secs;
  /*
   Enable compression
   */
  int enable_compression;
} BetanetConfig;

typedef void (*BetanetConnectionCallback)(void *user_data, enum BetanetConnectionState state);

typedef void (*BetanetErrorCallback)(void *user_data,
                                     enum BetanetResult error_code,
                                     const char *error_msg);

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

/*
 Initialize the Betanet library
 */
enum BetanetResult betanet_init(void);

/*
 Create HTX client with configuration
 */
struct BetanetHtxClient *betanet_htx_client_create(const struct BetanetConfig *config);

/*
 Connect HTX client to server (async)
 */
enum BetanetResult betanet_htx_client_connect_async(struct BetanetHtxClient *client,
                                                    const char *addr,
                                                    BetanetConnectionCallback callback,
                                                    void *user_data);

/*
 Send data via HTX client (async)
 */
enum BetanetResult betanet_htx_client_send_async(struct BetanetHtxClient *client,
                                                 const uint8_t *data,
                                                 unsigned int len,
                                                 BetanetErrorCallback callback,
                                                 void *user_data);

/*
 Receive data from HTX client (non-blocking)
 */
enum BetanetResult betanet_htx_client_recv(struct BetanetHtxClient *client,
                                           uint8_t *buffer,
                                           unsigned int buffer_size,
                                           unsigned int *received_len);

/*
 Create HTX server
 */
struct BetanetHtxServer *betanet_htx_server_create(const struct BetanetConfig *config);

/*
 Start HTX server (async)
 */
enum BetanetResult betanet_htx_server_start_async(struct BetanetHtxServer *server,
                                                  BetanetConnectionCallback callback,
                                                  void *user_data);

/*
 Accept connection on server
 */
enum BetanetResult betanet_htx_server_accept(struct BetanetHtxServer *server,
                                             unsigned int *connection_id);

/*
 Clean up HTX client
 */
void betanet_htx_client_destroy(struct BetanetHtxClient *client);

/*
 Clean up HTX server
 */
void betanet_htx_server_destroy(struct BetanetHtxServer *server);

/*
 Get library version
 */
const char *betanet_get_version(void);

/*
 Get last error message
 */
const char *betanet_get_last_error(void);

/*
 Clear last error
 */
void betanet_clear_error(void);

#ifdef __cplusplus
} // extern "C"
#endif // __cplusplus

#endif /* BETANET_H */
