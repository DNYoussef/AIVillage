use std::env;
use std::path::PathBuf;

fn main() {
    let crate_dir = env::var("CARGO_MANIFEST_DIR").unwrap();
    let output_file = PathBuf::from(&crate_dir).join("include").join("betanet.h");

    // Create include directory if it doesn't exist
    std::fs::create_dir_all(output_file.parent().unwrap()).unwrap();

    // Configure cbindgen
    let config = cbindgen::Config {
        language: cbindgen::Language::C,
        cpp_compat: true,
        autogen_warning: Some(String::from(
            "/* Warning: This file is auto-generated by cbindgen. Do not modify manually. */"
        )),
        include_guard: Some(String::from("BETANET_H")),
        includes: vec![],
        sys_includes: vec![
            String::from("stdint.h"),
            String::from("stdlib.h"),
            String::from("stdbool.h"),
        ],
        export: cbindgen::ExportConfig {
            include: vec![],
            exclude: vec![],
            rename: Default::default(),
            item_types: vec![
                cbindgen::ItemType::Enums,
                cbindgen::ItemType::Structs,
                cbindgen::ItemType::Functions,
                cbindgen::ItemType::Typedefs,
                cbindgen::ItemType::Constants,
            ],
            ..Default::default()
        },
        namespace: None,
        namespaces: None,
        documentation: true,
        documentation_style: cbindgen::DocumentationStyle::C,
        style: cbindgen::Style::Both,
        ..Default::default()
    };

    // Generate bindings
    cbindgen::Builder::new()
        .with_crate(crate_dir)
        .with_config(config)
        .with_parse_deps(true)
        .with_parse_include(&["betanet"])
        .generate()
        .expect("Unable to generate bindings")
        .write_to_file(output_file);

    // Only rerun on changes
    println!("cargo:rerun-if-changed=src/lib.rs");
}
