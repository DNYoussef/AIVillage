{
  "pipeline_id": "PIPELINE_5c2627f5",
  "state": {
    "pipeline_id": "PIPELINE_5c2627f5",
    "status": "FAILED",
    "current_stage": "packaging",
    "progress_percentage": 75.0,
    "start_time": 1757934884.5487514,
    "end_time": 1757934887.8487115,
    "error_message": "Stage packaging failed: Object of type bool_ is not JSON serializable",
    "metadata": {}
  },
  "stage_results": [
    {
      "stage_name": "model_preparation",
      "success": true,
      "duration": 0.0009975433349609375,
      "output_data": {
        "prepared_model": "TestModel(\n  (fc): Sequential(\n    (0): Linear(in_features=50, out_features=100, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=100, out_features=50, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=50, out_features=10, bias=True)\n  )\n)",
        "model_metadata": {
          "parameter_count": 10660,
          "model_size_mb": 0.0406646728515625,
          "input_shape": [
            4,
            50
          ],
          "model_type": "TestModel",
          "device": "cpu",
          "output_shape": [
            4,
            10
          ]
        },
        "sample_inputs": "tensor([[ 1.4922e-01,  1.1997e+00,  6.1074e-01, -1.2528e+00, -1.5055e+00,\n         -3.7446e-01, -9.7546e-01, -9.2461e-01, -1.1900e+00, -2.4533e-01,\n          8.7652e-01,  1.4468e+00, -2.1054e-01, -4.9198e-01,  1.3378e-01,\n          2.7458e-01, -7.9837e-01, -1.0018e+00,  2.7983e-01, -7.0130e-01,\n          6.6916e-01, -1.2330e+00,  8.5549e-01,  5.1763e-02,  2.8665e-01,\n         -4.6890e-02,  1.7006e+00, -9.2858e-01,  6.4943e-01, -2.7276e-02,\n         -1.1945e+00,  1.0299e-01,  1.0863e+00, -5.9937e-01, -6.5882e-01,\n         -9.2485e-01, -1.2011e+00, -7.0358e-01,  2.6292e-01, -1.3591e+00,\n          8.0493e-02,  7.7901e-01,  9.8380e-01, -7.0388e-02, -8.0487e-01,\n          2.8767e-01, -1.9261e+00,  1.5544e+00,  4.7462e-01,  1.0319e-01],\n        [-4.9549e-01,  1.6003e+00,  9.4321e-01, -5.6278e-01, -8.0595e-02,\n          1.0823e+00, -1.9782e+00,  4.7689e-01, -3.8946e-01, -8.1971e-02,\n          7.7570e-01,  1.4958e+00,  1.4025e-01,  4.1720e-01,  1.3482e+00,\n          1.9648e-01,  7.7907e-01, -1.0214e+00, -2.0975e+00, -4.9087e-01,\n          4.5155e-01, -1.6943e-01, -2.2786e+00, -1.9958e+00, -9.3579e-01,\n          5.1355e-01,  2.9985e-01,  1.2503e+00,  1.9416e+00, -1.6577e-01,\n         -1.1854e+00,  1.4387e+00,  4.1361e-01,  2.2609e-01, -4.6684e-01,\n          2.3955e-01, -5.8800e-01,  1.5321e+00, -6.5961e-01, -1.0679e+00,\n         -1.2215e-01,  1.5268e+00, -7.5477e-01, -6.3754e-01,  4.8171e-01,\n          8.8803e-01,  5.0702e-01, -1.5185e-01, -1.9312e-01,  1.1147e-01],\n        [ 1.6466e+00, -2.5541e-01, -2.0061e+00,  9.8433e-01,  3.6545e-01,\n          3.8882e-01, -1.8723e-01,  7.5460e-01, -2.1864e-01,  4.5219e-01,\n          8.3661e-01,  5.8709e-01, -8.0032e-01,  1.2494e+00,  3.0663e-01,\n          9.1955e-01,  1.1363e+00, -6.1331e-04,  9.9525e-01,  1.8178e+00,\n          1.0165e+00,  5.0431e-01, -1.2950e-01,  6.2046e-01, -2.8704e-01,\n         -6.7946e-01,  1.0473e+00,  8.7550e-01,  1.0911e+00,  1.0205e+00,\n          4.9786e-01, -8.3281e-01, -7.8895e-01, -1.1923e+00, -2.7943e-01,\n         -1.4627e+00, -1.4270e-01,  3.4652e-02,  1.6957e+00, -1.7545e+00,\n         -2.0338e+00, -4.0835e-01,  1.4436e+00, -2.9202e+00,  1.9381e-01,\n         -9.6898e-01,  1.6716e+00, -7.0859e-01,  7.8810e-01,  2.5285e+00],\n        [-1.4197e-01, -6.5924e-01, -1.6680e+00, -1.6794e+00, -1.2127e+00,\n          1.4970e+00, -1.0579e+00,  4.1055e-01,  6.8314e-01,  3.1135e-01,\n          8.4682e-01,  2.6127e+00, -7.5130e-01,  7.2924e-01, -3.2072e-01,\n         -2.7987e-01, -1.3461e-01,  4.0671e-01, -2.6145e+00,  3.0171e-01,\n          5.9313e-02, -6.7082e-01,  2.6053e-01,  7.2567e-01, -2.6374e-01,\n          5.8247e-02,  5.1402e-01, -6.5933e-01, -5.9080e-01,  1.5500e+00,\n         -9.4475e-01,  5.5519e-01, -3.4985e-02,  1.8901e+00, -2.3978e-01,\n          6.4994e-01,  1.1895e+00,  1.2896e-01,  2.1017e+00,  5.6559e-01,\n         -1.7898e+00, -4.3361e-01,  1.6852e+00,  2.1188e+00, -1.0754e+00,\n         -5.4660e-01, -1.0228e+00, -6.0820e-01,  7.0374e-01,  4.2534e-01]])"
      },
      "error_message": null,
      "metadata": {
        "stage_type": "preparation",
        "validation_passed": true
      }
    },
    {
      "stage_name": "optimization",
      "success": true,
      "duration": 0.04089164733886719,
      "output_data": {
        "optimized_model": "TestModel(\n  (fc): Sequential(\n    (0): DynamicQuantizedLinear(in_features=50, out_features=100, dtype=torch.qint8, qscheme=torch.per_tensor_affine)\n    (1): ReLU()\n    (2): DynamicQuantizedLinear(in_features=100, out_features=50, dtype=torch.qint8, qscheme=torch.per_tensor_affine)\n    (3): ReLU()\n    (4): DynamicQuantizedLinear(in_features=50, out_features=10, dtype=torch.qint8, qscheme=torch.per_tensor_affine)\n  )\n)",
        "optimization_metrics": {
          "inference_latency_ms": 0.27837400150019675,
          "compression_ratio": 1.0,
          "accuracy_retention": 1.0,
          "throughput_samples_per_sec": 14369.157961747274,
          "memory_usage_mb": 276.89453125,
          "optimization_time_sec": 0.0,
          "model_size_mb": 0.0,
          "flops_reduction": 0.0
        },
        "optimization_result": {
          "success": true,
          "optimized_model": "TestModel(\n  (fc): Sequential(\n    (0): DynamicQuantizedLinear(in_features=50, out_features=100, dtype=torch.qint8, qscheme=torch.per_tensor_affine)\n    (1): ReLU()\n    (2): DynamicQuantizedLinear(in_features=100, out_features=50, dtype=torch.qint8, qscheme=torch.per_tensor_affine)\n    (3): ReLU()\n    (4): DynamicQuantizedLinear(in_features=50, out_features=10, dtype=torch.qint8, qscheme=torch.per_tensor_affine)\n  )\n)",
          "original_metrics": {
            "inference_latency_ms": 0.0816550018498674,
            "compression_ratio": 0.0,
            "accuracy_retention": 1.0,
            "throughput_samples_per_sec": 48986.58881123392,
            "memory_usage_mb": 276.86328125,
            "optimization_time_sec": 0.0,
            "model_size_mb": 0.0406646728515625,
            "flops_reduction": 0.0
          },
          "final_metrics": {
            "inference_latency_ms": 0.27837400150019675,
            "compression_ratio": 1.0,
            "accuracy_retention": 1.0,
            "throughput_samples_per_sec": 14369.157961747274,
            "memory_usage_mb": 276.89453125,
            "optimization_time_sec": 0.0,
            "model_size_mb": 0.0,
            "flops_reduction": 0.0
          },
          "optimization_results": {
            "dynamic_quantization": "applied",
            "pruning": "applied"
          },
          "optimization_time": 0.04089164733886719,
          "targets_met": {
            "inference_latency": "True",
            "compression_ratio": true,
            "accuracy_retention": true,
            "throughput": "True",
            "memory_usage": true
          },
          "techniques_applied": [
            "dynamic_quantization",
            "pruning"
          ]
        },
        "sample_inputs": "tensor([[ 1.4922e-01,  1.1997e+00,  6.1074e-01, -1.2528e+00, -1.5055e+00,\n         -3.7446e-01, -9.7546e-01, -9.2461e-01, -1.1900e+00, -2.4533e-01,\n          8.7652e-01,  1.4468e+00, -2.1054e-01, -4.9198e-01,  1.3378e-01,\n          2.7458e-01, -7.9837e-01, -1.0018e+00,  2.7983e-01, -7.0130e-01,\n          6.6916e-01, -1.2330e+00,  8.5549e-01,  5.1763e-02,  2.8665e-01,\n         -4.6890e-02,  1.7006e+00, -9.2858e-01,  6.4943e-01, -2.7276e-02,\n         -1.1945e+00,  1.0299e-01,  1.0863e+00, -5.9937e-01, -6.5882e-01,\n         -9.2485e-01, -1.2011e+00, -7.0358e-01,  2.6292e-01, -1.3591e+00,\n          8.0493e-02,  7.7901e-01,  9.8380e-01, -7.0388e-02, -8.0487e-01,\n          2.8767e-01, -1.9261e+00,  1.5544e+00,  4.7462e-01,  1.0319e-01],\n        [-4.9549e-01,  1.6003e+00,  9.4321e-01, -5.6278e-01, -8.0595e-02,\n          1.0823e+00, -1.9782e+00,  4.7689e-01, -3.8946e-01, -8.1971e-02,\n          7.7570e-01,  1.4958e+00,  1.4025e-01,  4.1720e-01,  1.3482e+00,\n          1.9648e-01,  7.7907e-01, -1.0214e+00, -2.0975e+00, -4.9087e-01,\n          4.5155e-01, -1.6943e-01, -2.2786e+00, -1.9958e+00, -9.3579e-01,\n          5.1355e-01,  2.9985e-01,  1.2503e+00,  1.9416e+00, -1.6577e-01,\n         -1.1854e+00,  1.4387e+00,  4.1361e-01,  2.2609e-01, -4.6684e-01,\n          2.3955e-01, -5.8800e-01,  1.5321e+00, -6.5961e-01, -1.0679e+00,\n         -1.2215e-01,  1.5268e+00, -7.5477e-01, -6.3754e-01,  4.8171e-01,\n          8.8803e-01,  5.0702e-01, -1.5185e-01, -1.9312e-01,  1.1147e-01],\n        [ 1.6466e+00, -2.5541e-01, -2.0061e+00,  9.8433e-01,  3.6545e-01,\n          3.8882e-01, -1.8723e-01,  7.5460e-01, -2.1864e-01,  4.5219e-01,\n          8.3661e-01,  5.8709e-01, -8.0032e-01,  1.2494e+00,  3.0663e-01,\n          9.1955e-01,  1.1363e+00, -6.1331e-04,  9.9525e-01,  1.8178e+00,\n          1.0165e+00,  5.0431e-01, -1.2950e-01,  6.2046e-01, -2.8704e-01,\n         -6.7946e-01,  1.0473e+00,  8.7550e-01,  1.0911e+00,  1.0205e+00,\n          4.9786e-01, -8.3281e-01, -7.8895e-01, -1.1923e+00, -2.7943e-01,\n         -1.4627e+00, -1.4270e-01,  3.4652e-02,  1.6957e+00, -1.7545e+00,\n         -2.0338e+00, -4.0835e-01,  1.4436e+00, -2.9202e+00,  1.9381e-01,\n         -9.6898e-01,  1.6716e+00, -7.0859e-01,  7.8810e-01,  2.5285e+00],\n        [-1.4197e-01, -6.5924e-01, -1.6680e+00, -1.6794e+00, -1.2127e+00,\n          1.4970e+00, -1.0579e+00,  4.1055e-01,  6.8314e-01,  3.1135e-01,\n          8.4682e-01,  2.6127e+00, -7.5130e-01,  7.2924e-01, -3.2072e-01,\n         -2.7987e-01, -1.3461e-01,  4.0671e-01, -2.6145e+00,  3.0171e-01,\n          5.9313e-02, -6.7082e-01,  2.6053e-01,  7.2567e-01, -2.6374e-01,\n          5.8247e-02,  5.1402e-01, -6.5933e-01, -5.9080e-01,  1.5500e+00,\n         -9.4475e-01,  5.5519e-01, -3.4985e-02,  1.8901e+00, -2.3978e-01,\n          6.4994e-01,  1.1895e+00,  1.2896e-01,  2.1017e+00,  5.6559e-01,\n         -1.7898e+00, -4.3361e-01,  1.6852e+00,  2.1188e+00, -1.0754e+00,\n         -5.4660e-01, -1.0228e+00, -6.0820e-01,  7.0374e-01,  4.2534e-01]])"
      },
      "error_message": null,
      "metadata": {
        "stage_type": "optimization",
        "techniques_applied": [
          "dynamic_quantization",
          "pruning"
        ],
        "targets_met": {
          "inference_latency": "True",
          "compression_ratio": true,
          "accuracy_retention": true,
          "throughput": "True",
          "memory_usage": true
        }
      }
    },
    {
      "stage_name": "validation",
      "success": true,
      "duration": 0.05203819274902344,
      "output_data": {
        "validated_model": "TestModel(\n  (fc): Sequential(\n    (0): DynamicQuantizedLinear(in_features=50, out_features=100, dtype=torch.qint8, qscheme=torch.per_tensor_affine)\n    (1): ReLU()\n    (2): DynamicQuantizedLinear(in_features=100, out_features=50, dtype=torch.qint8, qscheme=torch.per_tensor_affine)\n    (3): ReLU()\n    (4): DynamicQuantizedLinear(in_features=50, out_features=10, dtype=torch.qint8, qscheme=torch.per_tensor_affine)\n  )\n)",
        "validation_results": {
          "inference_capability": {
            "passed": true,
            "avg_latency_ms": 0.2742800017585978,
            "max_latency_ms": 0.3179999766871333,
            "inference_count": 20
          },
          "performance": {
            "passed": true,
            "performance_checks": {
              "latency_ok": "True",
              "compression_ok": true,
              "accuracy_ok": true
            },
            "metrics": {
              "inference_latency_ms": 0.27837400150019675,
              "compression_ratio": 1.0,
              "accuracy_retention": 1.0,
              "throughput_samples_per_sec": 14369.157961747274,
              "memory_usage_mb": 276.89453125,
              "optimization_time_sec": 0.0,
              "model_size_mb": 0.0,
              "flops_reduction": 0.0
            }
          },
          "consistency": {
            "passed": true,
            "output_count": 5,
            "consistency_check": true
          },
          "memory_usage": {
            "passed": true,
            "initial_memory_mb": 276.89453125,
            "final_memory_mb": 276.89453125,
            "memory_increase_mb": 0.0
          }
        },
        "validation_passed": true,
        "sample_inputs": "tensor([[ 1.4922e-01,  1.1997e+00,  6.1074e-01, -1.2528e+00, -1.5055e+00,\n         -3.7446e-01, -9.7546e-01, -9.2461e-01, -1.1900e+00, -2.4533e-01,\n          8.7652e-01,  1.4468e+00, -2.1054e-01, -4.9198e-01,  1.3378e-01,\n          2.7458e-01, -7.9837e-01, -1.0018e+00,  2.7983e-01, -7.0130e-01,\n          6.6916e-01, -1.2330e+00,  8.5549e-01,  5.1763e-02,  2.8665e-01,\n         -4.6890e-02,  1.7006e+00, -9.2858e-01,  6.4943e-01, -2.7276e-02,\n         -1.1945e+00,  1.0299e-01,  1.0863e+00, -5.9937e-01, -6.5882e-01,\n         -9.2485e-01, -1.2011e+00, -7.0358e-01,  2.6292e-01, -1.3591e+00,\n          8.0493e-02,  7.7901e-01,  9.8380e-01, -7.0388e-02, -8.0487e-01,\n          2.8767e-01, -1.9261e+00,  1.5544e+00,  4.7462e-01,  1.0319e-01],\n        [-4.9549e-01,  1.6003e+00,  9.4321e-01, -5.6278e-01, -8.0595e-02,\n          1.0823e+00, -1.9782e+00,  4.7689e-01, -3.8946e-01, -8.1971e-02,\n          7.7570e-01,  1.4958e+00,  1.4025e-01,  4.1720e-01,  1.3482e+00,\n          1.9648e-01,  7.7907e-01, -1.0214e+00, -2.0975e+00, -4.9087e-01,\n          4.5155e-01, -1.6943e-01, -2.2786e+00, -1.9958e+00, -9.3579e-01,\n          5.1355e-01,  2.9985e-01,  1.2503e+00,  1.9416e+00, -1.6577e-01,\n         -1.1854e+00,  1.4387e+00,  4.1361e-01,  2.2609e-01, -4.6684e-01,\n          2.3955e-01, -5.8800e-01,  1.5321e+00, -6.5961e-01, -1.0679e+00,\n         -1.2215e-01,  1.5268e+00, -7.5477e-01, -6.3754e-01,  4.8171e-01,\n          8.8803e-01,  5.0702e-01, -1.5185e-01, -1.9312e-01,  1.1147e-01],\n        [ 1.6466e+00, -2.5541e-01, -2.0061e+00,  9.8433e-01,  3.6545e-01,\n          3.8882e-01, -1.8723e-01,  7.5460e-01, -2.1864e-01,  4.5219e-01,\n          8.3661e-01,  5.8709e-01, -8.0032e-01,  1.2494e+00,  3.0663e-01,\n          9.1955e-01,  1.1363e+00, -6.1331e-04,  9.9525e-01,  1.8178e+00,\n          1.0165e+00,  5.0431e-01, -1.2950e-01,  6.2046e-01, -2.8704e-01,\n         -6.7946e-01,  1.0473e+00,  8.7550e-01,  1.0911e+00,  1.0205e+00,\n          4.9786e-01, -8.3281e-01, -7.8895e-01, -1.1923e+00, -2.7943e-01,\n         -1.4627e+00, -1.4270e-01,  3.4652e-02,  1.6957e+00, -1.7545e+00,\n         -2.0338e+00, -4.0835e-01,  1.4436e+00, -2.9202e+00,  1.9381e-01,\n         -9.6898e-01,  1.6716e+00, -7.0859e-01,  7.8810e-01,  2.5285e+00],\n        [-1.4197e-01, -6.5924e-01, -1.6680e+00, -1.6794e+00, -1.2127e+00,\n          1.4970e+00, -1.0579e+00,  4.1055e-01,  6.8314e-01,  3.1135e-01,\n          8.4682e-01,  2.6127e+00, -7.5130e-01,  7.2924e-01, -3.2072e-01,\n         -2.7987e-01, -1.3461e-01,  4.0671e-01, -2.6145e+00,  3.0171e-01,\n          5.9313e-02, -6.7082e-01,  2.6053e-01,  7.2567e-01, -2.6374e-01,\n          5.8247e-02,  5.1402e-01, -6.5933e-01, -5.9080e-01,  1.5500e+00,\n         -9.4475e-01,  5.5519e-01, -3.4985e-02,  1.8901e+00, -2.3978e-01,\n          6.4994e-01,  1.1895e+00,  1.2896e-01,  2.1017e+00,  5.6559e-01,\n         -1.7898e+00, -4.3361e-01,  1.6852e+00,  2.1188e+00, -1.0754e+00,\n         -5.4660e-01, -1.0228e+00, -6.0820e-01,  7.0374e-01,  4.2534e-01]])"
      },
      "error_message": null,
      "metadata": {
        "stage_type": "validation",
        "validation_count": 4,
        "passed_count": 4
      }
    },
    {
      "stage_name": "packaging",
      "success": false,
      "duration": 0.041890859603881836,
      "output_data": null,
      "error_message": "Object of type bool_ is not JSON serializable",
      "metadata": {
        "stage_type": "packaging",
        "error_details": "Traceback (most recent call last):\n  File \"C:\\Users\\17175\\Desktop\\spek template\\emergency\\integration_fixes.py\", line 486, in execute\n    package_result = await self._package_model(validated_model, validation_results, sample_inputs, context)\n                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\17175\\Desktop\\spek template\\emergency\\integration_fixes.py\", line 575, in _package_model\n    json.dump(package_metadata, f, indent=2)\n  File \"C:\\Python312\\Lib\\json\\__init__.py\", line 179, in dump\n    for chunk in iterable:\n                 ^^^^^^^^\n  File \"C:\\Python312\\Lib\\json\\encoder.py\", line 432, in _iterencode\n    yield from _iterencode_dict(o, _current_indent_level)\n  File \"C:\\Python312\\Lib\\json\\encoder.py\", line 406, in _iterencode_dict\n    yield from chunks\n  File \"C:\\Python312\\Lib\\json\\encoder.py\", line 406, in _iterencode_dict\n    yield from chunks\n  File \"C:\\Python312\\Lib\\json\\encoder.py\", line 406, in _iterencode_dict\n    yield from chunks\n  [Previous line repeated 1 more time]\n  File \"C:\\Python312\\Lib\\json\\encoder.py\", line 439, in _iterencode\n    o = _default(o)\n        ^^^^^^^^^^^\n  File \"C:\\Python312\\Lib\\json\\encoder.py\", line 180, in default\n    raise TypeError(f'Object of type {o.__class__.__name__} '\nTypeError: Object of type bool_ is not JSON serializable\n"
      }
    }
  ],
  "final_output_available": false
}