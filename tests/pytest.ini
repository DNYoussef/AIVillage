[tool:pytest]
# Unified AIVillage Testing Configuration
# TDD London School Implementation with MCP Coordination

minversion = 6.0
testpaths = tests

python_files = test_*.py *_test.py tests.py
python_classes = Test*
python_functions = test_*

# Optimized test execution options
addopts = 
    --verbose
    --tb=short
    --strict-markers
    --strict-config
    --color=yes
    --durations=10
    --maxfail=10
    --disable-warnings
    -x

# TDD London School Test Categories
markers =
    unit: Unit tests with mock isolation
    integration: Integration tests for component interactions
    acceptance: Acceptance tests for user scenarios
    contract: Contract tests for interface verification
    behavior: Behavior-driven development tests
    mockist: Tests using mock objects for isolation
    outside_in: Outside-in TDD implementation tests
    collaboration: Tests verifying object interactions
    state_verification: State-based verification tests
    behavior_verification: Behavior-based verification tests
    security: Security and vulnerability tests
    performance: Performance and benchmark tests
    e2e: End-to-end system tests
    smoke: Basic functionality smoke tests
    regression: Regression prevention tests
    slow: Tests taking more than 5 seconds
    network: Tests requiring network access
    gpu: Tests requiring GPU resources
    memory_intensive: Tests using significant memory
    database: Tests requiring database connections
    agent_core: Core agent functionality tests
    agent_analytics: Analytics component tests
    agent_communication: Inter-agent communication tests
    agent_learning: Learning and adaptation tests
    p2p_network: P2P networking tests
    fog_computing: Fog computing infrastructure tests
    constitutional: Constitutional compliance tests
    hyperrag: HyperRAG system tests
    compression: Model compression tests
    distributed: Distributed system tests
    chaos: Chaos engineering tests
    stress: System stress tests
    load: Load testing
    adversarial: Adversarial attack tests
    bias: Bias detection tests
    robustness: System robustness tests
    mcp_coordination: MCP server coordination tests
    memory_mcp: Memory MCP integration tests
    sequential_thinking: Sequential thinking MCP tests
    github_mcp: GitHub MCP integration tests
    context_mcp: Context7 MCP caching tests

# Test discovery configuration
norecursedirs = 
    .git
    .tox
    .venv
    venv
    env
    dist
    build
    __pycache__
    *.egg-info
    .pytest_cache
    node_modules
    .idea
    .vscode
    tools
    archive
    experiments
    rollbacks
    benchmarks
    scripts
    docs
    config
    examples

# Asyncio configuration for async tests
asyncio_mode = auto
asyncio_default_fixture_loop_scope = function

# Logging configuration
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s (%(filename)s:%(lineno)d)
log_cli_date_format = %Y-%m-%d %H:%M:%S

log_file = tests/reports/pytest.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] %(filename)s:%(lineno)d - %(funcName)s(): %(message)s
log_file_date_format = %Y-%m-%d %H:%M:%S

# Warning filters
filterwarnings =
    error::RuntimeWarning
    error::pytest.PytestUnraisableExceptionWarning
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::ImportWarning
    ignore::ResourceWarning
    ignore::FutureWarning

# Test execution timeout (5 minutes default)
timeout = 300
timeout_method = thread

# Mock configuration
mock_use_standalone_module = true

# Temporary directory configuration
tmp_path_retention_count = 3
tmp_path_retention_policy = all