[tool:pytest]
# Unified AIVillage Testing Configuration
# TDD London School Implementation with MCP Coordination

minversion = 6.0
testpaths = 
    tests
    src
    packages

python_files = 
    test_*.py
    *_test.py
    tests.py

python_classes = 
    Test*

python_functions = 
    test_*

# Comprehensive test execution options
addopts = 
    --verbose
    --tb=short
    --strict-markers
    --strict-config
    --color=yes
    --durations=10
    --maxfail=5
    --cov=src
    --cov=packages
    --cov=tests
    --cov-report=term-missing
    --cov-report=html:tests/reports/coverage_html
    --cov-report=xml:tests/reports/coverage.xml
    --cov-fail-under=90
    --junit-xml=tests/reports/junit.xml
    --disable-warnings

# TDD London School Test Categories
markers =
    # Core Testing Categories
    unit: Unit tests with mock isolation
    integration: Integration tests for component interactions
    acceptance: Acceptance tests for user scenarios
    contract: Contract tests for interface verification
    behavior: Behavior-driven development tests
    
    # TDD London School Patterns
    mockist: Tests using mock objects for isolation
    outside_in: Outside-in TDD implementation tests
    collaboration: Tests verifying object interactions
    state_verification: State-based verification tests
    behavior_verification: Behavior-based verification tests
    
    # System Categories
    security: Security and vulnerability tests
    performance: Performance and benchmark tests
    e2e: End-to-end system tests
    smoke: Basic functionality smoke tests
    regression: Regression prevention tests
    
    # Infrastructure Categories
    slow: Tests taking more than 5 seconds
    network: Tests requiring network access
    gpu: Tests requiring GPU resources
    memory_intensive: Tests using significant memory
    database: Tests requiring database connections
    
    # Component-Specific Categories
    agent_core: Core agent functionality tests
    agent_analytics: Analytics component tests
    agent_communication: Inter-agent communication tests
    agent_learning: Learning and adaptation tests
    p2p_network: P2P networking tests
    fog_computing: Fog computing infrastructure tests
    constitutional: Constitutional compliance tests
    hyperrag: HyperRAG system tests
    compression: Model compression tests
    distributed: Distributed system tests
    
    # Quality Categories
    chaos: Chaos engineering tests
    stress: System stress tests
    load: Load testing
    adversarial: Adversarial attack tests
    bias: Bias detection tests
    robustness: System robustness tests
    
    # MCP Integration Categories
    mcp_coordination: MCP server coordination tests
    memory_mcp: Memory MCP integration tests
    sequential_thinking: Sequential thinking MCP tests
    github_mcp: GitHub MCP integration tests
    context_mcp: Context7 MCP caching tests

# Test discovery configuration
norecursedirs = 
    .git
    .tox
    .venv
    venv
    env
    dist
    build
    __pycache__
    *.egg-info
    .pytest_cache
    node_modules
    .idea
    .vscode

# Asyncio configuration for async tests
asyncio_mode = auto
asyncio_default_fixture_loop_scope = function

# Logging configuration
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s (%(filename)s:%(lineno)d)
log_cli_date_format = %Y-%m-%d %H:%M:%S

log_file = tests/reports/pytest.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] %(filename)s:%(lineno)d - %(funcName)s(): %(message)s
log_file_date_format = %Y-%m-%d %H:%M:%S

# Warning filters
filterwarnings =
    error::RuntimeWarning
    error::pytest.PytestUnraisableExceptionWarning
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::ImportWarning
    ignore::ResourceWarning
    ignore::FutureWarning

# Test execution timeout (5 minutes default)
timeout = 300
timeout_method = thread

# Parallel execution configuration (commented out for initial deployment)
# addopts = -n auto --dist loadscope

# Mock configuration
mock_use_standalone_module = true

# Temporary directory configuration
tmp_path_retention_count = 3
tmp_path_retention_policy = all

# Test collection configuration
collect_ignore = [
    "setup.py",
    "conftest.py",
    "tools/",
    "infrastructure/shared/experimental/",
    "archive/",
]

# Coverage configuration
[coverage:run]
source = 
    src
    packages
    tests

branch = true
parallel = true

omit = 
    */tests/*
    */test_*.py
    */__pycache__/*
    */migrations/*
    */venv/*
    */env/*
    */.venv/*
    */build/*
    */dist/*
    */setup.py
    */conftest.py
    */archive/*

[coverage:paths]
source =
    src
    packages

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    def __str__
    if self\.debug
    if settings\.DEBUG
    if debug
    raise AssertionError
    raise NotImplementedError
    raise ValueError
    if 0:
    if False:
    if TYPE_CHECKING:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod
    pass
    \.\.\.$

precision = 2
show_missing = true
skip_covered = false
skip_empty = false

[coverage:html]
directory = tests/reports/coverage_html
title = AIVillage Test Coverage Report

[coverage:xml]
output = tests/reports/coverage.xml